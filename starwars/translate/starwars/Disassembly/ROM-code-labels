ROM:6000 ; ===========================================================================
ROM:6000
ROM:6000 ; Segment type: Pure code
ROM:6000                 ; segment ROM
ROM:6000                 org $6000
ROM:6005
ROM:6005 ; =============== S U B R O U T I N E =======================================
ROM:6005
ROM:6005
ROM:6005 sub_6005:
ROM:6005                 ldx     #0
ROM:6008                 ldd     #$F800
ROM:600B                 lda     #$48 ; H
ROM:600D                 tfr     a, dp
ROM:600F                 lsr     <DPbyte_3D
ROM:6011                 bcc     sub_6005
ROM:6013                 cmps    #$4FFF
ROM:6017                 beq     loc_601A
ROM:6019                 rts
ROM:601A ; ---------------------------------------------------------------------------
ROM:601A
ROM:601A loc_601A:
ROM:601A                 lda     <DPbyte_28
ROM:601C                 bne     loc_602F
ROM:601E                 lda     >word_4824      ; Opt0_Shadow
ROM:6023                 bne     loc_602F        ; Check DIP switch for freeze mode
ROM:6025                 lda     <DPbyte_31
ROM:6029                 beq     sub_6005
ROM:602B                 anda    #$7F ; 
ROM:602D                 sta     <DPbyte_31
ROM:602F
ROM:602F loc_602F:
ROM:602F                 jsr     sub_60BE
ROM:6032
ROM:6032 loc_6032:                               ; Vector pointer state
ROM:6032                 lda     <DPbyte_3F
ROM:6034                 bmi     loc_6032
ROM:6036
ROM:6036 loc_6036:                               ; Game mode/screen state
ROM:6036                 lda     <DPbyte_41
ROM:6038                 cmpa    #$3D ; =      ; Check game state for out of bounds
ROM:603A
ROM:603A loc_603A:
ROM:603A                 bcc     loc_603A
ROM:603C                 asla
ROM:603D                 ldx     #Jump_Table_1
ROM:6040                 jsr     [a,x]
ROM:6042                 bra     sub_6005
ROM:6042 ; End of function sub_6005
ROM:6042
ROM:6042 ; ---------------------------------------------------------------------------
ROM:60BE
ROM:60BE ; =============== S U B R O U T I N E =======================================
ROM:60BE
ROM:60BE
ROM:60BE sub_60BE:
ROM:60BE                 inc     <DPbyte_43      ; Game over/insert coins timer
ROM:60C0                 bne     loc_60CA
ROM:60C2                 inc     <DPbyte_42
ROM:60C4                 bne     loc_60CA
ROM:60C8                 sta     <DPbyte_42
ROM:60CA
ROM:60CA loc_60CA:                               ; Credits
ROM:60CA                 lda     >byte_4814
ROM:60CD                 bne     loc_60D4
ROM:60CF                 sta     byte_4B31
ROM:60D2                 bra     loc_60F4
ROM:60D4 ; ---------------------------------------------------------------------------
ROM:60D4
ROM:60D4 loc_60D4:
ROM:60D4                 lda     byte_4B31
ROM:60D7                 bne     loc_60E4
ROM:60D9                 jsr     Sound_6
ROM:60DC                 lda     >byte_4814      ; Credits
ROM:60DF                 sta     byte_4B31
ROM:60E2                 bra     loc_60F4
ROM:60E4 ; ---------------------------------------------------------------------------
ROM:60E4
ROM:60E4 loc_60E4:
ROM:60E4                 lda     byte_4B31
ROM:60E7                 cmpa    >byte_4814      ; Credits
ROM:60EA                 bcc     loc_60F4
ROM:60EC                 jsr     Sound_3
ROM:60EF ; ---------------------------------------------------------------------------
ROM:60EF                 lda     #$FF
ROM:60F1                 sta     byte_4B31
ROM:60F4
ROM:60F4 loc_60F4:
ROM:60F4                 jsr     sub_70DB
ROM:60F7                 lda     <DPbyte_AB
ROM:60F9                 sta     <DPbyte_AA
ROM:60FB                 lda     <DPbyte_21
ROM:60FD                 anda    #$30 ; 0
ROM:60FF                 pshs    a
ROM:6101                 lda     <DPbyte_1E
ROM:6103                 anda    #$CF ; -
ROM:6105                 oraa    ,s+
ROM:6107                 anda    #$F4 ; (
ROM:6109                 sta     <DPbyte_AB
ROM:610B                 eora    <DPbyte_AA
ROM:610D                 anda    <DPbyte_AA
ROM:610F                 sta     <DPbyte_AC
ROM:6111                 rts
ROM:6111 ; End of function sub_60BE
ROM:6111
ROM:6112
ROM:6112 ; =============== S U B R O U T I N E =======================================
ROM:6112
ROM:6112 ; Insert vector data for four blue dots in screen corners
ROM:6112
ROM:6112 sub_6112:
ROM:6112                 lda     <DPbyte_3F      ; Vector pointer state
ROM:6114                 ldb     #$70 ; p
ROM:6116                 tfr     d, y            ; Set new vector pointer value
ROM:6118                 ldd     #$B99E          ; Vector JRSL to draw four blue dots in screen corners
ROM:611B                 std     ,y++
ROM:611D                 rts
ROM:611D ; End of function sub_6112
ROM:611D
ROM:611E
ROM:611E ; =============== S U B R O U T I N E =======================================
ROM:611E
ROM:611E ; Copies Star Wars logo vector data to vector RAM
ROM:611E
ROM:611E sub_611E:
ROM:611E                 ldx     #word_CEDE      ; Copies vector data. Called at start of attract screen 2
ROM:6121                 ldu     #$2800
ROM:6124
ROM:6124 loc_6124:
ROM:6124                 ldd     ,x++
ROM:6126                 std     ,u++
ROM:6128                 cmpu    #$3000
ROM:612C                 bcs     loc_6124
ROM:612E                 rts
ROM:612E ; End of function sub_611E
ROM:612E
ROM:612F
ROM:612F ; =============== S U B R O U T I N E =======================================
ROM:612F
ROM:612F ; Vector instructions end
ROM:612F
ROM:612F sub_612F:
ROM:612F                 ldd     #$8040
ROM:6132                 std     ,y++
ROM:6134                 ldd     #$2020          ; Vector HALT
ROM:6137                 std     ,y++
ROM:6139                 std     ,y+
ROM:613B                 tfr     y, d
ROM:613D                 suba    <DPbyte_3F      ; Vector pointer state
ROM:613F                 suba    #$14
ROM:6141                 bcs     loc_6155
ROM:6143                 jsr     sub_611E        ; Copies Star Wars logo vector data to vector RAM
ROM:6146                 ldd     #$2020
ROM:6149                 std     $13FE
ROM:614C                 std     $13FC
ROM:614F                 std     $27FE
ROM:6152                 std     $27FC
ROM:6155
ROM:6155 loc_6155:
ROM:6155                 lda     #$FF
ROM:6157                 sta     <DPbyte_3F      ; Vector pointer state
ROM:6159                 rts
ROM:6159 ; End of function sub_612F
ROM:6159
ROM:615A
ROM:615A ; =============== S U B R O U T I N E =======================================
ROM:615A
ROM:615A ; More stars/ties init stuff
ROM:615A
ROM:615A sub_615A:
ROM:615A                 jsr     sub_6161        ; Initialise tie fighters and fireballs
ROM:615D                 jsr     sub_7A48
ROM:6160                 rts
ROM:6160 ; End of function sub_615A
ROM:6160
ROM:6161
ROM:6161 ; =============== S U B R O U T I N E =======================================
ROM:6161
ROM:6161 ; Initialise tie fighters and fireballs
ROM:6161
ROM:6161 sub_6161:
ROM:6161                 lda     PRNG
ROM:6164                 suba    PRNG
ROM:6167                 bne     loc_6171
ROM:6169                 sta     PRNGClr
ROM:616E                 sta     PRNGClr
ROM:6171
ROM:6171 loc_6171:
ROM:6173                 sta     <DPbyte_83      ; Star intensity
ROM:6175                 ldx     #byte_4900      ; 3x Tie fighter data structure ($19 bytes per Tie)
ROM:6178                 ldu     #word_50F0      ; 3x Tie fighter math data structure ($20 bytes per Tie)
ROM:617B                 ldb     #$1C
ROM:617D
ROM:617D loc_617D:
ROM:617D                 stu     ,x
ROM:617F                 stb     2,x
ROM:6181                 leau    $20,u
ROM:6184                 addb    #4
ROM:6186                 leax    $19,x
ROM:6189                 cmpx    #byte_4900+$4B  ; 3x Tie fighter data structure ($19 bytes per Tie)
ROM:618C                 bcs     loc_617D
ROM:618E                 ldx     #byte_494B      ; 6x Fireball data structure 2 ($6 bytes per fireball)
ROM:6191                 ldu     #word_5160      ; 6x Fireball math data structure 2 ($8 bytes per Tie)
ROM:6194                 ldb     #$2C ; ,
ROM:6196
ROM:6196 loc_6196:
ROM:6196                 stu     ,x
ROM:6198                 stb     2,x
ROM:619A                 clr     3,x
ROM:619C                 leau    8,u
ROM:619E                 addb    #1
ROM:61A0                 leax    6,x
ROM:61A2                 cmpx    #byte_494B+$24  ; 6x Fireball data structure 2 ($6 bytes per fireball)
ROM:61A5                 bcs     loc_6196
ROM:61A7                 jsr     sub_8ED6
ROM:61AA                 ldb     #4
ROM:61AC                 jsr     sub_CCCC        ; Copy XYZ data to math RAM
ROM:61AF                 ldb     #7
ROM:61B1                 jsr     sub_CCCC        ; Copy XYZ data to math RAM
ROM:61B4                 rts
ROM:61B4 ; End of function sub_6161
ROM:61B4
ROM:61B5
ROM:61B5 ; =============== S U B R O U T I N E =======================================
ROM:61B5
ROM:61B5 ; Set up math constants
ROM:61B5
ROM:61B5 sub_61B5:
ROM:61B5                 ldd     #0
ROM:61B8                 std     MReg0F          ; Math zero constant
ROM:61BB                 ldd     #$4000
ROM:61BE                 std     MReg10          ; Math 1.000 constant
ROM:61C1                 ldd     #$E000
ROM:61C4                 std     MReg13          ; Constant -0.5 ?
ROM:61CA                 std     MReg35          ; Math Constant $0080
ROM:61CD                 ldd     #$40 ; @
ROM:61D0                 std     MReg34          ; Math Constant $0040
ROM:61D3                 ldd     #$21F
ROM:61D6                 std     MReg11          ; Sine for rotation
ROM:61D9                 ldd     #$3FF7
ROM:61DC                 std     MReg12          ; Cosine for rotation
ROM:61DF                 ldd     #$4000
ROM:61E2                 std     MReg36          ; Math 1.000 constant
ROM:61E5                 ldd     #$200
ROM:61E8                 std     DVDDH
ROM:61EB                 rts
ROM:61EB ; End of function sub_61B5
ROM:61EB
ROM:61EC
ROM:61EC ; =============== S U B R O U T I N E =======================================
ROM:61EC
ROM:61EC ; Init stars math data
ROM:61EC
ROM:61EC sub_61EC:
ROM:61EE                 sta     <DPbyte_83      ; Star intensity
ROM:61F0                 ldx     #Star_Dots_MRAM
ROM:61F3
ROM:61F3 loc_61F3:
ROM:61F3                 lda     PRNG
ROM:61F6                 ldb     PRNG
ROM:61F9                 std     ,x
ROM:61FB                 mul
ROM:61FC                 lda     PRNG
ROM:61FF                 std     2,x
ROM:6201                 mul
ROM:6202                 lda     PRNG
ROM:6205                 std     4,x
ROM:6207                 leax    8,x
ROM:6209                 cmpx    #Star_Dots_MRAM+$190
ROM:620C                 bcs     loc_61F3
ROM:620E                 rts
ROM:620E ; End of function sub_61EC
ROM:620E
ROM:620F
ROM:620F ; =============== S U B R O U T I N E =======================================
ROM:620F
ROM:620F ; Init towers surface dots
ROM:620F
ROM:620F sub_620F:
ROM:620F                 ldx     #Star_Dots_MRAM
ROM:6212
ROM:6212 loc_6212:
ROM:6212                 lda     PRNG
ROM:6215                 ldb     PRNG
ROM:6218                 std     ,x
ROM:621A                 mul
ROM:621B                 lda     PRNG
ROM:621E                 std     2,x
ROM:6220                 ldd     #0
ROM:6223                 std     4,x
ROM:6225                 leax    8,x
ROM:6227                 cmpx    #Star_Dots_MRAM+$190
ROM:622A                 bcs     loc_6212
ROM:622C                 rts
ROM:622C ; End of function sub_620F
ROM:622C
ROM:622D
ROM:622D ; =============== S U B R O U T I N E =======================================
ROM:622D
ROM:622D ; Check joystick X to show high scores if moved
ROM:622D
ROM:622D sub_622D:
ROM:622D                 ldb     <DPbyte_7D      ; Joystick X
ROM:6231                 bgt     loc_623E
ROM:6233                 lda     #8
ROM:6235                 cmpa    <DPbyte_41      ; Game mode/screen state
ROM:6237                 beq     loc_623C
ROM:6239                 deca
ROM:623A                 sta     <DPbyte_41      ; Game mode/screen state
ROM:623C
ROM:623C loc_623C:
ROM:623C                 bra     loc_624B
ROM:623E ; ---------------------------------------------------------------------------
ROM:623E
ROM:623E loc_623E:
ROM:623E                 cmpb    #$60 ; `
ROM:6240                 blt     loc_624B
ROM:6242                 lda     #$C
ROM:6244                 cmpa    <DPbyte_41      ; Game mode/screen state
ROM:6246                 beq     loc_624B
ROM:6248                 deca
ROM:6249                 sta     <DPbyte_41      ; Game mode/screen state
ROM:624B
ROM:624B loc_624B:
ROM:624B                 lda     byte_4591
ROM:624E                 anda    #3
ROM:6250                 bne     loc_6257
ROM:6252                 lda     #1
ROM:6254                 sta     >byte_4814      ; Credits
ROM:6257
ROM:6257 loc_6257:                               ; Credits
ROM:6257                 lda     >byte_4814
ROM:625A                 beq     loc_6269
ROM:625C                 lda     <DPbyte_AC
ROM:625E                 anda    #$F0 ; =
ROM:6260                 beq     loc_6269
ROM:6262                 lda     #$19
ROM:6264                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6266                 dec     >byte_4814      ; Credits
ROM:6269
ROM:6269 loc_6269:
ROM:6269                 lda     >word_481E
ROM:626C                 anda    #$10
ROM:626E                 bne     locret_6274
ROM:6270                 lda     #1
ROM:6272                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6274
ROM:6274 locret_6274:
ROM:6274                 rts
ROM:6274 ; End of function sub_622D
ROM:6274
ROM:6275
ROM:6275 ; =============== S U B R O U T I N E =======================================
ROM:6275
ROM:6275 ; Game initialisation
ROM:6275
ROM:6275 sub_6275:
ROM:6275                 orcc    #$10            ; Disable interrupts
ROM:6277                 ldx     #$4534
ROM:627A                 jsr     sub_C6D4        ; Read NOVRAM
ROM:627D                 ldx     #byte_4AFA
ROM:6280                 jsr     sub_62D5
ROM:6283                 sta     >byte_4866      ; Joystick pitch data structure
ROM:6286                 ldx     #byte_4AFB
ROM:6289                 jsr     sub_62D5
ROM:628C                 sta     >byte_4868
ROM:628F                 ldx     #byte_4AFC
ROM:6292                 jsr     sub_62D5
ROM:6295                 sta     >byte_486F      ; Joystick roll data structure
ROM:6298                 ldx     #byte_4AFD
ROM:629B                 jsr     sub_62D5
ROM:629E                 sta     >byte_4871
ROM:62A1                 andcc   #$EF ; n      ; Enable interrupts
ROM:62A3                 lda     #$B
ROM:62A5                 sta     <DPbyte_41      ; Game mode/screen state
ROM:62A7                 lda     #$FF
ROM:62A9                 sta     byte_4B34
ROM:62AC                 jsr     sub_61B5        ; Set up math constants
ROM:62AF                 jsr     sub_615A        ; More stars/ties init stuff
ROM:62B2                 jsr     sub_611E        ; Copies Star Wars logo vector data to vector RAM
ROM:62B5                 jsr     sub_61EC        ; Init stars math data
ROM:62B8                 jsr     sub_D91A
ROM:62BB                 lda     #0
ROM:62BD                 sta     <DPbyte_5C      ; Score millions
ROM:62BF                 sta     <DPbyte_5D      ; Score hundred thousands
ROM:62C1                 sta     <DPbyte_5E      ; Score thousands
ROM:62C3                 sta     <DPbyte_5F      ; Score
ROM:62C5                 sta     <DPbyte_8B
ROM:62C7                 sta     <DPbyte_8C      ; Sheild being depleted
ROM:62C9                 jsr     sub_CC18
ROM:62CC                 lda     #$FF
ROM:62CE                 sta     word_4AEC
ROM:62D1                 sta     >byte_4818
ROM:62D4                 rts
ROM:62D4 ; End of function sub_6275
ROM:62D4
ROM:62D5
ROM:62D5 ; =============== S U B R O U T I N E =======================================
ROM:62D5
ROM:62D5
ROM:62D5 sub_62D5:
ROM:62D5                 lda     #$40 ; @
ROM:62D7                 cmpa    ,x
ROM:62D9                 bls     locret_62E3
ROM:62DB                 suba    ,x
ROM:62DD                 lsra
ROM:62DE                 lsra
ROM:62DF                 lsra
ROM:62E0                 inca
ROM:62E1                 adda    ,x
ROM:62E3
ROM:62E3 locret_62E3:
ROM:62E3                 rts
ROM:62E3 ; End of function sub_62D5
ROM:62E3
ROM:62E4
ROM:62E4 ; =============== S U B R O U T I N E =======================================
ROM:62E4
ROM:62E4 ; Called once before attract screen 3
ROM:62E4
ROM:62E4 sub_62E4:
ROM:62E4                 ldd     #0
ROM:62E7                 std     word_4B0C       ; Attract text position for scrolling
ROM:62EA                 ldd     #$200
ROM:62ED                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:62F0                 lda     #$F
ROM:62F2                 sta     word_4ADB
ROM:62F5                 lda     #$1F
ROM:62F7                 sta     word_4ADB+1
ROM:62FA                 ldd     #$6480
ROM:62FD                 std     byte_4B10       ; Attract text colour/intensity for fading
ROM:6300                 jsr     sub_D91A
ROM:6303                 inc     <DPbyte_41      ; Game mode/screen state
ROM:6305                 rts
ROM:6305 ; End of function sub_62E4
ROM:6305
ROM:6306
ROM:6306 ; =============== S U B R O U T I N E =======================================
ROM:6306
ROM:6306 ; Attract screen 3
ROM:6306
ROM:6306 sub_6306:
ROM:6306                 jsr     sub_6112        ; Insert vector data for four blue dots in screen corners
ROM:6309                 jsr     sub_761D        ; Display score
ROM:630C                 jsr     sub_63D5        ; Check credits status
ROM:630F                 jsr     sub_6368
ROM:6312                 jsr     sub_CD80        ; Starfield
ROM:6315                 jsr     sub_612F        ; Vector instructions end
ROM:6318                 jsr     sub_6DB6        ; Attract screen 3 stars YT move
ROM:631B                 ldd     word_4B0E       ; Attract screen/game phase  timer
ROM:631E                 bpl     loc_6322
ROM:6320                 inc     <DPbyte_41      ; Game mode/screen state
ROM:6322
ROM:6322 loc_6322:                               ; Check joystick X to show high scores if moved
ROM:6322                 jsr     sub_622D
ROM:6325                 rts
ROM:6325 ; End of function sub_6306
ROM:6325
ROM:6326
ROM:6326 ; =============== S U B R O U T I N E =======================================
ROM:6326
ROM:6326
ROM:6326 sub_6326:
ROM:6326                 ldd     #$3C0           ; Called once before attract screen 4
ROM:6329                 std     word_4B0C       ; Attract text position for scrolling
ROM:632C                 ldd     #$200
ROM:632F                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:6332                 lda     #$23 ; #
ROM:6334                 sta     word_4ADB
ROM:6337                 lda     #$2C ; ,
ROM:6339                 sta     word_4ADB+1
ROM:633C                 ldd     #$6580
ROM:633F                 std     byte_4B10       ; Attract text colour/intensity for fading
ROM:6342                 jsr     sub_D91A
ROM:6345                 inc     <DPbyte_41      ; Game mode/screen state
ROM:6347                 rts
ROM:6347 ; End of function sub_6326
ROM:6347
ROM:6348
ROM:6348 ; =============== S U B R O U T I N E =======================================
ROM:6348
ROM:6348 ; Attract screen 4
ROM:6348
ROM:6348 sub_6348:
ROM:6348                 jsr     sub_6112        ; Insert vector data for four blue dots in screen corners
ROM:634B                 jsr     sub_761D        ; Display score
ROM:634E                 jsr     sub_63D5        ; Check credits status
ROM:6351                 jsr     sub_6368
ROM:6354                 jsr     sub_CD80        ; Starfield
ROM:6357                 jsr     sub_612F        ; Vector instructions end
ROM:635A                 jsr     sub_6DC0        ; Attract screen 4 stars ZT move
ROM:635D                 ldd     word_4B0E       ; Attract screen/game phase  timer
ROM:6360                 bpl     loc_6364
ROM:6362                 inc     <DPbyte_41      ; Game mode/screen state
ROM:6364
ROM:6364 loc_6364:                               ; Check joystick X to show high scores if moved
ROM:6364                 jsr     sub_622D
ROM:6367                 rts
ROM:6367 ; End of function sub_6348
ROM:6367
ROM:6368
ROM:6368 ; =============== S U B R O U T I N E =======================================
ROM:6368
ROM:6368
ROM:6368 sub_6368:
ROM:6368                 ldd     word_4B0E       ; Attract screen/game phase  timer
ROM:636B                 subd    #1
ROM:636E                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:6371                 andb    #7
ROM:6373                 bne     loc_639D
ROM:6375                 lda     word_4ADB
ROM:6378                 bmi     loc_637D
ROM:637A                 jsr     sub_D8DF        ; Called from select screen, attract screen 1 + 3 when writing text
ROM:637D
ROM:637D loc_637D:
ROM:637D                 lda     word_4ADB
ROM:6380                 cmpa    #$12
ROM:6382                 bne     loc_638E
ROM:6384                 lda     byte_4593
ROM:6387                 anda    #3
ROM:6389                 adda    #$1F
ROM:638B                 jsr     sub_D8DF        ; Called from select screen, attract screen 1 + 3 when writing text
ROM:638E
ROM:638E loc_638E:
ROM:638E                 lda     word_4ADB
ROM:6391                 adda    #1
ROM:6393                 cmpa    word_4ADB+1
ROM:6396                 bcs     loc_639A
ROM:639A
ROM:639A loc_639A:
ROM:639A                 sta     word_4ADB
ROM:639D
ROM:639D loc_639D:                               ; Attract text position for scrolling
ROM:639D                 ldd     word_4B0C
ROM:63A0                 subd    #8
ROM:63A3                 bpl     loc_63A8
ROM:63A5                 ldd     #0
ROM:63A8
ROM:63A8 loc_63A8:                               ; Attract text position for scrolling
ROM:63A8                 std     word_4B0C
ROM:63AB                 ldd     word_4B0E       ; Attract screen/game phase  timer
ROM:63AE                 cmpd    #$C0 ; +
ROM:63B2                 bcc     loc_63C6
ROM:63B4                 ldb     byte_4B11       ; Attract text intensity
ROM:63B7                 subb    #1
ROM:63B9                 cmpb    #$10
ROM:63BB                 bcc     loc_63C3
ROM:63BD                 ldd     #0
ROM:63C0                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:63C3
ROM:63C3 loc_63C3:                               ; Attract text intensity
ROM:63C3                 stb     byte_4B11
ROM:63C6
ROM:63C6 loc_63C6:                               ; Attract text position for scrolling
ROM:63C6                 ldd     word_4B0C
ROM:63C9                 std     >byte_48AF
ROM:63CC                 ldd     byte_4B10       ; Attract text colour/intensity for fading
ROM:63CF                 std     ,y++
ROM:63D1                 jsr     sub_D942        ; Called from Attract screen 3 + 4
ROM:63D4                 rts
ROM:63D4 ; End of function sub_6368
ROM:63D4
ROM:63D5
ROM:63D5 ; =============== S U B R O U T I N E =======================================
ROM:63D5
ROM:63D5 ; Check credits status
ROM:63D5
ROM:63D5 sub_63D5:
ROM:63D5                 lda     >byte_4814      ; Credits
ROM:63D8                 bne     loc_63EB
ROM:63DA                 lda     <DPbyte_43      ; Game over/insert coins timer
ROM:63DC                 anda    #$10
ROM:63DE                 bne     loc_63E4
ROM:63E0                 ldb     #6
ROM:63E2                 bra     loc_63E6
ROM:63E4 ; ---------------------------------------------------------------------------
ROM:63E4
ROM:63E4 loc_63E4:
ROM:63E4                 ldb     #5
ROM:63E6
ROM:63E6 loc_63E6:                               ; Print text string from pointer table
ROM:63E6                 jsr     sub_E7C7
ROM:63E9                 bra     loc_63F0
ROM:63EB ; ---------------------------------------------------------------------------
ROM:63EB
ROM:63EB loc_63EB:
ROM:63EB                 ldb     #$B
ROM:63ED                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:63F0
ROM:63F0 loc_63F0:                               ; Credits
ROM:63F0                 lda     >byte_4814
ROM:63F3                 bne     loc_6410
ROM:63F5                 lda     >byte_4812      ; Half credit
ROM:63F8                 beq     loc_6404
ROM:63FA                 lda     <DPbyte_43      ; Game over/insert coins timer
ROM:63FC                 anda    #$10
ROM:63FE                 beq     loc_6404
ROM:6400                 bra     loc_6410
ROM:6402 ; ---------------------------------------------------------------------------
ROM:6402                 bra     loc_640E
ROM:6404 ; ---------------------------------------------------------------------------
ROM:6404
ROM:6404 loc_6404:
ROM:6404                 ldb     byte_4591
ROM:6407                 andb    #3
ROM:6409                 addb    #7
ROM:640B                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:640E
ROM:640E loc_640E:
ROM:640E                 bra     locret_6458
ROM:6410 ; ---------------------------------------------------------------------------
ROM:6410
ROM:6410 loc_6410:                               ; Credits
ROM:6410                 lda     >byte_4814
ROM:6413                 adda    >byte_4812      ; Half credit
ROM:6416                 cmpa    #1
ROM:6418                 bne     loc_641E
ROM:641A                 ldb     #$D
ROM:641C                 bra     loc_6420
ROM:641E ; ---------------------------------------------------------------------------
ROM:641E
ROM:641E loc_641E:
ROM:641E                 ldb     #$C
ROM:6420
ROM:6420 loc_6420:                               ; Print text string from pointer table
ROM:6420                 jsr     sub_E7C7
ROM:6423                 ldd     #$1B0
ROM:6426                 anda    #$1F
ROM:6428                 std     ,y++
ROM:642A                 ldd     #$FF80
ROM:642D                 tst     >byte_4812      ; Half credit
ROM:6430                 beq     loc_6435
ROM:6432                 subd    #$18
ROM:6435
ROM:6435 loc_6435:
ROM:6435                 anda    #$1F
ROM:6437                 std     ,y++
ROM:6439                 lda     >byte_4814      ; Credits
ROM:643C                 cmpa    #$A
ROM:643E                 bcs     loc_6442
ROM:6440                 adda    #6
ROM:6442
ROM:6442 loc_6442:
ROM:6442                 ldb     #2
ROM:6444                 stb     <DPbyte_AD
ROM:6446                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:6449                 lda     >byte_4812      ; Half credit
ROM:644C                 beq     loc_6453
ROM:644E                 ldd     #$B8F3
ROM:6451                 std     ,y++
ROM:6453
ROM:6453 loc_6453:
ROM:6453                 ldd     #$8040
ROM:6456                 std     ,y++
ROM:6458
ROM:6458 locret_6458:
ROM:6458                 rts
ROM:6458 ; End of function sub_63D5
ROM:6458
ROM:6459
ROM:6459 ; =============== S U B R O U T I N E =======================================
ROM:6459
ROM:6459
ROM:6459 sub_6459:
ROM:6459                 ldd     #0              ; Called once before attract screen 1
ROM:645C                 std     word_4B0C       ; Attract text position for scrolling
ROM:645F                 std     >byte_48AF
ROM:6462                 ldd     #$100
ROM:6465                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:6468                 ldd     #$6180
ROM:646B                 std     byte_4B10       ; Attract text colour/intensity for fading
ROM:646E                 jsr     sub_D91A
ROM:6471                 jsr     sub_61B5        ; Set up math constants
ROM:6474                 jsr     sub_615A        ; More stars/ties init stuff
ROM:6477                 ldu     #MReg1C         ; Matrix 2
ROM:647A                 jsr     sub_CDC3        ; Initialise math registers matrix
ROM:647D                 jsr     loc_CC38
ROM:6480                 inc     <DPbyte_41      ; Game mode/screen state
ROM:6482                 rts
ROM:6482 ; End of function sub_6459
ROM:6482
ROM:6483
ROM:6483 ; =============== S U B R O U T I N E =======================================
ROM:6483
ROM:6483 ; Attract screen 1
ROM:6483
ROM:6483 sub_6483:
ROM:6483                 jsr     sub_6112        ; Insert vector data for four blue dots in screen corners
ROM:6486                 jsr     sub_64CD        ; Print Star Wars and copyright text
ROM:6489                 jsr     sub_CD80        ; Starfield
ROM:648C                 jsr     sub_761D        ; Display score
ROM:648F
ROM:648F loc_648F:                               ; Check credits status
ROM:648F                 jsr     sub_63D5
ROM:6492                 ldd     word_4B0E       ; Attract screen/game phase  timer
ROM:6495                 cmpd    #$50 ; P
ROM:6499                 bcc     loc_64A9
ROM:649B                 ldb     byte_4B11       ; Attract text intensity
ROM:649E                 subb    #1
ROM:64A0                 cmpb    #$F0 ; =
ROM:64A2                 bcs     loc_64A6
ROM:64A4                 ldb     #0
ROM:64A6
ROM:64A6 loc_64A6:                               ; Attract text intensity
ROM:64A6                 stb     byte_4B11
ROM:64A9
ROM:64A9 loc_64A9:                               ; Attract text colour/intensity for fading
ROM:64A9                 ldd     byte_4B10
ROM:64AC                 std     ,y++
ROM:64AE                 jsr     sub_C7FD        ; Display high scores
ROM:64B1                 jsr     sub_D923        ; Called from attract screen 1
ROM:64B4                 jsr     sub_612F        ; Vector instructions end
ROM:64B7                 jsr     sub_6DCA        ; Move stars XT translate position
ROM:64BA                 ldd     word_4B0E       ; Attract screen/game phase  timer
ROM:64BD                 subd    #1
ROM:64C0                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:64C3                 bpl     loc_64C9
ROM:64C5                 lda     #5
ROM:64C7                 sta     <DPbyte_41      ; Game mode/screen state
ROM:64C9
ROM:64C9 loc_64C9:                               ; Check joystick X to show high scores if moved
ROM:64C9                 jsr     sub_622D
ROM:64CC                 rts
ROM:64CC ; End of function sub_6483
ROM:64CC
ROM:64CD
ROM:64CD ; =============== S U B R O U T I N E =======================================
ROM:64CD
ROM:64CD ; Print Star Wars and copyright text
ROM:64CD
ROM:64CD sub_64CD:
ROM:64CD                 ldb     #0
ROM:64CF                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:64D2                 ldb     #1
ROM:64D4                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:64D7                 ldb     #2
ROM:64D9                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:64DC                 ldb     #3
ROM:64DE                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:64E1                 rts
ROM:64E1 ; End of function sub_64CD
ROM:64E1
ROM:64E2
ROM:64E2 ; =============== S U B R O U T I N E =======================================
ROM:64E2
ROM:64E2
ROM:64E2 sub_64E2:
ROM:64E2                 jsr     sub_D91A
ROM:64E5                 ldd     #0
ROM:64E8                 std     word_4B0C       ; Attract text position for scrolling
ROM:64EB                 std     >byte_48AF
ROM:64EE                 inc     <DPbyte_41      ; Game mode/screen state
ROM:64F0                 rts
ROM:64F0 ; End of function sub_64E2
ROM:64F0
ROM:64F1
ROM:64F1 ; =============== S U B R O U T I N E =======================================
ROM:64F1
ROM:64F1
ROM:64F1 sub_64F1:
ROM:64F1                 jsr     sub_6112        ; Accounting time stats
ROM:64F4                 jsr     sub_BE20        ; Display accounting screen
ROM:64F7                 jsr     sub_D923        ; Called from attract screen 1
ROM:64FA                 jsr     sub_612F        ; Vector instructions end
ROM:64FD                 lda     <DPbyte_AC
ROM:64FF                 anda    #4
ROM:6501                 beq     loc_6507
ROM:6503                 lda     #3
ROM:6505                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6507
ROM:6507 loc_6507:
ROM:6507                 lda     >word_481E
ROM:650A                 anda    #$10
ROM:650C                 beq     locret_6512
ROM:650E                 lda     #5
ROM:6510                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6512
ROM:6512 locret_6512:
ROM:6512                 rts
ROM:6512 ; End of function sub_64F1
ROM:6512
ROM:6513
ROM:6513 ; =============== S U B R O U T I N E =======================================
ROM:6513
ROM:6513
ROM:6513 sub_6513:
ROM:6513                 jsr     sub_D91A
ROM:6516                 lda     #$A
ROM:6518                 sta     word_4AF6
ROM:651B                 lda     #0
ROM:651D                 sta     byte_4598
ROM:6520                 sta     word_4AF6+1
ROM:6523                 lda     #3
ROM:6525                 jsr     sub_C2C3
ROM:6528                 beq     loc_652F
ROM:652A                 lda     #3
ROM:652C                 jsr     loc_C369
ROM:652F
ROM:652F loc_652F:                               ; Game mode/screen state
ROM:652F                 inc     <DPbyte_41
ROM:6531                 rts
ROM:6531 ; End of function sub_6513
ROM:6531
ROM:6532
ROM:6532 ; =============== S U B R O U T I N E =======================================
ROM:6532
ROM:6532
ROM:6532 sub_6532:
ROM:6532
ROM:6532 ; FUNCTION CHUNK AT ROM:F261 SIZE 000000CD BYTES
ROM:6532 ; FUNCTION CHUNK AT ROM:F36E SIZE 000001AF BYTES
ROM:6532 ; FUNCTION CHUNK AT ROM:F520 SIZE 000001ED BYTES
ROM:6532 ; FUNCTION CHUNK AT ROM:F720 SIZE 00000003 BYTES
ROM:6532 ; FUNCTION CHUNK AT ROM:FD07 SIZE 0000007E BYTES
ROM:6532 ; FUNCTION CHUNK AT ROM:FF24 SIZE 00000033 BYTES
ROM:6532
ROM:6532                 jsr     sub_6112        ; Game options
ROM:6535                 jsr     sub_C450
ROM:6538                 ldd     #$6780
ROM:653B                 std     ,y++
ROM:653D                 ldb     #$66 ; f
ROM:653F                 addb    word_4AF6
ROM:6542                 jsr     sub_E7D3
ROM:6545                 lda     word_4AF6
ROM:6548                 jsr     sub_C5A4
ROM:654B                 jsr     sub_C4EB
ROM:654E                 jsr     sub_D923        ; Called from attract screen 1
ROM:6551                 jsr     sub_612F        ; Vector instructions end
ROM:6554                 lda     <DPbyte_AC
ROM:6556                 anda    #4
ROM:6558                 beq     loc_655D
ROM:655A                 jmp     Reset
ROM:655D ; ---------------------------------------------------------------------------
ROM:655D
ROM:655D loc_655D:
ROM:655D                 lda     >word_481E
ROM:6560                 anda    #$10
ROM:6562                 beq     locret_656B
ROM:6564                 jsr     sub_D91A
ROM:6567                 lda     #5
ROM:6569                 sta     <DPbyte_41      ; Game mode/screen state
ROM:656B
ROM:656B locret_656B:
ROM:656B                 rts
ROM:656B ; End of function sub_6532
ROM:656B
ROM:656C
ROM:656C ; =============== S U B R O U T I N E =======================================
ROM:656C
ROM:656C ; Start select screen
ROM:656C
ROM:656C sub_656C:
ROM:656C                 ldd     #$100
ROM:656F                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:6572                 ldd     #0
ROM:6575                 std     word_4B0C       ; Attract text position for scrolling
ROM:6578                 std     >byte_48AF
ROM:657B                 ldd     #$6480
ROM:657E                 std     byte_4B10       ; Attract text colour/intensity for fading
ROM:6581                 jsr     sub_D91A
ROM:6584                 ldb     #$2C ; ,
ROM:6586
ROM:6586 loc_6586:
ROM:6586                 tfr     b, a
ROM:6588                 jsr     sub_D8DF        ; Called from select screen, attract screen 1 + 3 when writing text
ROM:658B                 incb
ROM:658C                 cmpb    #$3A ; :
ROM:658E                 bcs     loc_6586
ROM:6590                 inc     <DPbyte_41      ; Game mode/screen state
ROM:6592                 rts
ROM:6592 ; End of function sub_656C
ROM:6592
ROM:6592 ; ---------------------------------------------------------------------------
ROM:659F
ROM:659F ; =============== S U B R O U T I N E =======================================
ROM:659F
ROM:659F
ROM:659F sub_659F:
ROM:659F                 ldd     word_4B0E       ; Attract screen/game phase  timer
ROM:65A2                 subd    #1
ROM:65A5                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:65A8                 bpl     loc_65BD
ROM:65AA                 lda     #0
ROM:65AC                 sta     byte_4B15
ROM:65AF                 lda     #$1B
ROM:65B1                 sta     <DPbyte_41      ; Game mode/screen state
ROM:65B3                 clr     >byte_481B
ROM:65B6                 clr     >byte_481A
ROM:65B9                 clr     >byte_4819
ROM:65BC                 rts
ROM:65BD ; ---------------------------------------------------------------------------
ROM:65BD
ROM:65BD loc_65BD:                               ; Insert vector data for four blue dots in screen corners
ROM:65BD                 jsr     sub_6112
ROM:65C0                 ldx     #word_6593
ROM:65C3
ROM:65C3 loc_65C3:
ROM:65C3                 ldd     ,x++
ROM:65C5                 anda    #$1F
ROM:65C7                 std     ,y++
ROM:65C9                 ldd     ,x++
ROM:65CB                 anda    #$1F
ROM:65CD                 std     ,y++
ROM:65CF                 ldd     #$7200
ROM:65D2                 std     ,y++
ROM:65D4                 ldd     #$BE50
ROM:65D7                 std     ,y++
ROM:65D9                 cmpx    #$659F
ROM:65DC                 bcs     loc_65C3
ROM:65DE                 lda     <DPbyte_DD
ROM:65E0                 bpl     loc_65E7
ROM:65E2                 ldd     #$6380
ROM:65E5                 bra     loc_65EA
ROM:65E7 ; ---------------------------------------------------------------------------
ROM:65E7
ROM:65E7 loc_65E7:
ROM:65E7                 ldd     #$6680
ROM:65EA
ROM:65EA loc_65EA:
ROM:65EA                 std     ,y++
ROM:65EC                 jsr     sub_B6C0        ; Insert vector instructions at joystick position for laser explosion 3
ROM:65EF                 jsr     sub_D923        ; Called from attract screen 1
ROM:65F2                 ldd     #$C8 ; +
ROM:65F5                 std     ,y++
ROM:65F7                 ldd     #$1FF0
ROM:65FA                 std     ,y++
ROM:65FC                 ldd     word_4B0E       ; Attract screen/game phase  timer
ROM:65FF                 aslb
ROM:6600                 rola
ROM:6601                 aslb
ROM:6602                 rola
ROM:6603                 aslb
ROM:6604                 rola
ROM:6605                 cmpa    #$A
ROM:6607                 bcs     loc_660B
ROM:6609                 adda    #6
ROM:660B
ROM:660B loc_660B:                               ; Display BCD numbers
ROM:660B                 jsr     Display_Vect_BCD
ROM:660E                 jsr     sub_612F        ; Vector instructions end
ROM:6611                 lda     #$FF
ROM:6613                 sta     <DPbyte_DD
ROM:6615                 ldx     #word_6593
ROM:6618
ROM:6618 loc_6618:
ROM:6618                 ldd     <DPbyte_7B
ROM:661A                 addd    #$FF98
ROM:661D                 subd    ,x
ROM:661F                 tsta
ROM:6620                 bpl     loc_6626
ROM:6622                 coma
ROM:6623                 negb
ROM:6624                 sbca    #$FF
ROM:6626
ROM:6626 loc_6626:
ROM:6626                 std     byte_4AFA
ROM:6629                 cmpd    #$48 ; H
ROM:662D                 bcc     loc_6668
ROM:662F                 ldd     <DPbyte_79
ROM:6631                 subd    2,x
ROM:6633                 tsta
ROM:6634                 bpl     loc_663A
ROM:6636                 coma
ROM:6637                 negb
ROM:6638                 sbca    #$FF
ROM:663A
ROM:663A loc_663A:
ROM:663A                 cmpd    #$34 ; 4
ROM:663E                 bcc     loc_6668
ROM:6640                 addd    byte_4AFA
ROM:6643                 cmpd    #$50 ; P
ROM:6647                 bcc     loc_6668
ROM:6649                 tfr     x, d
ROM:664B                 subd    #word_6593
ROM:664E                 lsrb
ROM:664F                 stb     <DPbyte_DD
ROM:6651                 stb     byte_4B15
ROM:6654                 lda     <DPbyte_AC
ROM:6656                 anda    #$F0 ; =
ROM:6658                 beq     locret_6667
ROM:665A                 lda     #$1B
ROM:665C                 sta     <DPbyte_41      ; Game mode/screen state
ROM:665E                 clr     >byte_481B
ROM:6661                 clr     >byte_481A
ROM:6664                 clr     >byte_4819
ROM:6667
ROM:6667 locret_6667:
ROM:6667                 rts
ROM:6668 ; ---------------------------------------------------------------------------
ROM:6668
ROM:6668 loc_6668:
ROM:6668                 leax    4,x
ROM:666A                 cmpx    #sub_659F
ROM:666D                 bcs     loc_6618
ROM:666F                 rts
ROM:666F ; End of function sub_659F
ROM:666F
ROM:6670
ROM:6670 ; =============== S U B R O U T I N E =======================================
ROM:6670
ROM:6670
ROM:6670 sub_6670:
ROM:6670                 ldd     #0
ROM:6673                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:6676                 std     word_4B0C       ; Attract text position for scrolling
ROM:6679                 std     >byte_48AF
ROM:667C                 ldd     #$6180
ROM:667F                 std     byte_4B10       ; Attract text colour/intensity for fading
ROM:6682                 jsr     sub_D91A
ROM:6685                 lda     #$3A ; :
ROM:6687                 jsr     sub_D8DF        ; Called from select screen, attract screen 1 + 3 when writing text
ROM:668A                 lda     #$3B ; ;
ROM:668C                 jsr     sub_D8DF        ; Called from select screen, attract screen 1 + 3 when writing text
ROM:668F                 lda     #$3C ; <
ROM:6691                 jsr     sub_D8DF        ; Called from select screen, attract screen 1 + 3 when writing text
ROM:6694                 lda     #$3D ; =
ROM:6696                 jsr     sub_D8DF        ; Called from select screen, attract screen 1 + 3 when writing text
ROM:6699                 lda     #$3E ; >
ROM:669B                 jsr     sub_D8DF        ; Called from select screen, attract screen 1 + 3 when writing text
ROM:669E                 lda     #$3D ; =
ROM:66A0                 jsr     sub_D8DF        ; Called from select screen, attract screen 1 + 3 when writing text
ROM:66A3                 jsr     Sound_1C
ROM:66A6                 jsr     loc_CC38
ROM:66A9                 inc     <DPbyte_41      ; Game mode/screen state
ROM:66AB                 rts
ROM:66AB ; End of function sub_6670
ROM:66AB
ROM:66AC
ROM:66AC ; =============== S U B R O U T I N E =======================================
ROM:66AC
ROM:66AC
ROM:66AC sub_66AC:
ROM:66AC                 jsr     sub_6112        ; Insert vector data for four blue dots in screen corners
ROM:66AF                 jsr     sub_761D        ; Display score
ROM:66B2                 jsr     sub_63D5        ; Check credits status
ROM:66B5                 jsr     sub_C7FD        ; Display high scores
ROM:66B8                 jsr     sub_D923        ; Called from attract screen 1
ROM:66BB                 jsr     sub_612F        ; Vector instructions end
ROM:66BE                 jsr     sub_CAF3
ROM:66C1                 lda     >word_481E
ROM:66C4                 anda    #$10
ROM:66C6                 bne     loc_66CE
ROM:66C8                 ldd     #$300
ROM:66CB                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:66CE
ROM:66CE loc_66CE:                               ; Attract screen/game phase  timer
ROM:66CE                 ldd     word_4B0E
ROM:66D1                 addd    #1
ROM:66D4                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:66D7                 cmpd    #$280
ROM:66DB                 bcs     loc_66E3
ROM:66DD                 ldd     #$FFFF
ROM:66E0                 std     word_4AEC
ROM:66E3
ROM:66E3 loc_66E3:
ROM:66E3                 ldd     word_4AEC
ROM:66E6                 bpl     locret_6707
ROM:66E8                 lda     #$B
ROM:66EA                 sta     <DPbyte_41      ; Game mode/screen state
ROM:66EC                 ldu     #byte_4AB6
ROM:66EF                 ldx     #$4520
ROM:66F2                 lda     #8
ROM:66F4                 jsr     loc_C6F9
ROM:66F7                 ldu     #byte_4A8E      ; High scores RAM
ROM:66FA                 ldx     #$4508
ROM:66FD                 lda     #$B
ROM:66FF                 jsr     loc_C6F9
ROM:6702                 lda     #1
ROM:6704                 jsr     sub_C2B3
ROM:6707
ROM:6707 locret_6707:
ROM:6707                 rts
ROM:6707 ; End of function sub_66AC
ROM:6707
ROM:6708
ROM:6708 ; =============== S U B R O U T I N E =======================================
ROM:6708
ROM:6708 ; Called once before attract screen 2
ROM:6708
ROM:6708 sub_6708:
ROM:6708                 inc     <DPbyte_41      ; Game mode/screen state
ROM:670A                 jsr     sub_611E        ; Copies Star Wars logo vector data to vector RAM
ROM:670D
ROM:670D loc_670D:
ROM:670D                 jsr     sub_D91A
ROM:6710                 ldd     #0
ROM:6713                 std     word_4B0C       ; Attract text position for scrolling
ROM:6716                 std     >byte_48AF
ROM:6719                 jsr     sub_D9DC        ; Initialise before game start
ROM:671C                 jsr     sub_61B5        ; Set up math constants
ROM:671F                 jsr     sub_615A        ; More stars/ties init stuff
ROM:6722
ROM:6722 loc_6722:                               ; Matrix 2
ROM:6722                 ldu     #MReg1C
ROM:6725
ROM:6725 loc_6725:                               ; Initialise math registers matrix
ROM:6725                 jsr     sub_CDC3
ROM:6728                 lda     byte_4B34
ROM:672B                 cmpa    #$FF
ROM:672D                 bne     loc_6737
ROM:672F                 lda     byte_4B06
ROM:6732                 sta     byte_4B34
ROM:6735                 bra     locret_6758
ROM:6737 ; ---------------------------------------------------------------------------
ROM:6737
ROM:6737 loc_6737:                               ; Called once before attract screen 2
ROM:6737                 lda     byte_4B06
ROM:673A                 cmpa    byte_4B34
ROM:673D                 beq     locret_6758
ROM:673F                 sta     byte_4B34
ROM:6742                 jsr     sub_C20C
ROM:6745                 lda     byte_4592
ROM:6748                 anda    #4
ROM:674A                 bne     locret_6758
ROM:674C                 ldx     #off_6759
ROM:674F                 lda     PRNG
ROM:6752                 ldb     #9
ROM:6754                 mul
ROM:6755                 asla
ROM:6756                 jsr     [a,x]           ; Play random attract sound
ROM:6758
ROM:6758 locret_6758:
ROM:6758                 rts
ROM:6758 ; End of function sub_6708
ROM:6758
ROM:6758 ; ---------------------------------------------------------------------------
ROM:676B
ROM:676B ; =============== S U B R O U T I N E =======================================
ROM:676B
ROM:676B
ROM:676B sub_676B:
ROM:676B                 jsr     sub_6112        ; Attract screen 2
ROM:676E                 jsr     sub_CD80        ; Starfield
ROM:6771                 jsr     sub_D9FA        ; Attract screen 2 large Star Wars logo handling
ROM:6774                 jsr     sub_D985
ROM:6777                 jsr     sub_63D5        ; Check credits status
ROM:677A                 jsr     sub_761D        ; Display score
ROM:677D                 jsr     sub_612F        ; Vector instructions end
ROM:6780
ROM:6780 loc_6780:                               ; Attract screen 2 stars forward and down translate
ROM:6780                 jsr     sub_6DA5
ROM:6783                 jsr     sub_622D        ; Check joystick X to show high scores if moved
ROM:6786                 rts
ROM:6786 ; End of function sub_676B
ROM:6786
ROM:6787
ROM:6787 ; =============== S U B R O U T I N E =======================================
ROM:6787
ROM:6787 ; Called once before difficulty select screen
ROM:6787
ROM:6787 sub_6787:
ROM:6787                 lda     #5
ROM:6789                 sta     word_4B0E       ; Attract screen/game phase  timer
ROM:678C                 lda     #$FF
ROM:678E                 sta     byte_4B34
ROM:6791                 jsr     sub_D91A
ROM:6794                 jsr     Sound_10
ROM:6797                 inc     <DPbyte_41      ; Game mode/screen state
ROM:6799                 rts
ROM:6799 ; End of function sub_6787
ROM:6799
ROM:679A
ROM:679A ; =============== S U B R O U T I N E =======================================
ROM:679A
ROM:679A ; Called once before difficulty select screen
ROM:679A
ROM:679A sub_679A:
ROM:679A                 lda     #$D
ROM:679C                 sta     <DPbyte_41      ; Game mode/screen state
ROM:679E                 ldd     #0
ROM:67A1                 std     <DPbyte_42
ROM:67A3                 sta     <DPbyte_DD
ROM:67A5                 lda     byte_4593
ROM:67A8                 anda    #3
ROM:67AA
ROM:67AA loc_67AA:
ROM:67AA                 adda    #6
ROM:67AC                 sta     <DPbyte_60      ; Shield count
ROM:67AE                 sta     <DPbyte_8E
ROM:67B0                 lda     byte_4593
ROM:67B3                 lsra
ROM:67B4                 lsra
ROM:67B5                 anda    #3
ROM:67B7                 sta     byte_4B18
ROM:67BA                 lda     #0
ROM:67BC                 sta     byte_4B17
ROM:67BF                 sta     <DPbyte_8B
ROM:67C1                 sta     <DPbyte_8C      ; Sheild being depleted
ROM:67C3                 sta     <DPbyte_5C      ; Score millions
ROM:67C5                 sta     <DPbyte_5D      ; Score hundred thousands
ROM:67C7                 sta     <DPbyte_5E      ; Score thousands
ROM:67C9                 sta     <DPbyte_5F      ; Score
ROM:67CB                 sta     byte_4B2D
ROM:67CE                 sta     byte_4B37
ROM:67D1
ROM:67D1 loc_67D1:
ROM:67D1                 sta     byte_4B35
ROM:67D4
ROM:67D4 loc_67D4:
ROM:67D4                 orcc    #$10
ROM:67D6                 inc     >byte_486F      ; Joystick roll data structure
ROM:67D9                 inc     >byte_4866      ; Joystick pitch data structure
ROM:67DC                 inc     >byte_4871
ROM:67DF                 inc     >byte_4868
ROM:67E2                 andcc   #$EF ; n
ROM:67E4                 rts
ROM:67E4 ; End of function sub_679A
ROM:67E4
ROM:67E5
ROM:67E5 ; =============== S U B R O U T I N E =======================================
ROM:67E5
ROM:67E5
ROM:67E5 sub_67E5:
ROM:67E5                 jsr     sub_61B5        ; Set up math constants
ROM:67E8                 jsr     sub_615A        ; More stars/ties init stuff
ROM:67EB                 jsr     sub_61EC        ; Init stars math data
ROM:67EE                 lda     #$C0 ; +
ROM:67F0                 sta     MReg40          ; Matrix 4
ROM:67F3                 sta     MReg45
ROM:67F6                 lda     #0
ROM:67F8                 sta     >byte_4813
ROM:67FB                 inc     <DPbyte_41      ; Game mode/screen state
ROM:67FD
ROM:67FD loc_67FD:
ROM:67FD                 lda     #$1D
ROM:67FF                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6801                 rts
ROM:6801 ; End of function sub_67E5
ROM:6801
ROM:6802
ROM:6802 ; =============== S U B R O U T I N E =======================================
ROM:6802
ROM:6802 ; Next space wave after Death Star explosion
ROM:6802
ROM:6802 sub_6802:
ROM:6802                 jsr     loc_7A5A
ROM:6805                 ldx     #8
ROM:6808                 lda     byte_4B15
ROM:680B                 inca
ROM:680C                 jsr     sub_7720
ROM:680F                 lda     word_4AD6
ROM:6812                 sta     byte_4B16
ROM:6815                 lda     byte_4B15
ROM:6818
ROM:6818 loc_6818:
ROM:6818                 cmpa    #$1F
ROM:681A                 bls     loc_681E
ROM:681C                 lda     #$1F
ROM:681E
ROM:681E loc_681E:
ROM:681E                 sta     byte_4B14
ROM:6821                 adda    byte_4B18
ROM:6824                 cmpa    #$F
ROM:6826                 bls     loc_682A
ROM:6828                 lda     #$F
ROM:682A
ROM:682A loc_682A:
ROM:682A                 sta     byte_4B19
ROM:682D                 inc     <DPbyte_41      ; Game mode/screen state
ROM:682F
ROM:682F loc_682F:
ROM:682F                 lda     #$1F
ROM:6831                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6833                 lda     #0
ROM:6835                 sta     <DPbyte_DD
ROM:6837                 rts
ROM:6837 ; End of function sub_6802
ROM:6837
ROM:6838
ROM:6838 ; =============== S U B R O U T I N E =======================================
ROM:6838
ROM:6838 ; Next space wave after Death Star explosion
ROM:6838
ROM:6838 sub_6838:
ROM:6838
ROM:6838 ; FUNCTION CHUNK AT ROM:6C76 SIZE 0000000E BYTES
ROM:6838
ROM:6838                 jsr     sub_6161        ; Initialise tie fighters and fireballs
ROM:683B                 jsr     sub_B939
ROM:683E                 ldd     #0
ROM:6841                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:6844                 sta     word_4B3B
ROM:6847                 lda     #9
ROM:6849                 sta     word_4B3B+1
ROM:684C                 lda     byte_4B2D
ROM:684F                 bne     loc_6857
ROM:6851                 ldd     #$27 ; 
ROM:6854                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:6857
ROM:6857 loc_6857:                               ; Game mode/screen state
ROM:6857                 inc     <DPbyte_41
ROM:6859
ROM:6859 loc_6859:                               ; Space wave
ROM:6859                 jsr     sub_72C7
ROM:685C                 lda     <DPbyte_60      ; Shield count
ROM:685E                 lbmi    loc_6C76
ROM:6862
ROM:6862 loc_6862:                               ; Fireball movement
ROM:6862                 jsr     sub_A849
ROM:6865                 jsr     sub_9898
ROM:6868                 jsr     sub_B98B        ; Check if tie/bunker/tower been hit
ROM:686B                 jsr     sub_9890        ; Fireball timer 3
ROM:686E                 jsr     sub_9558        ; Process shields
ROM:6871                 jsr     sub_8B6D
ROM:6874                 jsr     sub_70DB
ROM:6877                 jsr     sub_6DD2
ROM:687A                 lda     #$10            ; BIC points to Matrix 4
ROM:687C                 jsr     sub_CE0C        ; Copy transform data from [BIC] to matrix 2
ROM:687F                 jsr     sub_6F5F
ROM:6882                 ldd     word_4B0E       ; Attract screen/game phase  timer
ROM:6885                 addd    #1
ROM:6888                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:688B                 cmpd    #$28 ; (
ROM:688F                 bne     loc_68A6
ROM:6891                 lda     byte_4B15
ROM:6894                 cmpa    #3
ROM:6896                 blt     loc_68A1
ROM:6898                 anda    #1
ROM:689A                 beq     loc_68A1
ROM:689C                 jsr     Sound_1D        ; Imperial March
ROM:689F                 bra     loc_68A4
ROM:68A1 ; ---------------------------------------------------------------------------
ROM:68A1
ROM:68A1 loc_68A1:                               ; Space wave 1 music
ROM:68A1                 jsr     Sound_24
ROM:68A4
ROM:68A4 loc_68A4:
ROM:68A4                 bra     loc_68C6
ROM:68A6 ; ---------------------------------------------------------------------------
ROM:68A6
ROM:68A6 loc_68A6:
ROM:68A6                 cmpd    #$C8 ; +
ROM:68AA                 bne     loc_68B1
ROM:68AC                 jsr     Sound_25        ; Space Wave 2 music
ROM:68AF                 bra     loc_68C6
ROM:68B1 ; ---------------------------------------------------------------------------
ROM:68B1
ROM:68B1 loc_68B1:
ROM:68B1                 cmpd    #$190
ROM:68B5                 bne     loc_68BC
ROM:68B7                 jsr     Sound_1E        ; Enter Death Star
ROM:68BA                 bra     loc_68C6
ROM:68BC ; ---------------------------------------------------------------------------
ROM:68BC
ROM:68BC loc_68BC:
ROM:68BC                 cmpd    #$1A4
ROM:68C0                 bcs     loc_68C6
ROM:68C2                 lda     #$21 ; !
ROM:68C4                 sta     <DPbyte_41      ; Game mode/screen state
ROM:68C6
ROM:68C6 loc_68C6:
ROM:68C6                 lda     <DPbyte_E6
ROM:68C8                 cmpa    #3
ROM:68CA                 bcc     locret_68CF
ROM:68CC                 jsr     sub_8F7B
ROM:68CF
ROM:68CF locret_68CF:
ROM:68CF                 rts
ROM:68CF ; End of function sub_6838
ROM:68CF
ROM:68D0
ROM:68D0 ; =============== S U B R O U T I N E =======================================
ROM:68D0
ROM:68D0
ROM:68D0 sub_68D0:
ROM:68D0                 inc     word_4B3B
ROM:68D3                 inc     <DPbyte_41      ; Game mode/screen state
ROM:68D5
ROM:68D5 loc_68D5:                               ; Entering Death Star
ROM:68D5                 jsr     sub_72C7
ROM:68D8                 lda     <DPbyte_60      ; Shield count
ROM:68DA                 lbmi    loc_6C76
ROM:68DE                 jsr     sub_A849        ; Fireball movement
ROM:68E1                 jsr     sub_9898
ROM:68E4                 jsr     sub_B98B        ; Check if tie/bunker/tower been hit
ROM:68E7                 jsr     sub_9890        ; Fireball timer 3
ROM:68EA                 jsr     sub_9558        ; Process shields
ROM:68ED                 jsr     sub_8B86
ROM:68F0                 jsr     sub_70DB
ROM:68F3                 jsr     sub_6DFA
ROM:68F6                 lda     #$10            ; BIC points to Matrix 4
ROM:68F8                 jsr     sub_CE0C        ; Copy transform data from [BIC] to matrix 2
ROM:68FB                 jsr     sub_6F5F
ROM:68FE                 ldx     #byte_4900      ; 3x Tie fighter data structure ($19 bytes per Tie)
ROM:6901
ROM:6901 loc_6901:
ROM:6901                 lda     3,x
ROM:6903                 bne     locret_6911
ROM:6905                 leax    $19,x
ROM:6908                 cmpx    #byte_4900+$4B  ; 3x Tie fighter data structure ($19 bytes per Tie)
ROM:690B                 bcs     loc_6901
ROM:690D                 lda     #$23 ; #
ROM:690F                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6911
ROM:6911 locret_6911:
ROM:6911                 rts
ROM:6911 ; End of function sub_68D0
ROM:6911
ROM:6912
ROM:6912 ; =============== S U B R O U T I N E =======================================
ROM:6912
ROM:6912
ROM:6912 sub_6912:
ROM:6912                 ldd     #$7780
ROM:6915                 std     <DPbyte_56      ; Zoom value
ROM:6917                 ldd     #$100
ROM:691A                 std     <DPbyte_58      ; Death Star zoom value
ROM:691C                 lda     byte_4B2D
ROM:691F                 bne     loc_692A
ROM:6921                 lda     byte_4B14
ROM:6924                 cmpa    #4
ROM:6926                 bne     loc_692A
ROM:6928                 bra     loc_6930
ROM:692A ; ---------------------------------------------------------------------------
ROM:692A
ROM:692A loc_692A:                               ; Red 5 Im going in
ROM:692A                 jsr     Sound_17
ROM:692D
ROM:692D loc_692D:                               ; R2 beeps entering Death Star
ROM:692D                 jsr     Sound_32
ROM:6930
ROM:6930 loc_6930:                               ; Game mode/screen state
ROM:6930                 inc     <DPbyte_41
ROM:6932                 rts
ROM:6932 ; End of function sub_6912
ROM:6932
ROM:6933
ROM:6933 ; =============== S U B R O U T I N E =======================================
ROM:6933
ROM:6933 ; Entering Death Star 2nd part
ROM:6933
ROM:6933 sub_6933:
ROM:6933                 jsr     sub_733C        ; End of space wave? Also Trench catwalks
ROM:6936                 jsr     sub_B98B        ; Check if tie/bunker/tower been hit
ROM:6939                 jsr     sub_9890        ; Fireball timer 3
ROM:693C                 jsr     sub_9558        ; Process shields
ROM:693F                 jsr     sub_6DD2
ROM:6942                 jsr     sub_6F67
ROM:6945                 ldd     MReg40          ; Matrix 4
ROM:6948                 cmpd    #$3F00
ROM:694C                 blt     locret_6952
ROM:694E                 lda     #$25 ; %
ROM:6950                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6952
ROM:6952 locret_6952:
ROM:6952                 rts
ROM:6952 ; End of function sub_6933
ROM:6952
ROM:6953
ROM:6953 ; =============== S U B R O U T I N E =======================================
ROM:6953
ROM:6953
ROM:6953 sub_6953:
ROM:6953                 lda     byte_4B2D
ROM:6956                 bne     loc_6962
ROM:6958                 lda     byte_4B14
ROM:695B                 cmpa    #4
ROM:695D                 bne     loc_6962
ROM:695F                 jsr     Sound_13        ; Look at the size of that thing
ROM:6962
ROM:6962 loc_6962:
ROM:6962                 jsr     Sound_38
ROM:6965                 inc     <DPbyte_41      ; Game mode/screen state
ROM:6967                 rts
ROM:6967 ; End of function sub_6953
ROM:6967
ROM:6968
ROM:6968 ; =============== S U B R O U T I N E =======================================
ROM:6968
ROM:6968 ; Entering Death Star zoom in
ROM:6968
ROM:6968 sub_6968:
ROM:6968                 jsr     sub_736F
ROM:696B                 jsr     sub_9898
ROM:696E                 jsr     sub_9890        ; Fireball timer 3
ROM:6971                 jsr     sub_9558        ; Process shields
ROM:6974                 jsr     sub_6DD2
ROM:6977
ROM:6977 loc_6977:
ROM:6977                 jsr     sub_6F67
ROM:697A                 ldb     <DPbyte_58      ; Death Star zoom value
ROM:697C                 negb
ROM:697D                 sex
ROM:697E                 addd    <DPbyte_56      ; Zoom value
ROM:6980                 andb    #$7F ; 
ROM:6982                 std     <DPbyte_56      ; Zoom value
ROM:6984                 cmpd    #$7310
ROM:6988                 bhi     loc_6997
ROM:698A                 lda     byte_4B14
ROM:698D                 bne     loc_6993
ROM:698F                 lda     #$27 ; 
ROM:6991                 bra     loc_6995
ROM:6993 ; ---------------------------------------------------------------------------
ROM:6993
ROM:6993 loc_6993:
ROM:6993                 lda     #$29 ; )
ROM:6995
ROM:6995 loc_6995:                               ; Game mode/screen state
ROM:6995                 sta     <DPbyte_41
ROM:6997
ROM:6997 loc_6997:                               ; Death Star zoom value
ROM:6997                 ldd     <DPbyte_58
ROM:6999                 addd    #$60 ; `
ROM:699C                 std     <DPbyte_58      ; Death Star zoom value
ROM:699E                 lda     <DPbyte_83      ; Star intensity
ROM:69A0                 suba    #2
ROM:69A2                 bhi     loc_69A6
ROM:69A4                 lda     #0
ROM:69A6
ROM:69A6 loc_69A6:                               ; Star intensity
ROM:69A6                 sta     <DPbyte_83
ROM:69A8                 rts
ROM:69A8 ; End of function sub_6968
ROM:69A8
ROM:69A9
ROM:69A9 ; =============== S U B R O U T I N E =======================================
ROM:69A9
ROM:69A9 ; Towers/Bunkers init
ROM:69A9
ROM:69A9 sub_69A9:
ROM:69A9                 lda     byte_4B15
ROM:69AC                 deca
ROM:69AD                 cmpa    #$1F
ROM:69AF                 bcs     loc_69B3
ROM:69B1                 lda     #$1F
ROM:69B3
ROM:69B3 loc_69B3:
ROM:69B3                 sta     byte_4B13
ROM:69B6                 adda    byte_4B18
ROM:69B9                 cmpa    #$F
ROM:69BB                 bls     loc_69BF
ROM:69BD                 lda     #$F
ROM:69BF
ROM:69BF loc_69BF:
ROM:69BF                 sta     byte_4B19
ROM:69C2                 jsr     sub_615A        ; More stars/ties init stuff
ROM:69C5                 jsr     sub_620F        ; Init towers surface dots
ROM:69C8                 jsr     sub_A1CE
ROM:69CB                 jsr     sub_B939
ROM:69CE                 ldd     #$100
ROM:69D1                 std     MReg43
ROM:69D4                 asra
ROM:69D5                 rorb
ROM:69D6                 std     MReg4C
ROM:69D9                 ldd     #$2000
ROM:69DC                 std     MReg4E
ROM:69DF                 lda     #0
ROM:69E1                 sta     <DPbyte_A7
ROM:69E3                 sta     byte_4B35
ROM:69E6                 sta     byte_4B3D
ROM:69E9                 lda     #0
ROM:69EB                 sta     word_4B0E       ; Attract screen/game phase  timer
ROM:69EE                 jsr     Sound_20        ; Towers 1 music
ROM:69F1                 inc     <DPbyte_41      ; Game mode/screen state
ROM:69F3                 rts
ROM:69F3 ; End of function sub_69A9
ROM:69F3
ROM:69F4
ROM:69F4 ; =============== S U B R O U T I N E =======================================
ROM:69F4
ROM:69F4 ; Towers/Bunkers wave
ROM:69F4
ROM:69F4 sub_69F4:
ROM:69F4
ROM:69F4 ; FUNCTION CHUNK AT ROM:6CB6 SIZE 0000000E BYTES
ROM:69F4
ROM:69F4                 jsr     sub_7390        ; Towers/Bunkers wave
ROM:69F7                 lda     <DPbyte_60      ; Shield count
ROM:69F9                 lbmi    loc_6CB6
ROM:69FD                 jsr     sub_A849        ; Fireball movement
ROM:6A00                 jsr     sub_9890        ; Fireball timer 3
ROM:6A03                 jsr     sub_9558        ; Process shields
ROM:6A06                 jsr     sub_B98B        ; Check if tie/bunker/tower been hit
ROM:6A09                 jsr     sub_70DB
ROM:6A09 ; End of function sub_69F4
ROM:6A09
ROM:6A0C
ROM:6A0C ; =============== S U B R O U T I N E =======================================
ROM:6A0C
ROM:6A0C
ROM:6A0C sub_6A0C:
ROM:6A0C                 jsr     sub_6E22
ROM:6A0F                 lda     #$10            ; BIC points to Matrix 4
ROM:6A11                 jsr     sub_CE0C        ; Copy transform data from [BIC] to matrix 2
ROM:6A14                 jsr     sub_6F6F
ROM:6A17                 ldd     MReg43
ROM:6A1A                 addd    #1
ROM:6A1D                 cmpd    #$400
ROM:6A21                 bhi     loc_6A26
ROM:6A23                 std     MReg43
ROM:6A26
ROM:6A26 loc_6A26:                               ; Game over/insert coins timer
ROM:6A26                 lda     <DPbyte_43
ROM:6A28                 anda    #$F
ROM:6A2A                 bne     loc_6A39
ROM:6A2C                 lda     word_4B0E       ; Attract screen/game phase  timer
ROM:6A2F                 cmpa    #$E
ROM:6A31                 bne     loc_6A36
ROM:6A33                 jsr     Sound_21        ; Towers 2 music
ROM:6A36
ROM:6A36 loc_6A36:                               ; Attract screen/game phase  timer
ROM:6A36                 inc     word_4B0E
ROM:6A39
ROM:6A39 loc_6A39:
ROM:6A39                 lda     <DPbyte_A7
ROM:6A3B                 cmpa    #5
ROM:6A3D                 bcs     locret_6A4F
ROM:6A3F                 lda     #1
ROM:6A41                 sta     byte_4B3D
ROM:6A44                 lda     MReg4C
ROM:6A49                 bcc     locret_6A4F
ROM:6A4B                 lda     #$2B ; +
ROM:6A4D                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6A4F
ROM:6A4F locret_6A4F:
ROM:6A4F                 rts
ROM:6A4F ; End of function sub_6A0C
ROM:6A4F
ROM:6A50
ROM:6A50 ; =============== S U B R O U T I N E =======================================
ROM:6A50
ROM:6A50 ; Entering Death Star zoomed fully in
ROM:6A50
ROM:6A50 sub_6A50:
ROM:6A50                 lda     #0
ROM:6A52                 sta     <DPbyte_98
ROM:6A54                 sta     byte_4B36
ROM:6A57                 lda     byte_4B15
ROM:6A5A                 cmpa    #$1F
ROM:6A5C                 bls     loc_6A60
ROM:6A5E                 lda     #$1F
ROM:6A60
ROM:6A60 loc_6A60:
ROM:6A60                 sta     byte_4B12
ROM:6A63                 adda    byte_4B18
ROM:6A66                 cmpa    #$F
ROM:6A68                 bls     loc_6A6C
ROM:6A6A                 lda     #$F
ROM:6A6C
ROM:6A6C loc_6A6C:
ROM:6A6C                 sta     byte_4B19
ROM:6A6F                 jsr     sub_83A4        ; Called when starting trench
ROM:6A72                 jsr     Sound_19
ROM:6A75                 ldd     #0
ROM:6A78                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:6A7B                 inc     <DPbyte_41      ; Game mode/screen state
ROM:6A7D                 rts
ROM:6A7D ; End of function sub_6A50
ROM:6A7D
ROM:6A7E
ROM:6A7E ; =============== S U B R O U T I N E =======================================
ROM:6A7E
ROM:6A7E
ROM:6A7E sub_6A7E:
ROM:6A7E                 jsr     sub_615A        ; More stars/ties init stuff
ROM:6A81                 jsr     sub_8341        ; Entering trench
ROM:6A84                 lda     #$2F ; /
ROM:6A86                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6A88                 rts
ROM:6A88 ; End of function sub_6A7E
ROM:6A88
ROM:6A89
ROM:6A89 ; =============== S U B R O U T I N E =======================================
ROM:6A89
ROM:6A89
ROM:6A89 sub_6A89:
ROM:6A89                 jsr     sub_73EA        ; Towers
ROM:6A8C                 jsr     sub_9890        ; Fireball timer 3
ROM:6A8F                 jsr     sub_9558        ; Process shields
ROM:6A92                 jsr     sub_B98B        ; Check if tie/bunker/tower been hit
ROM:6A95                 jsr     sub_6FE0
ROM:6A98                 ldd     word_4B0E       ; Attract screen/game phase  timer
ROM:6A9B                 addd    #1
ROM:6A9E
ROM:6A9E loc_6A9E:                               ; Attract screen/game phase  timer
ROM:6A9E                 std     word_4B0E
ROM:6AA1                 subd    #$11
ROM:6AA4                 bcs     locret_6AAA
ROM:6AA6                 lda     #$2D ; -
ROM:6AA8                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6AAA
ROM:6AAA locret_6AAA:
ROM:6AAA                 rts
ROM:6AAA ; End of function sub_6A89
ROM:6AAA
ROM:6AAB
ROM:6AAB ; =============== S U B R O U T I N E =======================================
ROM:6AAB
ROM:6AAB
ROM:6AAB sub_6AAB:
ROM:6AAB                 ldd     #0
ROM:6AAE                 std     MReg4C
ROM:6AB1                 std     MReg4D
ROM:6AB4                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:6AB7                 jsr     sub_6FF1
ROM:6ABA                 jsr     sub_8341        ; Entering trench
ROM:6ABD                 inc     <DPbyte_41      ; Game mode/screen state
ROM:6ABF
ROM:6ABF loc_6ABF:
ROM:6ABF                 jsr     sub_7413
ROM:6AC2                 jsr     sub_9890        ; Fireball timer 3
ROM:6AC5                 jsr     sub_9558        ; Process shields
ROM:6AC8                 jsr     sub_B98B        ; Check if tie/bunker/tower been hit
ROM:6ACB                 jsr     sub_6FF1
ROM:6ACE                 ldd     word_4B0E       ; Attract screen/game phase  timer
ROM:6AD1                 addd    #1
ROM:6AD4                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:6AD7                 subd    #$11
ROM:6ADA                 bcs     locret_6AFE
ROM:6ADC                 ldx     MReg4C
ROM:6ADF                 ldu     MReg4D
ROM:6AE2                 ldd     MReg4E
ROM:6AE5                 pshs    a,b,x,u
ROM:6AE7                 jsr     sub_615A        ; More stars/ties init stuff
ROM:6AEA                 puls    u,x,b,a
ROM:6AEC                 stx     MReg4C
ROM:6AEF                 stu     MReg4D
ROM:6AF2                 std     MReg4E
ROM:6AF5                 lda     #0
ROM:6AF7                 sta     byte_4B36
ROM:6AFA                 lda     #$2F ; /
ROM:6AFC                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6AFE
ROM:6AFE locret_6AFE:
ROM:6AFE                 rts
ROM:6AFE ; End of function sub_6AAB
ROM:6AFE
ROM:6AFF
ROM:6AFF ; =============== S U B R O U T I N E =======================================
ROM:6AFF
ROM:6AFF
ROM:6AFF sub_6AFF:
ROM:6AFF                 lda     #1
ROM:6B01                 sta     <DPbyte_98
ROM:6B03                 jsr     sub_615A        ; More stars/ties init stuff
ROM:6B06                 jsr     sub_8341        ; Entering trench
ROM:6B09                 lda     #$FF
ROM:6B0B                 sta     byte_4B36
ROM:6B0E                 lda     byte_4B19
ROM:6B11                 adda    byte_4B17
ROM:6B14                 cmpa    #$F
ROM:6B16                 bls     loc_6B1A
ROM:6B18                 lda     #$F
ROM:6B1A
ROM:6B1A loc_6B1A:
ROM:6B1A                 sta     byte_4B19
ROM:6B1D
ROM:6B1D loc_6B1D:
ROM:6B1D                 lda     #$2F ; /
ROM:6B1F                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6B21                 rts
ROM:6B21 ; End of function sub_6AFF
ROM:6B21
ROM:6B22
ROM:6B22 ; =============== S U B R O U T I N E =======================================
ROM:6B22
ROM:6B22
ROM:6B22 sub_6B22:
ROM:6B22
ROM:6B22 ; FUNCTION CHUNK AT ROM:6CE1 SIZE 0000000E BYTES
ROM:6B22
ROM:6B22                 lda     #0
ROM:6B24                 sta     byte_4B3E
ROM:6B27                 sta     word_4B0E       ; Attract screen/game phase  timer
ROM:6B2A                 ldd     #$300
ROM:6B2D                 std     MReg43
ROM:6B30                 inc     <DPbyte_41      ; Game mode/screen state
ROM:6B32
ROM:6B32 loc_6B32:                               ; Trench
ROM:6B32                 jsr     sub_743C
ROM:6B35                 lda     <DPbyte_60      ; Shield count
ROM:6B37                 lbmi    loc_6CE1
ROM:6B3B                 jsr     sub_A849        ; Fireball movement
ROM:6B3E                 jsr     sub_AD6C
ROM:6B41                 jsr     sub_8495
ROM:6B44                 jsr     sub_9886        ; Fireball timer 2
ROM:6B47                 jsr     sub_9558        ; Process shields
ROM:6B4A                 jsr     sub_70DB
ROM:6B4D                 jsr     nullsub_1
ROM:6B50                 lda     #$10            ; BIC points to Matrix 4
ROM:6B52                 jsr     sub_CE0C        ; Copy transform data from [BIC] to matrix 2
ROM:6B55                 jsr     sub_703B        ; Trench viewpoint calc
ROM:6B58                 lda     <DPbyte_43      ; Game over/insert coins timer
ROM:6B5A                 anda    #$F
ROM:6B5C                 bne     loc_6B99
ROM:6B5E                 lda     word_4B0E       ; Attract screen/game phase  timer
ROM:6B61                 cmpa    #2
ROM:6B63                 bne     loc_6B68
ROM:6B65                 jsr     Sound_22        ; Trench music
ROM:6B68
ROM:6B68 loc_6B68:
ROM:6B68                 lda     byte_4B12
ROM:6B6B                 lsra
ROM:6B6C                 bcs     loc_6B83
ROM:6B6E                 lda     word_4B0E       ; Attract screen/game phase  timer
ROM:6B71                 cmpa    #$10
ROM:6B73                 bne     loc_6B7A
ROM:6B75                 jsr     Sound_18        ; Luke trust me
ROM:6B78                 bra     loc_6B81
ROM:6B7A ; ---------------------------------------------------------------------------
ROM:6B7A
ROM:6B7A loc_6B7A:
ROM:6B7A                 cmpa    #$18
ROM:6B7C                 bne     loc_6B81
ROM:6B7E                 jsr     Sound_1A        ; Yahoo youre all clear kid
ROM:6B81
ROM:6B81 loc_6B81:
ROM:6B81                 bra     loc_6B96
ROM:6B83 ; ---------------------------------------------------------------------------
ROM:6B83
ROM:6B83 loc_6B83:                               ; Attract screen/game phase  timer
ROM:6B83                 lda     word_4B0E
ROM:6B86                 cmpa    #$10
ROM:6B88                 bne     loc_6B8F
ROM:6B8A                 jsr     Sound_C
ROM:6B8D                 bra     loc_6B96
ROM:6B8F ; ---------------------------------------------------------------------------
ROM:6B8F
ROM:6B8F loc_6B8F:
ROM:6B8F                 cmpa    #$16
ROM:6B91                 bne     loc_6B96
ROM:6B93                 jsr     Sound_16        ; Force is strong in this one
ROM:6B96
ROM:6B96 loc_6B96:                               ; Attract screen/game phase  timer
ROM:6B96                 inc     word_4B0E
ROM:6B99
ROM:6B99 loc_6B99:
ROM:6B99                 lda     <DPbyte_92
ROM:6B9B                 beq     locret_6BDA
ROM:6B9D                 ldd     <DPbyte_93
ROM:6B9F                 subd    MReg4C
ROM:6BA2                 subd    #$800
ROM:6BA5                 bhi     locret_6BDA
ROM:6BA7                 lda     >word_4845
ROM:6BAA                 bne     loc_6BC6
ROM:6BAC                 lda     #1
ROM:6BAE                 sta     byte_4B3E
ROM:6BB1                 jsr     Sound_26        ; Explosion
ROM:6BB4                 jsr     sub_9874
ROM:6BB7                 lda     <DPbyte_60      ; Shield count
ROM:6BB9                 lble    loc_6CE1
ROM:6BBD                 lda     #$31 ; 1
ROM:6BBF                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6BC1                 jsr     Sound_E
ROM:6BC4                 bra     locret_6BDA
ROM:6BC6 ; ---------------------------------------------------------------------------
ROM:6BC6
ROM:6BC6 loc_6BC6:
ROM:6BC6                 lda     #$11
ROM:6BC8                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6BCA                 lda     byte_4B15
ROM:6BCD                 cmpa    #3
ROM:6BCF                 blt     locret_6BDA
ROM:6BD1                 anda    #1
ROM:6BD3                 beq     locret_6BDA
ROM:6BD5                 jsr     Sound_7
ROM:6BD8                 bra     *+2
ROM:6BDA
ROM:6BDA locret_6BDA:
ROM:6BDA                 rts
ROM:6BDA ; End of function sub_6B22
ROM:6BDA
ROM:6BDB
ROM:6BDB ; =============== S U B R O U T I N E =======================================
ROM:6BDB
ROM:6BDB
ROM:6BDB sub_6BDB:
ROM:6BDB                 jsr     sub_61B5        ; Set up math constants
ROM:6BDE                 jsr     sub_615A        ; More stars/ties init stuff
ROM:6BE1                 lda     #$C0 ; +
ROM:6BE3                 sta     MReg40          ; Matrix 4
ROM:6BE6                 sta     MReg45
ROM:6BE9                 lda     #4
ROM:6BEB                 sta     word_4B0E       ; Attract screen/game phase  timer
ROM:6BEE                 inc     <DPbyte_41      ; Game mode/screen state
ROM:6BF0                 rts
ROM:6BF0 ; End of function sub_6BDB
ROM:6BF0
ROM:6BF1
ROM:6BF1 ; =============== S U B R O U T I N E =======================================
ROM:6BF1
ROM:6BF1 ; Death Star explosion complete
ROM:6BF1
ROM:6BF1 sub_6BF1:
ROM:6BF1                 lda     <DPbyte_43      ; Game over/insert coins timer
ROM:6BF3                 anda    #$F
ROM:6BF5                 bne     loc_6C2C
ROM:6BF7                 dec     word_4B0E       ; Attract screen/game phase  timer
ROM:6BFA                 lda     word_4B0E       ; Attract screen/game phase  timer
ROM:6BFD                 cmpa    #3
ROM:6BFF                 bne     loc_6C09
ROM:6C01                 lda     >word_4845
ROM:6C04                 beq     loc_6C09
ROM:6C06                 jsr     loc_9806        ; Exhaust port score
ROM:6C09
ROM:6C09 loc_6C09:                               ; Attract screen/game phase  timer
ROM:6C09                 lda     word_4B0E
ROM:6C0C                 cmpa    #2
ROM:6C0E                 bne     loc_6C13
ROM:6C10                 jsr     sub_9775        ; Shield bonus score
ROM:6C13
ROM:6C13 loc_6C13:                               ; Attract screen/game phase  timer
ROM:6C13                 lda     word_4B0E
ROM:6C16                 cmpa    #1
ROM:6C18                 bne     loc_6C22
ROM:6C1A                 lda     >word_4845
ROM:6C1D                 beq     loc_6C22
ROM:6C1F                 jsr     sub_953B
ROM:6C22
ROM:6C22 loc_6C22:                               ; Attract screen/game phase  timer
ROM:6C22                 lda     word_4B0E
ROM:6C25                 cmpa    #0
ROM:6C27                 bne     loc_6C2C
ROM:6C29                 jsr     sub_9722        ; Death Star starting wave bonus score
ROM:6C2C
ROM:6C2C loc_6C2C:
ROM:6C2C                 jsr     sub_7519
ROM:6C2F                 jsr     sub_9558        ; Process shields
ROM:6C32                 jsr     sub_6F5F
ROM:6C35                 lda     word_4B0E       ; Attract screen/game phase  timer
ROM:6C3A                 bne     locret_6C75
ROM:6C3C                 lda     byte_4B15
ROM:6C3F                 inca
ROM:6C40                 cmpa    #$62 ; b
ROM:6C42                 bls     loc_6C46
ROM:6C44                 lda     #$62 ; b
ROM:6C46
ROM:6C46 loc_6C46:
ROM:6C46                 sta     byte_4B15
ROM:6C49                 lda     byte_4B15
ROM:6C4C                 cmpa    #5
ROM:6C4E                 bcc     loc_6C5D
ROM:6C50                 lda     byte_4B17
ROM:6C53                 inca
ROM:6C54                 cmpa    #4
ROM:6C56                 bls     loc_6C5A
ROM:6C58                 lda     #4
ROM:6C5A
ROM:6C5A loc_6C5A:
ROM:6C5A                 sta     byte_4B17
ROM:6C5D
ROM:6C5D loc_6C5D:
ROM:6C5D                 lda     byte_4B18
ROM:6C60                 adda    byte_4B17
ROM:6C63                 cmpa    #$F
ROM:6C65                 bls     loc_6C69
ROM:6C67                 lda     #$F
ROM:6C69
ROM:6C69 loc_6C69:
ROM:6C69                 sta     byte_4B18
ROM:6C6C                 lda     #$FF
ROM:6C6E                 sta     byte_4B2D
ROM:6C71                 lda     #$1D
ROM:6C73                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6C75
ROM:6C75 locret_6C75:
ROM:6C75                 rts
ROM:6C75 ; End of function sub_6BF1
ROM:6C75
ROM:6C76 ; ---------------------------------------------------------------------------
ROM:6C76 ; START OF FUNCTION CHUNK FOR sub_6838
ROM:6C76
ROM:6C76 loc_6C76:                               ; Stay in attack formation
ROM:6C76                 jsr     Sound_14
ROM:6C79                 lda     #$36 ; 6
ROM:6C7B                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6C7D                 ldd     #0
ROM:6C80                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:6C83                 rts
ROM:6C83 ; END OF FUNCTION CHUNK FOR sub_6838
ROM:6C84
ROM:6C84 ; =============== S U B R O U T I N E =======================================
ROM:6C84
ROM:6C84 ; Towers
ROM:6C84
ROM:6C84 sub_6C84:
ROM:6C84                 jsr     sub_7315
ROM:6C87                 jsr     sub_A849        ; Fireball movement
ROM:6C8A                 jsr     sub_987F        ; Fireball timer
ROM:6C8D                 jsr     sub_9898
ROM:6C90                 jsr     sub_B98B        ; Check if tie/bunker/tower been hit
ROM:6C93                 ldd     #$FB01
ROM:6C96                 std     MReg11          ; Sine for rotation
ROM:6C99                 ldd     #$3FCE
ROM:6C9C                 std     MReg12          ; Cosine for rotation
ROM:6C9F                 jsr     sub_CE24        ; Run math program $00 Roll on Matrix 4
ROM:6CA2                 ldd     word_4B0E       ; Attract screen/game phase  timer
ROM:6CA5                 addd    #1
ROM:6CA8                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:6CAB                 cmpd    #$28 ; (
ROM:6CAF                 bcs     locret_6CB5
ROM:6CB1                 lda     #$3B ; ;
ROM:6CB3                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6CB5
ROM:6CB5 locret_6CB5:
ROM:6CB5                 rts
ROM:6CB5 ; End of function sub_6C84
ROM:6CB5
ROM:6CB6 ; ---------------------------------------------------------------------------
ROM:6CB6 ; START OF FUNCTION CHUNK FOR sub_69F4
ROM:6CB6
ROM:6CB6 loc_6CB6:                               ; Stay in attack formation
ROM:6CB6                 jsr     Sound_14
ROM:6CB9                 lda     #$38 ; 8
ROM:6CBB                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6CBD                 ldd     #0
ROM:6CC0                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:6CC3                 rts
ROM:6CC3 ; END OF FUNCTION CHUNK FOR sub_69F4
ROM:6CC4
ROM:6CC4 ; =============== S U B R O U T I N E =======================================
ROM:6CC4
ROM:6CC4
ROM:6CC4 sub_6CC4:
ROM:6CC4                 jsr     sub_73C3        ; Towers
ROM:6CC7                 jsr     sub_A849        ; Fireball movement
ROM:6CCA                 jsr     sub_987F        ; Fireball timer
ROM:6CCD                 ldd     word_4B0E       ; Attract screen/game phase  timer
ROM:6CD0                 addd    #1
ROM:6CD3                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:6CD6                 cmpd    #$28 ; (
ROM:6CDA                 bcs     locret_6CE0
ROM:6CDC                 lda     #$3B ; ;
ROM:6CDE                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6CE0
ROM:6CE0 locret_6CE0:
ROM:6CE0                 rts
ROM:6CE0 ; End of function sub_6CC4
ROM:6CE0
ROM:6CE1 ; ---------------------------------------------------------------------------
ROM:6CE1 ; START OF FUNCTION CHUNK FOR sub_6B22
ROM:6CE1
ROM:6CE1 loc_6CE1:                               ; Stay in attack formation
ROM:6CE1                 jsr     Sound_14
ROM:6CE4                 lda     #$3A ; :
ROM:6CE6                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6CE8                 ldd     #0
ROM:6CEB                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:6CEE                 rts
ROM:6CEE ; END OF FUNCTION CHUNK FOR sub_6B22
ROM:6CEF
ROM:6CEF ; =============== S U B R O U T I N E =======================================
ROM:6CEF
ROM:6CEF ; Game over
ROM:6CEF
ROM:6CEF sub_6CEF:
ROM:6CEF                 jsr     sub_74D5        ; Game over
ROM:6CF2                 jsr     sub_A849        ; Fireball movement
ROM:6CF5                 jsr     sub_987F        ; Fireball timer
ROM:6CF8                 ldd     word_4B0E       ; Attract screen/game phase  timer
ROM:6CFB                 addd    #1
ROM:6CFE                 std     word_4B0E       ; Attract screen/game phase  timer
ROM:6D01                 cmpd    #$28 ; (
ROM:6D05                 bcs     locret_6D0B
ROM:6D07                 lda     #$3B ; ;
ROM:6D09                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6D0B
ROM:6D0B locret_6D0B:
ROM:6D0B                 rts
ROM:6D0B ; End of function sub_6CEF
ROM:6D0B
ROM:6D0C
ROM:6D0C ; =============== S U B R O U T I N E =======================================
ROM:6D0C
ROM:6D0C ; Game over init
ROM:6D0C
ROM:6D0C sub_6D0C:
ROM:6D0C                 jsr     Sound_11        ; Remember
ROM:6D0F                 jsr     Sound_5
ROM:6D12                 inc     <DPbyte_41      ; Game mode/screen state
ROM:6D14                 rts
ROM:6D14 ; End of function sub_6D0C
ROM:6D14
ROM:6D15
ROM:6D15 ; =============== S U B R O U T I N E =======================================
ROM:6D15
ROM:6D15 ; Game over
ROM:6D15
ROM:6D15 sub_6D15:
ROM:6D15                 jsr     sub_61B5        ; Set up math constants
ROM:6D18                 jsr     sub_615A        ; More stars/ties init stuff
ROM:6D1B                 jsr     sub_61EC        ; Init stars math data
ROM:6D1E                 ldu     #MReg1C         ; Matrix 2
ROM:6D21                 jsr     sub_CDC3        ; Initialise math registers matrix
ROM:6D24                 jsr     sub_C0FF        ; NVRAM something
ROM:6D27                 jsr     sub_CA8C        ; Score
ROM:6D2A                 lda     word_4AEC
ROM:6D2D                 bmi     loc_6D33
ROM:6D2F                 lda     #$F
ROM:6D31                 bra     loc_6D38
ROM:6D33 ; ---------------------------------------------------------------------------
ROM:6D33
ROM:6D33 loc_6D33:                               ; High score
ROM:6D33                 jsr     Sound_1B
ROM:6D36                 lda     #5
ROM:6D38
ROM:6D38 loc_6D38:                               ; Game mode/screen state
ROM:6D38                 sta     <DPbyte_41
ROM:6D3A                 rts
ROM:6D3A ; End of function sub_6D15
ROM:6D3A
ROM:6D3B
ROM:6D3B ; =============== S U B R O U T I N E =======================================
ROM:6D3B
ROM:6D3B
ROM:6D3B sub_6D3B:
ROM:6D3B                 ldd     #$7304          ; Exhaust port hit init
ROM:6D3E                 std     <DPbyte_56      ; Zoom value
ROM:6D40                 ldd     #$AFF
ROM:6D43                 std     <DPbyte_58      ; Death Star zoom value
ROM:6D45                 jsr     sub_61EC        ; Init stars math data
ROM:6D48                 ldu     #MReg1C         ; Matrix 2
ROM:6D4B                 jsr     sub_CDC3        ; Initialise math registers matrix
ROM:6D4E                 inc     <DPbyte_41      ; Game mode/screen state
ROM:6D50                 jsr     Sound_1F        ; Death Star destroyed
ROM:6D53                 rts
ROM:6D53 ; End of function sub_6D3B
ROM:6D53
ROM:6D54
ROM:6D54 ; =============== S U B R O U T I N E =======================================
ROM:6D54
ROM:6D54
ROM:6D54 sub_6D54:
ROM:6D54                 jsr     sub_75B9        ; Death Star hit zoom out
ROM:6D57                 jsr     sub_9558        ; Process shields
ROM:6D5A                 jsr     sub_9890        ; Fireball timer 3
ROM:6D5D                 ldb     <DPbyte_58      ; Death Star zoom value
ROM:6D5F                 sex
ROM:6D60                 addd    <DPbyte_56      ; Zoom value
ROM:6D65                 andb    #$7F ; 
ROM:6D67                 std     <DPbyte_56      ; Zoom value
ROM:6D69                 cmpd    #$7680
ROM:6D6D                 bcs     loc_6D73
ROM:6D6F                 lda     #$13
ROM:6D71                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6D73
ROM:6D73 loc_6D73:                               ; Death Star zoom value
ROM:6D73                 ldd     <DPbyte_58
ROM:6D75                 subd    #$10
ROM:6D78                 bpl     loc_6D7D
ROM:6D7A                 ldd     #0
ROM:6D7D
ROM:6D7D loc_6D7D:                               ; Death Star zoom value
ROM:6D7D                 std     <DPbyte_58
ROM:6D7F                 rts
ROM:6D7F ; End of function sub_6D54
ROM:6D7F
ROM:6D80
ROM:6D80 ; =============== S U B R O U T I N E =======================================
ROM:6D80
ROM:6D80
ROM:6D80 sub_6D80:
ROM:6D80                 jsr     sub_BB7B        ; Death Star explosion init
ROM:6D83                 inc     <DPbyte_41      ; Game mode/screen state
ROM:6D85                 rts
ROM:6D85 ; End of function sub_6D80
ROM:6D85
ROM:6D86
ROM:6D86 ; =============== S U B R O U T I N E =======================================
ROM:6D86
ROM:6D86 ; Space wave init
ROM:6D86
ROM:6D86 sub_6D86:
ROM:6D86                 jsr     sub_75D9        ; Space wave
ROM:6D89                 lda     >word_48A1
ROM:6D8C                 cmpa    #1
ROM:6D8E                 bcs     locret_6D94
ROM:6D90                 lda     #$15
ROM:6D92                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6D94
ROM:6D94 locret_6D94:
ROM:6D94                 rts
ROM:6D94 ; End of function sub_6D86
ROM:6D94
ROM:6D95
ROM:6D95 ; =============== S U B R O U T I N E =======================================
ROM:6D95
ROM:6D95
ROM:6D95 sub_6D95:
ROM:6D95                 inc     <DPbyte_41      ; Game mode/screen state
ROM:6D97                 rts
ROM:6D97 ; End of function sub_6D95
ROM:6D97
ROM:6D98
ROM:6D98 ; =============== S U B R O U T I N E =======================================
ROM:6D98
ROM:6D98
ROM:6D98 sub_6D98:
ROM:6D98                 jsr     sub_760A        ; Death Star explosion
ROM:6D9B                 lda     >word_48A1
ROM:6D9E                 bne     locret_6DA4
ROM:6DA0                 lda     #$33 ; 3
ROM:6DA2                 sta     <DPbyte_41      ; Game mode/screen state
ROM:6DA4
ROM:6DA4 locret_6DA4:
ROM:6DA4                 rts
ROM:6DA4 ; End of function sub_6D98
ROM:6DA4
ROM:6DA5
ROM:6DA5 ; =============== S U B R O U T I N E =======================================
ROM:6DA5
ROM:6DA5 ; Attract screen 2 stars forward and down translate
ROM:6DA5
ROM:6DA5 sub_6DA5:
ROM:6DA5                 ldd     <Stars_XT
ROM:6DAA                 std     <Stars_XT
ROM:6DAC                 ldd     Stars_ZT
ROM:6DB2                 std     Stars_ZT
ROM:6DB5                 rts
ROM:6DB5 ; End of function sub_6DA5
ROM:6DB5
ROM:6DB6
ROM:6DB6 ; =============== S U B R O U T I N E =======================================
ROM:6DB6
ROM:6DB6 ; Attract screen 3 stars YT move
ROM:6DB6
ROM:6DB6 sub_6DB6:
ROM:6DB6                 ldd     Stars_YT
ROM:6DB9                 addd    #$FF80
ROM:6DBC                 std     Stars_YT
ROM:6DBF                 rts
ROM:6DBF ; End of function sub_6DB6
ROM:6DBF
ROM:6DC0
ROM:6DC0 ; =============== S U B R O U T I N E =======================================
ROM:6DC0
ROM:6DC0 ; Attract screen 4 stars ZT move
ROM:6DC0
ROM:6DC0 sub_6DC0:
ROM:6DC0                 ldd     Stars_ZT
ROM:6DC6                 std     Stars_ZT
ROM:6DC9                 rts
ROM:6DC9 ; End of function sub_6DC0
ROM:6DC9
ROM:6DCA
ROM:6DCA ; =============== S U B R O U T I N E =======================================
ROM:6DCA
ROM:6DCA ; Move stars XT translate position
ROM:6DCA
ROM:6DCA sub_6DCA:
ROM:6DCA                 ldd     <Stars_XT
ROM:6DCF                 std     <Stars_XT
ROM:6DD1                 rts
ROM:6DD1 ; End of function sub_6DCA
ROM:6DD1
ROM:6DD2
ROM:6DD2 ; =============== S U B R O U T I N E =======================================
ROM:6DD2
ROM:6DD2
ROM:6DD2 sub_6DD2:
ROM:6DD2                 lda     <DPbyte_63
ROM:6DD4                 beq     loc_6DF0
ROM:6DD6                 ble     loc_6DDF
ROM:6DD8                 dec     <DPbyte_63
ROM:6DDA                 ldd     #$4FF
ROM:6DDD                 bra     loc_6DE4
ROM:6DDF ; ---------------------------------------------------------------------------
ROM:6DDF
ROM:6DDF loc_6DDF:
ROM:6DDF                 inc     <DPbyte_63
ROM:6DE1                 ldd     #$FB01
ROM:6DE4
ROM:6DE4 loc_6DE4:                               ; Sine for rotation
ROM:6DE4                 std     MReg11
ROM:6DE7                 ldd     #$3FCE
ROM:6DEA                 std     MReg12          ; Cosine for rotation
ROM:6DED                 jsr     sub_CE24        ; Run math program $00 Roll on Matrix 4
ROM:6DF0
ROM:6DF0 loc_6DF0:
ROM:6DF0                 jsr     sub_6EA2
ROM:6DF3                 jsr     sub_70BD
ROM:6DF6                 jsr     sub_70CC
ROM:6DF9                 rts
ROM:6DF9 ; End of function sub_6DD2
ROM:6DF9
ROM:6DFA
ROM:6DFA ; =============== S U B R O U T I N E =======================================
ROM:6DFA
ROM:6DFA
ROM:6DFA sub_6DFA:
ROM:6DFA                 lda     <DPbyte_63
ROM:6DFC                 beq     loc_6E18
ROM:6DFE                 ble     loc_6E07
ROM:6E00                 dec     <DPbyte_63
ROM:6E02                 ldd     #$4FF
ROM:6E05                 bra     loc_6E0C
ROM:6E07 ; ---------------------------------------------------------------------------
ROM:6E07
ROM:6E07 loc_6E07:
ROM:6E07                 inc     <DPbyte_63
ROM:6E09                 ldd     #$FB01
ROM:6E0C
ROM:6E0C loc_6E0C:                               ; Sine for rotation
ROM:6E0C                 std     MReg11
ROM:6E0F                 ldd     #$3FCE
ROM:6E12                 std     MReg12          ; Cosine for rotation
ROM:6E15                 jsr     sub_CE24        ; Run math program $00 Roll on Matrix 4
ROM:6E18
ROM:6E18 loc_6E18:
ROM:6E18                 jsr     loc_6ECB
ROM:6E1B                 jsr     sub_70BD
ROM:6E1E                 jsr     sub_70CC
ROM:6E21                 rts
ROM:6E21 ; End of function sub_6DFA
ROM:6E21
ROM:6E22
ROM:6E22 ; =============== S U B R O U T I N E =======================================
ROM:6E22
ROM:6E22
ROM:6E22 sub_6E22:
ROM:6E22                 lda     <DPbyte_63
ROM:6E24                 beq     loc_6E2E
ROM:6E26                 ble     loc_6E2B
ROM:6E28                 deca
ROM:6E29                 bra     loc_6E2C
ROM:6E2B ; ---------------------------------------------------------------------------
ROM:6E2B
ROM:6E2B loc_6E2B:
ROM:6E2B                 inca
ROM:6E2C
ROM:6E2C loc_6E2C:
ROM:6E2C                 sta     <DPbyte_63
ROM:6E2E
ROM:6E2E loc_6E2E:
ROM:6E2E                 lda     <DPbyte_63
ROM:6E30                 bpl     loc_6E33
ROM:6E32                 nega
ROM:6E33
ROM:6E33 loc_6E33:
ROM:6E33                 ldb     #$20 ;  
ROM:6E35                 mul
ROM:6E36                 tst     <DPbyte_63
ROM:6E38                 bpl     loc_6E3E
ROM:6E3A                 coma
ROM:6E3B                 negb
ROM:6E3C                 sbca    #$FF
ROM:6E3E
ROM:6E3E loc_6E3E:
ROM:6E3E                 std     <DPbyte_A5
ROM:6E40                 lda     <DPbyte_7D      ; Joystick X
ROM:6E42                 bpl     loc_6E45
ROM:6E44                 coma
ROM:6E45
ROM:6E45 loc_6E45:
ROM:6E45                 ldb     #2
ROM:6E47                 mul
ROM:6E48                 tst     <DPbyte_7D      ; Joystick X
ROM:6E4A                 bpl     loc_6E50
ROM:6E4C                 coma
ROM:6E4D                 negb
ROM:6E4E                 sbca    #$FF
ROM:6E50
ROM:6E50 loc_6E50:
ROM:6E50                 addd    <DPbyte_A5
ROM:6E52                 tst     <DPbyte_63
ROM:6E54                 bne     sub_6E70        ; Towers collision roll limits
ROM:6E56                 subd    <DPbyte_A3
ROM:6E58                 ble     loc_6E65
ROM:6E5A                 cmpd    #$10
ROM:6E5E                 ble     loc_6E63
ROM:6E60                 ldd     #$10
ROM:6E63
ROM:6E63 loc_6E63:
ROM:6E63                 bra     loc_6E6E
ROM:6E65 ; ---------------------------------------------------------------------------
ROM:6E65
ROM:6E65 loc_6E65:
ROM:6E65                 cmpd    #$FFF0
ROM:6E69                 bge     loc_6E6E
ROM:6E6B                 ldd     #$FFF0
ROM:6E6E
ROM:6E6E loc_6E6E:
ROM:6E6E                 bra     loc_6E88
ROM:6E6E ; End of function sub_6E22
ROM:6E6E
ROM:6E70
ROM:6E70 ; =============== S U B R O U T I N E =======================================
ROM:6E70
ROM:6E70 ; Towers collision roll limits
ROM:6E70
ROM:6E70 sub_6E70:
ROM:6E70                 subd    <DPbyte_A3
ROM:6E72                 ble     loc_6E7F
ROM:6E74                 cmpd    #$32 ; 2
ROM:6E78                 ble     loc_6E7D
ROM:6E7A                 ldd     #$32 ; 2
ROM:6E7D
ROM:6E7D loc_6E7D:
ROM:6E7D                 bra     loc_6E88
ROM:6E7F ; ---------------------------------------------------------------------------
ROM:6E7F
ROM:6E7F loc_6E7F:
ROM:6E7F                 cmpd    #$FFCE
ROM:6E83                 bge     loc_6E88
ROM:6E85                 ldd     #$FFCE
ROM:6E88
ROM:6E88 loc_6E88:
ROM:6E88                 tfr     b, a
ROM:6E8A                 adda    >byte_4878
ROM:6E8D                 sta     >byte_4878
ROM:6E90                 sex
ROM:6E91                 addd    <DPbyte_A3
ROM:6E93                 std     <DPbyte_A3
ROM:6E95                 ldx     #byte_4870
ROM:6E98                 jsr     sub_7111        ; Some joystick driven matrix rotations for pitch/roll
ROM:6E9B                 beq     locret_6EA0
ROM:6E9D                 jsr     sub_CE24        ; Run math program $00 Roll on Matrix 4
ROM:6EA0
ROM:6EA0 locret_6EA0:
ROM:6EA0                 rts
ROM:6EA0 ; End of function sub_6E70
ROM:6EA0
ROM:6EA1
ROM:6EA1 ; =============== S U B R O U T I N E =======================================
ROM:6EA1
ROM:6EA1
ROM:6EA1 nullsub_1:
ROM:6EA1                 rts
ROM:6EA1 ; End of function nullsub_1
ROM:6EA1
ROM:6EA2
ROM:6EA2 ; =============== S U B R O U T I N E =======================================
ROM:6EA2
ROM:6EA2
ROM:6EA2 sub_6EA2:
ROM:6EA2                 ldx     byte_4B32
ROM:6EA5                 bne     loc_6EAA
ROM:6EA7                 ldx     #byte_4900      ; 3x Tie fighter data structure ($19 bytes per Tie)
ROM:6EAA
ROM:6EAA loc_6EAA:
ROM:6EAA                 lda     3,x
ROM:6EAC                 cmpa    #1
ROM:6EAE                 bne     loc_6EB9
ROM:6EB0                 lda     6,x
ROM:6EB2                 bne     loc_6EB9
ROM:6EB4                 stx     <DPbyte_64      ; Pointer to Tie fighter data
ROM:6EB6                 jmp     loc_6EF7        ; Point BIC to 5080
ROM:6EB9 ; ---------------------------------------------------------------------------
ROM:6EB9
ROM:6EB9 loc_6EB9:
ROM:6EB9                 lda     word_4B3B+1
ROM:6EBC                 ble     loc_6EC3
ROM:6EBE                 lda     #9
ROM:6EC0                 sta     word_4B3B+1
ROM:6EC3
ROM:6EC3 loc_6EC3:
ROM:6EC3                 leax    $19,x
ROM:6EC6                 cmpx    #byte_4900+$4B  ; 3x Tie fighter data structure ($19 bytes per Tie)
ROM:6EC9                 bcs     loc_6EAA
ROM:6ECB
ROM:6ECB loc_6ECB:
ROM:6ECB                 ldd     #0
ROM:6ECE                 std     byte_4B32
ROM:6ED1                 lda     MReg40          ; Matrix 4
ROM:6ED4                 bmi     loc_6EDB
ROM:6ED6                 ldb     MReg42
ROM:6ED9                 bra     loc_6EE0
ROM:6EDB ; ---------------------------------------------------------------------------
ROM:6EDB
ROM:6EDB loc_6EDB:
ROM:6EDB                 ldb     #$7F ; 
ROM:6EDD                 subb    MReg42
ROM:6EE0
ROM:6EE0 loc_6EE0:
ROM:6EE0                 stb     >word_486D
ROM:6EE3                 lda     MReg40          ; Matrix 4
ROM:6EE6                 bmi     loc_6EED
ROM:6EE8                 ldb     MReg41
ROM:6EEB                 bra     loc_6EF2
ROM:6EED ; ---------------------------------------------------------------------------
ROM:6EED
ROM:6EED loc_6EED:
ROM:6EED                 ldb     #$7F ; 
ROM:6EEF                 subb    MReg41
ROM:6EF2
ROM:6EF2 loc_6EF2:
ROM:6EF2                 comb
ROM:6EF3                 stb     >byte_4876
ROM:6EF6                 rts
ROM:6EF7 ; ---------------------------------------------------------------------------
ROM:6EF7
ROM:6EF7 loc_6EF7:                               ; BIC points to Matrix 4
ROM:6EF7                 lda     #$10
ROM:6EF9                 jsr     sub_CE0C        ; Copy transform data from [BIC] to matrix 2
ROM:6EFC                 jsr     sub_7160        ; Update Roll, Pitch and Yaw for [A, B, C][x, y, z] 2
ROM:6EFF                 ldx     <DPbyte_64      ; Pointer to Tie fighter data
ROM:6F01                 stx     byte_4B32
ROM:6F04                 clra
ROM:6F05                 ldb     2,x
ROM:6F07                 addb    #3
ROM:6F09                 std     MW1
ROM:6F0C                 lda     #$67 ; g
ROM:6F0E                 jsr     Math_Run_Start  ; Do math program run
ROM:6F11                 lda     MReg00          ; Math result X
ROM:6F14                 ble     loc_6F39
ROM:6F16                 ldd     MReg01          ; Math result Y
ROM:6F19
ROM:6F19 loc_6F19:                               ; Math result X
ROM:6F19                 asl     MReg00+1
ROM:6F1C                 rol     MReg00          ; Math result X
ROM:6F1F                 bvs     loc_6F54
ROM:6F21                 aslb
ROM:6F22                 rola
ROM:6F23                 bvc     loc_6F29
ROM:6F25                 rora
ROM:6F26                 rorb
ROM:6F27                 bra     loc_6F54
ROM:6F29 ; ---------------------------------------------------------------------------
ROM:6F29
ROM:6F29 loc_6F29:                               ; Math result Z
ROM:6F29                 asl     MReg02+1
ROM:6F2C                 rol     MReg02          ; Math result Z
ROM:6F2F                 bvc     loc_6F19
ROM:6F31                 ror     MReg02          ; Math result Z
ROM:6F34                 ror     MReg02+1        ; Math result Z
ROM:6F37                 bra     loc_6F54
ROM:6F39 ; ---------------------------------------------------------------------------
ROM:6F39
ROM:6F39 loc_6F39:                               ; Math result Y
ROM:6F39                 ldd     MReg01
ROM:6F3C                 orab    #1
ROM:6F3E
ROM:6F3E loc_6F3E:
ROM:6F3E                 aslb
ROM:6F3F                 rola
ROM:6F40                 bvc     loc_6F46
ROM:6F42                 rora
ROM:6F43                 rorb
ROM:6F44                 bra     loc_6F54
ROM:6F46 ; ---------------------------------------------------------------------------
ROM:6F46
ROM:6F46 loc_6F46:                               ; Math result Z
ROM:6F46                 asl     MReg02+1
ROM:6F49                 rol     MReg02          ; Math result Z
ROM:6F4C                 bvc     loc_6F3E
ROM:6F4E                 ror     MReg02          ; Math result Z
ROM:6F51                 ror     MReg02+1        ; Math result Z
ROM:6F54
ROM:6F54 loc_6F54:
ROM:6F54                 coma
ROM:6F55                 sta     >byte_4876
ROM:6F58                 ldb     MReg02          ; Math result Z
ROM:6F5B                 stb     >word_486D
ROM:6F5E                 rts
ROM:6F5E ; End of function sub_6EA2
ROM:6F5E
ROM:6F5F
ROM:6F5F ; =============== S U B R O U T I N E =======================================
ROM:6F5F
ROM:6F5F
ROM:6F5F sub_6F5F:
ROM:6F5F                 ldd     <DPbyte_42
ROM:6F61                 jsr     Shift_D_L_7
ROM:6F64                 std     <Stars_XT
ROM:6F66                 rts
ROM:6F66 ; End of function sub_6F5F
ROM:6F66
ROM:6F67
ROM:6F67 ; =============== S U B R O U T I N E =======================================
ROM:6F67
ROM:6F67
ROM:6F67 sub_6F67:
ROM:6F67                 ldd     <DPbyte_42
ROM:6F69                 jsr     sub_CDA9        ; Shift D register left
ROM:6F6C                 std     <Stars_XT
ROM:6F6E                 rts
ROM:6F6E ; End of function sub_6F67
ROM:6F6E
ROM:6F6F
ROM:6F6F ; =============== S U B R O U T I N E =======================================
ROM:6F6F
ROM:6F6F
ROM:6F6F sub_6F6F:
ROM:6F6F                 ldd     MReg43
ROM:6F72                 addd    MReg4C
ROM:6F75                 bvc     loc_6F7D
ROM:6F77                 inc     <DPbyte_A7
ROM:6F79                 bvc     loc_6F7D
ROM:6F7B                 dec     <DPbyte_A7
ROM:6F7D
ROM:6F7D loc_6F7D:
ROM:6F7D                 std     MReg4C
ROM:6F80                 std     MReg20          ; XT2
ROM:6F83                 ldd     MReg43
ROM:6F86                 jsr     Shift_D_L_4
ROM:6F89                 ldb     <DPbyte_7D      ; Joystick X
ROM:6F8B                 bpl     loc_6F8E
ROM:6F8D                 comb
ROM:6F8E
ROM:6F8E loc_6F8E:
ROM:6F8E                 aslb
ROM:6F8F                 mul
ROM:6F90                 tst     <DPbyte_7D      ; Joystick X
ROM:6F92                 bge     loc_6F98
ROM:6F94                 coma
ROM:6F95                 negb
ROM:6F96                 sbca    #$FF
ROM:6F98
ROM:6F98 loc_6F98:
ROM:6F98                 jsr     Shift_D_R_4
ROM:6F9B                 std     MReg47
ROM:6F9E                 addd    MReg4D
ROM:6FA1                 std     MReg4D
ROM:6FA4                 std     MReg21          ; YT2
ROM:6FA7                 ldd     MReg43
ROM:6FAA                 jsr     Shift_D_L_4
ROM:6FAD                 ldb     <DPbyte_7F      ; Joystick Y
ROM:6FAF                 bpl     loc_6FB2
ROM:6FB1                 comb
ROM:6FB2
ROM:6FB2 loc_6FB2:
ROM:6FB2                 nop
ROM:6FB3                 mul
ROM:6FB4                 tst     <DPbyte_7F      ; Joystick Y
ROM:6FB6                 bpl     loc_6FBC
ROM:6FB8                 coma
ROM:6FB9                 negb
ROM:6FBA                 sbca    #$FF
ROM:6FBC
ROM:6FBC loc_6FBC:
ROM:6FBC                 jsr     Shift_D_R_4
ROM:6FBF                 std     MReg4B
ROM:6FC2                 addd    MReg4E
ROM:6FC5                 cmpd    #$1C00
ROM:6FC9                 ble     loc_6FD0
ROM:6FCB                 ldd     #$1C00
ROM:6FCE                 bra     loc_6FD9
ROM:6FD0 ; ---------------------------------------------------------------------------
ROM:6FD0
ROM:6FD0 loc_6FD0:
ROM:6FD0                 cmpd    #$200
ROM:6FD4                 bge     loc_6FD9
ROM:6FD6                 ldd     #$200
ROM:6FD9
ROM:6FD9 loc_6FD9:
ROM:6FD9                 std     MReg4E
ROM:6FDC                 std     MReg22          ; ZT2
ROM:6FDF                 rts
ROM:6FDF ; End of function sub_6F6F
ROM:6FDF
ROM:6FE0
ROM:6FE0 ; =============== S U B R O U T I N E =======================================
ROM:6FE0
ROM:6FE0
ROM:6FE0 sub_6FE0:
ROM:6FE0                 ldd     MReg4E
ROM:6FE3                 cmpd    #$380
ROM:6FE7                 ble     loc_6FEF
ROM:6FE9                 subd    #$180
ROM:6FEC                 std     MReg4E
ROM:6FEF
ROM:6FEF loc_6FEF:
ROM:6FEF                 bra     loc_7000
ROM:6FEF ; End of function sub_6FE0
ROM:6FEF
ROM:6FF1
ROM:6FF1 ; =============== S U B R O U T I N E =======================================
ROM:6FF1
ROM:6FF1
ROM:6FF1 sub_6FF1:
ROM:6FF1                 ldd     MReg4E
ROM:6FF4                 cmpd    #$F300
ROM:6FF8                 ble     loc_7000
ROM:6FFA                 subd    #$100
ROM:6FFD                 std     MReg4E
ROM:7000
ROM:7000 loc_7000:
ROM:7000                 ldd     MReg43
ROM:7003                 addd    MReg4C
ROM:7006                 std     MReg4C
ROM:7009                 ldd     #$300
ROM:700C                 subd    MReg43
ROM:700F                 jsr     Shift_D_R_3
ROM:7012                 addd    MReg43
ROM:7015                 std     MReg43
ROM:7018                 lda     byte_4B15
ROM:701B                 lsra
ROM:701C                 bcc     loc_7023        ; Towers roll calcs
ROM:701E                 ldd     #$BB8
ROM:7021                 bra     loc_7026
ROM:7023 ; ---------------------------------------------------------------------------
ROM:7023
ROM:7023 loc_7023:                               ; Towers roll calcs
ROM:7023                 ldd     #$F448
ROM:7026
ROM:7026 loc_7026:                               ; Sine for rotation
ROM:7026                 std     MReg11
ROM:7029                 ldd     #$3EEB
ROM:702C                 std     MReg12          ; Cosine for rotation
ROM:702F                 jsr     sub_CE24        ; Run math program $00 Roll on Matrix 4
ROM:7032                 ldd     #0
ROM:7035                 subd    <DPbyte_A3
ROM:7037                 jsr     sub_6E70        ; Towers collision roll limits
ROM:703A                 rts
ROM:703A ; End of function sub_6FF1
ROM:703A
ROM:703B
ROM:703B ; =============== S U B R O U T I N E =======================================
ROM:703B
ROM:703B ; Trench viewpoint calc
ROM:703B
ROM:703B sub_703B:
ROM:703B                 ldd     MReg43
ROM:703E                 addd    MReg4C
ROM:7041                 std     MReg4C
ROM:7044                 std     MReg20          ; XT2
ROM:7047                 ldd     MReg43
ROM:704A                 jsr     Shift_D_L_4
ROM:704D                 ldb     <DPbyte_7D      ; Joystick X
ROM:704F                 bpl     loc_7052
ROM:7051                 comb
ROM:7052
ROM:7052 loc_7052:
ROM:7052                 mul
ROM:7053                 tst     <DPbyte_7D      ; Joystick X
ROM:7055                 bge     loc_705B
ROM:7057                 coma
ROM:7058                 negb
ROM:7059                 sbca    #$FF
ROM:705B
ROM:705B loc_705B:                               ; Trench X min/max limits
ROM:705B                 jsr     Shift_D_R_4
ROM:705E                 std     MReg47
ROM:7061                 addd    MReg4D
ROM:7064                 cmpd    #$1FF
ROM:7068                 ble     loc_706D
ROM:706A                 ldd     #$1FF
ROM:706D
ROM:706D loc_706D:
ROM:706D                 cmpd    #$FE01
ROM:7071                 bge     loc_7076
ROM:7073                 ldd     #$FE01
ROM:7076
ROM:7076 loc_7076:
ROM:7076                 std     MReg4D
ROM:7079                 std     MReg21          ; YT2
ROM:707C                 ldd     MReg43
ROM:707F                 aslb
ROM:7080                 rola
ROM:7081                 aslb
ROM:7082                 rola
ROM:7083                 aslb
ROM:7084                 rola
ROM:7085                 aslb
ROM:7086                 rola
ROM:7087                 ldb     <DPbyte_7F      ; Joystick Y
ROM:7089                 bpl     loc_708C
ROM:708B                 comb
ROM:708C
ROM:708C loc_708C:
ROM:708C                 aslb
ROM:708D                 mul
ROM:708E                 tst     <DPbyte_7F      ; Joystick Y
ROM:7090                 bpl     loc_7096
ROM:7092                 coma
ROM:7093                 negb
ROM:7094                 sbca    #$FF
ROM:7096
ROM:7096 loc_7096:
ROM:7096                 asra
ROM:7097                 rorb
ROM:7098                 asra
ROM:7099                 rorb
ROM:709A                 asra
ROM:709B                 rorb
ROM:709C                 asra
ROM:709D                 rorb
ROM:709E                 std     MReg4B
ROM:70A1                 addd    MReg4E
ROM:70A4                 cmpd    #$FEFF          ; Trench Y top/bottom limits
ROM:70A8                 ble     loc_70AD
ROM:70AA                 ldd     #$FEFF
ROM:70AD
ROM:70AD loc_70AD:
ROM:70AD                 cmpd    #$F201
ROM:70B1                 bge     loc_70B6
ROM:70B3                 ldd     #$F201
ROM:70B6
ROM:70B6 loc_70B6:
ROM:70B6                 std     MReg4E
ROM:70B9                 std     MReg22          ; ZT2
ROM:70BC                 rts
ROM:70BC ; End of function sub_703B
ROM:70BC
ROM:70BD
ROM:70BD ; =============== S U B R O U T I N E =======================================
ROM:70BD
ROM:70BD
ROM:70BD sub_70BD:
ROM:70BD                 ldx     #byte_4866      ; Joystick pitch data structure
ROM:70C0                 jsr     sub_70F0        ; Some joystick data calculation ?
ROM:70C3                 jsr     sub_7111        ; Some joystick driven matrix rotations for pitch/roll
ROM:70C6                 beq     locret_70CB
ROM:70C8                 jsr     sub_CE2F        ; Run math program $0E Pitch on Matrix 4
ROM:70CB
ROM:70CB locret_70CB:
ROM:70CB                 rts
ROM:70CB ; End of function sub_70BD
ROM:70CB
ROM:70CC
ROM:70CC ; =============== S U B R O U T I N E =======================================
ROM:70CC
ROM:70CC
ROM:70CC sub_70CC:
ROM:70CC                 ldx     #byte_486F      ; Joystick roll data structure
ROM:70CF                 jsr     sub_70F0        ; Some joystick data calculation ?
ROM:70D2                 jsr     sub_7111        ; Some joystick driven matrix rotations for pitch/roll
ROM:70D5                 beq     locret_70DA
ROM:70D7                 jsr     sub_CE3A        ; Run math program $1C Yaw on Matrix 4
ROM:70DA
ROM:70DA locret_70DA:
ROM:70DA                 rts
ROM:70DA ; End of function sub_70CC
ROM:70DA
ROM:70DB
ROM:70DB ; =============== S U B R O U T I N E =======================================
ROM:70DB
ROM:70DB
ROM:70DB sub_70DB:
ROM:70DB                 orcc    #$10            ; Disable interrupts
ROM:70DD                 ldd     <DPbyte_6B
ROM:70DF                 std     <DPbyte_7F      ; Joystick Y
ROM:70E1                 ldd     <DPbyte_74
ROM:70E3                 std     <DPbyte_7D      ; Joystick X
ROM:70E5                 ldd     <DPbyte_2F
ROM:70E7                 std     <DPbyte_7B
ROM:70E9                 ldd     <DPbyte_2D
ROM:70EB                 std     <DPbyte_79
ROM:70ED                 andcc   #$EF ; n      ; Enable interrupts
ROM:70EF                 rts
ROM:70EF ; End of function sub_70DB
ROM:70EF
ROM:70F0
ROM:70F0 ; =============== S U B R O U T I N E =======================================
ROM:70F0
ROM:70F0 ; Some joystick data calculation ?
ROM:70F0
ROM:70F0 sub_70F0:
ROM:70F0                 lda     7,x
ROM:70F2                 bpl     loc_70F5
ROM:70F4                 coma
ROM:70F5
ROM:70F5 loc_70F5:
ROM:70F7                 mul
ROM:70F8                 nop
ROM:70F9                 nop
ROM:70FA                 nop
ROM:70FB                 ldb     7,x
ROM:70FD                 bmi     loc_7107
ROM:70FF                 adda    8,x
ROM:7101                 bvc     loc_7105
ROM:7103                 lda     #$7F ; 
ROM:7105
ROM:7105 loc_7105:
ROM:7105                 bra     loc_710E
ROM:7107 ; ---------------------------------------------------------------------------
ROM:7107
ROM:7107 loc_7107:
ROM:7107                 nega
ROM:7108                 adda    8,x
ROM:710A                 bvc     loc_710E
ROM:710E
ROM:710E loc_710E:
ROM:710E                 sta     8,x
ROM:7110                 rts
ROM:7110 ; End of function sub_70F0
ROM:7110
ROM:7111
ROM:7111 ; =============== S U B R O U T I N E =======================================
ROM:7111
ROM:7111 ; Some joystick driven matrix rotations for pitch/roll
ROM:7111
ROM:7111 sub_7111:
ROM:7111                 lda     8,x
ROM:7113                 bpl     loc_7116
ROM:7115                 nega
ROM:7116
ROM:7116 loc_7116:
ROM:7116                 cmpa    #$4E ; N
ROM:7118                 bcs     loc_713A
ROM:711A                 ldd     #$3FC2
ROM:711D                 std     MReg12          ; Cosine for rotation
ROM:7120                 lda     8,x
ROM:7122                 bpl     loc_712F
ROM:7124                 adda    #$4E ; N
ROM:7126                 sta     8,x
ROM:7128                 ldd     #$FA70
ROM:712B                 std     MReg11          ; Sine for rotation
ROM:712E                 rts
ROM:712F ; ---------------------------------------------------------------------------
ROM:712F
ROM:712F loc_712F:
ROM:712F                 suba    #$4E ; N
ROM:7131                 sta     8,x
ROM:7133                 ldd     #$590
ROM:7136                 std     MReg11          ; Sine for rotation
ROM:7139                 rts
ROM:713A ; ---------------------------------------------------------------------------
ROM:713A
ROM:713A loc_713A:
ROM:713A                 cmpa    #$E
ROM:713C                 bcs     loc_715E
ROM:713E                 ldd     #$3FFE
ROM:7141                 std     MReg12          ; Cosine for rotation
ROM:7144                 lda     8,x
ROM:7146                 bpl     loc_7153
ROM:7148                 adda    #$E
ROM:714A                 sta     8,x
ROM:714C                 ldd     #$FF00
ROM:714F                 std     MReg11          ; Sine for rotation
ROM:7152                 rts
ROM:7153 ; ---------------------------------------------------------------------------
ROM:7153
ROM:7153 loc_7153:
ROM:7153                 suba    #$E
ROM:7155                 sta     8,x
ROM:7157                 ldd     #$100
ROM:715A                 std     MReg11          ; Sine for rotation
ROM:715D                 rts
ROM:715E ; ---------------------------------------------------------------------------
ROM:715E
ROM:715E loc_715E:
ROM:715E                 clrb
ROM:715F                 rts
ROM:715F ; End of function sub_7111
ROM:715F
ROM:7160
ROM:7160 ; =============== S U B R O U T I N E =======================================
ROM:7160
ROM:7160 ; Update Roll, Pitch and Yaw for [A, B, C][x, y, z] 2
ROM:7160
ROM:7160 sub_7160:
ROM:7160                 lda     >byte_486E
ROM:7163                 beq     loc_7181
ROM:7165                 jsr     sub_71C4
ROM:7168                 lda     >byte_486E
ROM:716B                 bpl     loc_7176
ROM:716D                 ldd     #0
ROM:7170                 subd    MReg11          ; Sine for rotation
ROM:7173                 std     MReg11          ; Sine for rotation
ROM:7176
ROM:7176 loc_7176:
ROM:7176                 clra
ROM:7177                 ldb     #5              ; Point BIC to[ A,B,C ][x, y, z] 2
ROM:7179                 std     MW1
ROM:717C                 lda     #$E             ; Pitch program
ROM:717E                 jsr     Math_Run_Start  ; Do math program run
ROM:7181
ROM:7181 loc_7181:
ROM:7181                 lda     >byte_4877
ROM:7184                 beq     loc_71A2
ROM:7186                 jsr     sub_71C4
ROM:7189                 lda     >byte_4877
ROM:718C                 bpl     loc_7197
ROM:718E                 ldd     #0
ROM:7191                 subd    MReg11          ; Sine for rotation
ROM:7194                 std     MReg11          ; Sine for rotation
ROM:7197
ROM:7197 loc_7197:
ROM:7197                 clra
ROM:7198                 ldb     #5              ; Point BIC to[ A,B,C ][x, y, z] 2
ROM:719A                 std     MW1
ROM:719D                 lda     #$1C            ; Yaw program
ROM:719F                 jsr     Math_Run_Start  ; Do math program run
ROM:71A2
ROM:71A2 loc_71A2:
ROM:71A2                 lda     >byte_4878
ROM:71A5                 beq     locret_71C3
ROM:71A7                 jsr     sub_71C4
ROM:71AA                 lda     >byte_4878
ROM:71AD                 bpl     loc_71B8
ROM:71AF                 ldd     #0
ROM:71B2                 subd    MReg11          ; Sine for rotation
ROM:71B5                 std     MReg11          ; Sine for rotation
ROM:71B8
ROM:71B8 loc_71B8:
ROM:71B8                 clra
ROM:71B9                 ldb     #5              ; Point BIC to[ A,B,C ][x, y, z] 2
ROM:71BB                 std     MW1
ROM:71BE                 lda     #0              ; Roll program
ROM:71C0                 jsr     Math_Run_Start  ; Do math program run
ROM:71C3
ROM:71C3 locret_71C3:
ROM:71C3                 rts
ROM:71C3 ; End of function sub_7160
ROM:71C3
ROM:71C4
ROM:71C4 ; =============== S U B R O U T I N E =======================================
ROM:71C4
ROM:71C4
ROM:71C4 sub_71C4:
ROM:71C4                 bpl     loc_71C7
ROM:71C6                 nega
ROM:71C7
ROM:71C7 loc_71C7:
ROM:71C7                 ldb     #3
ROM:71C9                 mul
ROM:71CA                 ldx     #(loc_71D9+1)
ROM:71CD                 abx
ROM:71CE                 ldd     ,x
ROM:71D0                 std     MReg11          ; Sine for rotation
ROM:71D3                 ldb     2,x
ROM:71D5                 sex
ROM:71D6                 addd    #$4000
ROM:71D9
ROM:71D9 loc_71D9:                               ; Cosine for rotation
ROM:71D9                 std     MReg12
ROM:71DC                 rts
ROM:71DC ; End of function sub_71C4
ROM:71DC
ROM:71DC ; ---------------------------------------------------------------------------
ROM:72C7
ROM:72C7 ; =============== S U B R O U T I N E =======================================
ROM:72C7
ROM:72C7 ; Space wave
ROM:72C7
ROM:72C7 sub_72C7:
ROM:72C7                 jsr     sub_6112        ; Insert vector data for four blue dots in screen corners
ROM:72CA                 lda     #$10            ; BIC points to Matrix 4
ROM:72CC                 jsr     sub_CE0C        ; Copy transform data from [BIC] to matrix 2
ROM:72CF                 jsr     sub_7160        ; Update Roll, Pitch and Yaw for [A, B, C][x, y, z] 2
ROM:72D2                 jsr     sub_761D        ; Display score
ROM:72D5                 lda     byte_4B2D
ROM:72D8                 bne     loc_72F0
ROM:72DA                 ldd     word_4B0E       ; Attract screen/game phase  timer
ROM:72E1                 bcc     loc_72F0
ROM:72E3                 andb    #$10
ROM:72E5                 bne     loc_72EB
ROM:72E7                 ldb     #$4C ; L
ROM:72E9                 bra     loc_72ED
ROM:72EB ; ---------------------------------------------------------------------------
ROM:72EB
ROM:72EB loc_72EB:                               ; Shoot Tie Fighters text index
ROM:72EB                 ldb     #$4D ; M
ROM:72ED
ROM:72ED loc_72ED:                               ; Print text string from pointer table
ROM:72ED                 jsr     sub_E7C7
ROM:72F0
ROM:72F0 loc_72F0:                               ; Insert vector instructions for shields
ROM:72F0                 jsr     sub_95A7
ROM:72F3                 jsr     sub_7765        ; Space wave sub_7765
ROM:72F6                 jsr     sub_B6B9        ; Insert vector instructions at joystick position for laser explosion 2
ROM:72F9                 jsr     sub_CD80        ; Starfield
ROM:72FC                 jsr     sub_BA12        ; Process tie/tower/bunker explosions
ROM:72FF                 jsr     sub_AE60
ROM:7302                 jsr     sub_786A        ; Process tie fighters and insert vectors
ROM:7305                 jsr     sub_AAE4        ; Fireball processing
ROM:7308                 jsr     sub_B32B
ROM:730B                 jsr     sub_AEBD
ROM:730E                 jsr     sub_98B0        ; Insert vector laser explosion small circle
ROM:7311                 jsr     sub_612F        ; Vector instructions end
ROM:7314                 rts
ROM:7314 ; End of function sub_72C7
ROM:7314
ROM:7315
ROM:7315 ; =============== S U B R O U T I N E =======================================
ROM:7315
ROM:7315
ROM:7315 sub_7315:
ROM:7315                 jsr     sub_6112        ; Insert vector data for four blue dots in screen corners
ROM:7318                 lda     #$10            ; BIC points to Matrix 4
ROM:731A                 jsr     sub_CE0C        ; Copy transform data from [BIC] to matrix 2
ROM:731D                 jsr     sub_7160        ; Update Roll, Pitch and Yaw for [A, B, C][x, y, z] 2
ROM:7320                 jsr     sub_761D        ; Display score
ROM:7323                 jsr     sub_95A7        ; Insert vector instructions for shields
ROM:7326                 jsr     sub_CD80        ; Starfield
ROM:7329                 jsr     sub_BA12        ; Process tie/tower/bunker explosions
ROM:732C                 jsr     sub_786A        ; Process tie fighters and insert vectors
ROM:732F                 jsr     sub_AAE4        ; Fireball processing
ROM:7332                 jsr     sub_7707        ; Game Over text handling
ROM:7335                 jsr     sub_98B0        ; Insert vector laser explosion small circle
ROM:7338                 jsr     sub_612F        ; Vector instructions end
ROM:733B                 rts
ROM:733B ; End of function sub_7315
ROM:733B
ROM:733C
ROM:733C ; =============== S U B R O U T I N E =======================================
ROM:733C
ROM:733C ; End of space wave? Also Trench catwalks
ROM:733C
ROM:733C sub_733C:
ROM:733C                 jsr     sub_6112        ; Insert vector data for four blue dots in screen corners
ROM:733F                 lda     #$10            ; BIC points to Matrix 4
ROM:7341                 jsr     sub_CE0C        ; Copy transform data from [BIC] to matrix 2
ROM:7344                 jsr     sub_7160        ; Update Roll, Pitch and Yaw for [A, B, C][x, y, z] 2
ROM:7347                 jsr     sub_761D        ; Display score
ROM:734A                 jsr     sub_95A7        ; Insert vector instructions for shields
ROM:734D                 jsr     sub_B6B9        ; Insert vector instructions at joystick position for laser explosion 2
ROM:7350                 jsr     sub_CD80        ; Starfield
ROM:7353                 jsr     sub_7765        ; Space wave sub_7765
ROM:7356                 jsr     sub_BA12        ; Process tie/tower/bunker explosions
ROM:7359                 jsr     sub_AE60
ROM:735C                 jsr     sub_786A        ; Process tie fighters and insert vectors
ROM:735F                 jsr     sub_AAE4        ; Fireball processing
ROM:7362                 jsr     sub_B32B
ROM:7365                 jsr     sub_AEBD
ROM:7368                 jsr     sub_98B0        ; Insert vector laser explosion small circle
ROM:736B                 jsr     sub_612F        ; Vector instructions end
ROM:736E                 rts
ROM:736E ; End of function sub_733C
ROM:736E
ROM:736F
ROM:736F ; =============== S U B R O U T I N E =======================================
ROM:736F
ROM:736F
ROM:736F sub_736F:
ROM:736F                 jsr     sub_6112        ; Insert vector data for four blue dots in screen corners
ROM:7372                 lda     #$10            ; BIC points to Matrix 4
ROM:7374                 jsr     sub_CE0C        ; Copy transform data from [BIC] to matrix 2
ROM:7377                 jsr     sub_7160        ; Update Roll, Pitch and Yaw for [A, B, C][x, y, z] 2
ROM:737A                 jsr     sub_761D        ; Display score
ROM:737D                 jsr     sub_95A7        ; Insert vector instructions for shields
ROM:7380                 jsr     sub_B6B9        ; Insert vector instructions at joystick position for laser explosion 2
ROM:7383                 jsr     sub_CD80        ; Starfield
ROM:7386                 jsr     sub_77A4
ROM:7389                 jsr     sub_98B0        ; Insert vector laser explosion small circle
ROM:738C                 jsr     sub_612F        ; Vector instructions end
ROM:738F                 rts
ROM:738F ; End of function sub_736F
ROM:738F
ROM:7390
ROM:7390 ; =============== S U B R O U T I N E =======================================
ROM:7390
ROM:7390 ; Towers/Bunkers wave
ROM:7390
ROM:7390 sub_7390:
ROM:7390                 jsr     sub_6112        ; Towers/Bunkers wave
ROM:7393                 lda     #$10            ; BIC points to Matrix 4
ROM:7395                 jsr     sub_CE0C        ; Copy transform data from [BIC] to matrix 2
ROM:7398                 jsr     sub_7160        ; Update Roll, Pitch and Yaw for [A, B, C][x, y, z] 2
ROM:739B                 jsr     sub_761D        ; Display score
ROM:739E                 jsr     sub_768D        ; Display tower count and hit score
ROM:73A1                 jsr     sub_95A7        ; Insert vector instructions for shields
ROM:73A4                 jsr     sub_B6B9        ; Insert vector instructions at joystick position for laser explosion 2
ROM:73A7                 jsr     sub_CD8C        ; Towers surface dots
ROM:73AA                 jsr     sub_AE60
ROM:73AD                 jsr     sub_AAE4        ; Fireball processing
ROM:73B0                 jsr     sub_A214
ROM:73B3                 jsr     sub_B2D2
ROM:73B6                 jsr     sub_AEBD
ROM:73B9                 jsr     sub_BA12        ; Process tie/tower/bunker explosions
ROM:73BC                 jsr     sub_98B0        ; Insert vector laser explosion small circle
ROM:73BF                 jsr     sub_612F        ; Vector instructions end
ROM:73C2                 rts
ROM:73C2 ; End of function sub_7390
ROM:73C2
ROM:73C3
ROM:73C3 ; =============== S U B R O U T I N E =======================================
ROM:73C3
ROM:73C3 ; Towers
ROM:73C3
ROM:73C3 sub_73C3:
ROM:73C3                 jsr     sub_6112        ; Insert vector data for four blue dots in screen corners
ROM:73C6                 lda     #$10            ; BIC points to Matrix 4
ROM:73C8                 jsr     sub_CE0C        ; Copy transform data from [BIC] to matrix 2
ROM:73CB                 jsr     sub_7160        ; Update Roll, Pitch and Yaw for [A, B, C][x, y, z] 2
ROM:73CE                 jsr     sub_761D        ; Display score
ROM:73D1                 jsr     sub_768D        ; Display tower count and hit score
ROM:73D4                 jsr     sub_95A7        ; Insert vector instructions for shields
ROM:73D7                 jsr     sub_CD8C        ; Towers surface dots
ROM:73DA                 jsr     sub_AAE4        ; Fireball processing
ROM:73DD                 jsr     sub_A214
ROM:73E0                 jsr     sub_7707        ; Game Over text handling
ROM:73E3                 jsr     sub_98B0        ; Insert vector laser explosion small circle
ROM:73E6                 jsr     sub_612F        ; Vector instructions end
ROM:73E9                 rts
ROM:73E9 ; End of function sub_73C3
ROM:73E9
ROM:73EA
ROM:73EA ; =============== S U B R O U T I N E =======================================
ROM:73EA
ROM:73EA ; Towers
ROM:73EA
ROM:73EA sub_73EA:
ROM:73EA                 jsr     sub_6112        ; Insert vector data for four blue dots in screen corners
ROM:73ED                 lda     #$10            ; BIC points to Matrix 4
ROM:73EF                 jsr     sub_CE0C        ; Copy transform data from [BIC] to matrix 2
ROM:73F2                 jsr     sub_7160        ; Update Roll, Pitch and Yaw for [A, B, C][x, y, z] 2
ROM:73F5                 jsr     sub_761D        ; Display score
ROM:73F8                 jsr     sub_76D3        ; Towers left to shoot count
ROM:73FB                 ldb     #$4F ; O
ROM:73FD                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:7400                 jsr     sub_95A7        ; Insert vector instructions for shields
ROM:7403                 jsr     sub_B6B9        ; Insert vector instructions at joystick position for laser explosion 2
ROM:7406                 jsr     sub_CD8C        ; Towers surface dots
ROM:7409                 jsr     sub_BA12        ; Process tie/tower/bunker explosions
ROM:740C                 jsr     sub_98B0        ; Insert vector laser explosion small circle
ROM:740F                 jsr     sub_612F        ; Vector instructions end
ROM:7412                 rts
ROM:7412 ; End of function sub_73EA
ROM:7412
ROM:7413
ROM:7413 ; =============== S U B R O U T I N E =======================================
ROM:7413
ROM:7413
ROM:7413 sub_7413:
ROM:7413                 jsr     sub_6112        ; Insert vector data for four blue dots in screen corners
ROM:7416                 lda     #$10            ; BIC points to Matrix 4
ROM:7418                 jsr     sub_CE0C        ; Copy transform data from [BIC] to matrix 2
ROM:741B                 jsr     sub_7160        ; Update Roll, Pitch and Yaw for [A, B, C][x, y, z] 2
ROM:741E                 jsr     sub_761D        ; Display score
ROM:7421                 jsr     sub_76D3        ; Towers left to shoot count
ROM:7424                 ldb     #$4F ; O
ROM:7426                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:7429                 jsr     sub_95A7        ; Insert vector instructions for shields
ROM:742C                 jsr     sub_B6B9        ; Insert vector instructions at joystick position for laser explosion 2
ROM:742F                 jsr     sub_859B
ROM:7432                 jsr     sub_BA12        ; Process tie/tower/bunker explosions
ROM:7435                 jsr     sub_98B0        ; Insert vector laser explosion small circle
ROM:7438                 jsr     sub_612F        ; Vector instructions end
ROM:743B                 rts
ROM:743B ; End of function sub_7413
ROM:743B
ROM:743C
ROM:743C ; =============== S U B R O U T I N E =======================================
ROM:743C
ROM:743C
ROM:743C sub_743C:
ROM:743C                 jsr     sub_6112        ; Insert vector data for four blue dots in screen corners
ROM:743F                 lda     #$10            ; BIC points to Matrix 4
ROM:7441                 jsr     sub_CE0C        ; Copy transform data from [BIC] to matrix 2
ROM:7444                 jsr     sub_7160        ; Update Roll, Pitch and Yaw for [A, B, C][x, y, z] 2
ROM:7447                 jsr     sub_761D        ; Display score
ROM:744A                 lda     word_4B0E       ; Attract screen/game phase  timer
ROM:744D                 cmpa    #4
ROM:744F                 bhi     loc_7464
ROM:7451                 lda     <DPbyte_98
ROM:7453                 bne     loc_745A
ROM:7455                 jsr     sub_76D3        ; Towers left to shoot count
ROM:7458                 bra     loc_7464
ROM:745A ; ---------------------------------------------------------------------------
ROM:745A
ROM:745A loc_745A:
ROM:745A                 ldd     #$7100
ROM:745D                 std     ,y++
ROM:745F                 ldb     #$46 ; F
ROM:7461                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:7464
ROM:7464 loc_7464:
ROM:7464                 lda     byte_4B2D
ROM:7467                 bne     loc_7491
ROM:7469                 lda     word_4B0E       ; Attract screen/game phase  timer
ROM:746C                 cmpa    #8
ROM:746E                 bhi     loc_7491
ROM:7470                 lda     <DPbyte_98
ROM:7472                 bne     loc_7491
ROM:7474                 lda     byte_4B35
ROM:7477                 bne     loc_7491
ROM:7479                 lda     byte_4B12
ROM:747C                 bne     loc_7482
ROM:747E                 ldb     #$4C ; L
ROM:7480                 bra     loc_748E
ROM:7482 ; ---------------------------------------------------------------------------
ROM:7482
ROM:7482 loc_7482:                               ; Game over/insert coins timer
ROM:7482                 lda     <DPbyte_43
ROM:7484                 anda    #$10
ROM:7486                 bne     loc_748C
ROM:7488                 ldb     #$4C ; L
ROM:748A                 bra     loc_748E
ROM:748C ; ---------------------------------------------------------------------------
ROM:748C
ROM:748C loc_748C:
ROM:748C                 ldb     #$4E ; N
ROM:748E
ROM:748E loc_748E:                               ; Print text string from pointer table
ROM:748E                 jsr     sub_E7C7
ROM:7491
ROM:7491 loc_7491:
ROM:7491                 lda     byte_4B2D
ROM:7494                 bne     loc_74A5
ROM:7496                 lda     >word_4895
ROM:7499                 beq     loc_74A5
ROM:749B                 ldd     #$7100
ROM:749E                 std     ,y++
ROM:74A0                 ldb     #$44 ; D
ROM:74A2                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:74A5
ROM:74A5 loc_74A5:
ROM:74A5                 lda     byte_4B36
ROM:74A8                 blt     loc_74B6
ROM:74AA                 bne     loc_74B3
ROM:74AC                 ldb     #$4F ; O
ROM:74AE                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:74B1                 bra     loc_74B6
ROM:74B3 ; ---------------------------------------------------------------------------
ROM:74B3
ROM:74B3 loc_74B3:
ROM:74B3                 jsr     sub_97C2
ROM:74B6
ROM:74B6 loc_74B6:                               ; Insert vector instructions for shields
ROM:74B6                 jsr     sub_95A7
ROM:74B9                 jsr     sub_B6B9        ; Insert vector instructions at joystick position for laser explosion 2
ROM:74BC                 jsr     sub_859B
ROM:74BF                 jsr     sub_AE60
ROM:74C2                 jsr     sub_AAE4        ; Fireball processing
ROM:74C5                 jsr     sub_B071
ROM:74C8                 jsr     sub_AEBD
ROM:74CB                 jsr     sub_ADAF
ROM:74CE                 jsr     sub_98B0        ; Insert vector laser explosion small circle
ROM:74D1                 jsr     sub_612F        ; Vector instructions end
ROM:74D4                 rts
ROM:74D4 ; End of function sub_743C
ROM:74D4
ROM:74D5
ROM:74D5 ; =============== S U B R O U T I N E =======================================
ROM:74D5
ROM:74D5 ; Game over
ROM:74D5
ROM:74D5 sub_74D5:
ROM:74D5                 jsr     sub_6112        ; Insert vector data for four blue dots in screen corners
ROM:74D8                 lda     #$10            ; BIC points to Matrix 4
ROM:74DA                 jsr     sub_CE0C        ; Copy transform data from [BIC] to matrix 2
ROM:74DD                 jsr     sub_7160        ; Update Roll, Pitch and Yaw for [A, B, C][x, y, z] 2
ROM:74E0                 jsr     sub_761D        ; Display score
ROM:74E3                 lda     byte_4B3E
ROM:74E6                 beq     loc_74F2
ROM:74E8                 ldd     #$7100
ROM:74EB                 std     ,y++
ROM:74ED                 ldb     #$46 ; F
ROM:74EF                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:74F2
ROM:74F2 loc_74F2:                               ; Insert vector instructions for shields
ROM:74F2                 jsr     sub_95A7
ROM:74F5                 jsr     sub_859B
ROM:74F8                 jsr     sub_AAE4        ; Fireball processing
ROM:74FB                 lda     byte_4B2D
ROM:74FE                 bne     loc_750F
ROM:7500                 lda     >word_4895
ROM:7503                 beq     loc_750F
ROM:7505                 ldd     #$7100
ROM:7508                 std     ,y++
ROM:750A                 ldb     #$44 ; D
ROM:750C                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:750F
ROM:750F loc_750F:                               ; Game Over text handling
ROM:750F                 jsr     sub_7707
ROM:7512                 jsr     sub_98B0        ; Insert vector laser explosion small circle
ROM:7515                 jsr     sub_612F        ; Vector instructions end
ROM:7518                 rts
ROM:7518 ; End of function sub_74D5
ROM:7518
ROM:7519
ROM:7519 ; =============== S U B R O U T I N E =======================================
ROM:7519
ROM:7519
ROM:7519 sub_7519:
ROM:7519                 jsr     sub_6112        ; Insert vector data for four blue dots in screen corners
ROM:751C                 lda     #$10            ; BIC points to Matrix 4
ROM:751E                 jsr     sub_CE0C        ; Copy transform data from [BIC] to matrix 2
ROM:7521                 jsr     sub_7160        ; Update Roll, Pitch and Yaw for [A, B, C][x, y, z] 2
ROM:7524                 jsr     sub_761D        ; Display score
ROM:7527                 jsr     sub_95A7        ; Insert vector instructions for shields
ROM:752A                 jsr     sub_B6B9        ; Insert vector instructions at joystick position for laser explosion 2
ROM:752D                 jsr     sub_CD80        ; Starfield
ROM:7530                 ldb     #$45 ; E
ROM:7532                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:7535                 lda     word_4B0E       ; Attract screen/game phase  timer
ROM:7538                 cmpa    #2
ROM:753A                 bgt     loc_755A
ROM:753C                 ldb     #$47 ; G
ROM:753E                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:7541                 ldb     #$48 ; H
ROM:7543                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:7549                 std     ,y++
ROM:754B                 ldd     #$70 ; p
ROM:754E                 std     ,y++
ROM:7550                 lda     <DPbyte_8E
ROM:7552                 jsr     loc_E7AD
ROM:7555                 ldd     #$8040
ROM:7558                 std     ,y++
ROM:755A
ROM:755A loc_755A:                               ; Attract screen/game phase  timer
ROM:755A                 lda     word_4B0E
ROM:755D                 cmpa    #1
ROM:755F                 bgt     loc_759C
ROM:7561                 lda     word_4845
ROM:7564                 beq     loc_759C
ROM:7566                 lda     byte_4592
ROM:7569                 anda    #3
ROM:756B                 beq     loc_759C
ROM:756D                 ldb     byte_4593
ROM:7570                 andb    #3
ROM:7572                 addb    #6
ROM:7574                 cmpb    <DPbyte_60      ; Shield count
ROM:7576                 bhi     loc_757C
ROM:7578                 ldb     #$4A ; J
ROM:757A                 bra     loc_7599
ROM:757C ; ---------------------------------------------------------------------------
ROM:757C
ROM:757C loc_757C:
ROM:757C                 ldu     #$A01A
ROM:757F                 stu     ,y++
ROM:7581                 ldu     #$48 ; H
ROM:7584                 stu     ,y++
ROM:7586                 ldu     #$1EC0
ROM:7589                 stu     ,y++
ROM:758B                 ldb     #1
ROM:758D                 stb     <DPbyte_AD
ROM:758F                 jsr     loc_E7AD
ROM:7592                 ldd     #$8040
ROM:7595                 std     ,y++
ROM:7597                 ldb     #$49 ; I
ROM:7599
ROM:7599 loc_7599:                               ; Print text string from pointer table
ROM:7599                 jsr     sub_E7C7
ROM:759C
ROM:759C loc_759C:                               ; Attract screen/game phase  timer
ROM:759C                 lda     word_4B0E
ROM:759F                 cmpa    #0
ROM:75A1                 bgt     loc_75B2
ROM:75A3                 lda     byte_4B2D
ROM:75A6                 bne     loc_75B2
ROM:75A8                 ldb     byte_4B15
ROM:75AB                 beq     loc_75B2
ROM:75AD                 ldb     #$4B ; K
ROM:75AF                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:75B2
ROM:75B2 loc_75B2:                               ; Insert vector laser explosion small circle
ROM:75B2                 jsr     sub_98B0
ROM:75B5                 jsr     sub_612F        ; Vector instructions end
ROM:75B8                 rts
ROM:75B8 ; End of function sub_7519
ROM:75B8
ROM:75B9
ROM:75B9 ; =============== S U B R O U T I N E =======================================
ROM:75B9
ROM:75B9
ROM:75B9 sub_75B9:
ROM:75B9                 jsr     sub_6112        ; Insert vector data for four blue dots in screen corners
ROM:75BC                 lda     #$10            ; BIC points to Matrix 4
ROM:75BE                 jsr     sub_CE0C        ; Copy transform data from [BIC] to matrix 2
ROM:75C1                 jsr     sub_761D        ; Display score
ROM:75C4                 lda     byte_4B36
ROM:75C7                 ble     loc_75CC
ROM:75C9                 jsr     sub_97C2
ROM:75CC
ROM:75CC loc_75CC:                               ; Insert vector instructions for shields
ROM:75CC                 jsr     sub_95A7
ROM:75CF                 jsr     sub_B6B9        ; Insert vector instructions at joystick position for laser explosion 2
ROM:75D2                 jsr     sub_77A4
ROM:75D5                 jsr     sub_612F        ; Vector instructions end
ROM:75D8                 rts
ROM:75D8 ; End of function sub_75B9
ROM:75D8
ROM:75D9
ROM:75D9 ; =============== S U B R O U T I N E =======================================
ROM:75D9
ROM:75D9 ; Space wave
ROM:75D9
ROM:75D9 sub_75D9:
ROM:75D9                 jsr     sub_6112        ; Insert vector data for four blue dots in screen corners
ROM:75DC                 lda     #$10            ; BIC points to Matrix 4
ROM:75DE                 jsr     sub_CE0C        ; Copy transform data from [BIC] to matrix 2
ROM:75E1                 jsr     sub_761D        ; Display score
ROM:75E4                 jsr     sub_95A7        ; Insert vector instructions for shields
ROM:75E7                 jsr     sub_B6B9        ; Insert vector instructions at joystick position for laser explosion 2
ROM:75EA                 ldd     #$1F98
ROM:75ED                 std     ,y++
ROM:75EF                 ldd     #0
ROM:75F2                 std     ,y++
ROM:75F4                 ldd     #$7200
ROM:75F7                 std     ,y++
ROM:75F9                 ldd     #$BE50
ROM:75FC                 std     ,y++
ROM:75FE                 ldd     #$7200
ROM:7601                 std     ,y++
ROM:7603                 jsr     sub_BB85        ; Death Star explosion animation
ROM:7606                 jsr     sub_612F        ; Vector instructions end
ROM:7609                 rts
ROM:7609 ; End of function sub_75D9
ROM:7609
ROM:760A
ROM:760A ; =============== S U B R O U T I N E =======================================
ROM:760A
ROM:760A ; Death Star explosion
ROM:760A
ROM:760A sub_760A:
ROM:760A                 jsr     sub_6112        ; Insert vector data for four blue dots in screen corners
ROM:760D                 jsr     sub_761D        ; Display score
ROM:7610                 jsr     sub_95A7        ; Insert vector instructions for shields
ROM:7613                 jsr     sub_B6B9        ; Insert vector instructions at joystick position for laser explosion 2
ROM:7616                 jsr     sub_BB85        ; Death Star explosion animation
ROM:7619                 jsr     sub_612F        ; Vector instructions end
ROM:761C                 rts
ROM:761C ; End of function sub_760A
ROM:761C
ROM:761D
ROM:761D ; =============== S U B R O U T I N E =======================================
ROM:761D
ROM:761D ; Display score
ROM:761D
ROM:761D sub_761D:
ROM:761D                 ldd     #$B9F2
ROM:7620                 std     ,y++
ROM:7622                 ldd     #$6280
ROM:7625                 std     ,y++
ROM:7627                 ldd     #$1E0
ROM:762A                 std     ,y++
ROM:762C                 ldd     #$1E20
ROM:762F                 std     ,y++
ROM:7631                 lda     #6
ROM:7633                 sta     <DPbyte_AD
ROM:7635                 ldx     #$485C
ROM:7638                 jsr     sub_E764
ROM:763B                 ldd     #$8040
ROM:763E                 std     ,y++
ROM:7640                 ldb     byte_4B2C
ROM:7643                 beq     loc_766E
ROM:7645                 subb    #8
ROM:7647                 cmpb    #$20 ;  
ROM:7649                 bcc     loc_764D
ROM:764B                 ldb     #0
ROM:764D
ROM:764D loc_764D:
ROM:764D                 stb     byte_4B2C
ROM:7650                 lsrb
ROM:7651                 lda     #$66 ; f
ROM:7653                 std     ,y++
ROM:7655                 ldd     #$1B0
ROM:7658                 std     ,y++
ROM:765A                 ldd     #$1E50
ROM:765D                 std     ,y++
ROM:765F                 lda     #5
ROM:7661                 sta     <DPbyte_AD
ROM:7663                 ldx     #$4B28
ROM:7666                 jsr     sub_E772        ; Display BCD number text
ROM:7669                 ldd     #$8040
ROM:766C                 std     ,y++
ROM:766E
ROM:766E loc_766E:
ROM:766E                 ldd     #$6280
ROM:7671                 std     ,y++
ROM:7673                 ldd     #$210
ROM:7676                 std     ,y++
ROM:7678                 ldd     #$138
ROM:767B                 std     ,y++
ROM:767D                 lda     #1
ROM:767F                 sta     <DPbyte_AD
ROM:7681                 lda     byte_4B16
ROM:7684                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:7687                 ldd     #$8040
ROM:768A                 std     ,y++
ROM:768C                 rts
ROM:768C ; End of function sub_761D
ROM:768C
ROM:768D
ROM:768D ; =============== S U B R O U T I N E =======================================
ROM:768D
ROM:768D ; Display tower count and hit score
ROM:768D
ROM:768D sub_768D:
ROM:768D                 lda     byte_4B13       ; Display tower hit score
ROM:7690                 ble     loc_76FC
ROM:7692                 lda     byte_4B1A
ROM:7695                 beq     sub_76D3        ; Towers left to shoot count
ROM:7697                 lda     <DPbyte_43      ; Game over/insert coins timer
ROM:7699                 anda    #$30 ; 0
ROM:769B                 beq     loc_76CE
ROM:769D                 ldb     #$40 ; @
ROM:769F                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:76A2                 ldd     #$6280          ; Vector STAT 2,80 instruction
ROM:76A5                 std     ,y++
ROM:76A7                 ldd     #$180           ; Vector draw to position
ROM:76AA                 std     ,y++
ROM:76AC                 ldd     #$1ED0
ROM:76AF                 std     ,y++
ROM:76B1                 lda     #4
ROM:76B3                 sta     <DPbyte_AD
ROM:76B5                 lda     byte_4B2E       ; Temporary score adder towers 1
ROM:76B8                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:76BB                 lda     byte_4B2F       ; Temporary score adder towers 2
ROM:76BE                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:76C1                 lda     byte_4B30       ; Temporary score adder towers 3
ROM:76C4                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:76C7                 ldd     #$8040          ; Vector CNTR instruction
ROM:76CA                 std     ,y++
ROM:76CC                 bra     sub_76D3        ; Towers left to shoot count
ROM:76CE ; ---------------------------------------------------------------------------
ROM:76CE
ROM:76CE loc_76CE:
ROM:76CE                 ldb     #$43 ; C
ROM:76D0                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:76D0 ; End of function sub_768D
ROM:76D0
ROM:76D3
ROM:76D3 ; =============== S U B R O U T I N E =======================================
ROM:76D3
ROM:76D3 ; Towers left to shoot count
ROM:76D3
ROM:76D3 sub_76D3:
ROM:76D3                 lda     byte_4B13       ; Display towers left to shoot count
ROM:76D6                 ble     loc_76FC
ROM:76D8                 ldd     #$41 ; A
ROM:76DB                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:76DE                 ldd     #$6280          ; Vector STAT 2,80 instruction
ROM:76E1                 std     ,y++
ROM:76E3                 ldd     #$198
ROM:76E6                 std     ,y++
ROM:76E8                 ldd     #$168
ROM:76EB                 std     ,y++
ROM:76ED                 lda     #1
ROM:76EF                 sta     <DPbyte_AD
ROM:76F1                 lda     byte_4B1A
ROM:76F4                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:76F7                 ldd     #$8040          ; Vector CNTR instruction
ROM:76FA                 std     ,y++
ROM:76FC
ROM:76FC loc_76FC:
ROM:76FC                 lda     byte_4B35
ROM:76FF                 beq     locret_7706
ROM:7701                 ldb     #$42 ; B
ROM:7703                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:7706
ROM:7706 locret_7706:
ROM:7706                 rts
ROM:7706 ; End of function sub_76D3
ROM:7706
ROM:7707
ROM:7707 ; =============== S U B R O U T I N E =======================================
ROM:7707
ROM:7707 ; Game Over text handling
ROM:7707
ROM:7707 sub_7707:
ROM:7707                 lda     word_4B0E+1     ; Attract screen/game phase  timer
ROM:770A                 cmpa    #$20 ;  
ROM:770C                 bls     loc_7710
ROM:770E                 lda     #$20 ;  
ROM:7710
ROM:7710 loc_7710:
ROM:7710                 ldb     #6
ROM:7712                 mul
ROM:7713                 negb
ROM:7714                 addb    #$C0 ; +
ROM:7716                 lda     #$70 ; p
ROM:7718                 std     ,y++
ROM:771A                 ldb     #4
ROM:771C                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:771F                 rts
ROM:771F ; End of function sub_7707
ROM:771F
ROM:7720
ROM:7720 ; =============== S U B R O U T I N E =======================================
ROM:7720
ROM:7720
ROM:7720 sub_7720:
ROM:7720                 std     word_4AD6+1
ROM:7723                 ldd     #0
ROM:7726                 std     word_4AD4
ROM:7729                 sta     word_4AD6
ROM:772C
ROM:772C loc_772C:
ROM:772C                 asl     >byte_4AD8
ROM:772F                 rol     word_4AD6+1
ROM:7732                 lda     word_4AD6
ROM:7735                 adca    word_4AD6
ROM:7738                 daa
ROM:7739                 sta     word_4AD6
ROM:773C                 lda     word_4AD4+1
ROM:773F                 adca    word_4AD4+1
ROM:7742                 daa
ROM:7743                 sta     word_4AD4+1
ROM:7746                 rol     word_4AD4
ROM:7749                 leax    -1,x
ROM:774B                 bne     loc_772C
ROM:774D                 rts
ROM:774D ; End of function sub_7720
ROM:774D
ROM:774E
ROM:774E ; =============== S U B R O U T I N E =======================================
ROM:774E
ROM:774E
ROM:774E sub_774E:
ROM:774E                 sta     word_4AD6+1
ROM:7751                 anda    #$F0 ; =
ROM:7755                 mul
ROM:7756                 ldb     word_4AD6+1
ROM:7759                 andb    #$F
ROM:775B                 stb     word_4AD6+1
ROM:775E                 adda    word_4AD6+1
ROM:7761                 sta     word_4AD6+1
ROM:7764                 rts
ROM:7764 ; End of function sub_774E
ROM:7764
ROM:7765
ROM:7765 ; =============== S U B R O U T I N E =======================================
ROM:7765
ROM:7765 ; Space wave sub_7765
ROM:7765
ROM:7765 sub_7765:
ROM:7765                 ldd     MReg14          ; Ax2
ROM:7768                 ble     locret_77A3
ROM:776A                 std     DVSRH
ROM:776D                 ldd     MReg15          ; Ay2
ROM:7770                 std     MReg01          ; Math result Y
ROM:7773                 tsta
ROM:7774                 bpl     loc_777A
ROM:7776                 coma
ROM:7777                 negb
ROM:7778                 sbca    #$FF
ROM:777A
ROM:777A loc_777A:                               ; Ax2
ROM:777A                 subd    MReg14
ROM:777D                 bge     locret_77A3
ROM:777F                 ldd     MReg16          ; Az2
ROM:7782                 std     MReg02          ; Math result Z
ROM:7785                 tsta
ROM:7786                 bpl     loc_778C
ROM:7788                 coma
ROM:7789                 negb
ROM:778A                 sbca    #$FF
ROM:778C
ROM:778C loc_778C:                               ; Ax2
ROM:778C                 subd    MReg14
ROM:778F
ROM:778F loc_778F:
ROM:778F                 bge     locret_77A3
ROM:7791                 jsr     sub_CCF0        ; Get divider result and multiply by Math result Z, insert VCTR instruction
ROM:7794                 ldd     #$7300
ROM:7797                 std     ,y++
ROM:7799                 ldd     #$BE50          ; Vector JRSL Small Death Star
ROM:779C                 std     ,y++
ROM:779E                 ldd     #$7200
ROM:77A1                 std     ,y++
ROM:77A3
ROM:77A3 locret_77A3:
ROM:77A3                 rts
ROM:77A3 ; End of function sub_7765
ROM:77A3
ROM:77A4
ROM:77A4 ; =============== S U B R O U T I N E =======================================
ROM:77A4
ROM:77A4
ROM:77A4 sub_77A4:
ROM:77A4                 ldd     MReg14          ; Ax2
ROM:77A7                 ble     locret_77D3
ROM:77A9                 std     DVSRH
ROM:77AC                 ldd     MReg15          ; Ay2
ROM:77AF                 std     MReg01          ; Math result Y
ROM:77B2                 tsta
ROM:77B3                 bpl     loc_77B9
ROM:77B5                 coma
ROM:77B6                 negb
ROM:77B7                 sbca    #$FF
ROM:77B9
ROM:77B9 loc_77B9:                               ; Ax2
ROM:77B9                 subd    MReg14
ROM:77BC                 bge     locret_77D3
ROM:77BE                 ldd     MReg16          ; Az2
ROM:77C1                 std     MReg02          ; Math result Z
ROM:77C4                 tsta
ROM:77C5                 bpl     loc_77CB
ROM:77C7                 coma
ROM:77C8                 negb
ROM:77C9                 sbca    #$FF
ROM:77CB
ROM:77CB loc_77CB:                               ; Ax2
ROM:77CB                 subd    MReg14
ROM:77CE                 bge     locret_77D3
ROM:77D0                 jsr     sub_77D4
ROM:77D3
ROM:77D3 locret_77D3:
ROM:77D3                 rts
ROM:77D3 ; End of function sub_77A4
ROM:77D3
ROM:77D4
ROM:77D4 ; =============== S U B R O U T I N E =======================================
ROM:77D4
ROM:77D4
ROM:77D4 sub_77D4:
ROM:77D4                 jsr     sub_CCF0        ; Get divider result and multiply by Math result Z, insert VCTR instruction
ROM:77D7                 ldd     -4,y
ROM:77D9                 std     <DPbyte_5       ; Zoom value
ROM:77DB                 ldd     -2,y
ROM:77DD                 std     <DPbyte_3
ROM:77DF                 ldd     <DPbyte_56      ; Zoom value
ROM:77E1                 std     <DPbyte_1
ROM:77E3                 ldu     #$BD68
ROM:77E6                 jsr     sub_7863
ROM:77E9                 ldu     #$BDA6
ROM:77EC                 jsr     sub_785B
ROM:77EF                 ldu     #$BDB2
ROM:77F2                 jsr     sub_785B
ROM:77F5                 ldu     #$BDDA
ROM:77F8                 jsr     sub_785B
ROM:77FB                 ldu     #$BE06
ROM:77FE                 jsr     sub_785B
ROM:7801                 ldd     <DPbyte_56      ; Zoom value
ROM:7803                 suba    #3
ROM:7805                 cmpd    #$7000
ROM:7809                 bcc     loc_780E
ROM:780B                 ldd     #$7000
ROM:780E
ROM:780E loc_780E:
ROM:780E                 std     <DPbyte_1
ROM:7810                 cmpa    #$70 ; p
ROM:7812                 bne     loc_7819
ROM:7814                 ldd     #$6660
ROM:7817                 bra     loc_781C
ROM:7819 ; ---------------------------------------------------------------------------
ROM:7819
ROM:7819 loc_7819:
ROM:7819                 ldd     #$6630
ROM:781C
ROM:781C loc_781C:
ROM:781C                 std     ,y++
ROM:781E                 lda     byte_4B14
ROM:7821                 bita    #1
ROM:7823                 bne     loc_782A
ROM:7825                 ldu     #$B728
ROM:7828                 bra     loc_7839
ROM:782A ; ---------------------------------------------------------------------------
ROM:782A
ROM:782A loc_782A:
ROM:782A                 ldu     #$B73C
ROM:782D                 jsr     sub_785B
ROM:7830                 ldu     #$B749
ROM:7833                 jsr     sub_785B
ROM:7836                 ldu     #$B754
ROM:7839
ROM:7839 loc_7839:
ROM:7839                 jsr     sub_785B
ROM:783C                 lda     byte_4B14
ROM:783F                 bita    #1
ROM:7841                 bne     loc_7848
ROM:7843                 ldu     #$B75E
ROM:7846                 bra     loc_7857
ROM:7848 ; ---------------------------------------------------------------------------
ROM:7848
ROM:7848 loc_7848:
ROM:7848                 ldu     #$B770
ROM:784B                 jsr     sub_785B
ROM:784E                 ldu     #$B77C
ROM:7851                 jsr     sub_785B
ROM:7854                 ldu     #$B788
ROM:7857
ROM:7857 loc_7857:
ROM:7857                 jsr     sub_785B
ROM:785A                 rts
ROM:785A ; End of function sub_77D4
ROM:785A
ROM:785B
ROM:785B ; =============== S U B R O U T I N E =======================================
ROM:785B
ROM:785B
ROM:785B sub_785B:
ROM:785B                 ldd     <DPbyte_5
ROM:785D                 std     ,y++
ROM:785F                 ldd     <DPbyte_3
ROM:7861                 std     ,y++
ROM:7861 ; End of function sub_785B
ROM:7861
ROM:7863
ROM:7863 ; =============== S U B R O U T I N E =======================================
ROM:7863
ROM:7863
ROM:7863 sub_7863:
ROM:7863                 ldd     <DPbyte_1
ROM:7865                 std     ,y++
ROM:7867                 stu     ,y++
ROM:7869                 rts
ROM:7869 ; End of function sub_7863
ROM:7869
ROM:786A
ROM:786A ; =============== S U B R O U T I N E =======================================
ROM:786A
ROM:786A ; Process tie fighters and insert vectors
ROM:786A
ROM:786A sub_786A:
ROM:786A                 ldx     #byte_4900      ; 3x Tie fighter data structure ($19 bytes per Tie)
ROM:786D
ROM:786D loc_786D:                               ; Pointer to Tie fighter data
ROM:786D                 stx     <DPbyte_64
ROM:786F                 lda     3,x
ROM:7871                 beq     loc_7876
ROM:7873                 jsr     sub_7881
ROM:7876
ROM:7876 loc_7876:                               ; Pointer to Tie fighter data
ROM:7876                 ldx     <DPbyte_64
ROM:7878                 leax    $19,x
ROM:787B                 cmpx    #byte_4900+$4B  ; 3x Tie fighter data structure ($19 bytes per Tie)
ROM:787E                 bcs     loc_786D
ROM:7880
ROM:7880 locret_7880:
ROM:7880                 rts
ROM:7880 ; End of function sub_786A
ROM:7880
ROM:7881
ROM:7881 ; =============== S U B R O U T I N E =======================================
ROM:7881
ROM:7881
ROM:7881 sub_7881:
ROM:7881                 ldx     <DPbyte_64      ; Pointer to Tie fighter data
ROM:7883                 clra
ROM:7884                 ldb     2,x
ROM:7886                 addb    #3
ROM:7888                 std     MW1
ROM:788B                 lda     #$67 ; g
ROM:788D                 jsr     Math_Run_Start  ; Do math program run
ROM:7890                 lda     MReg00          ; Math result X
ROM:7893                 asla
ROM:7894                 bvs     loc_7909
ROM:7896                 lda     MReg01          ; Math result Y
ROM:7899                 asla
ROM:789A                 bvs     loc_7909
ROM:789C                 lda     MReg02          ; Math result Z
ROM:789F                 asla
ROM:78A0                 bvs     loc_7909
ROM:78A2                 ldd     MReg38
ROM:78A5                 addd    MReg39
ROM:78A8                 addd    MReg3A
ROM:78AB                 tfr     d, u
ROM:78AD                 cmpu    #$900
ROM:78B1                 bhi     loc_78BB
ROM:78B3                 ldd     $15,x
ROM:78B6                 oraa    #$20 ;  
ROM:78B8                 std     $15,x
ROM:78BB
ROM:78BB loc_78BB:
ROM:78BB                 cmpu    #$100
ROM:78BF                 bhi     loc_78C9
ROM:78C1                 ldd     $15,x
ROM:78C4                 oraa    #4
ROM:78C6                 std     $15,x
ROM:78C9
ROM:78C9 loc_78C9:
ROM:78CD                 bhi     loc_78FF
ROM:78CF                 lda     word_4B38
ROM:78D2                 bne     loc_78E4
ROM:78D4                 lda     2,x
ROM:78D6                 sta     word_4B38
ROM:78D9                 jsr     Sound_4
ROM:78DC                 jsr     Sound_2A
ROM:78DF                 stu     word_4B38+1
ROM:78E2                 bra     loc_78FD
ROM:78E4 ; ---------------------------------------------------------------------------
ROM:78E4
ROM:78E4 loc_78E4:
ROM:78E4                 cmpa    2,x
ROM:78E6                 bne     loc_78FD
ROM:78E8                 cmpu    word_4B38+1
ROM:78EC                 bgt     loc_78F3
ROM:78EE                 stu     word_4B38+1
ROM:78F1                 bra     loc_78FD
ROM:78F3 ; ---------------------------------------------------------------------------
ROM:78F3
ROM:78F3 loc_78F3:
ROM:78F3                 bcs     loc_78FD
ROM:78F5                 lda     #$FF
ROM:78F7                 sta     word_4B38+1
ROM:78FA                 jsr     Sound_2E
ROM:78FD
ROM:78FD loc_78FD:
ROM:78FD                 bra     loc_7909
ROM:78FF ; ---------------------------------------------------------------------------
ROM:78FF
ROM:78FF loc_78FF:
ROM:78FF                 lda     2,x
ROM:7901                 cmpa    word_4B38
ROM:7904                 bne     loc_7909
ROM:7906                 clr     word_4B38
ROM:7909
ROM:7909 loc_7909:                               ; Math result X
ROM:7909                 ldd     MReg00
ROM:790C                 cmpd    #$10
ROM:7910                 lble    locret_7880
ROM:7914                 cmpd    #$7F00
ROM:7918                 lbhi    locret_7880
ROM:791C                 std     DVSRH
ROM:791F                 std     MReg0C          ; XT
ROM:7922                 ldd     MReg01          ; Math result Y
ROM:7925                 std     MReg0D          ; YT
ROM:7928                 ldd     MReg39
ROM:792B                 subd    MReg38
ROM:792E                 lbcc    locret_7880
ROM:7932                 ldd     MReg02          ; Math result Z
ROM:7935                 std     MReg0E          ; ZT
ROM:7938                 ldd     MReg3A
ROM:793B                 subd    MReg38
ROM:793E                 lbcc    locret_7880
ROM:7942                 ldx     <DPbyte_64      ; Pointer to Tie fighter data
ROM:7944                 ldd     $15,x
ROM:7947                 oraa    #$10
ROM:7949                 std     $15,x
ROM:794C                 lda     word_4B3B
ROM:794F                 bne     loc_7972
ROM:7951                 lda     4,x
ROM:7953                 cmpa    #4
ROM:7955                 bne     loc_7972
ROM:7957                 inc     word_4B3B
ROM:795A                 lda     byte_4B14
ROM:795D                 lsra
ROM:795E                 bcs     loc_796F
ROM:7960                 lda     PRNG
ROM:7963                 bpl     loc_796A
ROM:7965                 jsr     Sound_15
ROM:7968                 bra     loc_796D
ROM:796A ; ---------------------------------------------------------------------------
ROM:796A
ROM:796A loc_796A:
ROM:796A                 jsr     Sound_B
ROM:796D
ROM:796D loc_796D:
ROM:796D                 bra     loc_7972
ROM:796F ; ---------------------------------------------------------------------------
ROM:796F
ROM:796F loc_796F:
ROM:796F                 jsr     Sound_8
ROM:7972
ROM:7972 loc_7972:
ROM:7972                 lda     2,x
ROM:7974                 jsr     sub_CE18        ; Run math program $80 Copy [BIC] to Matrix 3
ROM:7977                 jsr     sub_CCF0        ; Get divider result and multiply by Math result Z, insert VCTR instruction
ROM:797A                 ldd     #$50 ; P
ROM:797D                 std     MReg01          ; Math result Y
ROM:7980                                         ; Reg02 = Reg02 x Reg00
ROM:7982                 jsr     Math_Run_Start  ; Do math program run
ROM:7985                 ldd     MReg01          ; Math result Y
ROM:7988                 addd    #$A
ROM:798B                 std     <DPbyte_1
ROM:798D                 ldd     <DPbyte_D6
ROM:798F                 subd    <DPbyte_B3
ROM:7991                 bpl     loc_7997
ROM:7993                 coma
ROM:7994                 negb
ROM:7995                 sbca    #$FF
ROM:7997
ROM:7997 loc_7997:
ROM:7997                 std     <DPbyte_5
ROM:7999                 std     <DPbyte_3
ROM:799B                 ldd     <DPbyte_D8
ROM:799D                 subd    <DPbyte_B5
ROM:799F                 bpl     loc_79A5
ROM:79A1                 coma
ROM:79A2                 negb
ROM:79A3                 sbca    #$FF
ROM:79A5
ROM:79A5 loc_79A5:
ROM:79A5                 std     <DPbyte_7
ROM:79A7                 addd    <DPbyte_3
ROM:79A9                 std     <DPbyte_3
ROM:79AB                 ldd     <DPbyte_5
ROM:79AD                 subd    <DPbyte_1
ROM:79AF                 bgt     loc_79CF
ROM:79B1                 ldd     <DPbyte_7
ROM:79B3                 subd    <DPbyte_1
ROM:79B5                 bgt     loc_79CF
ROM:79B7                 ldd     <DPbyte_1
ROM:79B9                 lsra
ROM:79BA                 rorb
ROM:79BB                 addd    <DPbyte_1
ROM:79BD                 subd    <DPbyte_3
ROM:79BF                 blt     loc_79CF
ROM:79C1                 ldd     MReg0C          ; XT
ROM:79C4                 cmpd    <DPbyte_C4
ROM:79C7                 bcc     loc_79CF
ROM:79C9                 std     <DPbyte_C4
ROM:79CB                 ldx     <DPbyte_64      ; Pointer to Tie fighter data
ROM:79CD                 stx     <DPbyte_C2
ROM:79CF
ROM:79CF loc_79CF:
ROM:79CF                 ldd     <DPbyte_1
ROM:79D1                 addd    <DPbyte_1
ROM:79D3                 addd    <DPbyte_1
ROM:79D5                 subd    <DPbyte_3
ROM:79D7                 bcs     loc_79E9
ROM:79D9                 ldx     <DPbyte_64      ; Pointer to Tie fighter data
ROM:79DB                 lda     3,x
ROM:79DD                 cmpa    #1
ROM:79DF                 bne     loc_79E9
ROM:79E1                 ldd     $15,x
ROM:79E4                 oraa    #8
ROM:79E6                 std     $15,x
ROM:79E9
ROM:79E9 loc_79E9:                               ; Pointer to Tie fighter data
ROM:79E9                 ldx     <DPbyte_64
ROM:79EB                 ldb     6,x
ROM:79ED                 ldu     #word_7A08      ; Tie fighter colour table
ROM:79F0                 aslb
ROM:79F1                 ldd     b,u
ROM:79F3                 std     ,y++
ROM:79F5                 lda     #$40 ; @      ; Matrix 1 = Matrix 2 x Matrix 3
ROM:79F7                 jsr     Math_Run_Start  ; Do math program run
ROM:79FA                 ldb     4,x
ROM:79FC                 jsr     sub_CD14        ; Math program 0x50. Matrix Multiply - Transposed
ROM:79FC                                         ; Then do perspective division?
ROM:79FF                 jsr     sub_CD2C        ; Format vectors for ties, and tower/bunker explosions
ROM:7A02                 ldd     #$8040          ; Insert vector CNTR instruction
ROM:7A05                 std     ,y++
ROM:7A07                 rts
ROM:7A07 ; End of function sub_7881
ROM:7A07
ROM:7A07 ; ---------------------------------------------------------------------------
ROM:7A48
ROM:7A48 ; =============== S U B R O U T I N E =======================================
ROM:7A48
ROM:7A48
ROM:7A48 sub_7A48:
ROM:7A48                 ldu     #MReg48
ROM:7A4B                 jsr     sub_CDC3        ; Initialise math registers matrix
ROM:7A4E                 ldd     #0
ROM:7A51                 std     MReg4C
ROM:7A54                 std     MReg4D
ROM:7A57                 std     MReg4E
ROM:7A5A
ROM:7A5A loc_7A5A:
ROM:7A5A                 ldd     #0
ROM:7A5D                 sta     <DPbyte_62      ; Timer for fireball hit?
ROM:7A5F                 sta     <DPbyte_63
ROM:7A61                 sta     <DPbyte_31
ROM:7A63                 sta     <DPbyte_BC
ROM:7A65                 sta     <DPbyte_B7
ROM:7A67                 sta     <DPbyte_BD
ROM:7A69                 std     <DPbyte_A3
ROM:7A6B                 sta     >byte_4878
ROM:7A6E                 sta     >byte_486E
ROM:7A71                 sta     >byte_4877
ROM:7A74                 std     >word_4874
ROM:7A77                 std     >word_486B
ROM:7A7A                 rts
ROM:7A7A ; End of function sub_7A48
ROM:7A7A
ROM:7A7A ; ---------------------------------------------------------------------------
ROM:8341
ROM:8341 ; =============== S U B R O U T I N E =======================================
ROM:8341
ROM:8341 ; Entering trench
ROM:8341
ROM:8341 sub_8341:
ROM:8341                 lda     #0
ROM:8343                 sta     <DPbyte_44
ROM:8345                 sta     <DPbyte_45
ROM:8347                 ldx     #byte_4989
ROM:834A                 lda     #0
ROM:834C
ROM:834C loc_834C:
ROM:834C                 sta     ,x+
ROM:834E                 cmpx    #word_49A9
ROM:8351                 bcs     loc_834C
ROM:8353                 ldb     byte_4B12
ROM:8356                 aslb
ROM:8357                 ldx     #off_7CC0       ; Trench catwalk/turrets data?
ROM:835A                 abx
ROM:835B                 cmpx    #off_7CC0+$16   ; Trench catwalk/turrets data?
ROM:835E                 bcs     loc_8365
ROM:8360                 ldu     #word_4B3F
ROM:8363                 bra     loc_8367
ROM:8365 ; ---------------------------------------------------------------------------
ROM:8365
ROM:8365 loc_8365:
ROM:8365                 ldu     ,x
ROM:8367
ROM:8367 loc_8367:
ROM:8367                 stu     word_49A9
ROM:836A                 stu     word_49AB
ROM:836D                 ldu     ,u
ROM:836F                 ldd     #0
ROM:8372                 sta     word_49BF+1
ROM:8375                 std     word_49B1
ROM:8378                 std     word_49B5
ROM:837B                 sta     <DPbyte_92
ROM:837D                 sta     <DPbyte_95
ROM:837F                 stu     word_49AF
ROM:8382                 stu     word_49B3
ROM:8385                 jsr     loc_8434
ROM:8388                 jsr     sub_8408        ; Trench
ROM:838B                 jsr     sub_83CE
ROM:838E                 jsr     sub_83CE
ROM:8391                 jsr     sub_83CE
ROM:8394                 jsr     sub_83CE
ROM:8397                 jsr     sub_83CE
ROM:839A                 jsr     sub_83CE
ROM:839D                 jsr     sub_83CE
ROM:83A0                 jsr     sub_83CE
ROM:83A3                 rts
ROM:83A3 ; End of function sub_8341
ROM:83A3
ROM:83A4
ROM:83A4 ; =============== S U B R O U T I N E =======================================
ROM:83A4
ROM:83A4 ; Called when starting trench
ROM:83A4
ROM:83A4 sub_83A4:
ROM:83A4                 ldu     #word_4B3F
ROM:83A7                 ldx     #off_7C7E       ; Copy pointers from ROM to RAM starting at word_4B3F
ROM:83AA
ROM:83AA loc_83AA:
ROM:83AA                 ldd     ,x++
ROM:83AC                 std     ,u++
ROM:83AE                 cmpu    #word_4B5F
ROM:83B2                 bcs     loc_83AA
ROM:83B4                 ldu     #word_4B43
ROM:83B7                 ldx     #off_7C9E
ROM:83BA
ROM:83BA loc_83BA:
ROM:83BA                 lda     #$11
ROM:83BC                 ldb     PRNG
ROM:83BF                 mul
ROM:83C0                 asla
ROM:83C1                 ldd     a,x
ROM:83C3                 std     ,u
ROM:83C5                 leau    4,u
ROM:83C7                 cmpu    #word_4B3F+$20
ROM:83CB                 bcs     loc_83BA
ROM:83CD                 rts
ROM:83CD ; End of function sub_83A4
ROM:83CD
ROM:83CE
ROM:83CE ; =============== S U B R O U T I N E =======================================
ROM:83CE
ROM:83CE
ROM:83CE sub_83CE:
ROM:83CE                 lda     <DPbyte_92
ROM:83D0                 bne     locret_8407
ROM:83D2                 ldu     word_49B3
ROM:83D5                 leau    3,u
ROM:83D7                 lda     ,u
ROM:83D9                 cmpa    #5
ROM:83DB                 bne     loc_83E2
ROM:83DD                 ldu     word_49AB
ROM:83E0                 ldu     2,u
ROM:83E2
ROM:83E2 loc_83E2:
ROM:83E2                 ldb     ,u
ROM:83E4                 cmpb    #1
ROM:83E6                 bne     loc_83ED
ROM:83E8                 ldd     #$800
ROM:83EB                 bra     loc_83F9
ROM:83ED ; ---------------------------------------------------------------------------
ROM:83ED
ROM:83ED loc_83ED:
ROM:83ED                 cmpb    #3
ROM:83EF                 bne     loc_83F6
ROM:83F1                 ldd     #0
ROM:83F4                 bra     loc_83F9
ROM:83F6 ; ---------------------------------------------------------------------------
ROM:83F6
ROM:83F6 loc_83F6:
ROM:83F6                 ldd     #$1000
ROM:83F9
ROM:83F9 loc_83F9:
ROM:83F9                 addd    word_49B7
ROM:83FC                 subd    word_49B1
ROM:83FF                 subd    #$6000
ROM:8402                 bhi     locret_8407
ROM:8404                 jsr     sub_8408        ; Trench
ROM:8407
ROM:8407 locret_8407:
ROM:8407                 rts
ROM:8407 ; End of function sub_83CE
ROM:8407
ROM:8408
ROM:8408 ; =============== S U B R O U T I N E =======================================
ROM:8408
ROM:8408 ; Trench
ROM:8408
ROM:8408 sub_8408:
ROM:8408                 ldu     word_49B3
ROM:840B                 ldb     ,u
ROM:840D                 cmpb    #1
ROM:840F                 bne     loc_8416
ROM:8411                 ldd     #$800
ROM:8414                 bra     loc_8419
ROM:8416 ; ---------------------------------------------------------------------------
ROM:8416
ROM:8416 loc_8416:
ROM:8416                 ldd     #$1000
ROM:8419
ROM:8419 loc_8419:
ROM:8419                 addd    word_49B5
ROM:841C                 std     word_49B5
ROM:841F                 leau    3,u
ROM:8421                 ldb     ,u
ROM:8423                 cmpb    #5
ROM:8425                 bne     loc_8431
ROM:8427                 ldu     word_49AB
ROM:842A                 leau    2,u
ROM:842C                 stu     word_49AB
ROM:842F                 ldu     ,u
ROM:8431
ROM:8431 loc_8431:
ROM:8431                 stu     word_49B3
ROM:8434
ROM:8434 loc_8434:
ROM:8434                 ldu     word_49B3
ROM:8437                 ldb     ,u
ROM:8439                 cmpb    #3
ROM:843B                 bne     loc_8447
ROM:843D                 ldd     word_49B5
ROM:8440                 std     <DPbyte_93
ROM:8442                 lda     #$FF
ROM:8444                 sta     <DPbyte_92
ROM:8446                 rts
ROM:8447 ; ---------------------------------------------------------------------------
ROM:8447
ROM:8447 loc_8447:
ROM:8447                 ldb     ,u
ROM:8449                 cmpb    #4
ROM:844B                 bne     loc_846A
ROM:844D                 ldd     word_49B5
ROM:8450                 std     <DPbyte_96
ROM:8452                 lda     #$FF
ROM:8454                 sta     <DPbyte_95
ROM:8456                 lda     #0
ROM:8458                 sta     <DPbyte_44
ROM:845A                 sta     <DPbyte_45
ROM:845C                 lda     byte_4B36
ROM:845F                 bne     loc_846A
ROM:8461                 inc     byte_4B36
ROM:8464                 jsr     sub_97E3
ROM:8467                 ldu     word_49B3
ROM:846A
ROM:846A loc_846A:
ROM:846A                 ldb     ,u
ROM:846C                 cmpb    #1
ROM:846E                 bne     loc_8475
ROM:8470                 ldd     #$800
ROM:8473                 bra     loc_8478
ROM:8475 ; ---------------------------------------------------------------------------
ROM:8475
ROM:8475 loc_8475:
ROM:8475                 ldd     #$1000
ROM:8478
ROM:8478 loc_8478:
ROM:8478                 addd    word_49B5
ROM:847B                 std     word_49B7
ROM:847E                 ldb     word_49B5
ROM:8481                 lsrb
ROM:8482                 lsrb
ROM:8483                 lsrb
ROM:8484                 andb    #$F
ROM:8486                 ldx     #byte_4989
ROM:8489                 lda     1,u
ROM:848B                 sta     b,x
ROM:848D                 ldx     #byte_4999
ROM:8490                 lda     2,u
ROM:8492                 sta     b,x
ROM:8494                 rts
ROM:8494 ; End of function sub_8408
ROM:8494
ROM:8495
ROM:8495 ; =============== S U B R O U T I N E =======================================
ROM:8495
ROM:8495
ROM:8495 sub_8495:
ROM:8495                 lda     <DPbyte_45
ROM:8497                 bne     locret_84B5
ROM:8499                 ldb     byte_4B19
ROM:849C                 cmpb    #7
ROM:849E                 bls     loc_84A2
ROM:84A0                 ldb     #7
ROM:84A2
ROM:84A2 loc_84A2:
ROM:84A2                 aslb
ROM:84A3                 ldu     #byte_84B6
ROM:84A6                 leau    b,u
ROM:84A8                 lda     <DPbyte_43      ; Game over/insert coins timer
ROM:84AA                 anda    ,u
ROM:84AC                 bne     locret_84B5
ROM:84AE                 lda     1,u
ROM:84B0                 sta     <DPbyte_9B
ROM:84B2                 jsr     sub_84C6
ROM:84B5
ROM:84B5 locret_84B5:
ROM:84B5                 rts
ROM:84B5 ; End of function sub_8495
ROM:84B5
ROM:84B5 ; ---------------------------------------------------------------------------
ROM:84C6
ROM:84C6 ; =============== S U B R O U T I N E =======================================
ROM:84C6
ROM:84C6
ROM:84C6 sub_84C6:
ROM:84C6                 ldd     #$F800
ROM:84C9                 anda    MReg4C
ROM:84CC                 adda    #$24 ; $
ROM:84CE                 std     MReg3C
ROM:84D1
ROM:84D1 loc_84D1:
ROM:84D1                 lda     MReg3C
ROM:84D4                 lsra
ROM:84D5                 lsra
ROM:84D6                 lsra
ROM:84D7                 anda    #$F
ROM:84D9                 sta     <DPbyte_99
ROM:84DB                 ldd     #$FE00
ROM:84DE                 std     MReg3E
ROM:84E1                 ldd     #$FC80
ROM:84E4                 std     MReg3D
ROM:84E7                 ldx     #byte_4989
ROM:84EA                 ldb     <DPbyte_99
ROM:84EC                 lda     b,x
ROM:84EE
ROM:84EE loc_84EE:
ROM:84EE                 sta     <DPbyte_9A
ROM:84F0                 anda    #$C0 ; +
ROM:84F2                 cmpa    #$C0 ; +
ROM:84F4                 bne     loc_8522
ROM:84F6                 ldd     MReg4E
ROM:84F9                 subd    MReg3E
ROM:84FC                 blt     loc_8522
ROM:84FE                 subd    #$400
ROM:8501                 bge     loc_850F
ROM:8503                 lda     PRNG
ROM:8506                 cmpa    <DPbyte_9B
ROM:8508                 bcs     loc_850D
ROM:850A                 jsr     sub_A7F7
ROM:850D
ROM:850D loc_850D:
ROM:850D                 bra     loc_8522
ROM:850F ; ---------------------------------------------------------------------------
ROM:850F
ROM:850F loc_850F:
ROM:850F                 subd    #$400
ROM:8512                 bge     loc_8522
ROM:8514                 lda     PRNG
ROM:8517                 ldb     PRNG
ROM:851A                 mul
ROM:851B                 cmpa    <DPbyte_9B
ROM:851D                 bcs     loc_8522
ROM:851F                 jsr     sub_A7F7
ROM:8522
ROM:8522 loc_8522:
ROM:8522                 ldd     MReg3E
ROM:8525                 subd    #$400
ROM:8528                 std     MReg3E
ROM:852B                 lda     <DPbyte_9A
ROM:852D                 asla
ROM:852E                 asla
ROM:852F                 bne     loc_84EE
ROM:8531                 ldd     #$FE00
ROM:8534                 std     MReg3E
ROM:8537                 ldd     #$380
ROM:853A                 std     MReg3D
ROM:853D                 ldx     #byte_4999
ROM:8540                 ldb     <DPbyte_99
ROM:8542                 lda     b,x
ROM:8544
ROM:8544 loc_8544:
ROM:8544                 sta     <DPbyte_9A
ROM:8546                 anda    #$C0 ; +
ROM:8548                 cmpa    #$C0 ; +
ROM:854A                 bne     loc_8578
ROM:854C                 ldd     MReg4E
ROM:854F                 subd    MReg3E
ROM:8552                 blt     loc_8578
ROM:8554                 subd    #$400
ROM:8557                 bge     loc_8565
ROM:8559                 lda     PRNG
ROM:855C                 cmpa    <DPbyte_9B
ROM:855E                 bcs     loc_8563
ROM:8560                 jsr     sub_A80B
ROM:8563
ROM:8563 loc_8563:
ROM:8563                 bra     loc_8578
ROM:8565 ; ---------------------------------------------------------------------------
ROM:8565
ROM:8565 loc_8565:
ROM:8565                 subd    #$400
ROM:8568                 bge     loc_8578
ROM:856A                 lda     PRNG
ROM:856D                 ldb     PRNG
ROM:8570                 mul
ROM:8571                 cmpa    <DPbyte_9B
ROM:8573                 bcs     loc_8578
ROM:8575                 jsr     sub_A80B
ROM:8578
ROM:8578 loc_8578:
ROM:8578                 ldd     MReg3E
ROM:857B                 subd    #$400
ROM:857E                 std     MReg3E
ROM:8581                 lda     <DPbyte_9A
ROM:8583                 asla
ROM:8584                 asla
ROM:8585                 bne     loc_8544
ROM:8587                 ldd     MReg3C
ROM:858A                 addd    #$800
ROM:858D                 std     MReg3C
ROM:8590                 subd    MReg4C
ROM:8593                 subd    #$6000
ROM:8596                 lbcs    loc_84D1
ROM:859A                 rts
ROM:859A ; End of function sub_84C6
ROM:859A
ROM:859B
ROM:859B ; =============== S U B R O U T I N E =======================================
ROM:859B
ROM:859B
ROM:859B sub_859B:
ROM:859B                 lda     MReg20          ; XT2
ROM:859E                 lsra
ROM:859F                 lsra
ROM:85A0                 lsra
ROM:85A1                 anda    #$F
ROM:85A3                 cmpa    word_49BF
ROM:85A6                 beq     loc_85DE
ROM:85A8                 ldb     word_49BF
ROM:85AB                 sta     word_49BF
ROM:85AE                 ldx     #byte_4989
ROM:85B1                 lda     b,x
ROM:85B3
ROM:85B3 loc_85B3:
ROM:85B3                 asla
ROM:85B4                 bcc     loc_85BD
ROM:85B6                 bmi     loc_85BD
ROM:85B8                 inc     word_49BF+1
ROM:85BB                 bra     loc_85D2
ROM:85BD ; ---------------------------------------------------------------------------
ROM:85BD
ROM:85BD loc_85BD:
ROM:85BD                 asla
ROM:85BE                 bne     loc_85B3
ROM:85C0                 ldx     #byte_4999
ROM:85C3                 lda     b,x
ROM:85C5
ROM:85C5 loc_85C5:
ROM:85C5                 asla
ROM:85C6                 bcc     loc_85CF
ROM:85C8                 bmi     loc_85CF
ROM:85CA                 inc     word_49BF+1
ROM:85CD                 bra     loc_85D2
ROM:85CF ; ---------------------------------------------------------------------------
ROM:85CF
ROM:85CF loc_85CF:
ROM:85CF                 asla
ROM:85D0                 bne     loc_85C5
ROM:85D2
ROM:85D2 loc_85D2:
ROM:85D2                 lda     #0
ROM:85D4                 ldx     #byte_4989
ROM:85D7                 sta     b,x
ROM:85D9                 ldx     #byte_4999
ROM:85DC                 sta     b,x
ROM:85DE
ROM:85DE loc_85DE:
ROM:85DE                 jsr     sub_B3E4
ROM:85E1                 jsr     sub_85F9
ROM:85E4                 jsr     sub_8735
ROM:85E7                 jsr     sub_86AE
ROM:85EA                 lda     <DPbyte_95
ROM:85EC                 beq     loc_85F1
ROM:85EE                 jsr     sub_889F
ROM:85F1
ROM:85F1 loc_85F1:
ROM:85F1                 lda     <DPbyte_92
ROM:85F3                 beq     locret_85F8
ROM:85F5                 jsr     sub_88F5
ROM:85F8
ROM:85F8 locret_85F8:
ROM:85F8                 rts
ROM:85F8 ; End of function sub_859B
ROM:85F8
ROM:85F9
ROM:85F9 ; =============== S U B R O U T I N E =======================================
ROM:85F9
ROM:85F9
ROM:85F9 sub_85F9:
ROM:85F9                 ldd     #0
ROM:85FC                 std     MReg20          ; XT2
ROM:85FF                 ldd     #$6270
ROM:8602                 std     ,y++
ROM:8604                 ldu     #word_8696
ROM:8607
ROM:8607 loc_8607:
ROM:8607                 lda     <DPbyte_92
ROM:8609                 beq     loc_8618
ROM:860B                 ldd     <DPbyte_93
ROM:860D                 subd    MReg4C
ROM:8610                 cmpd    #$7000
ROM:8614                 bhi     loc_8618
ROM:8616                 bra     loc_861B
ROM:8618 ; ---------------------------------------------------------------------------
ROM:8618
ROM:8618 loc_8618:
ROM:8618                 ldd     #$7000
ROM:861B
ROM:861B loc_861B:
ROM:861B                 std     MReg3C
ROM:861E                 ldd     ,u
ROM:8620                 std     MReg3D
ROM:8623                 ldd     2,u
ROM:8625                 std     MReg3E
ROM:8628                 ldd     #$F             ; Point BIC to $5078 MReg3C
ROM:862B                 std     MW1
ROM:862E                 lda     #$67 ; g
ROM:8630                 jsr     Math_Run_Start  ; Do math program run
ROM:8633                 ldd     MReg00          ; Math result X
ROM:8636                 std     DVSRH
ROM:8639                 jsr     sub_CCE4
ROM:863C                 ldd     #$200
ROM:863F                 std     MReg3C
ROM:8642                 ldd     MReg3D
ROM:8645                 subd    MReg4D
ROM:8648                 bpl     loc_864E
ROM:864A                 coma
ROM:864B                 negb
ROM:864C                 sbca    #$FF
ROM:864E
ROM:864E loc_864E:
ROM:864E                 cmpd    MReg3C
ROM:8652                 ble     loc_8657
ROM:8654                 std     MReg3C
ROM:8657
ROM:8657 loc_8657:
ROM:8657                 ldd     MReg3E
ROM:865A                 subd    MReg4E
ROM:865D                 bpl     loc_8663
ROM:865F                 coma
ROM:8660                 negb
ROM:8661                 sbca    #$FF
ROM:8663
ROM:8663 loc_8663:
ROM:8663                 cmpd    MReg3C
ROM:8667                 ble     loc_866C
ROM:8669                 std     MReg3C
ROM:866C
ROM:866C loc_866C:                               ; Point BIC to $5078 MReg3C
ROM:866C                 ldd     #$F
ROM:866F                 std     MW1
ROM:8672                 lda     #$67 ; g
ROM:8674                 jsr     Math_Run_Start  ; Do math program run
ROM:8677                 ldd     MReg00          ; Math result X
ROM:867A                 std     DVSRH
ROM:867D                 jsr     sub_CCFC        ; Trench floor lines calcs
ROM:8680                 ldd     #$8040
ROM:8683                 std     ,y++
ROM:8685                 leau    4,u
ROM:8687                 cmpu    #word_8696+$18
ROM:868B                 lbcs    loc_8607
ROM:868F                 ldd     MReg4C
ROM:8692                 std     MReg20          ; XT2
ROM:8695                 rts
ROM:8695 ; End of function sub_85F9
ROM:8695
ROM:8695 ; ---------------------------------------------------------------------------
ROM:86AE
ROM:86AE ; =============== S U B R O U T I N E =======================================
ROM:86AE
ROM:86AE
ROM:86AE sub_86AE:
ROM:86AE                 ldd     #0
ROM:86B1                 std     MReg20          ; XT2
ROM:86B4                 ldd     #$6250
ROM:86B7                 std     ,y++
ROM:86B9                 ldu     #word_8725
ROM:86BC                 lda     <DPbyte_92
ROM:86BE                 beq     loc_86CD
ROM:86C0                 ldd     <DPbyte_93
ROM:86C2                 subd    MReg4C
ROM:86C5                 cmpd    #$7000
ROM:86C9                 bhi     loc_86CD
ROM:86CB                 bra     loc_86D0
ROM:86CD ; ---------------------------------------------------------------------------
ROM:86CD
ROM:86CD loc_86CD:
ROM:86CD                 ldd     #$7000
ROM:86D0
ROM:86D0 loc_86D0:
ROM:86D0                 std     MReg3C
ROM:86D3                 ldd     ,u
ROM:86D5                 std     MReg3D
ROM:86D8                 ldd     2,u
ROM:86DA                 std     MReg3E
ROM:86DD                 ldd     #$F
ROM:86E0                 std     MW1             ; Point BIC to $5078 MReg3C
ROM:86E3                 lda     #$67 ; g
ROM:86E5                 jsr     Math_Run_Start  ; Do math program run
ROM:86E8                 ldd     MReg00          ; Math result X
ROM:86EB                 std     DVSRH
ROM:86EE                 jsr     sub_CCE4
ROM:86F1                 bra     loc_8711
ROM:86F3 ; ---------------------------------------------------------------------------
ROM:86F3
ROM:86F3 loc_86F3:
ROM:86F3                 ldd     ,u
ROM:86F5                 std     MReg3D
ROM:86F8                 ldd     2,u
ROM:86FA                 std     MReg3E
ROM:86FD                 ldd     #$F
ROM:8700                 std     MW1             ; Point BIC to $5078 MReg3C
ROM:8703                 lda     #$67 ; g
ROM:8705                 jsr     Math_Run_Start  ; Do math program run
ROM:8708                 ldd     MReg00          ; Math result X
ROM:870B                 std     DVSRH
ROM:870E                 jsr     sub_CCFC        ; Trench floor lines calcs
ROM:8711
ROM:8711 loc_8711:
ROM:8711                 leau    4,u
ROM:8713                 cmpu    #word_8725+$10
ROM:8717                 bcs     loc_86F3
ROM:8719                 ldd     #$8040
ROM:871C                 std     ,y++
ROM:871E                 ldd     MReg4C
ROM:8721                 std     MReg20          ; XT2
ROM:8724                 rts
ROM:8724 ; End of function sub_86AE
ROM:8724
ROM:8724 ; ---------------------------------------------------------------------------
ROM:8735
ROM:8735 ; =============== S U B R O U T I N E =======================================
ROM:8735
ROM:8735
ROM:8735 sub_8735:
ROM:8735                 ldu     word_49AF
ROM:8738                 ldb     ,u
ROM:873A                 cmpb    #3
ROM:873C                 bne     loc_873F
ROM:873E                 rts
ROM:873F ; ---------------------------------------------------------------------------
ROM:873F
ROM:873F loc_873F:
ROM:873F                 cmpb    #1
ROM:8741                 bne     loc_8748
ROM:8743                 ldd     #$800
ROM:8746                 bra     loc_874B
ROM:8748 ; ---------------------------------------------------------------------------
ROM:8748
ROM:8748 loc_8748:
ROM:8748                 ldd     #$1000
ROM:874B
ROM:874B loc_874B:
ROM:874B                 addd    word_49B1
ROM:874E                 subd    MReg20          ; XT2
ROM:8751                 bpl     loc_8786
ROM:8753                 ldb     ,u
ROM:8755                 cmpb    #1
ROM:8757                 bne     loc_875E
ROM:8759                 ldd     #$800
ROM:875C                 bra     loc_8761
ROM:875E ; ---------------------------------------------------------------------------
ROM:875E
ROM:875E loc_875E:
ROM:875E                 ldd     #$1000
ROM:8761
ROM:8761 loc_8761:
ROM:8761                 addd    word_49B1
ROM:8764                 std     word_49B1
ROM:8767                 leau    3,u
ROM:8769                 stu     word_49AF
ROM:876C                 ldb     ,u
ROM:876E                 cmpb    #3
ROM:8770                 bne     loc_8773
ROM:8772                 rts
ROM:8773 ; ---------------------------------------------------------------------------
ROM:8773
ROM:8773 loc_8773:
ROM:8773                 ldb     ,u
ROM:8775                 cmpb    #5
ROM:8777                 bne     loc_8783
ROM:8779                 ldu     word_49A9
ROM:877C                 leau    2,u
ROM:877E                 stu     word_49A9
ROM:8781                 ldu     ,u
ROM:8783
ROM:8783 loc_8783:
ROM:8783                 stu     word_49AF
ROM:8786
ROM:8786 loc_8786:
ROM:8786                 ldd     #$6260
ROM:8789                 std     ,y++
ROM:878B                 jsr     sub_83CE
ROM:878E                 ldd     word_49A9
ROM:8791                 std     word_49AD
ROM:8794                 ldd     word_49AF
ROM:8797                 std     word_49B9
ROM:879A                 ldd     word_49B1
ROM:879D                 std     word_49BB
ROM:87A0                 std     MReg3C
ROM:87A3                 ldd     #$FC00
ROM:87A6                 std     MReg3D
ROM:87A9                 jsr     sub_87CB
ROM:87AC                 ldd     word_49A9
ROM:87AF                 std     word_49AD
ROM:87B2                 ldd     word_49AF
ROM:87B5                 std     word_49B9
ROM:87B8                 ldd     word_49B1
ROM:87BB                 std     word_49BB
ROM:87BE                 std     MReg3C
ROM:87C1                 ldd     #$400
ROM:87C4                 std     MReg3D
ROM:87C7                 jsr     sub_87CB
ROM:87CA                 rts
ROM:87CA ; End of function sub_8735
ROM:87CA
ROM:87CB
ROM:87CB ; =============== S U B R O U T I N E =======================================
ROM:87CB
ROM:87CB
ROM:87CB sub_87CB:
ROM:87CB                 ldd     word_49BB
ROM:87CE                 std     MReg3C
ROM:87D1                 subd    MReg20          ; XT2
ROM:87D4                 lbmi    loc_8866
ROM:87D8                 cmpd    #$800
ROM:87DC                 bge     loc_87F5
ROM:87DE                 aslb
ROM:87DF                 rola
ROM:87E0                 coma
ROM:87E1                 negb
ROM:87E2                 sbca    #$FF
ROM:87E4                 addd    MReg22          ; ZT2
ROM:87E7                 cmpd    #$F000
ROM:87EB                 bge     loc_87F0
ROM:87ED                 ldd     #$F000
ROM:87F0
ROM:87F0 loc_87F0:
ROM:87F0                 std     MReg3E
ROM:87F3                 bra     loc_8801
ROM:87F5 ; ---------------------------------------------------------------------------
ROM:87F5
ROM:87F5 loc_87F5:
ROM:87F5                 ldd     word_49BB
ROM:87F8                 std     MReg3C
ROM:87FB                 ldd     #$F000
ROM:87FE                 std     MReg3E
ROM:8801
ROM:8801 loc_8801:
ROM:8801                 lda     <DPbyte_92
ROM:8803                 beq     loc_880E
ROM:8805                 ldd     MReg3C
ROM:8808                 subd    <DPbyte_93
ROM:880A                 lbpl    locret_889E
ROM:880E
ROM:880E loc_880E:
ROM:880E                 ldd     MReg3C
ROM:8811                 subd    MReg4C
ROM:8814                 subd    #$7000
ROM:8817                 lbpl    locret_889E
ROM:881B                 ldd     #$F
ROM:881E                 std     MW1             ; Point BIC to $5078 MReg3C
ROM:8821                 lda     #$67 ; g
ROM:8823                 jsr     Math_Run_Start  ; Do math program run
ROM:8826                 ldd     MReg01          ; Math result Y
ROM:8829                 bpl     loc_882F
ROM:882B                 coma
ROM:882C                 negb
ROM:882D                 sbca    #$FF
ROM:882F
ROM:882F loc_882F:                               ; Math result X
ROM:882F                 subd    MReg00
ROM:8832                 bgt     loc_8866
ROM:8834                 ldd     MReg00          ; Math result X
ROM:8837                 std     DVSRH
ROM:883A                 ldd     #0
ROM:883D                 std     <DPbyte_D6
ROM:883F                 ldd     #$68 ; h
ROM:8842                 std     <DPbyte_D8
ROM:8844                 jsr     sub_CD08        ; Trench side vertical lines calcs
ROM:8847                 ldd     #0
ROM:884A                 std     MReg3E
ROM:884D                 ldd     #$F
ROM:8850                 std     MW1             ; Point BIC to $5078 MReg3C
ROM:8853                 lda     #$67 ; g
ROM:8855                 jsr     Math_Run_Start  ; Do math program run
ROM:8858                 ldd     MReg00          ; Math result X
ROM:885B                 std     DVSRH
ROM:885E                 jsr     sub_CCFC        ; Trench floor lines calcs
ROM:8861                 ldd     #$8040
ROM:8864                 std     ,y++
ROM:8866
ROM:8866 loc_8866:
ROM:8866                 ldu     word_49B9
ROM:8869                 ldb     ,u
ROM:886B                 cmpb    #1
ROM:886D                 bne     loc_8874
ROM:886F                 ldd     #$800
ROM:8872                 bra     loc_8877
ROM:8874 ; ---------------------------------------------------------------------------
ROM:8874
ROM:8874 loc_8874:
ROM:8874                 ldd     #$1000
ROM:8877
ROM:8877 loc_8877:
ROM:8877                 addd    word_49BB
ROM:887A                 std     word_49BB
ROM:887D                 subd    MReg20          ; XT2
ROM:8880                 bmi     locret_889E
ROM:8882                 leau    3,u
ROM:8884                 ldb     ,u
ROM:8886                 cmpb    #3
ROM:8888                 beq     locret_889E
ROM:888A                 cmpb    #5
ROM:888C                 bne     loc_8898
ROM:888E                 ldu     word_49AD
ROM:8891                 leau    2,u
ROM:8893                 stu     word_49AD
ROM:8896                 ldu     ,u
ROM:8898
ROM:8898 loc_8898:
ROM:8898                 stu     word_49B9
ROM:889B                 jmp     loc_87F5
ROM:889E ; ---------------------------------------------------------------------------
ROM:889E
ROM:889E locret_889E:
ROM:889E                 rts
ROM:889E ; End of function sub_87CB
ROM:889E
ROM:889F
ROM:889F ; =============== S U B R O U T I N E =======================================
ROM:889F
ROM:889F
ROM:889F sub_889F:
ROM:889F                 ldb     #$10
ROM:88A1                 stb     <DPbyte_DC
ROM:88A3                 jsr     sub_CD38        ; Trench left side turret calcs
ROM:88A6                 ldd     #$F000
ROM:88A9                 std     word_5E04
ROM:88AC                 ldd     #0
ROM:88AF                 std     word_5E02
ROM:88B2                 ldd     <DPbyte_96
ROM:88B4                 std     word_5E00
ROM:88B7                 ldd     #$1C0           ; Point BIC to math $5E00
ROM:88BA                 std     MW1
ROM:88BD                 lda     #$67 ; g
ROM:88BF                 jsr     Math_Run_Start  ; Do math program run
ROM:88C2                 ldd     MReg00          ; Math result X
ROM:88C5                 cmpd    #$FE00
ROM:88C9                 bgt     loc_88D0
ROM:88CB                 lda     #0
ROM:88CD                 sta     <DPbyte_95
ROM:88CF                 rts
ROM:88D0 ; ---------------------------------------------------------------------------
ROM:88D0
ROM:88D0 loc_88D0:
ROM:88D0                 subd    #$7000
ROM:88D3                 bgt     locret_88F4
ROM:88D5                 ldd     #$A018
ROM:88D8                 std     word_5E00
ROM:88DB                 ldd     #$7200
ROM:88DE                 std     word_5E04
ROM:88E1                 ldd     MReg00          ; Math result X
ROM:88E4                 subd    #$1000
ROM:88E7                 bge     loc_88EE
ROM:88E9                 jsr     sub_CD5C        ; Trench calcs
ROM:88EC                 bra     loc_88F1
ROM:88EE ; ---------------------------------------------------------------------------
ROM:88EE
ROM:88EE loc_88EE:
ROM:88EE                 jsr     sub_CD50
ROM:88F1
ROM:88F1 loc_88F1:                               ; Function select for an object
ROM:88F1                 jsr     sub_CD74
ROM:88F4
ROM:88F4 locret_88F4:
ROM:88F4                 rts
ROM:88F4 ; End of function sub_889F
ROM:88F4
ROM:88F5
ROM:88F5 ; =============== S U B R O U T I N E =======================================
ROM:88F5
ROM:88F5
ROM:88F5 sub_88F5:
ROM:88F5                 ldd     #$6280
ROM:88F8                 std     ,y++
ROM:88FA                 lda     <DPbyte_92
ROM:88FC                 beq     locret_8950
ROM:88FE                 ldd     <DPbyte_93
ROM:8900                 std     MReg3C
ROM:8903                 subd    MReg4C
ROM:8906                 subd    #$7000
ROM:8909                 bmi     loc_8911
ROM:890B                 coma
ROM:890C                 negb
ROM:890D                 sbca    #$FF
ROM:890F                 bra     loc_8914
ROM:8911 ; ---------------------------------------------------------------------------
ROM:8911
ROM:8911 loc_8911:
ROM:8911                 ldd     #0
ROM:8914
ROM:8914 loc_8914:
ROM:8914                 std     MReg3E
ROM:8917                 ldd     #$FC00
ROM:891A                 std     MReg3D
ROM:891D                 ldd     #$F
ROM:8920                 std     MW1             ; Point BIC to $5078 MReg3C
ROM:8923                 lda     #$67 ; g
ROM:8925                 jsr     Math_Run_Start  ; Do math program run
ROM:8928                 ldd     MReg00          ; Math result X
ROM:892B                 std     DVSRH
ROM:892E                 jsr     sub_CCE4
ROM:8931                 ldd     #$400
ROM:8934                 std     MReg3D
ROM:8937                 ldd     #$F
ROM:893A                 std     MW1             ; Point BIC to $5078 MReg3C
ROM:893D                 lda     #$67 ; g
ROM:893F                 jsr     Math_Run_Start  ; Do math program run
ROM:8942                 ldd     MReg00          ; Math result X
ROM:8945                 std     DVSRH
ROM:8948                 jsr     sub_CCFC        ; Trench floor lines calcs
ROM:894B                 ldd     #$8040
ROM:894E                 std     ,y++
ROM:8950
ROM:8950 locret_8950:
ROM:8950                 rts
ROM:8950 ; End of function sub_88F5
ROM:8950
ROM:8951
ROM:8951 ; =============== S U B R O U T I N E =======================================
ROM:8951
ROM:8951 ; Attributes: noreturn
ROM:8951
ROM:8951 sub_8951:
ROM:8951                 jsr     sub_8981
ROM:8954                 inc     <DPbyte_4D
ROM:8956                 jmp     sub_89D3        ; Space wave pitch
ROM:8956 ; End of function sub_8951
ROM:8956
ROM:8959
ROM:8959 ; =============== S U B R O U T I N E =======================================
ROM:8959
ROM:8959 ; Attributes: noreturn
ROM:8959
ROM:8959 sub_8959:
ROM:8959                 jsr     sub_8993
ROM:895C                 dec     <DPbyte_4D
ROM:895E                 jmp     sub_89D3        ; Space wave pitch
ROM:895E ; End of function sub_8959
ROM:895E
ROM:8961
ROM:8961 ; =============== S U B R O U T I N E =======================================
ROM:8961
ROM:8961 ; Attributes: noreturn
ROM:8961
ROM:8961 sub_8961:
ROM:8961                 jsr     sub_8993
ROM:8964                 dec     <DPbyte_4E
ROM:8966                 jmp     sub_89C8        ; Space wave roll
ROM:8966 ; End of function sub_8961
ROM:8966
ROM:8969
ROM:8969 ; =============== S U B R O U T I N E =======================================
ROM:8969
ROM:8969 ; Attributes: noreturn
ROM:8969
ROM:8969 sub_8969:
ROM:8969                 jsr     sub_8981
ROM:896C                 inc     <DPbyte_4E
ROM:896E                 jmp     sub_89C8        ; Space wave roll
ROM:896E ; End of function sub_8969
ROM:896E
ROM:8971
ROM:8971 ; =============== S U B R O U T I N E =======================================
ROM:8971
ROM:8971 ; Attributes: noreturn
ROM:8971
ROM:8971 sub_8971:
ROM:8971                 jsr     sub_8981
ROM:8974                 dec     <DPbyte_4F
ROM:8976                 jmp     sub_89DE        ; Space wave yaw
ROM:8976 ; End of function sub_8971
ROM:8976
ROM:8979
ROM:8979 ; =============== S U B R O U T I N E =======================================
ROM:8979
ROM:8979 ; Attributes: noreturn
ROM:8979
ROM:8979 sub_8979:
ROM:8979                 jsr     sub_8993
ROM:897C                 inc     <DPbyte_4F
ROM:897E                 jmp     sub_89DE        ; Space wave yaw
ROM:897E ; End of function sub_8979
ROM:897E
ROM:8981
ROM:8981 ; =============== S U B R O U T I N E =======================================
ROM:8981
ROM:8981
ROM:8981 sub_8981:
ROM:8981                 lda     #$14
ROM:8983                 ldu     #word_89A8
ROM:8986                 leau    a,u
ROM:8988                 ldd     ,u
ROM:898A                 std     MReg11          ; Sine for rotation
ROM:898D                 ldd     2,u
ROM:898F                 std     MReg12          ; Cosine for rotation
ROM:8992                 rts
ROM:8992 ; End of function sub_8981
ROM:8992
ROM:8993
ROM:8993 ; =============== S U B R O U T I N E =======================================
ROM:8993
ROM:8993
ROM:8993 sub_8993:
ROM:8993                 lda     #$14
ROM:8995                 ldu     #word_89A8
ROM:8998                 leau    a,u
ROM:899A                 ldd     #0
ROM:899D                 subd    ,u
ROM:899F                 std     MReg11          ; Sine for rotation
ROM:89A2                 ldd     2,u
ROM:89A4                 std     MReg12          ; Cosine for rotation
ROM:89A7                 rts
ROM:89A7 ; End of function sub_8993
ROM:89A7
ROM:89A7 ; ---------------------------------------------------------------------------
ROM:89C8
ROM:89C8 ; =============== S U B R O U T I N E =======================================
ROM:89C8
ROM:89C8 ; Space wave roll
ROM:89C8 ; Attributes: noreturn
ROM:89C8
ROM:89C8 sub_89C8:
ROM:89C8                 clra
ROM:89C9                 ldb     2,x
ROM:89CB                 std     MW1
ROM:89CE                 lda     #0              ; Roll
ROM:89D0                 jmp     Math_Run_Start  ; Do math program run
ROM:89D0 ; End of function sub_89C8
ROM:89D0
ROM:89D3
ROM:89D3 ; =============== S U B R O U T I N E =======================================
ROM:89D3
ROM:89D3 ; Space wave pitch
ROM:89D3
ROM:89D3 sub_89D3:
ROM:89D3                 clra
ROM:89D4                 ldb     2,x
ROM:89D6                 std     MW1
ROM:89D9                 lda     #$E             ; Pitch
ROM:89DB                 jmp     Math_Run_Start  ; Do math program run
ROM:89DB ; End of function sub_89D3
ROM:89DB
ROM:89DE
ROM:89DE ; =============== S U B R O U T I N E =======================================
ROM:89DE
ROM:89DE ; Space wave yaw
ROM:89DE
ROM:89DE sub_89DE:
ROM:89DE                 clra
ROM:89DF                 ldb     2,x
ROM:89E1                 std     MW1
ROM:89E4                 lda     #$1C            ; Yaw
ROM:89E6                 jmp     Math_Run_Start  ; Do math program run
ROM:89E6 ; End of function sub_89DE
ROM:89E6
ROM:89E9
ROM:89E9 ; =============== S U B R O U T I N E =======================================
ROM:89E9
ROM:89E9
ROM:89E9 sub_89E9:
ROM:89E9                 ldd     -$10,u
ROM:89EB                 jsr     Shift_D_R_5     ; Shift D register right
ROM:89EE                 addd    -$A,u
ROM:89F0                 std     -$A,u
ROM:89F2                 ldd     -8,u
ROM:89F4                 jsr     Shift_D_R_5     ; Shift D register right
ROM:89F7                 addd    -2,u
ROM:89F9                 std     -2,u
ROM:89FB                 ldd     ,u
ROM:89FD                 jsr     Shift_D_R_5     ; Shift D register right
ROM:8A00                 addd    6,u
ROM:8A02                 std     6,u
ROM:8A04                 rts
ROM:8A04 ; End of function sub_89E9
ROM:8A04
ROM:8A05
ROM:8A05 ; =============== S U B R O U T I N E =======================================
ROM:8A05
ROM:8A05
ROM:8A05 sub_8A05:
ROM:8A05                 ldd     -$10,u
ROM:8A07                 jsr     Shift_D_R_6     ; Shift D register right
ROM:8A0A                 addd    -$A,u
ROM:8A0C                 std     -$A,u
ROM:8A0E                 ldd     -8,u
ROM:8A10                 jsr     Shift_D_R_6     ; Shift D register right
ROM:8A13                 addd    -2,u
ROM:8A15                 std     -2,u
ROM:8A17                 ldd     ,u
ROM:8A19                 jsr     Shift_D_R_6     ; Shift D register right
ROM:8A1C                 addd    6,u
ROM:8A1E                 std     6,u
ROM:8A20                 rts
ROM:8A20 ; End of function sub_8A05
ROM:8A20
ROM:8A21
ROM:8A21 ; =============== S U B R O U T I N E =======================================
ROM:8A21
ROM:8A21
ROM:8A21 sub_8A21:
ROM:8A21                 ldd     -$C,u
ROM:8A23                 jsr     Shift_D_R_6     ; Shift D register right
ROM:8A26                 addd    -$A,u
ROM:8A28                 std     -$A,u
ROM:8A2A                 ldd     -4,u
ROM:8A2C                 jsr     Shift_D_R_6     ; Shift D register right
ROM:8A2F                 addd    -2,u
ROM:8A31                 std     -2,u
ROM:8A33                 ldd     4,u
ROM:8A35                 jsr     Shift_D_R_6     ; Shift D register right
ROM:8A38                 addd    6,u
ROM:8A3A                 std     6,u
ROM:8A3C                 rts
ROM:8A3C ; End of function sub_8A21
ROM:8A3C
ROM:8A3D
ROM:8A3D ; =============== S U B R O U T I N E =======================================
ROM:8A3D
ROM:8A3D
ROM:8A3D sub_8A3D:
ROM:8A3D                 ldd     -$C,u
ROM:8A3F                 jsr     Shift_D_R_5     ; Shift D register right
ROM:8A42                 addd    -$A,u
ROM:8A44                 std     -$A,u
ROM:8A46                 ldd     -4,u
ROM:8A48                 jsr     Shift_D_R_5     ; Shift D register right
ROM:8A4B                 addd    -2,u
ROM:8A4D                 std     -2,u
ROM:8A4F                 ldd     4,u
ROM:8A51                 jsr     Shift_D_R_5     ; Shift D register right
ROM:8A54                 addd    6,u
ROM:8A56                 std     6,u
ROM:8A58                 rts
ROM:8A58 ; End of function sub_8A3D
ROM:8A58
ROM:8A59
ROM:8A59 ; =============== S U B R O U T I N E =======================================
ROM:8A59
ROM:8A59
ROM:8A59 sub_8A59:
ROM:8A59                 ldd     #0
ROM:8A5C                 subd    -$C,u
ROM:8A5E                 jsr     Shift_D_R_6     ; Shift D register right
ROM:8A61                 addd    -$A,u
ROM:8A63                 std     -$A,u
ROM:8A65                 ldd     #0
ROM:8A68                 subd    -4,u
ROM:8A6A                 jsr     Shift_D_R_6     ; Shift D register right
ROM:8A6D                 addd    -2,u
ROM:8A6F                 std     -2,u
ROM:8A71                 ldd     #0
ROM:8A74                 subd    4,u
ROM:8A76                 jsr     Shift_D_R_6     ; Shift D register right
ROM:8A79                 addd    6,u
ROM:8A7B                 std     6,u
ROM:8A7D                 rts
ROM:8A7D ; End of function sub_8A59
ROM:8A7D
ROM:8A7E
ROM:8A7E ; =============== S U B R O U T I N E =======================================
ROM:8A7E
ROM:8A7E
ROM:8A7E sub_8A7E:
ROM:8A7E                 ldd     #0
ROM:8A81                 subd    -$C,u
ROM:8A83                 jsr     Shift_D_R_5     ; Shift D register right
ROM:8A86                 addd    -$A,u
ROM:8A88                 std     -$A,u
ROM:8A8A                 ldd     #0
ROM:8A8D                 subd    -4,u
ROM:8A8F                 jsr     Shift_D_R_5     ; Shift D register right
ROM:8A92                 addd    -2,u
ROM:8A94                 std     -2,u
ROM:8A96                 ldd     #0
ROM:8A99                 subd    4,u
ROM:8A9B                 jsr     Shift_D_R_5     ; Shift D register right
ROM:8A9E                 addd    6,u
ROM:8AA0                 std     6,u
ROM:8AA2                 rts
ROM:8AA2 ; End of function sub_8A7E
ROM:8AA2
ROM:8AA2 ; ---------------------------------------------------------------------------
ROM:8AB6
ROM:8AB6 ; =============== S U B R O U T I N E =======================================
ROM:8AB6
ROM:8AB6
ROM:8AB6 sub_8AB6:
ROM:8AB6                 ldd     -$A,u
ROM:8AB8                 addd    8,u
ROM:8ABA                 bvs     loc_8ABE
ROM:8ABC                 std     8,u
ROM:8ABE
ROM:8ABE loc_8ABE:
ROM:8ABE                 ldd     -2,u
ROM:8AC0                 addd    $A,u
ROM:8AC2                 bvs     loc_8AC6
ROM:8AC4                 std     $A,u
ROM:8AC6
ROM:8AC6 loc_8AC6:
ROM:8AC6                 ldd     $C,u
ROM:8AC8                 addd    6,u
ROM:8ACA                 bvs     locret_8ACE
ROM:8ACC                 std     $C,u
ROM:8ACE
ROM:8ACE locret_8ACE:
ROM:8ACE                 rts
ROM:8ACE ; End of function sub_8AB6
ROM:8ACE
ROM:8ACF ; ---------------------------------------------------------------------------
ROM:8ACF ; START OF FUNCTION CHUNK FOR sub_B32B
ROM:8ACF
ROM:8ACF loc_8ACF:
ROM:8ACF                 ldx     <DPbyte_C2
ROM:8AD1                 lda     3,x
ROM:8AD3                 cmpa    #1
ROM:8AD5                 bne     locret_8ADB
ROM:8AD7                 lda     6,x
ROM:8AD9                 beq     loc_8ADC
ROM:8ADB
ROM:8ADB locret_8ADB:
ROM:8ADB                 rts
ROM:8ADC ; ---------------------------------------------------------------------------
ROM:8ADC
ROM:8ADC loc_8ADC:                               ; Update random numbers
ROM:8ADC                 jsr     Gen_Random
ROM:8ADF                 lda     3,x
ROM:8AE1                 cmpa    #1
ROM:8AE3                 bne     loc_8AED
ROM:8AE5                 ldd     $15,x
ROM:8AE8                 orab    #1
ROM:8AEA                 std     $15,x
ROM:8AED
ROM:8AED loc_8AED:
ROM:8AED                 ldx     <DPbyte_C2
ROM:8AEF                 inc     8,x
ROM:8AF1                 dec     7,x
ROM:8AF3                 lble    loc_8B57
ROM:8AF7                 lda     #5
ROM:8AF9                 sta     7,x
ROM:8AFB                 jsr     sub_97ED        ; Vaders tie score
ROM:8AFE                 lda     #$1F
ROM:8B00                 sta     9,x
ROM:8B02                 sta     6,x
ROM:8B04                 ldx     #$5090
ROM:8B07                 ldu     <DPbyte_C2
ROM:8B09                 ldu     ,u
ROM:8B0B                 ldd     #0
ROM:8B0E                 std     -$A,u
ROM:8B10                 std     -2,u
ROM:8B12                 std     6,u
ROM:8B14                 lda     #2
ROM:8B16                 sta     <DPbyte_1
ROM:8B18
ROM:8B18 loc_8B18:
ROM:8B18                 ldd     #$4000
ROM:8B1B                 subd    <DPbyte_C4
ROM:8B1D                 ldb     -$10,x
ROM:8B1F                 mul
ROM:8B20                 tfr     a, b
ROM:8B22                 aslb
ROM:8B23                 rola
ROM:8B24                 sex
ROM:8B25                 addd    -$A,u
ROM:8B27                 std     -$A,u
ROM:8B29                 lda     <DPbyte_53
ROM:8B2D                 ldb     -8,x
ROM:8B2F                 mul
ROM:8B30                 bcs     loc_8B33
ROM:8B32                 nega
ROM:8B33
ROM:8B33 loc_8B33:
ROM:8B33                 tfr     a, b
ROM:8B35                 nop
ROM:8B36                 sex
ROM:8B37                 addd    -2,u
ROM:8B39                 std     -2,u
ROM:8B3B                 lda     <DPbyte_54
ROM:8B3F                 ldb     ,x
ROM:8B41                 mul
ROM:8B42                 bcs     loc_8B45
ROM:8B44                 nega
ROM:8B45
ROM:8B45 loc_8B45:
ROM:8B45                 tfr     a, b
ROM:8B47                 nop
ROM:8B48                 sex
ROM:8B49                 addd    6,u
ROM:8B4B                 std     6,u
ROM:8B4D                 leax    2,x
ROM:8B4F                 dec     <DPbyte_1
ROM:8B51                 bpl     loc_8B18
ROM:8B53                 jsr     Sound_35
ROM:8B56                 rts
ROM:8B57 ; ---------------------------------------------------------------------------
ROM:8B57
ROM:8B57 loc_8B57:
ROM:8B57                 ldx     <DPbyte_C2
ROM:8B59                 jsr     Sound_35
ROM:8B5C                 lda     2,x
ROM:8B5E                 cmpa    word_4B38
ROM:8B61                 bne     loc_8B66
ROM:8B63                 jsr     Sound_2B
ROM:8B66
ROM:8B66 loc_8B66:
ROM:8B66                 jsr     sub_B739
ROM:8B69                 jsr     sub_97E8        ; Tie fighter score
ROM:8B6C                 rts
ROM:8B6C ; END OF FUNCTION CHUNK FOR sub_B32B
ROM:8B6D
ROM:8B6D ; =============== S U B R O U T I N E =======================================
ROM:8B6D
ROM:8B6D
ROM:8B6D sub_8B6D:
ROM:8B6D                 ldx     #byte_4900      ; 3x Tie fighter data structure ($19 bytes per Tie)
ROM:8B70
ROM:8B70 loc_8B70:
ROM:8B70                 stx     <DPbyte_5A
ROM:8B72                 ldu     ,x
ROM:8B74                 lda     3,x
ROM:8B76                 beq     loc_8B7B
ROM:8B78                 jsr     sub_8BE1
ROM:8B7B
ROM:8B7B loc_8B7B:
ROM:8B7B                 ldx     <DPbyte_5A
ROM:8B7D                 leax    $19,x
ROM:8B80                 cmpx    #byte_4900+$4B  ; 3x Tie fighter data structure ($19 bytes per Tie)
ROM:8B83                 bcs     loc_8B70
ROM:8B85                 rts
ROM:8B85 ; End of function sub_8B6D
ROM:8B85
ROM:8B86
ROM:8B86 ; =============== S U B R O U T I N E =======================================
ROM:8B86
ROM:8B86
ROM:8B86 sub_8B86:
ROM:8B86                 ldx     #byte_4900      ; 3x Tie fighter data structure ($19 bytes per Tie)
ROM:8B89
ROM:8B89 loc_8B89:
ROM:8B89                 stx     <DPbyte_5A
ROM:8B8B                 ldu     ,x
ROM:8B8D                 lda     3,x
ROM:8B8F                 cmpa    #1
ROM:8B91                 bne     loc_8BD6
ROM:8B93                 lda     $A,u
ROM:8B95                 cmpa    #9
ROM:8B97                 blt     loc_8B9B
ROM:8B99                 suba    #2
ROM:8B9B
ROM:8B9B loc_8B9B:
ROM:8B9D                 bgt     loc_8BA1
ROM:8B9F                 adda    #2
ROM:8BA1
ROM:8BA1 loc_8BA1:
ROM:8BA1                 sta     $A,u
ROM:8BA3                 lda     $C,u
ROM:8BA5                 cmpa    #9
ROM:8BA7                 blt     loc_8BAB
ROM:8BA9                 suba    #3
ROM:8BAB
ROM:8BAB loc_8BAB:
ROM:8BAD                 bgt     loc_8BB1
ROM:8BAF                 adda    #3
ROM:8BB1
ROM:8BB1 loc_8BB1:
ROM:8BB1                 sta     $C,u
ROM:8BB3                 ldd     8,u
ROM:8BB5                 addd    #$400
ROM:8BB8                 bvs     loc_8BBE
ROM:8BBA                 std     8,u
ROM:8BBC                 bra     loc_8BD6
ROM:8BBE ; ---------------------------------------------------------------------------
ROM:8BBE
ROM:8BBE loc_8BBE:
ROM:8BBE                 lda     $A,u
ROM:8BC0                 tsta
ROM:8BC1                 bpl     loc_8BC4
ROM:8BC3                 nega
ROM:8BC4
ROM:8BC4 loc_8BC4:
ROM:8BC4                 cmpa    #8
ROM:8BC6                 bgt     loc_8BD6
ROM:8BC8                 lda     $C,u
ROM:8BCA                 tsta
ROM:8BCB                 bpl     loc_8BCE
ROM:8BCD                 nega
ROM:8BCE
ROM:8BCE loc_8BCE:
ROM:8BCE                 cmpa    #8
ROM:8BD0                 bgt     loc_8BD6
ROM:8BD2                 lda     #0
ROM:8BD4                 sta     3,x
ROM:8BD6
ROM:8BD6 loc_8BD6:
ROM:8BD6                 ldx     <DPbyte_5A
ROM:8BD8                 leax    $19,x
ROM:8BDB                 cmpx    #byte_4900+$4B  ; 3x Tie fighter data structure ($19 bytes per Tie)
ROM:8BDE                 bcs     loc_8B89
ROM:8BE0                 rts
ROM:8BE0 ; End of function sub_8B86
ROM:8BE0
ROM:8BE1
ROM:8BE1 ; =============== S U B R O U T I N E =======================================
ROM:8BE1
ROM:8BE1
ROM:8BE1 sub_8BE1:
ROM:8BE1                 jsr     loc_8E3A
ROM:8BE4                 ldd     #0
ROM:8BE7                 sta     <DPbyte_4C
ROM:8BE9                 sta     <DPbyte_4E
ROM:8BEB                 sta     <DPbyte_4D
ROM:8BED                 sta     <DPbyte_4F
ROM:8BEF                 lda     $15,x
ROM:8BF2                 anda    #$10
ROM:8BF4                 ldb     PRNG
ROM:8BF7                 andb    #$30 ; 0
ROM:8BF9                 std     $15,x
ROM:8BFC                 lda     9,x
ROM:8BFE                 deca
ROM:8BFF                 bmi     loc_8C15
ROM:8C01                 sta     9,x
ROM:8C03                 ldd     #$1640
ROM:8C06                 std     MReg11          ; Sine for rotation
ROM:8C09                 ldd     #$3C02
ROM:8C0C                 std     MReg12          ; Cosine for rotation
ROM:8C0F                 jsr     sub_89C8        ; Space wave roll
ROM:8C12 ; ---------------------------------------------------------------------------
ROM:8C12                 jmp     loc_8C44
ROM:8C15 ; ---------------------------------------------------------------------------
ROM:8C15
ROM:8C15 loc_8C15:
ROM:8C15                 ldb     $11,x
ROM:8C18                 stb     <DPbyte_50
ROM:8C1A                 lsr     <DPbyte_50
ROM:8C1C                 bcc     loc_8C21
ROM:8C1E                 jsr     sub_8961
ROM:8C21 ; ---------------------------------------------------------------------------
ROM:8C21
ROM:8C21 loc_8C21:
ROM:8C21                 lsr     <DPbyte_50
ROM:8C23                 bcc     loc_8C28
ROM:8C25                 jsr     sub_8969
ROM:8C28 ; ---------------------------------------------------------------------------
ROM:8C28
ROM:8C28 loc_8C28:
ROM:8C28                 lsr     <DPbyte_50
ROM:8C2A                 bcc     loc_8C2F
ROM:8C2C                 jsr     sub_8951
ROM:8C2F ; ---------------------------------------------------------------------------
ROM:8C2F
ROM:8C2F loc_8C2F:
ROM:8C2F                 lsr     <DPbyte_50
ROM:8C31                 bcc     loc_8C36
ROM:8C33                 jsr     sub_8959
ROM:8C36 ; ---------------------------------------------------------------------------
ROM:8C36
ROM:8C36 loc_8C36:
ROM:8C36                 lsr     <DPbyte_50
ROM:8C38                 bcc     loc_8C3D
ROM:8C3A                 jsr     sub_8979
ROM:8C3D ; ---------------------------------------------------------------------------
ROM:8C3D
ROM:8C3D loc_8C3D:
ROM:8C3D                 lsr     <DPbyte_50
ROM:8C3F                 bcc     loc_8C44
ROM:8C41                 jsr     sub_8971
ROM:8C44 ; ---------------------------------------------------------------------------
ROM:8C44
ROM:8C44 loc_8C44:                               ; Some tie fighters process
ROM:8C44                 jsr     sub_8D9D
ROM:8C47                 jsr     sub_8DE3
ROM:8C4A                 lda     3,x
ROM:8C4C                 cmpa    #1
ROM:8C4E                 lbne    loc_8D66
ROM:8C52                 lda     2,x
ROM:8C54                 jsr     sub_CE0C        ; Copy transform data from [BIC] to matrix 2
ROM:8C57                 ldx     <DPbyte_5A
ROM:8C59                 clr     $A,x
ROM:8C5B                 clra
ROM:8C5C                 ldb     #$13
ROM:8C5E                 std     MW1             ; Point BIC to $5098 MReg4C
ROM:8C61                 lda     $11,x
ROM:8C64                 bita    #$40 ; @
ROM:8C66                 beq     loc_8C81
ROM:8C68                 ldd     MReg4C
ROM:8C6B                 addd    #$1000
ROM:8C6E                 std     MReg4C
ROM:8C71                 lda     #$67 ; g
ROM:8C73                 jsr     Math_Run_Start  ; Do math program run
ROM:8C76                 ldd     MReg4C
ROM:8C79                 subd    #$1000
ROM:8C7C                 std     MReg4C
ROM:8C7F                 bra     loc_8C86
ROM:8C81 ; ---------------------------------------------------------------------------
ROM:8C81
ROM:8C81 loc_8C81:
ROM:8C81                 lda     #$67 ; g
ROM:8C83                 jsr     Math_Run_Start  ; Do math program run
ROM:8C86
ROM:8C86 loc_8C86:                               ; Math result X
ROM:8C86                 ldd     MReg00
ROM:8C89                 bmi     loc_8CAE
ROM:8C8B                 inc     $A,x
ROM:8C8D                 subd    #$4000
ROM:8C90                 bge     loc_8CAE
ROM:8C92                 ldd     $15,x
ROM:8C95                 orab    #8
ROM:8C97                 std     $15,x
ROM:8C9A                 ldd     MReg39
ROM:8C9D                 addd    MReg3A
ROM:8CA0                 cmpd    #$20 ;  
ROM:8CA4                 bhi     loc_8CAE
ROM:8CA6                 ldd     $15,x
ROM:8CA9                 orab    #4
ROM:8CAB                 std     $15,x
ROM:8CAE
ROM:8CAE loc_8CAE:
ROM:8CAE                 ldd     $15,x
ROM:8CB1                 bita    #$10
ROM:8CB3                 beq     loc_8D05
ROM:8CB5                 ldd     $11,x
ROM:8CB8                 bita    #$40 ; @
ROM:8CBA                 bne     loc_8D05
ROM:8CBC                 ldd     MReg00          ; Math result X
ROM:8CBF                 subd    #$800
ROM:8CC2                 ble     loc_8D05
ROM:8CC4                 lda     6,x
ROM:8CC6                 bne     loc_8D05
ROM:8CC8                 ldb     byte_4B19
ROM:8CCB                 cmpb    #$B
ROM:8CCD                 bcs     loc_8CD4
ROM:8CCF                 ldu     #byte_8D99
ROM:8CD2                 bra     loc_8CDB
ROM:8CD4 ; ---------------------------------------------------------------------------
ROM:8CD4
ROM:8CD4 loc_8CD4:
ROM:8CD4                 aslb
ROM:8CD5                 aslb
ROM:8CD6                 ldu     #byte_8D71
ROM:8CD9                 leau    b,u
ROM:8CDB
ROM:8CDB loc_8CDB:                               ; Game over/insert coins timer
ROM:8CDB                 lda     <DPbyte_43
ROM:8CDD                 anda    ,u
ROM:8CDF                 bne     loc_8D05
ROM:8CE1                 lda     PRNG
ROM:8CE4                 cmpa    1,u
ROM:8CE6                 bls     loc_8D05
ROM:8CE8                 ldu     2,u
ROM:8CEA
ROM:8CEA loc_8CEA:
ROM:8CEA                 lda     3,u
ROM:8CEC                 bne     loc_8CFD
ROM:8CEE                 ldx     <DPbyte_5A
ROM:8CF0                 ldd     $15,x
ROM:8CF3                 orab    #$40 ; @
ROM:8CF5                 std     $15,x
ROM:8CF8                 jsr     sub_A68B        ; Emit fireballs from tie fighters
ROM:8CFB                 bra     loc_8D05
ROM:8CFD ; ---------------------------------------------------------------------------
ROM:8CFD
ROM:8CFD loc_8CFD:
ROM:8CFD                 leau    6,u
ROM:8CFF                 cmpu    #byte_494B+$24  ; 6x Fireball data structure 2 ($6 bytes per fireball)
ROM:8D03                 bcs     loc_8CEA
ROM:8D05
ROM:8D05 loc_8D05:
ROM:8D05                 ldx     <DPbyte_5A
ROM:8D07                 lda     $11,x
ROM:8D0C                 beq     loc_8D66
ROM:8D0E                 lda     <DPbyte_4F
ROM:8D10                 bne     loc_8D3A
ROM:8D12                 lda     MReg01          ; Math result Y
ROM:8D15                 bmi     loc_8D1C
ROM:8D17                 jsr     sub_8979
ROM:8D1A ; ---------------------------------------------------------------------------
ROM:8D1A                 bra     loc_8D1F
ROM:8D1C ; ---------------------------------------------------------------------------
ROM:8D1C
ROM:8D1C loc_8D1C:
ROM:8D1C                 jsr     sub_8971
ROM:8D1F ; ---------------------------------------------------------------------------
ROM:8D1F
ROM:8D1F loc_8D1F:
ROM:8D1F                 lda     <DPbyte_4E
ROM:8D21                 bne     loc_8D3A
ROM:8D23                 ldb     MReg02          ; Math result Z
ROM:8D26                 sex
ROM:8D27                 addb    #1
ROM:8D29                 cmpb    #1
ROM:8D2B                 bls     loc_8D3A
ROM:8D2D                 eora    MReg01          ; Math result Y
ROM:8D30                 bmi     loc_8D37
ROM:8D32                 jsr     sub_8961
ROM:8D35 ; ---------------------------------------------------------------------------
ROM:8D35                 bra     loc_8D3A
ROM:8D37 ; ---------------------------------------------------------------------------
ROM:8D37
ROM:8D37 loc_8D37:
ROM:8D37                 jsr     sub_8969
ROM:8D3A ; ---------------------------------------------------------------------------
ROM:8D3A
ROM:8D3A loc_8D3A:
ROM:8D3A                 lda     <DPbyte_4D
ROM:8D3C                 bne     loc_8D66
ROM:8D3E                 lda     MReg02          ; Math result Z
ROM:8D41                 bmi     loc_8D48
ROM:8D43                 jsr     sub_8951
ROM:8D46 ; ---------------------------------------------------------------------------
ROM:8D46                 bra     loc_8D4B
ROM:8D48 ; ---------------------------------------------------------------------------
ROM:8D48
ROM:8D48 loc_8D48:
ROM:8D48                 jsr     sub_8959
ROM:8D4B ; ---------------------------------------------------------------------------
ROM:8D4B
ROM:8D4B loc_8D4B:
ROM:8D4B                 lda     <DPbyte_4E
ROM:8D4D                 bne     loc_8D66
ROM:8D4F                 ldb     MReg01          ; Math result Y
ROM:8D52                 sex
ROM:8D53                 addb    #1
ROM:8D55                 cmpb    #1
ROM:8D57                 bls     loc_8D66
ROM:8D59                 eora    MReg02          ; Math result Z
ROM:8D5C                 bmi     loc_8D63
ROM:8D5E                 jsr     sub_8969
ROM:8D61 ; ---------------------------------------------------------------------------
ROM:8D61                 bra     loc_8D66
ROM:8D63 ; ---------------------------------------------------------------------------
ROM:8D63
ROM:8D63 loc_8D63:
ROM:8D63                 jsr     sub_8961
ROM:8D66 ; ---------------------------------------------------------------------------
ROM:8D66
ROM:8D66 loc_8D66:
ROM:8D66                 ldx     <DPbyte_5A
ROM:8D68                 ldd     $15,x
ROM:8D6B                 anda    #$EF ; n
ROM:8D6D                 std     $15,x
ROM:8D70                 rts
ROM:8D70 ; End of function sub_8BE1
ROM:8D70
ROM:8D70 ; ---------------------------------------------------------------------------
ROM:8D9D
ROM:8D9D ; =============== S U B R O U T I N E =======================================
ROM:8D9D
ROM:8D9D ; Some tie fighters process
ROM:8D9D
ROM:8D9D sub_8D9D:
ROM:8D9D                 ldx     <DPbyte_5A
ROM:8D9F                 ldu     ,x
ROM:8DA1                 lda     6,x
ROM:8DA3                 bne     loc_8DDF
ROM:8DA5                 ldb     $12,x
ROM:8DA8                 stb     <DPbyte_50
ROM:8DAA                 ldu     ,x
ROM:8DAC                 ldd     #0
ROM:8DAF                 std     -$A,u
ROM:8DB1                 std     -2,u
ROM:8DB3                 std     6,u
ROM:8DB5                 lsr     <DPbyte_50
ROM:8DB7                 bcc     loc_8DBC
ROM:8DB9                 jsr     sub_8A59
ROM:8DBC
ROM:8DBC loc_8DBC:
ROM:8DBC                 lsr     <DPbyte_50
ROM:8DBE                 bcc     loc_8DC3
ROM:8DC0                 jsr     sub_8A7E
ROM:8DC3
ROM:8DC3 loc_8DC3:
ROM:8DC3                 lsr     <DPbyte_50
ROM:8DC5                 bcc     loc_8DCA
ROM:8DC7                 jsr     sub_8A21
ROM:8DCA
ROM:8DCA loc_8DCA:
ROM:8DCA                 lsr     <DPbyte_50
ROM:8DCC                 bcc     loc_8DD1
ROM:8DCE                 jsr     sub_8A3D
ROM:8DD1
ROM:8DD1 loc_8DD1:
ROM:8DD1                 lsr     <DPbyte_50
ROM:8DD3                 bcc     loc_8DD8
ROM:8DD5                 jsr     sub_8A05
ROM:8DD8
ROM:8DD8 loc_8DD8:
ROM:8DD8                 lsr     <DPbyte_50
ROM:8DDA                 bcc     loc_8DDF
ROM:8DDC                 jsr     sub_89E9
ROM:8DDF
ROM:8DDF loc_8DDF:
ROM:8DDF                 jsr     sub_8AB6
ROM:8DE2                 rts
ROM:8DE2 ; End of function sub_8D9D
ROM:8DE2
ROM:8DE3
ROM:8DE3 ; =============== S U B R O U T I N E =======================================
ROM:8DE3
ROM:8DE3
ROM:8DE3 sub_8DE3:
ROM:8DE3                 ldu     ,x
ROM:8DE5                 ldd     8,u
ROM:8DE7                 cmpa    #$7D ; }
ROM:8DE9                 blt     loc_8DEE
ROM:8DEB                 ldd     #$7CFF
ROM:8DEE
ROM:8DEE loc_8DEE:
ROM:8DF0                 bgt     loc_8DF5
ROM:8DF2                 ldd     #$8300
ROM:8DF5
ROM:8DF5 loc_8DF5:
ROM:8DF5                 std     8,u
ROM:8DF7                 ldd     $A,u
ROM:8DF9                 cmpa    #$7D ; }
ROM:8DFB                 blt     loc_8E00
ROM:8DFD                 ldd     #$7CFF
ROM:8E00
ROM:8E00 loc_8E00:
ROM:8E02                 bgt     loc_8E07
ROM:8E04                 ldd     #$8300
ROM:8E07
ROM:8E07 loc_8E07:
ROM:8E07                 std     $A,u
ROM:8E09                 ldd     $C,u
ROM:8E0B                 cmpa    #$7D ; }
ROM:8E0D                 blt     loc_8E12
ROM:8E0F                 ldd     #$7CFF
ROM:8E12
ROM:8E12 loc_8E12:
ROM:8E14                 bgt     loc_8E19
ROM:8E16                 ldd     #$8300
ROM:8E19
ROM:8E19 loc_8E19:
ROM:8E19                 std     $C,u
ROM:8E1B                 rts
ROM:8E1B ; End of function sub_8DE3
ROM:8E1B
ROM:8E1C
ROM:8E1C ; =============== S U B R O U T I N E =======================================
ROM:8E1C
ROM:8E1C
ROM:8E1C sub_8E1C:
ROM:8E1C                 dec     <DPbyte_E6
ROM:8E1E                 bgt     locret_8E22
ROM:8E20                 clr     <DPbyte_E6
ROM:8E22
ROM:8E22 locret_8E22:
ROM:8E22                 rts
ROM:8E22 ; End of function sub_8E1C
ROM:8E22
ROM:8E23
ROM:8E23 ; =============== S U B R O U T I N E =======================================
ROM:8E23
ROM:8E23
ROM:8E23 sub_8E23:
ROM:8E23                 ldd     #0
ROM:8E26                 std     $11,x
ROM:8E29                 sta     $10,x
ROM:8E2C                 std     $13,x
ROM:8E2F                 std     $15,x
ROM:8E32
ROM:8E32 loc_8E32:
ROM:8E32                 ldu     $D,x
ROM:8E34                 lda     ,u
ROM:8E36                 sta     $F,x
ROM:8E38                 beq     loc_8E51
ROM:8E3A
ROM:8E3A loc_8E3A:
ROM:8E3A                 ldd     $15,x
ROM:8E3D                 anda    $13,x
ROM:8E40                 bne     loc_8E5C
ROM:8E42                 andb    $14,x
ROM:8E45                 bne     loc_8E5C
ROM:8E47                 lda     $F,x
ROM:8E49                 anda    #7
ROM:8E4B                 asla
ROM:8E4C                 ldu     #JumpTable8E68
ROM:8E4F                 jmp     [a,u]
ROM:8E51 ; ---------------------------------------------------------------------------
ROM:8E51
ROM:8E51 loc_8E51:
ROM:8E51                 ldd     1,u
ROM:8E53                 std     $13,x
ROM:8E56                 leau    3,u
ROM:8E58                 stu     $D,x
ROM:8E5A                 bra     loc_8E32
ROM:8E5C ; ---------------------------------------------------------------------------
ROM:8E5C
ROM:8E5C loc_8E5C:
ROM:8E5C                 ldu     $D,x
ROM:8E5E
ROM:8E5E loc_8E5E:
ROM:8E5E                 lda     ,u
ROM:8E60                 beq     loc_8E32
ROM:8E62                 leau    3,u
ROM:8E64                 stu     $D,x
ROM:8E66                 bra     loc_8E5E
ROM:8E66 ; End of function sub_8E23
ROM:8E66
ROM:8E66 ; ---------------------------------------------------------------------------
ROM:8E78
ROM:8E78 ; =============== S U B R O U T I N E =======================================
ROM:8E78
ROM:8E78
ROM:8E78 sub_8E78:
ROM:8E78                 swi
ROM:8E78 ; End of function sub_8E78
ROM:8E78
ROM:8E79
ROM:8E79 ; =============== S U B R O U T I N E =======================================
ROM:8E79
ROM:8E79
ROM:8E79 sub_8E79:
ROM:8E79                 ldu     $D,x
ROM:8E7B
ROM:8E7B loc_8E7B:
ROM:8E7B                 ldd     1,u
ROM:8E7D                 beq     loc_8E94
ROM:8E7F                 anda    $15,x
ROM:8E82                 bne     loc_8E94
ROM:8E84                 andb    $16,x
ROM:8E87                 bne     loc_8E94
ROM:8E89
ROM:8E89 loc_8E89:
ROM:8E89                 leau    3,u
ROM:8E8B                 lda     ,u
ROM:8E8D                 asla
ROM:8E8E                 bne     loc_8E89
ROM:8E90                 bcc     loc_8E89
ROM:8E92                 bra     loc_8E7B
ROM:8E94 ; ---------------------------------------------------------------------------
ROM:8E94
ROM:8E94 loc_8E94:
ROM:8E94                 leau    3,u
ROM:8E96                 stu     $D,x
ROM:8E98                 jmp     loc_8E32
ROM:8E98 ; End of function sub_8E79
ROM:8E98
ROM:8E9B
ROM:8E9B ; =============== S U B R O U T I N E =======================================
ROM:8E9B
ROM:8E9B
ROM:8E9B sub_8E9B:
ROM:8E9B                 ldu     $D,x
ROM:8E9D                 ldu     1,u
ROM:8E9F                 stu     $D,x
ROM:8EA1                 jmp     loc_8E32
ROM:8EA1 ; End of function sub_8E9B
ROM:8EA1
ROM:8EA4
ROM:8EA4 ; =============== S U B R O U T I N E =======================================
ROM:8EA4
ROM:8EA4
ROM:8EA4 sub_8EA4:
ROM:8EA4                 ldu     $D,x
ROM:8EA6                 leau    3,u
ROM:8EA8                 stu     $17,x
ROM:8EAB                 ldu     -2,u
ROM:8EAD                 stu     $D,x
ROM:8EAF                 jmp     loc_8E32
ROM:8EAF ; End of function sub_8EA4
ROM:8EAF
ROM:8EB2
ROM:8EB2 ; =============== S U B R O U T I N E =======================================
ROM:8EB2
ROM:8EB2
ROM:8EB2 sub_8EB2:
ROM:8EB2                 ldu     $17,x
ROM:8EB5                 stu     $D,x
ROM:8EB7                 jmp     loc_8E32
ROM:8EB7 ; End of function sub_8EB2
ROM:8EB7
ROM:8EBA
ROM:8EBA ; =============== S U B R O U T I N E =======================================
ROM:8EBA
ROM:8EBA
ROM:8EBA sub_8EBA:
ROM:8EBA                 ldu     $D,x
ROM:8EBC                 ldb     ,u
ROM:8EBE                 lsrb
ROM:8EBF                 stb     $10,x
ROM:8EC2                 ldd     1,u
ROM:8EC4                 std     $11,x
ROM:8EC7                 leau    3,u
ROM:8EC9                 stu     $D,x
ROM:8ECB                 inc     $F,x
ROM:8ECD                 rts
ROM:8ECD ; End of function sub_8EBA
ROM:8ECD
ROM:8ECE
ROM:8ECE ; =============== S U B R O U T I N E =======================================
ROM:8ECE
ROM:8ECE
ROM:8ECE sub_8ECE:
ROM:8ECE                 dec     $10,x
ROM:8ED1                 lbmi    loc_8E32
ROM:8ED5                 rts
ROM:8ED5 ; End of function sub_8ECE
ROM:8ED5
ROM:8ED6
ROM:8ED6 ; =============== S U B R O U T I N E =======================================
ROM:8ED6
ROM:8ED6
ROM:8ED6 sub_8ED6:
ROM:8ED6                 jsr     sub_CCC0        ; Initialise object?
ROM:8ED9                 ldb     byte_4B14
ROM:8EDC                 aslb
ROM:8EDD                 ldx     #off_9070
ROM:8EE0                 abx
ROM:8EE1                 cmpx    #off_9070+$C
ROM:8EE4                 bcs     loc_8EF4
ROM:8EE6                 lda     byte_4B14
ROM:8EE9                 lsra
ROM:8EEA                 bcs     loc_8EF1
ROM:8EEC                 ldx     #off_9078
ROM:8EEF                 bra     loc_8EF4
ROM:8EF1 ; ---------------------------------------------------------------------------
ROM:8EF1
ROM:8EF1 loc_8EF1:
ROM:8EF1                 ldx     #off_907A
ROM:8EF4
ROM:8EF4 loc_8EF4:
ROM:8EF4                 ldx     ,x
ROM:8EF6                 ldb     <DPbyte_DD
ROM:8EF8                 cmpb    ,x+
ROM:8EFA                 bls     loc_8EFE
ROM:8EFC                 ldb     -1,x
ROM:8EFE
ROM:8EFE loc_8EFE:
ROM:8EFE                 aslb
ROM:8EFF                 ldd     b,x
ROM:8F01                 std     <DPbyte_E4
ROM:8F03                 clr     <DPbyte_E6
ROM:8F05                 ldx     #byte_4900      ; 3x Tie fighter data structure ($19 bytes per Tie)
ROM:8F08
ROM:8F08 loc_8F08:
ROM:8F08                 stx     <DPbyte_5A
ROM:8F0A                 clr     3,x
ROM:8F0C                 ldu     <DPbyte_E4
ROM:8F0E                 beq     loc_8F29
ROM:8F10                 lda     ,u
ROM:8F12                 beq     loc_8F29
ROM:8F14                 inc     <DPbyte_E6
ROM:8F16                 ldd     ,u
ROM:8F18                 std     <DPbyte_E0      ; Pointer to 3D object index
ROM:8F1A                 ldd     2,u
ROM:8F1C                 std     <DPbyte_DE
ROM:8F1E                 ldd     4,u
ROM:8F20                 std     <DPbyte_E2
ROM:8F22                 leau    6,u
ROM:8F24                 stu     <DPbyte_E4
ROM:8F26                 jsr     sub_8F34
ROM:8F29
ROM:8F29 loc_8F29:
ROM:8F29                 ldx     <DPbyte_5A
ROM:8F2B                 leax    $19,x
ROM:8F2E                 cmpx    #byte_4900+$4B  ; 3x Tie fighter data structure ($19 bytes per Tie)
ROM:8F31                 bcs     loc_8F08
ROM:8F33                 rts
ROM:8F33 ; End of function sub_8ED6
ROM:8F33
ROM:8F34
ROM:8F34 ; =============== S U B R O U T I N E =======================================
ROM:8F34
ROM:8F34
ROM:8F34 sub_8F34:
ROM:8F34                 lda     #1              ; Called 3 times at start of attract screen 1 and 2
ROM:8F36                 sta     3,x
ROM:8F38                 ldu     ,x
ROM:8F3A                 jsr     sub_CDC3        ; Initialise math registers matrix
ROM:8F3D                 ldu     ,x
ROM:8F3F                 lda     #$C0 ; +      ; Matrix -1.000 constant
ROM:8F41                 sta     -$10,u
ROM:8F43                 sta     -6,u
ROM:8F45                 clra
ROM:8F46                 sta     9,x
ROM:8F48                 sta     8,x
ROM:8F4A                 sta     6,x
ROM:8F4C                 sta     5,x
ROM:8F4E                 sta     $B,x
ROM:8F50                 ldu     <DPbyte_E0      ; Pointer to 3D object index
ROM:8F52                 lda     1,u
ROM:8F54                 sta     7,x
ROM:8F56                 ldu     ,x
ROM:8F58                 ldx     <DPbyte_E2
ROM:8F5A                 ldd     ,x
ROM:8F5C                 std     8,u
ROM:8F5E                 ldd     2,x
ROM:8F60                 std     $A,u
ROM:8F62                 ldd     4,x
ROM:8F64                 std     $C,u
ROM:8F66                 ldx     <DPbyte_5A
ROM:8F68                 ldd     <DPbyte_DE
ROM:8F6A                 std     $D,x
ROM:8F6C                 jsr     sub_8E23
ROM:8F6F                 ldx     <DPbyte_5A
ROM:8F71                 ldb     [word_48E0]     ; Pointer to 3D object index
ROM:8F75                 stb     4,x
ROM:8F77                 jsr     sub_CCCC        ; Copy XYZ data to math RAM
ROM:8F7A                 rts
ROM:8F7A ; End of function sub_8F34
ROM:8F7A
ROM:8F7B
ROM:8F7B ; =============== S U B R O U T I N E =======================================
ROM:8F7B
ROM:8F7B
ROM:8F7B sub_8F7B:
ROM:8F7B                 ldu     <DPbyte_E4
ROM:8F7D                 beq     loc_8F83
ROM:8F7F                 lda     ,u
ROM:8F81                 bne     loc_8FB1
ROM:8F83
ROM:8F83 loc_8F83:
ROM:8F83                 inc     <DPbyte_DD
ROM:8F85                 ldb     byte_4B14
ROM:8F88                 aslb
ROM:8F89                 ldx     #off_9070
ROM:8F8C                 abx
ROM:8F8D                 cmpx    #off_9070+$C
ROM:8F90                 bcs     loc_8FA0
ROM:8F92                 lda     byte_4B14
ROM:8F95                 lsra
ROM:8F96                 bcs     loc_8F9D
ROM:8F98                 ldx     #off_9078
ROM:8F9B                 bra     loc_8FA0
ROM:8F9D ; ---------------------------------------------------------------------------
ROM:8F9D
ROM:8F9D loc_8F9D:
ROM:8F9D                 ldx     #off_907A
ROM:8FA0
ROM:8FA0 loc_8FA0:
ROM:8FA0                 ldx     ,x
ROM:8FA2                 ldb     <DPbyte_DD
ROM:8FA4                 cmpb    ,x+
ROM:8FA6                 bls     loc_8FAA
ROM:8FA8                 ldb     -1,x
ROM:8FAA
ROM:8FAA loc_8FAA:
ROM:8FAA                 stb     <DPbyte_DD
ROM:8FAC                 aslb
ROM:8FAD                 ldd     b,x
ROM:8FAF                 std     <DPbyte_E4
ROM:8FB1
ROM:8FB1 loc_8FB1:                               ; 3x Tie fighter data structure ($19 bytes per Tie)
ROM:8FB1                 ldx     #byte_4900
ROM:8FB4
ROM:8FB4 loc_8FB4:
ROM:8FB4                 stx     <DPbyte_5A
ROM:8FB6                 lda     3,x
ROM:8FB8                 beq     loc_8FC6
ROM:8FBA                 ldx     <DPbyte_5A
ROM:8FBC                 leax    $19,x
ROM:8FBF                 cmpx    #byte_4900+$4B  ; 3x Tie fighter data structure ($19 bytes per Tie)
ROM:8FC2                 bcs     loc_8FB4
ROM:8FC4                 bra     locret_9023
ROM:8FC6 ; ---------------------------------------------------------------------------
ROM:8FC6
ROM:8FC6 loc_8FC6:
ROM:8FC6                 ldu     <DPbyte_E4
ROM:8FC8                 beq     locret_9023
ROM:8FCA                 lda     ,u
ROM:8FCC                 beq     locret_9023
ROM:8FCE                 inc     <DPbyte_E6
ROM:8FD0                 ldd     ,u
ROM:8FD2                 std     <DPbyte_E0      ; Pointer to 3D object index
ROM:8FD4                 ldd     2,u
ROM:8FD6                 std     <DPbyte_DE
ROM:8FD8                 ldd     4,u
ROM:8FDA                 std     <DPbyte_E2
ROM:8FDC                 leau    6,u
ROM:8FDE                 stu     <DPbyte_E4
ROM:8FE0                 lda     #1
ROM:8FE2                 sta     3,x
ROM:8FE4                 ldu     ,x
ROM:8FE6                 jsr     sub_CDC3        ; Initialise math registers matrix
ROM:8FE9                 ldu     ,x
ROM:8FEB                 lda     #$C0 ; +
ROM:8FED                 sta     -$10,u
ROM:8FEF                 sta     -6,u
ROM:8FF1                 clra
ROM:8FF2                 sta     9,x
ROM:8FF4                 sta     8,x
ROM:8FF6                 sta     6,x
ROM:8FF8                 sta     5,x
ROM:8FFA                 sta     $B,x
ROM:8FFC                 ldu     <DPbyte_E0      ; Pointer to 3D object index
ROM:8FFE                 lda     1,u
ROM:9000                 sta     7,x
ROM:9002                 ldu     ,x
ROM:9004                 ldx     <DPbyte_E2
ROM:9006                 ldd     ,x
ROM:9008                 std     8,u
ROM:900A                 ldd     2,x
ROM:900C                 std     $A,u
ROM:900E                 ldd     4,x
ROM:9010                 std     $C,u
ROM:9012                 ldx     <DPbyte_5A
ROM:9014                 ldd     <DPbyte_DE
ROM:9016                 std     $D,x
ROM:9018                 jsr     sub_8E23
ROM:901B                 ldx     <DPbyte_5A
ROM:901D                 ldb     [word_48E0]     ; Pointer to 3D object index
ROM:9021                 stb     4,x
ROM:9023
ROM:9023 locret_9023:
ROM:9023                 rts
ROM:9023 ; End of function sub_8F7B
ROM:9023
ROM:9023 ; ---------------------------------------------------------------------------
ROM:953B
ROM:953B ; =============== S U B R O U T I N E =======================================
ROM:953B
ROM:953B
ROM:953B sub_953B:
ROM:953B                 lda     byte_4592
ROM:953E                 anda    #3
ROM:9540                 beq     locret_9557
ROM:9542                 adda    <DPbyte_60      ; Shield count
ROM:9544                 sta     <DPbyte_60      ; Shield count
ROM:9546                 lda     byte_4593
ROM:9549                 anda    #3
ROM:954B                 adda    #6
ROM:954D                 cmpa    <DPbyte_60      ; Shield count
ROM:954F                 bcc     loc_9553
ROM:9551                 sta     <DPbyte_60      ; Shield count
ROM:9553
ROM:9553 loc_9553:
ROM:9553                 lda     #$14
ROM:9555                 sta     <DPbyte_61
ROM:9557
ROM:9557 locret_9557:
ROM:9557                 rts
ROM:9557 ; End of function sub_953B
ROM:9557
ROM:9558
ROM:9558 ; =============== S U B R O U T I N E =======================================
ROM:9558
ROM:9558 ; Process shields
ROM:9558
ROM:9558 sub_9558:
ROM:9558                 lda     <DPbyte_8B
ROM:955A                 ble     loc_95A0
ROM:955C                 lda     <DPbyte_8C      ; Sheild being depleted
ROM:955E                 bgt     loc_95A0
ROM:9560                 lda     #1
ROM:9562                 sta     <DPbyte_8C      ; Sheild being depleted
ROM:9564                 lda     <DPbyte_60      ; Shield count
ROM:9566                 sta     <DPbyte_8E
ROM:956A                 adda    <DPbyte_60      ; Shield count
ROM:956C                 sta     <DPbyte_8D
ROM:956E                 dec     <DPbyte_60      ; Shield count
ROM:9570                 bge     loc_9578
ROM:9572                 lda     #$FF
ROM:9574                 sta     <DPbyte_60      ; Shield count
ROM:9576                 clr     <DPbyte_8C      ; Sheild being depleted
ROM:9578
ROM:9578 loc_9578:                               ; Shield count
ROM:9578                 lda     <DPbyte_60
ROM:957A                 cmpa    #0
ROM:957C                 bne     loc_9586
ROM:957E                 jsr     Sound_D
ROM:9581                 jsr     Sound_28
ROM:9584                 bra     loc_9599
ROM:9586 ; ---------------------------------------------------------------------------
ROM:9586
ROM:9586 loc_9586:
ROM:9586                 cmpa    #1
ROM:9588                 bne     loc_958F
ROM:958A                 jsr     Sound_2F
ROM:958D                 bra     loc_9599
ROM:958F ; ---------------------------------------------------------------------------
ROM:958F
ROM:958F loc_958F:
ROM:958F                 cmpa    #2
ROM:9591                 bne     loc_9599
ROM:9593                 jsr     Sound_F
ROM:9596                 jsr     Sound_30
ROM:9599
ROM:9599 loc_9599:
ROM:9599                 clrb
ROM:959A                 stb     <DPbyte_91
ROM:959C                 stb     <DPbyte_90
ROM:959E                 stb     <DPbyte_8F
ROM:95A0
ROM:95A0 loc_95A0:
ROM:95A0                 lda     <DPbyte_61
ROM:95A2                 beq     locret_95A6
ROM:95A4                 dec     <DPbyte_61
ROM:95A6
ROM:95A6 locret_95A6:
ROM:95A6                 rts
ROM:95A6 ; End of function sub_9558
ROM:95A6
ROM:95A7
ROM:95A7 ; =============== S U B R O U T I N E =======================================
ROM:95A7
ROM:95A7 ; Insert vector instructions for shields
ROM:95A7
ROM:95A7 sub_95A7:
ROM:95A7                 lda     <DPbyte_8C      ; Sheild being depleted
ROM:95A9                 bne     loc_95B2
ROM:95AB                 lda     <DPbyte_60      ; Shield count
ROM:95AD                 bgt     loc_95B2
ROM:95AF                 jmp     loc_9604
ROM:95B2 ; ---------------------------------------------------------------------------
ROM:95B2
ROM:95B2 loc_95B2:                               ; Shield count
ROM:95B2                 ldb     <DPbyte_60
ROM:95B4                 aslb
ROM:95B5                 ldx     #word_96B6      ; Shield colour table
ROM:95B8                 ldu     b,x
ROM:95BA                 stu     ,y++
ROM:95BC                 ldd     #$BA03
ROM:95BF                 std     ,y++
ROM:95C1                 ldd     #$228
ROM:95C4                 std     ,y++
ROM:95C6                 ldd     #0
ROM:95C9                 std     ,y++
ROM:95CB                 lda     <DPbyte_8C      ; Sheild being depleted
ROM:95CD                 beq     loc_95D4
ROM:95CF                 jsr     sub_962A
ROM:95D2                 bra     loc_95D7
ROM:95D4 ; ---------------------------------------------------------------------------
ROM:95D4
ROM:95D4 loc_95D4:
ROM:95D4                 jsr     sub_960F
ROM:95D7
ROM:95D7 loc_95D7:
ROM:95D7                 ldd     #$1FD0
ROM:95DA                 std     ,y++
ROM:95DC                 ldd     #$1FF4
ROM:95DF                 std     ,y++
ROM:95E1                 lda     <DPbyte_8C      ; Sheild being depleted
ROM:95E3                 ble     loc_95EA
ROM:95E5                 ldu     #$A018
ROM:95E8                 bra     loc_95F2
ROM:95EA ; ---------------------------------------------------------------------------
ROM:95EA
ROM:95EA loc_95EA:                               ; Shield count
ROM:95EA                 ldb     <DPbyte_60
ROM:95EC                 aslb
ROM:95ED                 ldx     #word_96B6      ; Shield colour table
ROM:95F0                 ldu     b,x
ROM:95F2
ROM:95F2 loc_95F2:
ROM:95F2                 stu     ,y++
ROM:95F4                 clr     <DPbyte_AD
ROM:95F6                 lda     <DPbyte_60      ; Shield count
ROM:95F8                 bge     loc_95FB
ROM:95FA                 clra
ROM:95FB
ROM:95FB loc_95FB:
ROM:95FB                 jsr     loc_E7AD
ROM:95FE                 ldd     #$8040
ROM:9601                 std     ,y++
ROM:9603                 rts
ROM:9604 ; ---------------------------------------------------------------------------
ROM:9604
ROM:9604 loc_9604:
ROM:9604                 ldd     #$7100
ROM:9607                 std     ,y++
ROM:9609                 ldb     #$E
ROM:960B                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:960E                 rts
ROM:960E ; End of function sub_95A7
ROM:960E
ROM:960F
ROM:960F ; =============== S U B R O U T I N E =======================================
ROM:960F
ROM:960F
ROM:960F sub_960F:
ROM:960F                 ldb     <DPbyte_60      ; Shield count
ROM:9611                 aslb
ROM:9612                 ldx     #word_96B6      ; Shield colour table
ROM:9615                 ldd     b,x
ROM:9617                 tst     <DPbyte_61
ROM:9619                 beq     loc_961D
ROM:961B                 orab    #$FF
ROM:961D
ROM:961D loc_961D:
ROM:961D                 std     ,y++
ROM:961F                 ldb     <DPbyte_60      ; Shield count
ROM:9621                 aslb
ROM:9622                 ldx     #word_96CA      ; Shield vector table
ROM:9625                 ldu     b,x
ROM:9627                 stu     ,y++
ROM:9629                 rts
ROM:9629 ; End of function sub_960F
ROM:9629
ROM:962A
ROM:962A ; =============== S U B R O U T I N E =======================================
ROM:962A
ROM:962A
ROM:962A sub_962A:
ROM:962A                 lda     <DPbyte_91
ROM:962C                 bne     loc_964B
ROM:962E                 ldu     #$A018
ROM:9631                 stu     ,y++
ROM:9633                 ldb     <DPbyte_8E
ROM:9635                 aslb
ROM:9636                 ldx     #word_96CA      ; Shield vector table
ROM:9639                 ldu     b,x
ROM:963B                 stu     ,y++
ROM:963D                 lda     <DPbyte_43      ; Game over/insert coins timer
ROM:963F                 anda    #0
ROM:9641                 bne     loc_9649
ROM:9643                 inc     <DPbyte_8D
ROM:9645                 blt     loc_9649
ROM:9647                 inc     <DPbyte_91
ROM:9649
ROM:9649 loc_9649:
ROM:9649                 bra     locret_96A0
ROM:964B ; ---------------------------------------------------------------------------
ROM:964B
ROM:964B loc_964B:
ROM:964B                 jsr     sub_96A1
ROM:964E                 ldu     #$A018
ROM:9651                 stu     ,y++
ROM:9653                 lda     <DPbyte_90
ROM:9655                 bne     loc_9674
ROM:9657                 ldb     <DPbyte_8E
ROM:9659                 aslb
ROM:965A                 ldx     #word_96DE      ; Another copy of shield vector table??
ROM:965D                 ldu     b,x
ROM:965F                 stu     ,y++
ROM:9661                 lda     <DPbyte_43      ; Game over/insert coins timer
ROM:9663                 anda    #0
ROM:9665                 bne     loc_9672
ROM:9667                 inc     <DPbyte_90
ROM:9669                 ldb     <DPbyte_60      ; Shield count
ROM:966B                 ldx     #byte_9718
ROM:966E                 lda     b,x
ROM:9670                 sta     <DPbyte_8D
ROM:9672
ROM:9672 loc_9672:
ROM:9672                 bra     locret_96A0
ROM:9674 ; ---------------------------------------------------------------------------
ROM:9674
ROM:9674 loc_9674:
ROM:9674                 lda     <DPbyte_8F
ROM:9676                 bne     loc_9690
ROM:9678                 ldb     <DPbyte_8D
ROM:967A                 aslb
ROM:967B                 ldx     #word_96F2
ROM:967E                 ldu     b,x
ROM:9680                 stu     ,y++
ROM:9682                 lda     <DPbyte_43      ; Game over/insert coins timer
ROM:9684                 anda    #0
ROM:9686                 bne     loc_968E
ROM:9688                 dec     <DPbyte_8D
ROM:968A                 bgt     loc_968E
ROM:968C                 inc     <DPbyte_8F
ROM:968E
ROM:968E loc_968E:
ROM:968E                 bra     locret_96A0
ROM:9690 ; ---------------------------------------------------------------------------
ROM:9690
ROM:9690 loc_9690:                               ; Game over/insert coins timer
ROM:9690                 lda     <DPbyte_43
ROM:9692                 anda    #0
ROM:9694                 bne     locret_96A0
ROM:9696                 lda     #0
ROM:9698                 sta     <DPbyte_8C      ; Sheild being depleted
ROM:969A                 sta     <DPbyte_8B
ROM:969C                 lda     <DPbyte_60      ; Shield count
ROM:969E                 sta     <DPbyte_8E
ROM:96A0
ROM:96A0 locret_96A0:
ROM:96A0                 rts
ROM:96A0 ; End of function sub_962A
ROM:96A0
ROM:96A1
ROM:96A1 ; =============== S U B R O U T I N E =======================================
ROM:96A1
ROM:96A1
ROM:96A1 sub_96A1:
ROM:96A1                 ldb     <DPbyte_60      ; Shield count
ROM:96A3                 aslb
ROM:96A4                 ldx     #word_96B6      ; Shield colour table
ROM:96A7                 ldd     b,x
ROM:96A9                 std     ,y++
ROM:96AB                 ldb     <DPbyte_60      ; Shield count
ROM:96AD                 aslb
ROM:96AE                 ldx     #word_96CA      ; Shield vector table
ROM:96B1                 ldu     b,x
ROM:96B3                 stu     ,y++
ROM:96B5                 rts
ROM:96B5 ; End of function sub_96A1
ROM:96B5
ROM:96B5 ; ---------------------------------------------------------------------------
ROM:9722
ROM:9722 ; =============== S U B R O U T I N E =======================================
ROM:9722
ROM:9722 ; Death Star starting wave bonus score
ROM:9722
ROM:9722 sub_9722:
ROM:9722                 lda     byte_4B2D
ROM:9725                 bne     locret_9739
ROM:9727                 ldb     byte_4B15
ROM:972A                 beq     locret_9739
ROM:972C                 aslb
ROM:972D                 addb    byte_4B15
ROM:9730                 ldx     #byte_9865      ; Death Star destroyed  incrementing score value
ROM:9730                                         ; Also has unused starting wave bonus scores of 200,000 and 600,000
ROM:9730                                         ; for waves 2 and 4
ROM:9733                 abx
ROM:9734                 tfr     x, u
ROM:9736                 jsr     loc_9810        ; Add to score total
ROM:9739
ROM:9739 locret_9739:
ROM:9739                 rts
ROM:9739 ; End of function sub_9722
ROM:9739
ROM:973A
ROM:973A ; =============== S U B R O U T I N E =======================================
ROM:973A
ROM:973A ; Towers incrementing score
ROM:973A
ROM:973A sub_973A:
ROM:973A                 ldu     #byte_4B2E      ; Temporary score adder towers 1
ROM:973D                 jsr     loc_9810        ; Add to score total
ROM:9740                 ldx     #word_9856
ROM:9743                 lda     byte_4B30       ; Temporary score adder towers 3
ROM:9746                 adda    2,x
ROM:9748                 daa
ROM:9749                 sta     byte_4B30       ; Temporary score adder towers 3
ROM:974C                 lda     byte_4B2F       ; Temporary score adder towers 2
ROM:974F                 adca    1,x
ROM:9751                 daa
ROM:9752                 sta     byte_4B2F       ; Temporary score adder towers 2
ROM:9755                 lda     byte_4B2E       ; Temporary score adder towers 1
ROM:9758                 adca    ,x
ROM:975A                 daa
ROM:975B                 sta     byte_4B2E       ; Temporary score adder towers 1
ROM:975E                 lda     byte_4B1A
ROM:9761                 beq     locret_9774
ROM:9765                 daa
ROM:9766                 sta     byte_4B1A
ROM:9769                 bne     locret_9774
ROM:976B                 ldu     #byte_9862      ; Cleared all towers score value
ROM:976E                 jsr     loc_9810        ; Add to score total
ROM:9771                 inc     byte_4B35
ROM:9774
ROM:9774 locret_9774:
ROM:9774                 rts
ROM:9774 ; End of function sub_973A
ROM:9774
ROM:9775
ROM:9775 ; =============== S U B R O U T I N E =======================================
ROM:9775
ROM:9775 ; Shield bonus score
ROM:9775
ROM:9775 sub_9775:
ROM:9775                 ldb     <DPbyte_60      ; Shield count
ROM:9777                 beq     locret_97AB
ROM:9779                 ldu     #byte_9865      ; Death Star destroyed  incrementing score value
ROM:9779                                         ; Also has unused starting wave bonus scores of 200,000 and 600,000
ROM:9779                                         ; for waves 2 and 4
ROM:977C                 lda     #0
ROM:977E                 sta     word_4B29       ; Temporary score adder 1
ROM:9781                 sta     word_4B29+1     ; Temporary score adder 1
ROM:9784                 sta     byte_4B2B       ; Temporary score adder 2
ROM:9787
ROM:9787 loc_9787:
ROM:9787                 lda     2,u
ROM:9789                 adda    byte_4B2B       ; Temporary score adder 2
ROM:978C                 daa
ROM:978D                 sta     byte_4B2B       ; Temporary score adder 2
ROM:9790                 lda     1,u
ROM:9792                 adca    word_4B29+1     ; Temporary score adder 1
ROM:9795                 daa
ROM:9796                 sta     word_4B29+1     ; Temporary score adder 1
ROM:9799                 lda     ,u
ROM:979B                 adca    word_4B29       ; Temporary score adder 1
ROM:979E                 daa
ROM:979F                 sta     word_4B29       ; Temporary score adder 1
ROM:97A2                 decb
ROM:97A3                 bne     loc_9787
ROM:97A5                 ldu     #word_4B29      ; Temporary score adder 1
ROM:97A8                 jsr     loc_9810        ; Add to score total
ROM:97AB
ROM:97AB locret_97AB:
ROM:97AB                 rts
ROM:97AB ; End of function sub_9775
ROM:97AB
ROM:97AC
ROM:97AC ; =============== S U B R O U T I N E =======================================
ROM:97AC
ROM:97AC ; Used the force score
ROM:97AC
ROM:97AC sub_97AC:
ROM:97AC                 ldb     byte_4B15
ROM:97AF                 cmpb    #5
ROM:97B1                 bcs     loc_97B8
ROM:97B3                 ldu     #byte_9847      ; Using Force score value
ROM:97B6                 bra     locret_97C1
ROM:97B8 ; ---------------------------------------------------------------------------
ROM:97B8
ROM:97B8 loc_97B8:
ROM:97B8                 aslb
ROM:97B9                 addb    byte_4B15
ROM:97BC                 ldu     #byte_983B
ROM:97BF                 leau    b,u
ROM:97C1
ROM:97C1 locret_97C1:
ROM:97C1                 rts
ROM:97C1 ; End of function sub_97AC
ROM:97C1
ROM:97C2
ROM:97C2 ; =============== S U B R O U T I N E =======================================
ROM:97C2
ROM:97C2
ROM:97C2 sub_97C2:
ROM:97C2                 ldd     #$A01A
ROM:97C5                 std     ,y++
ROM:97C7                 ldd     #$180
ROM:97CA                 std     ,y++
ROM:97CC                 ldd     #$1EC0
ROM:97CF                 std     ,y++
ROM:97D1                 lda     #4
ROM:97D3                 sta     <DPbyte_AD
ROM:97D5                 jsr     sub_97AC        ; Used the force score
ROM:97D8                 leax    -1,u
ROM:97DA                 jsr     sub_E772        ; Display BCD number text
ROM:97DD                 ldb     #$50 ; P      ; 'For using the Force' text
ROM:97DF                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:97E2                 rts
ROM:97E2 ; End of function sub_97C2
ROM:97E2
ROM:97E3
ROM:97E3 ; =============== S U B R O U T I N E =======================================
ROM:97E3
ROM:97E3
ROM:97E3 sub_97E3:
ROM:97E3                 jsr     sub_97AC        ; Used the force score
ROM:97E6                 bra     loc_9810        ; Add to score total
ROM:97E6 ; End of function sub_97E3
ROM:97E6
ROM:97E8
ROM:97E8 ; =============== S U B R O U T I N E =======================================
ROM:97E8
ROM:97E8 ; Tie fighter score
ROM:97E8
ROM:97E8 sub_97E8:
ROM:97E8                 ldu     #byte_984A      ; Tie fighter score value
ROM:97EB                 bra     loc_9810        ; Add to score total
ROM:97EB ; End of function sub_97E8
ROM:97EB
ROM:97ED
ROM:97ED ; =============== S U B R O U T I N E =======================================
ROM:97ED
ROM:97ED ; Vaders tie score
ROM:97ED
ROM:97ED sub_97ED:
ROM:97ED                 ldu     #byte_984D      ; Vaders tie score value
ROM:97F0                 bra     loc_9810        ; Add to score total
ROM:97F0 ; End of function sub_97ED
ROM:97F0
ROM:97F2
ROM:97F2 ; =============== S U B R O U T I N E =======================================
ROM:97F2
ROM:97F2 ; Trench green squares score
ROM:97F2
ROM:97F2 sub_97F2:
ROM:97F2                 ldu     #byte_9850      ; Trench green squares score value
ROM:97F5                 bra     loc_9810        ; Add to score total
ROM:97F5 ; End of function sub_97F2
ROM:97F5
ROM:97F7
ROM:97F7 ; =============== S U B R O U T I N E =======================================
ROM:97F7
ROM:97F7 ; Laser tower score
ROM:97F7
ROM:97F7 sub_97F7:
ROM:97F7                 ldu     #byte_9859      ; Laser tower score value
ROM:97FA                 bra     loc_9810        ; Add to score total
ROM:97FA ; End of function sub_97F7
ROM:97FA
ROM:97FC
ROM:97FC ; =============== S U B R O U T I N E =======================================
ROM:97FC
ROM:97FC ; Trench turrets score
ROM:97FC
ROM:97FC sub_97FC:
ROM:97FC                 ldu     #byte_9853      ; Trench turrets score value
ROM:97FF                 bra     loc_9810        ; Add to score total
ROM:97FF ; End of function sub_97FC
ROM:97FF
ROM:9801
ROM:9801 ; =============== S U B R O U T I N E =======================================
ROM:9801
ROM:9801 ; Fireball score
ROM:9801
ROM:9801 sub_9801:
ROM:9801                 ldu     #byte_985C      ; Fireball score value
ROM:9804                 bra     loc_9810        ; Add to score total
ROM:9806 ; ---------------------------------------------------------------------------
ROM:9806
ROM:9806 loc_9806:                               ; Exhaust port score
ROM:9806                 ldu     #byte_985F
ROM:9809                 bra     loc_9810        ; Add to score total
ROM:980B ; ---------------------------------------------------------------------------
ROM:980B                 ldu     #byte_9862      ; Cleared all towers score value
ROM:980E                 bra     *+2
ROM:9810
ROM:9810 loc_9810:                               ; Add to score total
ROM:9810                 lda     2,u
ROM:9812                 sta     byte_4B2B       ; Temporary score adder 2
ROM:9815                 adda    <DPbyte_5F      ; Score
ROM:9817                 daa
ROM:9818                 sta     <DPbyte_5F      ; Score
ROM:981A                 lda     1,u
ROM:981C                 sta     word_4B29+1     ; Temporary score adder 1
ROM:981F                 adca    <DPbyte_5E      ; Score thousands
ROM:9821                 daa
ROM:9822                 sta     <DPbyte_5E      ; Score thousands
ROM:9824                 lda     ,u
ROM:9826                 sta     word_4B29       ; Temporary score adder 1
ROM:9829                 adca    <DPbyte_5D      ; Score hundred thousands
ROM:982B                 daa
ROM:982C                 sta     <DPbyte_5D      ; Score hundred thousands
ROM:982E                 lda     <DPbyte_5C      ; Score millions
ROM:9830                 adca    #0
ROM:9832                 daa
ROM:9833                 sta     <DPbyte_5C      ; Score millions
ROM:9835                 lda     #$FF
ROM:9837                 sta     byte_4B2C
ROM:983A                 rts
ROM:983A ; End of function sub_9801
ROM:983A
ROM:983A ; ---------------------------------------------------------------------------
ROM:9865                                         ; for waves 2 and 4
ROM:9874
ROM:9874 ; =============== S U B R O U T I N E =======================================
ROM:9874
ROM:9874
ROM:9874 sub_9874:
ROM:9874                 lda     <DPbyte_8B
ROM:9876                 bne     locret_987E
ROM:9878                 lda     #$10
ROM:987A                 sta     <DPbyte_62      ; Timer for fireball hit?
ROM:987C                 inc     <DPbyte_8B
ROM:987E
ROM:987E locret_987E:
ROM:987E                 rts
ROM:987E ; End of function sub_9874
ROM:987E
ROM:987F
ROM:987F ; =============== S U B R O U T I N E =======================================
ROM:987F
ROM:987F ; Fireball timer
ROM:987F
ROM:987F sub_987F:
ROM:987F                 lda     <DPbyte_43      ; Game over/insert coins timer
ROM:9881                 anda    #3
ROM:9883                 sta     <DPbyte_62      ; Timer for fireball hit?
ROM:9885                 rts
ROM:9885 ; End of function sub_987F
ROM:9885
ROM:9886
ROM:9886 ; =============== S U B R O U T I N E =======================================
ROM:9886
ROM:9886 ; Fireball timer 2
ROM:9886
ROM:9886 sub_9886:
ROM:9886                 ldb     <DPbyte_62      ; Timer for fireball hit?
ROM:9888                 cmpb    #8
ROM:988A                 bls     sub_9890        ; Fireball timer 3
ROM:988C                 ldb     #8
ROM:988E                 stb     <DPbyte_62      ; Timer for fireball hit?
ROM:988E ; End of function sub_9886
ROM:988E
ROM:9890
ROM:9890 ; =============== S U B R O U T I N E =======================================
ROM:9890
ROM:9890 ; Fireball timer 3
ROM:9890
ROM:9890 sub_9890:
ROM:9890                 ldb     <DPbyte_62      ; Timer for fireball hit?
ROM:9892                 beq     locret_9897
ROM:9894                 decb
ROM:9895                 stb     <DPbyte_62      ; Timer for fireball hit?
ROM:9897
ROM:9897 locret_9897:
ROM:9897                 rts
ROM:9897 ; End of function sub_9890
ROM:9897
ROM:9898
ROM:9898 ; =============== S U B R O U T I N E =======================================
ROM:9898
ROM:9898
ROM:9898 sub_9898:
ROM:9898                 lda     <DPbyte_43      ; Game over/insert coins timer
ROM:989A                 anda    #0
ROM:989C                 bne     locret_98AF
ROM:989E                 ldx     #byte_4900      ; 3x Tie fighter data structure ($19 bytes per Tie)
ROM:98A1
ROM:98A1 loc_98A1:
ROM:98A1                 dec     6,x
ROM:98A3                 bpl     loc_98A7
ROM:98A5                 clr     6,x
ROM:98A7
ROM:98A7 loc_98A7:
ROM:98A7                 leax    $19,x
ROM:98AA                 cmpx    #byte_4900+$4B  ; 3x Tie fighter data structure ($19 bytes per Tie)
ROM:98AD                 bcs     loc_98A1
ROM:98AF
ROM:98AF locret_98AF:
ROM:98AF                 rts
ROM:98AF ; End of function sub_9898
ROM:98AF
ROM:98B0
ROM:98B0 ; =============== S U B R O U T I N E =======================================
ROM:98B0
ROM:98B0 ; Insert vector laser explosion small circle
ROM:98B0
ROM:98B0 sub_98B0:
ROM:98B0                 ldb     <DPbyte_62      ; Timer for fireball hit?
ROM:98B2                 andb    #3
ROM:98B4                 beq     locret_98CA
ROM:98B6                 ldd     #$7100
ROM:98B9                 std     ,y++
ROM:98BB                 ldd     #$67FF
ROM:98BE                 std     ,y++
ROM:98C0                 ldd     #$B9B3          ; Vector JSRL 19B3 Laser explosion small circle
ROM:98C3                 std     ,y++
ROM:98C5                 ldd     #$7200
ROM:98C8                 std     ,y++
ROM:98CA
ROM:98CA locret_98CA:
ROM:98CA                 rts
ROM:98CA ; End of function sub_98B0
ROM:98CA
ROM:98CA ; ---------------------------------------------------------------------------
ROM:A1CE
ROM:A1CE ; =============== S U B R O U T I N E =======================================
ROM:A1CE
ROM:A1CE
ROM:A1CE sub_A1CE:
ROM:A1CE                 ldu     #byte_49C2      ; Tie fighter data 1
ROM:A1D1
ROM:A1D1 loc_A1D1:
ROM:A1D1                 lda     #0
ROM:A1D3                 sta     ,u
ROM:A1D5                 leau    1,u
ROM:A1D7                 cmpu    #byte_49C2+$20  ; Tie fighter data 1
ROM:A1DB                 bcs     loc_A1D1
ROM:A1DD                 lda     byte_4B13
ROM:A1E0                 cmpa    #$13
ROM:A1E2                 bcs     loc_A1EF
ROM:A1E4                 ldb     #6
ROM:A1E6                 lda     PRNG
ROM:A1E9                 mul
ROM:A1EA                 adda    #$D
ROM:A1EC                 sta     byte_4B13
ROM:A1EF
ROM:A1EF loc_A1EF:
ROM:A1EF                 ldb     byte_4B13
ROM:A1F2                 ldx     #byte_98CB
ROM:A1F5                 abx
ROM:A1F6                 cmpx    #byte_98DE
ROM:A1F9                 bcs     loc_A1FE
ROM:A1FB                 ldx     #byte_98DD
ROM:A1FE
ROM:A1FE loc_A1FE:
ROM:A1FE                 lda     ,x
ROM:A200                 sta     byte_4B1A
ROM:A203                 ldd     word_9856
ROM:A206                 std     byte_4B2E       ; Temporary score adder towers 1
ROM:A209                 lda     byte_9858
ROM:A20C                 sta     byte_4B30       ; Temporary score adder towers 3
ROM:A20F                 lda     #0
ROM:A211                 sta     <DPbyte_A7
ROM:A213                 rts
ROM:A213 ; End of function sub_A1CE
ROM:A213
ROM:A214
ROM:A214 ; =============== S U B R O U T I N E =======================================
ROM:A214
ROM:A214
ROM:A214 sub_A214:
ROM:A214                 ldb     #7
ROM:A216                 stb     <DPbyte_DC
ROM:A218                 jsr     sub_CD38        ; Trench left side turret calcs
ROM:A21B                 ldd     #0
ROM:A21E                 std     MReg20          ; XT2
ROM:A221                 std     MReg21          ; YT2
ROM:A224                 std     MReg22          ; ZT2
ROM:A227                 jsr     sub_A40A        ; Some Towers code
ROM:A22A                 ldd     MReg4C
ROM:A22D                 std     MReg20          ; XT2
ROM:A230                 ldd     MReg4D
ROM:A233                 std     MReg21          ; YT2
ROM:A236                 ldd     MReg4E
ROM:A239                 std     MReg22          ; ZT2
ROM:A23C                 ldb     byte_4B13
ROM:A23F                 aslb
ROM:A240                 aslb
ROM:A241                 ldx     #off_A182
ROM:A244                 abx
ROM:A245                 cmpx    #off_A182+$4C
ROM:A248                 bcs     loc_A24D
ROM:A24A                 ldx     #off_A1CA
ROM:A24D
ROM:A24D loc_A24D:
ROM:A24D                 ldx     ,x
ROM:A24F
ROM:A24F loc_A24F:                               ; Pointer to Tie fighter data
ROM:A24F                 stx     <DPbyte_64
ROM:A251                 lda     <DPbyte_A7
ROM:A253                 cmpa    5,x
ROM:A255                 lblt    loc_A2DA
ROM:A259                 ldd     ,x
ROM:A25B                 std     word_5E00
ROM:A25E                 ldd     2,x
ROM:A260                 std     word_5E02
ROM:A263                 ldd     #$1E00
ROM:A266                 std     word_5E04
ROM:A269                 ldd     #$1C0
ROM:A26C                 std     MW1
ROM:A26F                 lda     #$67 ; g
ROM:A271                 jsr     Math_Run_Start  ; Do math program run
ROM:A274                 ldd     MReg00          ; Math result X
ROM:A277                 bpl     loc_A27E
ROM:A279                 anda    #$3F ; ?
ROM:A27B                 std     MReg00          ; Math result X
ROM:A27E
ROM:A27E loc_A27E:
ROM:A27E                 std     MReg3E
ROM:A281                 cmpd    #$100
ROM:A285                 blt     loc_A2B0
ROM:A287                 cmpd    #$3C00
ROM:A28B                 bcc     loc_A2B0
ROM:A28D                 ldd     MReg01          ; Math result Y
ROM:A290                 bpl     loc_A296
ROM:A292                 coma
ROM:A293                 negb
ROM:A294                 sbca    #$FF
ROM:A296
ROM:A296 loc_A296:                               ; Math result X
ROM:A296                 subd    MReg00
ROM:A299                 bcc     loc_A2B0
ROM:A29B                 ldu     #byte_49C2      ; Tie fighter data 1
ROM:A29E                 ldb     6,x
ROM:A2A0                 leau    b,u
ROM:A2A2                 lda     ,u
ROM:A2A4                 bita    #2
ROM:A2A6                 beq     loc_A2AE
ROM:A2A8                 jsr     sub_A2F8
ROM:A2AB                 jsr     sub_A591
ROM:A2AE
ROM:A2AE loc_A2AE:
ROM:A2AE                 bra     loc_A2DA
ROM:A2B0 ; ---------------------------------------------------------------------------
ROM:A2B0
ROM:A2B0 loc_A2B0:                               ; Pointer to Tie fighter data
ROM:A2B0                 ldx     <DPbyte_64
ROM:A2B2                 ldu     #byte_49C2      ; Tie fighter data 1
ROM:A2B5                 ldb     6,x
ROM:A2B7                 leau    b,u
ROM:A2B9                 lda     byte_4B3D
ROM:A2BC                 beq     loc_A2C2
ROM:A2BE                 clr     ,u
ROM:A2C0                 bra     loc_A2DA
ROM:A2C2 ; ---------------------------------------------------------------------------
ROM:A2C2
ROM:A2C2 loc_A2C2:
ROM:A2C2                 lda     #$B
ROM:A2C4                 ldb     ,u
ROM:A2C6                 bitb    #4
ROM:A2C8                 beq     loc_A2D6
ROM:A2CA                 oraa    #4
ROM:A2CC                 ldb     4,x
ROM:A2CE                 cmpb    #3
ROM:A2D0                 bne     loc_A2D4
ROM:A2D4
ROM:A2D4 loc_A2D4:
ROM:A2D4                 bra     loc_A2D8
ROM:A2D6 ; ---------------------------------------------------------------------------
ROM:A2D6
ROM:A2D6 loc_A2D6:
ROM:A2D6                 oraa    #$10
ROM:A2D8
ROM:A2D8 loc_A2D8:
ROM:A2D8                 sta     ,u
ROM:A2DA
ROM:A2DA loc_A2DA:
ROM:A2DA                 ldb     byte_4B13
ROM:A2DD                 aslb
ROM:A2DE                 aslb
ROM:A2DF                 ldx     #off_A182
ROM:A2E2                 abx
ROM:A2E3                 cmpx    #off_A182+$4C
ROM:A2E6                 bcs     loc_A2EB
ROM:A2E8                 ldx     #off_A1CA
ROM:A2EB
ROM:A2EB loc_A2EB:
ROM:A2EB                 tfr     x, u
ROM:A2ED                 ldx     <DPbyte_64      ; Pointer to Tie fighter data
ROM:A2EF                 leax    7,x
ROM:A2F1                 cmpx    2,u
ROM:A2F3                 lbcs    loc_A24F
ROM:A2F7                 rts
ROM:A2F7 ; End of function sub_A214
ROM:A2F7
ROM:A2F8
ROM:A2F8 ; =============== S U B R O U T I N E =======================================
ROM:A2F8
ROM:A2F8
ROM:A2F8 sub_A2F8:
ROM:A2F8                 ldx     <DPbyte_64      ; Pointer to Tie fighter data
ROM:A2FA                 ldb     4,x
ROM:A2FC                 cmpb    #3
ROM:A2FE                 bne     loc_A304
ROM:A300                 ldb     #9
ROM:A302                 bra     loc_A306
ROM:A304 ; ---------------------------------------------------------------------------
ROM:A304
ROM:A304 loc_A304:
ROM:A304                 ldb     #8
ROM:A306
ROM:A306 loc_A306:
ROM:A306                 stb     <DPbyte_DC
ROM:A308                 ldd     #$6680
ROM:A30B                 std     word_5E02
ROM:A30E                 ldu     #byte_49C2      ; Tie fighter data 1
ROM:A311                 ldb     6,x
ROM:A313                 leau    b,u
ROM:A315                 lda     ,u
ROM:A317                 ldb     4,x
ROM:A319                 cmpb    #3
ROM:A31B                 beq     loc_A333
ROM:A31D                 bita    #4
ROM:A31F                 bne     loc_A325
ROM:A321                 bita    #$10
ROM:A323                 bne     loc_A32E
ROM:A325
ROM:A325 loc_A325:
ROM:A325                 ldb     #$A
ROM:A327                 stb     <DPbyte_DC
ROM:A329                 ldd     #$6080
ROM:A32C                 bra     loc_A331
ROM:A32E ; ---------------------------------------------------------------------------
ROM:A32E
ROM:A32E loc_A32E:
ROM:A32E                 ldd     #$6780
ROM:A331
ROM:A331 loc_A331:
ROM:A331                 bra     loc_A33F
ROM:A333 ; ---------------------------------------------------------------------------
ROM:A333
ROM:A333 loc_A333:
ROM:A333                 bita    #4
ROM:A335                 bne     loc_A33C
ROM:A337                 ldd     #$6460
ROM:A33A                 bra     loc_A33F
ROM:A33C ; ---------------------------------------------------------------------------
ROM:A33C
ROM:A33C loc_A33C:
ROM:A33C                 ldd     #$6080
ROM:A33F
ROM:A33F loc_A33F:
ROM:A33F                 std     word_5E00
ROM:A342                 lda     #$72 ; r
ROM:A344                 sta     word_5E04
ROM:A347                 lda     MReg00          ; Math result X
ROM:A34A                 asla
ROM:A34B                 asla
ROM:A34C                 sta     word_5E04+1
ROM:A34F                 ldb     #$40 ; @
ROM:A351                 coma
ROM:A352                 mul
ROM:A353                 adda    #$40 ; @
ROM:A355                 sta     word_5E02+1
ROM:A358                 ldd     MReg43
ROM:A35B                 aslb
ROM:A35C                 rola
ROM:A35D                 addd    #$400
ROM:A360                 subd    MReg00          ; Math result X
ROM:A363                 lblt    loc_A3F4
ROM:A367                 lda     4,x
ROM:A369                 cmpa    #3
ROM:A36B                 beq     loc_A3A7
ROM:A36D                 lda     <DPbyte_60      ; Shield count
ROM:A36F                 blt     loc_A374
ROM:A371                 jsr     Sound_2C
ROM:A374
ROM:A374 loc_A374:                               ; Math result X
ROM:A374                 ldd     MReg00
ROM:A377                 subd    #$200
ROM:A37A                 subd    MReg43
ROM:A37D                 bgt     loc_A3A5
ROM:A37F                 ldd     #$A018
ROM:A382                 std     word_5E02
ROM:A385                 ldd     #$6080
ROM:A388                 std     word_5E00
ROM:A38B                 lda     <DPbyte_60      ; Shield count
ROM:A38D                 blt     loc_A395
ROM:A38F                 jsr     sub_9874
ROM:A392                 jsr     Sound_26        ; Explosion
ROM:A395
ROM:A395 loc_A395:
ROM:A395                 lda     <DPbyte_63
ROM:A397                 bne     loc_A39D
ROM:A399                 lda     MReg01          ; Math result Y
ROM:A39C                 nega
ROM:A39D
ROM:A39D loc_A39D:
ROM:A39D                 ldb     #$20 ;  
ROM:A39F                 tsta
ROM:A3A0                 bpl     loc_A3A3
ROM:A3A2                 negb
ROM:A3A3
ROM:A3A3 loc_A3A3:
ROM:A3A3                 stb     <DPbyte_63
ROM:A3A5
ROM:A3A5 loc_A3A5:
ROM:A3A5                 bra     loc_A3F4
ROM:A3A7 ; ---------------------------------------------------------------------------
ROM:A3A7
ROM:A3A7 loc_A3A7:                               ; ZT2
ROM:A3A7                 ldd     MReg22
ROM:A3AA                 subd    #$7A0
ROM:A3AD                 bgt     loc_A3F4
ROM:A3AF                 jsr     Sound_2C
ROM:A3B2                 ldx     <DPbyte_64      ; Pointer to Tie fighter data
ROM:A3B4                 ldu     #byte_49C2      ; Tie fighter data 1
ROM:A3B7                 ldb     6,x
ROM:A3B9                 leau    b,u
ROM:A3BB                 lda     ,u
ROM:A3BD                 bita    #4
ROM:A3BF                 bne     loc_A3F4
ROM:A3C1                 ldd     MReg22          ; ZT2
ROM:A3C4                 subd    #$5A0
ROM:A3C7                 bge     loc_A3F4
ROM:A3C9                 ldd     MReg00          ; Math result X
ROM:A3CC                 subd    #$400
ROM:A3CF                 subd    MReg43
ROM:A3D2                 bgt     loc_A3F4
ROM:A3D4                 ldd     #$A018
ROM:A3D7                 std     word_5E00
ROM:A3DA                 lda     <DPbyte_60      ; Shield count
ROM:A3DC                 blt     loc_A3E4
ROM:A3DE                 jsr     sub_9874
ROM:A3E1                 jsr     Sound_26        ; Explosion
ROM:A3E4
ROM:A3E4 loc_A3E4:
ROM:A3E4                 lda     <DPbyte_63
ROM:A3E6                 bne     loc_A3F4
ROM:A3E8                 lda     #$13
ROM:A3EA                 ldb     MReg01          ; Math result Y
ROM:A3ED                 bmi     loc_A3F0
ROM:A3EF                 nega
ROM:A3F0
ROM:A3F0 loc_A3F0:
ROM:A3F0                 adda    <DPbyte_63
ROM:A3F2                 sta     <DPbyte_63
ROM:A3F4
ROM:A3F4 loc_A3F4:                               ; Math result X
ROM:A3F4                 lda     MReg00
ROM:A3F7                 suba    #8
ROM:A3F9                 bgt     loc_A400
ROM:A3FB                 jsr     sub_CD68
ROM:A3FE                 bra     loc_A403
ROM:A400 ; ---------------------------------------------------------------------------
ROM:A400
ROM:A400 loc_A400:
ROM:A400                 jsr     sub_CD50
ROM:A403
ROM:A403 loc_A403:                               ; Function select for an object
ROM:A403                 jsr     sub_CD74
ROM:A406                 jsr     sub_A459        ; Some Towers code
ROM:A409                 rts
ROM:A409 ; End of function sub_A2F8
ROM:A409
ROM:A40A
ROM:A40A ; =============== S U B R O U T I N E =======================================
ROM:A40A
ROM:A40A ; Some Towers code
ROM:A40A
ROM:A40A sub_A40A:
ROM:A40A                 jsr     sub_CDE7        ; Swap Matrix 2  x, y, z to  x, y, z
ROM:A40D                 ldd     #0
ROM:A410                 std     MReg3C
ROM:A413                 ldd     <DPbyte_B3
ROM:A415                 std     MReg3D
ROM:A418                 ldd     <DPbyte_B5
ROM:A41A                 std     MReg3E
ROM:A41D                 ldd     #$F
ROM:A420                 std     MW1             ; Point BIC to $5078 MReg3C
ROM:A423                 lda     #$2A ; *      ; Reg00 = (([BIC,0] - XT) x Ax2)  +  (([BIC,1] - YT) x Bx2)  +  (([BIC,2] - ZT) x Cx2)
ROM:A423                                         ; Reg01 = (([BIC,0] - XT) x Ay2)  +  (([BIC,1] - YT) x By2)  +  (([BIC,2] - ZT) x Cy2)
ROM:A423                                         ; Reg02 = (([BIC,0] - XT) x Az2)  +  (([BIC,1] - YT) x Bz2)  +  (([BIC,2] - ZT) x Cz2)
ROM:A423                                         ; BIC++
ROM:A425                 jsr     Math_Run_Start  ; Do math program run
ROM:A428                 ldd     MReg01          ; Math result Y
ROM:A42B                 std     MReg3C
ROM:A42E                 ldd     MReg02          ; Math result Z
ROM:A431                 std     MReg3D
ROM:A434                 bpl     loc_A455
ROM:A436                 lda     <DPbyte_BC
ROM:A438                 beq     loc_A455
ROM:A43A                 lda     #$FF
ROM:A43C                 sta     <DPbyte_BD
ROM:A43E                 lda     #3
ROM:A440                 sta     byte_4B23
ROM:A443                 ldd     #$6280
ROM:A446                 std     word_4B20
ROM:A449                 ldd     MReg02          ; Math result Z
ROM:A44C                 lsra
ROM:A44D                 rorb
ROM:A44E                 lsra
ROM:A44F                 rorb
ROM:A450                 addb    #$C0 ; +
ROM:A452                 stb     byte_4B22
ROM:A455
ROM:A455 loc_A455:                               ; Called during towers phase only
ROM:A455                 jsr     sub_CDE7
ROM:A458                 rts
ROM:A458 ; End of function sub_A40A
ROM:A458
ROM:A459
ROM:A459 ; =============== S U B R O U T I N E =======================================
ROM:A459
ROM:A459 ; Some Towers code
ROM:A459
ROM:A459 sub_A459:
ROM:A459                 ldx     <DPbyte_64      ; Pointer to Tie fighter data
ROM:A45B                 ldd     MReg3E
ROM:A45E                 aslb
ROM:A45F                 rola
ROM:A460                 std     DVSRH
ROM:A463                 ldd     2,x
ROM:A465                 subd    MReg21          ; YT2
ROM:A468                 std     MReg01          ; Math result Y
ROM:A46B                 ldd     #0
ROM:A46E                 subd    MReg22          ; ZT2
ROM:A471                 std     MReg02          ; Math result Z
ROM:A474                 ldd     MW0
ROM:A477                 std     MReg00          ; Math result X
ROM:A47A                                         ; MReg02 = MReg02 x MReg00
ROM:A47C                 jsr     Math_Run_Start  ; Do math program run
ROM:A47F                 ldd     MReg01          ; Math result Y
ROM:A482                 std     MReg0D          ; YT
ROM:A485                 ldd     MReg02          ; Math result Z
ROM:A488                 std     MReg0E          ; ZT
ROM:A48B                 lda     4,x
ROM:A48D                 cmpa    #3
ROM:A48F                 beq     loc_A49F
ROM:A491                 ldd     #$3C0
ROM:A494                 std     MReg01          ; Math result Y
ROM:A497                 ldd     #$5280
ROM:A49A                 std     MReg02          ; Math result Z
ROM:A49D                 bra     loc_A4BA
ROM:A49F ; ---------------------------------------------------------------------------
ROM:A49F
ROM:A49F loc_A49F:                               ; Tie fighter data 1
ROM:A49F                 ldu     #byte_49C2
ROM:A4A2                 ldb     6,x
ROM:A4A4                 leau    b,u
ROM:A4A6                 lda     ,u
ROM:A4A8                 bita    #4
ROM:A4AA                 lbne    locret_A54A
ROM:A4AE                 ldd     #$690
ROM:A4B1                 std     MReg01          ; Math result Y
ROM:A4B4                 ldd     #$5A0
ROM:A4B7                 std     MReg02          ; Math result Z
ROM:A4BA
ROM:A4BA loc_A4BA:                               ; Math result X
ROM:A4BA                 ldd     MReg00
ROM:A4BD                 subd    #$100
ROM:A4C0                 bpl     loc_A4C5
ROM:A4C2                 ldd     #0
ROM:A4C5
ROM:A4C5 loc_A4C5:                               ; Math result X
ROM:A4C5                 std     MReg00
ROM:A4C8                                         ; MReg02 = MReg02 x MReg00
ROM:A4CA                 jsr     Math_Run_Start  ; Do math program run
ROM:A4CD                 ldd     MReg0D          ; YT
ROM:A4D0                 addd    MReg01          ; Math result Y
ROM:A4D3                 addd    #$A
ROM:A4D6                 subd    MReg3C
ROM:A4D9                 lblt    locret_A54A
ROM:A4DD                 asra
ROM:A4DE                 rorb
ROM:A4DF                 subd    #$A
ROM:A4E2                 subd    MReg01          ; Math result Y
ROM:A4E5                 lbgt    locret_A54A
ROM:A4E9                 ldd     MReg3D
ROM:A4EC                 subd    MReg0E          ; ZT
ROM:A4EF                 bmi     locret_A54A
ROM:A4F1                 subd    MReg02          ; Math result Z
ROM:A4F4                 bgt     locret_A54A
ROM:A4F6                 lda     4,x
ROM:A4F8                 cmpa    #3
ROM:A4FA                 bne     loc_A50A
ROM:A4FC                 ldd     MReg3E
ROM:A4FF                 cmpd    <DPbyte_C8
ROM:A502                 bcc     loc_A508
ROM:A504                 std     <DPbyte_C8
ROM:A506                 stx     <DPbyte_C6
ROM:A508
ROM:A508 loc_A508:
ROM:A508                 bra     locret_A54A
ROM:A50A ; ---------------------------------------------------------------------------
ROM:A50A
ROM:A50A loc_A50A:
ROM:A50A                 ldd     #$4CE0
ROM:A50D                 std     MReg01          ; Math result Y
ROM:A510                                         ; MReg02 = MReg02 x MReg00
ROM:A512                 jsr     Math_Run_Start  ; Do math program run
ROM:A515                 ldd     MReg3D
ROM:A518                 addd    #$A
ROM:A51B                 subd    MReg0E          ; ZT
ROM:A51E                 subd    MReg01          ; Math result Y
ROM:A521                 blt     loc_A53E
ROM:A523                 ldu     #byte_49C2      ; Tie fighter data 1
ROM:A526                 ldb     6,x
ROM:A528                 leau    b,u
ROM:A52A                 lda     ,u
ROM:A52C                 bita    #4
ROM:A52E                 bne     locret_A54A
ROM:A530                 ldd     MReg3E
ROM:A533                 cmpd    <DPbyte_C8
ROM:A536                 bcc     loc_A53C
ROM:A538                 std     <DPbyte_C8
ROM:A53A                 stx     <DPbyte_C6
ROM:A53C
ROM:A53C loc_A53C:
ROM:A53C                 bra     locret_A54A
ROM:A53E ; ---------------------------------------------------------------------------
ROM:A53E
ROM:A53E loc_A53E:
ROM:A53E                 ldd     MReg3E
ROM:A541                 cmpd    <DPbyte_D0
ROM:A544                 bcc     locret_A54A
ROM:A546                 std     <DPbyte_D0
ROM:A548                 stx     <DPbyte_CE
ROM:A54A
ROM:A54A locret_A54A:
ROM:A54A                 rts
ROM:A54A ; End of function sub_A459
ROM:A54A
ROM:A54B ; ---------------------------------------------------------------------------
ROM:A54B ; START OF FUNCTION CHUNK FOR sub_B2D2
ROM:A54B
ROM:A54B loc_A54B:
ROM:A54B                 ldx     <DPbyte_C6
ROM:A54D                 ldd     ,x
ROM:A54F                 subd    MReg4C
ROM:A552                 anda    #$7F ; 
ROM:A554                 addd    MReg4C
ROM:A557                 std     MReg0C          ; XT
ROM:A55A                 ldd     2,x
ROM:A55C                 std     MReg0D          ; YT
ROM:A55F                 ldu     #byte_49C2      ; Tie fighter data 1
ROM:A562                 ldb     6,x
ROM:A564                 leau    b,u
ROM:A566                 lda     ,u
ROM:A568                 oraa    #4
ROM:A56A                 sta     ,u
ROM:A56C                 lda     4,x
ROM:A56E                 cmpa    #3
ROM:A570                 bne     loc_A580
ROM:A572                 ldd     #$2D0
ROM:A575                 std     MReg0E          ; ZT
ROM:A578                 jsr     sub_B852
ROM:A57B                 jsr     sub_97F7        ; Laser tower score
ROM:A57E                 bra     loc_A58C
ROM:A580 ; ---------------------------------------------------------------------------
ROM:A580
ROM:A580 loc_A580:
ROM:A580                 ldd     #$5460
ROM:A583                 std     MReg0E          ; ZT
ROM:A586                 jsr     sub_B85E
ROM:A589                 jsr     sub_973A        ; Towers incrementing score
ROM:A58C
ROM:A58C loc_A58C:
ROM:A58C                 jsr     Sound_35
ROM:A58F                 rts
ROM:A58F ; END OF FUNCTION CHUNK FOR sub_B2D2
ROM:A58F ; ---------------------------------------------------------------------------
ROM:A591
ROM:A591 ; =============== S U B R O U T I N E =======================================
ROM:A591
ROM:A591
ROM:A591 sub_A591:
ROM:A591
ROM:A591 ; FUNCTION CHUNK AT ROM:A728 SIZE 0000008E BYTES
ROM:A591
ROM:A591                 lda     <DPbyte_60      ; Shield count
ROM:A593                 blt     locret_A5B2
ROM:A595                 ldx     <DPbyte_64      ; Pointer to Tie fighter data
ROM:A597                 ldu     #byte_49C2      ; Tie fighter data 1
ROM:A59A                 ldb     6,x
ROM:A59C                 leau    b,u
ROM:A59E                 lda     ,u
ROM:A5A0                 bita    #4
ROM:A5A2                 bne     locret_A5B2
ROM:A5A4                 lda     4,x
ROM:A5A6                 cmpa    #2
ROM:A5A8                 lbeq    loc_A608
ROM:A5AC                 lbhi    loc_A655
ROM:A5B0                 bra     loc_A5B3
ROM:A5B2 ; ---------------------------------------------------------------------------
ROM:A5B2
ROM:A5B2 locret_A5B2:
ROM:A5B2                 rts
ROM:A5B3 ; ---------------------------------------------------------------------------
ROM:A5B3
ROM:A5B3 loc_A5B3:
ROM:A5B3                 ldd     #$4000
ROM:A5B6                 subd    MReg3E
ROM:A5B9                 aslb
ROM:A5BA                 rola
ROM:A5BB                 std     MReg00          ; Math result X
ROM:A5BE                 ldd     #$2940
ROM:A5C1                 std     MReg02          ; Math result Z
ROM:A5C4                 ldd     #$2D0
ROM:A5C7                 std     MReg01          ; Math result Y
ROM:A5CA                                         ; MReg02 = MReg02 x MReg00
ROM:A5CC                 jsr     Math_Run_Start  ; Do math program run
ROM:A5CF                 ldd     MReg02          ; Math result Z
ROM:A5D2                 subd    MReg22          ; ZT2
ROM:A5D5                 bge     loc_A5DE
ROM:A5D7                 lda     ,u
ROM:A5D9                 oraa    #8
ROM:A5DB                 sta     ,u
ROM:A5DD                 rts
ROM:A5DE ; ---------------------------------------------------------------------------
ROM:A5DE
ROM:A5DE loc_A5DE:                               ; Math result Y
ROM:A5DE                 subd    MReg01
ROM:A5E1                 ble     loc_A5E9
ROM:A5E3                 lda     ,u
ROM:A5E5                 bita    #8
ROM:A5E7                 beq     locret_A607
ROM:A5E9
ROM:A5E9 loc_A5E9:
ROM:A5E9                 lda     ,u
ROM:A5ED                 sta     ,u
ROM:A5EF                 lda     PRNG
ROM:A5F2                 bpl     loc_A5F7
ROM:A5F4                 jsr     sub_A7B6        ; Emit fireballs from towers/bunkers
ROM:A5F7
ROM:A5F7 loc_A5F7:
ROM:A5F7                 lda     PRNG
ROM:A5FA                 bpl     loc_A5FF
ROM:A5FC                 jsr     sub_A7C8        ; Emit fireballs from towers/bunkers 2
ROM:A5FF
ROM:A5FF loc_A5FF:
ROM:A5FF                 lda     PRNG
ROM:A602                 bpl     locret_A607
ROM:A604                 jsr     sub_A7BF
ROM:A607
ROM:A607 locret_A607:
ROM:A607                 rts
ROM:A608 ; ---------------------------------------------------------------------------
ROM:A608
ROM:A608 loc_A608:
ROM:A608                 ldd     #$4000
ROM:A60B                 subd    MReg3E
ROM:A60E                 aslb
ROM:A60F                 rola
ROM:A610                 std     MReg00          ; Math result X
ROM:A613                 ldd     #$2940
ROM:A616                 std     MReg02          ; Math result Z
ROM:A619                 ldd     #$2D0
ROM:A61C                 std     MReg01          ; Math result Y
ROM:A61F                                         ; MReg02 = MReg02 x MReg00
ROM:A621                 jsr     Math_Run_Start  ; Do math program run
ROM:A624                 ldd     MReg02          ; Math result Z
ROM:A627                 subd    MReg22          ; ZT2
ROM:A62A                 bge     loc_A633
ROM:A62C                 lda     ,u
ROM:A62E                 oraa    #8
ROM:A630                 sta     ,u
ROM:A632                 rts
ROM:A633 ; ---------------------------------------------------------------------------
ROM:A633
ROM:A633 loc_A633:                               ; Math result Y
ROM:A633                 subd    MReg01
ROM:A636                 ble     loc_A63E
ROM:A638                 lda     ,u
ROM:A63A                 bita    #8
ROM:A63C                 beq     locret_A654
ROM:A63E
ROM:A63E loc_A63E:
ROM:A63E                 lda     ,u
ROM:A642                 sta     ,u
ROM:A644                 lda     PRNG
ROM:A647                 bpl     loc_A64C
ROM:A649                 jsr     sub_A7C8        ; Emit fireballs from towers/bunkers 2
ROM:A64C
ROM:A64C loc_A64C:
ROM:A64C                 lda     PRNG
ROM:A64F                 bpl     locret_A654
ROM:A651                 jsr     sub_A7BF
ROM:A654
ROM:A654 locret_A654:
ROM:A654                 rts
ROM:A655 ; ---------------------------------------------------------------------------
ROM:A655
ROM:A655 loc_A655:
ROM:A655                 lda     #$40 ; @
ROM:A657                 suba    MReg3E
ROM:A65A                 cmpa    PRNG
ROM:A65D                 bcs     locret_A674
ROM:A65F                 lda     PRNG
ROM:A662                 cmpa    #$50 ; P
ROM:A664                 bcc     loc_A669
ROM:A666                 jmp     loc_A728
ROM:A669 ; ---------------------------------------------------------------------------
ROM:A669
ROM:A669 loc_A669:
ROM:A669                 lda     PRNG
ROM:A66C                 bpl     loc_A671
ROM:A66E                 jmp     loc_A728
ROM:A671 ; ---------------------------------------------------------------------------
ROM:A671
ROM:A671 loc_A671:
ROM:A671                 jmp     loc_A728
ROM:A674 ; ---------------------------------------------------------------------------
ROM:A674
ROM:A674 locret_A674:
ROM:A674                 rts
ROM:A674 ; End of function sub_A591
ROM:A674
ROM:A674 ; ---------------------------------------------------------------------------
ROM:A68B
ROM:A68B ; =============== S U B R O U T I N E =======================================
ROM:A68B
ROM:A68B ; Emit fireballs from tie fighters
ROM:A68B
ROM:A68B sub_A68B:
ROM:A68B                 stu     <DPbyte_A8      ; Fireball data pointer
ROM:A68D                 ldb     #$40 ; @
ROM:A68F                 stb     5,u
ROM:A691                 ldb     #1
ROM:A693                 stb     3,u
ROM:A695                 ldb     #1
ROM:A697                 stb     4,u
ROM:A699                 lda     word_4B3B+1
ROM:A69C                 ble     loc_A6AB
ROM:A69E                 cmpx    byte_4B32
ROM:A6A1                 bne     loc_A6AB
ROM:A6A3                 dec     word_4B3B+1
ROM:A6A6                 bne     loc_A6AB
ROM:A6A8                 jsr     Sound_12
ROM:A6AB
ROM:A6AB loc_A6AB:
ROM:A6AB                 ldu     ,u
ROM:A6AD                 ldx     ,x
ROM:A6AF                 ldd     8,x
ROM:A6B1                 subd    MReg4C
ROM:A6B4                 std     ,u
ROM:A6B6                 ldd     $A,x
ROM:A6B8                 subd    MReg4D
ROM:A6BB                 std     2,u
ROM:A6BD                 ldd     $C,x
ROM:A6BF                 subd    MReg4E
ROM:A6C2                 std     4,u
ROM:A6C4                 jsr     Sound_36
ROM:A6C7                 rts
ROM:A6C7 ; End of function sub_A68B
ROM:A6C7
ROM:A6C7 ; ---------------------------------------------------------------------------
ROM:A6E0
ROM:A6E0 ; =============== S U B R O U T I N E =======================================
ROM:A6E0
ROM:A6E0 ; Emit fireballs from towers 4
ROM:A6E0
ROM:A6E0 sub_A6E0:
ROM:A6E0                 ldb     byte_4B19
ROM:A6E3                 cmpb    #$C
ROM:A6E5                 bcs     loc_A6EC
ROM:A6E7                 ldx     #off_A6DE
ROM:A6EA                 bra     loc_A6F2
ROM:A6EC ; ---------------------------------------------------------------------------
ROM:A6EC
ROM:A6EC loc_A6EC:
ROM:A6EC                 aslb
ROM:A6ED                 ldx     #off_A6C8
ROM:A6F0                 ldx     b,x
ROM:A6F2
ROM:A6F2 loc_A6F2:
ROM:A6F2                 bra     loc_A708
ROM:A6F2 ; End of function sub_A6E0
ROM:A6F2
ROM:A6F4
ROM:A6F4 ; =============== S U B R O U T I N E =======================================
ROM:A6F4
ROM:A6F4
ROM:A6F4 sub_A6F4:
ROM:A6F4                 ldb     byte_4B19
ROM:A6F7                 cmpb    #7
ROM:A6F9                 bls     loc_A6FD
ROM:A6FB                 ldb     #7
ROM:A6FD
ROM:A6FD loc_A6FD:
ROM:A6FD                 aslb
ROM:A6FE                 ldx     #off_A718
ROM:A701                 ldx     b,x
ROM:A703                 bra     loc_A708
ROM:A703 ; End of function sub_A6F4
ROM:A703
ROM:A705
ROM:A705 ; =============== S U B R O U T I N E =======================================
ROM:A705
ROM:A705 ; Emit fireballs from towers 3
ROM:A705
ROM:A705 sub_A705:
ROM:A705                 ldx     #byte_494B      ; 6x Fireball data structure 2 ($6 bytes per fireball)
ROM:A708
ROM:A708 loc_A708:                               ; Fireball data pointer
ROM:A708                 stx     <DPbyte_A8
ROM:A70A                 lda     3,x
ROM:A70C                 beq     locret_A717
ROM:A70E                 leax    6,x
ROM:A710                 cmpx    #byte_494B+$24  ; 6x Fireball data structure 2 ($6 bytes per fireball)
ROM:A713                 bcs     loc_A708
ROM:A715                 leas    2,s             ; Do not return to last function call ?
ROM:A717
ROM:A717 locret_A717:
ROM:A717                 rts
ROM:A717 ; End of function sub_A705
ROM:A717
ROM:A717 ; ---------------------------------------------------------------------------
ROM:A728 ; ---------------------------------------------------------------------------
ROM:A728 ; START OF FUNCTION CHUNK FOR sub_A591
ROM:A728
ROM:A728 loc_A728:                               ; Emit fireballs from towers 4
ROM:A728                 jsr     sub_A6E0
ROM:A72B                 lda     #$70 ; p
ROM:A72D                 sta     5,x
ROM:A72F                 lda     #5
ROM:A731                 sta     3,x
ROM:A733                 ldu     <DPbyte_64      ; Pointer to Tie fighter data
ROM:A735                 stx     <DPbyte_1
ROM:A737                 ldd     2,u
ROM:A739                 subd    MReg4D
ROM:A73C                 bmi     loc_A742
ROM:A73E                 lda     #8
ROM:A740                 bra     loc_A744
ROM:A742 ; ---------------------------------------------------------------------------
ROM:A742
ROM:A742 loc_A742:
ROM:A742                 lda     #7
ROM:A744
ROM:A744 loc_A744:
ROM:A744                 sta     4,x
ROM:A746                 ldx     ,x
ROM:A748                 lda     ,u
ROM:A74A                 suba    MReg4C
ROM:A74F                 eora    ,u
ROM:A751                 ldb     1,u
ROM:A753                 std     ,x
ROM:A755                 ldd     2,u
ROM:A757                 std     2,x
ROM:A759                 ldd     #$200
ROM:A75C                 std     4,x
ROM:A75E                 ldd     2,x
ROM:A760                 subd    MReg4D
ROM:A763                 sta     6,x
ROM:A765                 bpl     loc_A76B
ROM:A767                 coma
ROM:A768                 negb
ROM:A769                 sbca    #$FF
ROM:A76B
ROM:A76B loc_A76B:
ROM:A76B                 std     DVDDH
ROM:A76E                 ldd     ,x
ROM:A770                 subd    MReg4C
ROM:A773                 std     DVSRH
ROM:A776                 ldd     #$200
ROM:A779                 std     DVDDH
ROM:A77C                 lda     MW0
ROM:A77F                 asla
ROM:A780                 asla
ROM:A781                 bcc     loc_A784
ROM:A783                 clra
ROM:A784
ROM:A784 loc_A784:
ROM:A784                 sta     7,x
ROM:A786                 lda     <DPbyte_7D      ; Joystick X
ROM:A788                 eora    6,x
ROM:A78A                 bpl     loc_A790
ROM:A78C                 clr     6,x
ROM:A78E                 bra     loc_A7B2
ROM:A790 ; ---------------------------------------------------------------------------
ROM:A790
ROM:A790 loc_A790:                               ; Joystick X
ROM:A790                 lda     <DPbyte_7D
ROM:A792                 bpl     loc_A795
ROM:A794                 nega
ROM:A795
ROM:A795 loc_A795:
ROM:A795                 asla
ROM:A796                 cmpa    7,x
ROM:A798                 bhi     loc_A79E
ROM:A79A                 clr     6,x
ROM:A79C                 bra     loc_A7B2
ROM:A79E ; ---------------------------------------------------------------------------
ROM:A79E
ROM:A79E loc_A79E:
ROM:A79E                 lda     #$FF
ROM:A7A0                 sta     6,x
ROM:A7A2                 ldx     <DPbyte_1
ROM:A7A4                 lda     4,x
ROM:A7A6                 cmpa    #8
ROM:A7A8                 bne     loc_A7AE
ROM:A7AA                 lda     #7
ROM:A7AC                 bra     loc_A7B0
ROM:A7AE ; ---------------------------------------------------------------------------
ROM:A7AE
ROM:A7AE loc_A7AE:
ROM:A7AE                 lda     #8
ROM:A7B0
ROM:A7B0 loc_A7B0:
ROM:A7B0                 sta     4,x
ROM:A7B2
ROM:A7B2 loc_A7B2:
ROM:A7B2                 jsr     Sound_39
ROM:A7B5                 rts
ROM:A7B5 ; END OF FUNCTION CHUNK FOR sub_A591
ROM:A7B6
ROM:A7B6 ; =============== S U B R O U T I N E =======================================
ROM:A7B6
ROM:A7B6 ; Emit fireballs from towers/bunkers
ROM:A7B6
ROM:A7B6 sub_A7B6:
ROM:A7B6
ROM:A7B6 ; FUNCTION CHUNK AT ROM:A7D1 SIZE 0000000E BYTES
ROM:A7B6
ROM:A7B6                 jsr     sub_A705        ; Emit fireballs from towers 3
ROM:A7B9                 lda     #3
ROM:A7BB                 sta     4,x
ROM:A7BD                 bra     loc_A7D1
ROM:A7BD ; End of function sub_A7B6
ROM:A7BD
ROM:A7BF
ROM:A7BF ; =============== S U B R O U T I N E =======================================
ROM:A7BF
ROM:A7BF
ROM:A7BF sub_A7BF:
ROM:A7BF                 jsr     sub_A705        ; Emit fireballs from towers 3
ROM:A7C2                 lda     #4
ROM:A7C4                 sta     4,x
ROM:A7C6                 bra     loc_A7D1
ROM:A7C6 ; End of function sub_A7BF
ROM:A7C6
ROM:A7C8
ROM:A7C8 ; =============== S U B R O U T I N E =======================================
ROM:A7C8
ROM:A7C8 ; Emit fireballs from towers/bunkers 2
ROM:A7C8
ROM:A7C8 sub_A7C8:
ROM:A7C8                 jsr     sub_A705        ; Emit fireballs from towers 3
ROM:A7CB                 lda     #5
ROM:A7CD                 sta     4,x
ROM:A7CF                 bra     *+2
ROM:A7CF ; End of function sub_A7C8
ROM:A7CF
ROM:A7D1 ; START OF FUNCTION CHUNK FOR sub_A7B6
ROM:A7D1
ROM:A7D1 loc_A7D1:
ROM:A7D1                 lda     #$70 ; p
ROM:A7D3                 sta     5,x
ROM:A7D5                 lda     #5
ROM:A7D7                 sta     3,x
ROM:A7D9                 ldu     <DPbyte_64      ; Pointer to Tie fighter data
ROM:A7DB                 ldx     ,x
ROM:A7DD                 lda     ,u
ROM:A7DD ; END OF FUNCTION CHUNK FOR sub_A7B6
ROM:A7DF
ROM:A7DF ; =============== S U B R O U T I N E =======================================
ROM:A7DF
ROM:A7DF
ROM:A7DF sub_A7DF:
ROM:A7DF                 suba    MReg4C
ROM:A7E4                 eora    ,u
ROM:A7E6                 ldb     1,u
ROM:A7E8                 std     ,x
ROM:A7EA                 ldd     2,u
ROM:A7EC                 std     2,x
ROM:A7EE                 ldd     MReg22          ; ZT2
ROM:A7F1                 std     4,x
ROM:A7F3                 jsr     Sound_39
ROM:A7F6                 rts
ROM:A7F6 ; End of function sub_A7DF
ROM:A7F6
ROM:A7F7
ROM:A7F7 ; =============== S U B R O U T I N E =======================================
ROM:A7F7
ROM:A7F7
ROM:A7F7 sub_A7F7:
ROM:A7F7                 lda     <DPbyte_95
ROM:A7F9                 beq     loc_A800
ROM:A7FB                 jsr     sub_A705        ; Emit fireballs from towers 3
ROM:A7FE                 bra     loc_A803
ROM:A800 ; ---------------------------------------------------------------------------
ROM:A800
ROM:A800 loc_A800:
ROM:A800                 jsr     sub_A6F4
ROM:A803
ROM:A803 loc_A803:
ROM:A803                 lda     #9
ROM:A805                 sta     4,x
ROM:A807                 ldu     ,x
ROM:A809                 bra     loc_A81F
ROM:A809 ; End of function sub_A7F7
ROM:A809
ROM:A80B
ROM:A80B ; =============== S U B R O U T I N E =======================================
ROM:A80B
ROM:A80B
ROM:A80B sub_A80B:
ROM:A80B                 lda     <DPbyte_95
ROM:A80D                 beq     loc_A814
ROM:A80F                 jsr     sub_A705        ; Emit fireballs from towers 3
ROM:A812                 bra     loc_A817
ROM:A814 ; ---------------------------------------------------------------------------
ROM:A814
ROM:A814 loc_A814:
ROM:A814                 jsr     sub_A6F4
ROM:A817
ROM:A817 loc_A817:
ROM:A817                 lda     #$A
ROM:A819                 sta     4,x
ROM:A81B                 ldu     ,x
ROM:A81D                 bra     *+2
ROM:A81F
ROM:A81F loc_A81F:
ROM:A81F                 ldd     MReg3C
ROM:A822                 std     ,u
ROM:A824                 ldd     MReg3D
ROM:A827                 std     2,u
ROM:A829                 ldd     MReg3E
ROM:A82C                 std     4,u
ROM:A82E                 lda     #$40 ; @
ROM:A830                 sta     5,x
ROM:A832                 lda     #5
ROM:A834                 sta     3,x
ROM:A836                 lda     PRNG
ROM:A839                 lsra
ROM:A83A                 ldb     MReg3E
ROM:A83D                 cmpb    #$FC ; n
ROM:A83F                 blt     loc_A843
ROM:A841                 lda     #0
ROM:A843
ROM:A843 loc_A843:
ROM:A843                 sta     6,u
ROM:A845                 jsr     Sound_39
ROM:A848                 rts
ROM:A848 ; End of function sub_A80B
ROM:A848
ROM:A849
ROM:A849 ; =============== S U B R O U T I N E =======================================
ROM:A849
ROM:A849 ; Fireball movement
ROM:A849
ROM:A849 sub_A849:
ROM:A849                 ldx     #byte_494B      ; 6x Fireball data structure 2 ($6 bytes per fireball)
ROM:A84C
ROM:A84C loc_A84C:                               ; Fireball data pointer
ROM:A84C                 stx     <DPbyte_A8
ROM:A84E                 lda     3,x
ROM:A850                 beq     loc_A861
ROM:A852                 ldb     4,x
ROM:A854                 aslb
ROM:A855                 cmpb    #$16
ROM:A857                 bcc     loc_A860
ROM:A859                 ldu     #JumpTableA675
ROM:A85C                 jsr     [b,u]           ; Fireball movement processing
ROM:A85E                 bra     loc_A861
ROM:A860 ; ---------------------------------------------------------------------------
ROM:A860
ROM:A860 loc_A860:
ROM:A860                 swi
ROM:A861
ROM:A861 loc_A861:                               ; Fireball data pointer
ROM:A861                 ldx     <DPbyte_A8
ROM:A863                 leax    6,x
ROM:A865                 cmpx    #byte_494B+$24  ; 6x Fireball data structure 2 ($6 bytes per fireball)
ROM:A868                 bcs     loc_A84C
ROM:A86A                 rts
ROM:A86A ; End of function sub_A849
ROM:A86A
ROM:A86B
ROM:A86B ; =============== S U B R O U T I N E =======================================
ROM:A86B
ROM:A86B
ROM:A86B sub_A86B:
ROM:A86B                 dec     5,x
ROM:A86D                 bgt     locret_A874
ROM:A86F                 clrb
ROM:A870                 stb     3,x
ROM:A872                 stb     5,x
ROM:A874
ROM:A874 locret_A874:
ROM:A874                 rts
ROM:A874 ; End of function sub_A86B
ROM:A874
ROM:A875
ROM:A875 ; =============== S U B R O U T I N E =======================================
ROM:A875
ROM:A875
ROM:A875 sub_A875:
ROM:A875                 dec     5,x
ROM:A877                 bgt     loc_A880
ROM:A879                 clrb
ROM:A87A                 stb     3,x
ROM:A87C                 stb     5,x
ROM:A87E                 bra     locret_A8A6
ROM:A880 ; ---------------------------------------------------------------------------
ROM:A880
ROM:A880 loc_A880:
ROM:A880                 ldu     ,x
ROM:A882                 ldd     #0
ROM:A885                 subd    ,u
ROM:A887                 jsr     Shift_D_R_3
ROM:A88A                 addd    ,u
ROM:A88C                 std     ,u
ROM:A88E                 ldd     #0
ROM:A891                 subd    2,u
ROM:A893                 jsr     Shift_D_R_3
ROM:A896                 addd    2,u
ROM:A898                 std     2,u
ROM:A89A                 ldd     #0
ROM:A89D                 subd    4,u
ROM:A89F                 jsr     Shift_D_R_3
ROM:A8A2                 addd    4,u
ROM:A8A4                 std     4,u
ROM:A8A6
ROM:A8A6 locret_A8A6:
ROM:A8A6                 rts
ROM:A8A6 ; End of function sub_A875
ROM:A8A6
ROM:A8A7
ROM:A8A7 ; =============== S U B R O U T I N E =======================================
ROM:A8A7
ROM:A8A7
ROM:A8A7 sub_A8A7:
ROM:A8A7                 dec     5,x
ROM:A8A9                 bgt     loc_A8B2
ROM:A8AB                 clrb
ROM:A8AC                 stb     3,x
ROM:A8AE                 stb     5,x
ROM:A8B0                 bra     locret_A8D5
ROM:A8B2 ; ---------------------------------------------------------------------------
ROM:A8B2
ROM:A8B2 loc_A8B2:
ROM:A8B2                 ldu     ,x
ROM:A8B4                 ldd     ,u
ROM:A8B6                 jsr     Shift_D_R_3
ROM:A8B9                 addd    ,u
ROM:A8BB                 bvs     loc_A8D6
ROM:A8BD                 std     ,u
ROM:A8BF                 ldd     2,u
ROM:A8C1                 jsr     Shift_D_R_3
ROM:A8C4                 addd    2,u
ROM:A8C6                 bvs     loc_A8D6
ROM:A8C8                 std     2,u
ROM:A8CA                 ldd     4,u
ROM:A8CC                 jsr     Shift_D_R_3
ROM:A8CF                 addd    4,u
ROM:A8D1                 bvs     loc_A8D6
ROM:A8D3                 std     4,u
ROM:A8D5
ROM:A8D5 locret_A8D5:
ROM:A8D5                 rts
ROM:A8D6 ; ---------------------------------------------------------------------------
ROM:A8D6
ROM:A8D6 loc_A8D6:
ROM:A8D6                 clrb
ROM:A8D7                 stb     3,x
ROM:A8D9                 rts
ROM:A8D9 ; End of function sub_A8A7
ROM:A8D9
ROM:A8DA
ROM:A8DA ; =============== S U B R O U T I N E =======================================
ROM:A8DA
ROM:A8DA ; Some towers processing
ROM:A8DA
ROM:A8DA sub_A8DA:
ROM:A8DA                 ldu     ,x
ROM:A8DC                 ldd     #$FF00
ROM:A8DF                 addd    ,u
ROM:A8E1                 std     ,u
ROM:A8E3                 jmp     loc_AA7D
ROM:A8E6 ; ---------------------------------------------------------------------------
ROM:A8E6
ROM:A8E6 loc_A8E6:
ROM:A8E6                 ldu     ,x
ROM:A8E8                 ldd     #$FF00
ROM:A8EB                 addd    ,u
ROM:A8ED                 std     ,u
ROM:A8EF                 ldd     #$FF00
ROM:A8F2                 addd    2,u
ROM:A8F4                 std     2,u
ROM:A8F6                 jmp     loc_AA7D
ROM:A8F9 ; ---------------------------------------------------------------------------
ROM:A8F9
ROM:A8F9 loc_A8F9:
ROM:A8F9                 ldu     ,x
ROM:A8FB                 ldd     #$FF00
ROM:A8FE                 addd    ,u
ROM:A900                 std     ,u
ROM:A902                 ldd     #$100
ROM:A905                 addd    2,u
ROM:A907                 std     2,u
ROM:A909                 jmp     loc_AA7D
ROM:A90C ; ---------------------------------------------------------------------------
ROM:A90C
ROM:A90C loc_A90C:
ROM:A90C                 ldb     ,u
ROM:A90E                 subb    MReg4C
ROM:A911                 bmi     locret_A91F
ROM:A913                 clra
ROM:A914                 jsr     Shift_D_L_2
ROM:A917                 coma
ROM:A918                 negb
ROM:A919                 sbca    #$FF
ROM:A91B                 addd    ,u
ROM:A91D                 std     ,u
ROM:A91F
ROM:A91F locret_A91F:
ROM:A91F                 rts
ROM:A920 ; ---------------------------------------------------------------------------
ROM:A920
ROM:A920 loc_A920:
ROM:A920                 ldd     #0
ROM:A923                 subd    MReg47
ROM:A926                 jsr     Shift_D_R_3
ROM:A929                 addd    MReg47
ROM:A92C                 bpl     locret_A932
ROM:A92E                 addd    2,u
ROM:A930                 std     2,u
ROM:A932
ROM:A932 locret_A932:
ROM:A932                 rts
ROM:A933 ; ---------------------------------------------------------------------------
ROM:A933
ROM:A933 loc_A933:
ROM:A933                 ldd     #0
ROM:A936                 subd    MReg47
ROM:A939                 jsr     Shift_D_R_3
ROM:A93C                 addd    MReg47
ROM:A93F                 bmi     locret_A945
ROM:A941                 addd    2,u
ROM:A943                 std     2,u
ROM:A945
ROM:A945 locret_A945:
ROM:A945                 rts
ROM:A946 ; ---------------------------------------------------------------------------
ROM:A946
ROM:A946 loc_A946:
ROM:A946                 ldu     ,x
ROM:A948                 jsr     loc_A933
ROM:A94B                 jsr     loc_A90C
ROM:A94E                 ldd     ,u
ROM:A950                 subd    MReg4C
ROM:A953                 ldb     7,u
ROM:A955                 mul
ROM:A956                 tst     6,u
ROM:A958                 bne     loc_A95E
ROM:A95A                 coma
ROM:A95B                 negb
ROM:A95C                 sbca    #$FF
ROM:A95E
ROM:A95E loc_A95E:
ROM:A95E                 addd    MReg4D
ROM:A961                 subd    2,u
ROM:A963                 addd    #$100
ROM:A966                 bmi     loc_A978
ROM:A968                 jsr     Shift_D_R_3
ROM:A96B                 cmpd    #$180
ROM:A96F                 ble     loc_A974
ROM:A971                 ldd     #$180
ROM:A974
ROM:A974 loc_A974:
ROM:A974                 addd    2,u
ROM:A976                 bra     loc_A986
ROM:A978 ; ---------------------------------------------------------------------------
ROM:A978
ROM:A978 loc_A978:                               ; Shift D register right
ROM:A978                 jsr     Shift_D_R_5
ROM:A97B                 cmpd    #$FE80
ROM:A97F                 bge     loc_A984
ROM:A981                 ldd     #$FE80
ROM:A984
ROM:A984 loc_A984:
ROM:A984                 addd    2,u
ROM:A986
ROM:A986 loc_A986:
ROM:A986                 std     2,u
ROM:A988                 ldd     MReg4E
ROM:A98B                 addd    #$100
ROM:A98E                 subd    4,u
ROM:A990                 bmi     locret_A9A2
ROM:A992                 jsr     Shift_D_R_3
ROM:A995                 cmpd    #$200
ROM:A999                 ble     loc_A99E
ROM:A99B                 ldd     #$200
ROM:A99E
ROM:A99E loc_A99E:
ROM:A99E                 addd    4,u
ROM:A9A0                 std     4,u
ROM:A9A2
ROM:A9A2 locret_A9A2:
ROM:A9A2                 rts
ROM:A9A3 ; ---------------------------------------------------------------------------
ROM:A9A3
ROM:A9A3 loc_A9A3:
ROM:A9A3                 ldu     ,x
ROM:A9A5                 jsr     loc_A920
ROM:A9A8                 jsr     loc_A90C
ROM:A9AB                 ldd     ,u
ROM:A9AD                 subd    MReg4C
ROM:A9B0                 ldb     7,u
ROM:A9B2                 mul
ROM:A9B3                 tst     6,u
ROM:A9B5                 beq     loc_A9BB
ROM:A9B7                 coma
ROM:A9B8                 negb
ROM:A9B9                 sbca    #$FF
ROM:A9BB
ROM:A9BB loc_A9BB:
ROM:A9BB                 addd    MReg4D
ROM:A9BE                 addd    #$FF00
ROM:A9C1                 subd    2,u
ROM:A9C3                 bmi     loc_A9D5
ROM:A9C5                 jsr     Shift_D_R_5     ; Shift D register right
ROM:A9C8                 cmpd    #$180
ROM:A9CC                 ble     loc_A9D1
ROM:A9CE                 ldd     #$180
ROM:A9D1
ROM:A9D1 loc_A9D1:
ROM:A9D1                 addd    2,u
ROM:A9D3                 bra     loc_A9E3
ROM:A9D5 ; ---------------------------------------------------------------------------
ROM:A9D5
ROM:A9D5 loc_A9D5:
ROM:A9D5                 jsr     Shift_D_R_3
ROM:A9D8                 cmpd    #$FE80
ROM:A9DC                 bge     loc_A9E1
ROM:A9DE                 ldd     #$FE80
ROM:A9E1
ROM:A9E1 loc_A9E1:
ROM:A9E1                 addd    2,u
ROM:A9E3
ROM:A9E3 loc_A9E3:
ROM:A9E3                 std     2,u
ROM:A9E5                 ldd     MReg4E
ROM:A9E8                 addd    #$100
ROM:A9EB                 subd    4,u
ROM:A9ED                 bmi     locret_A9FF
ROM:A9EF                 jsr     Shift_D_R_3
ROM:A9F2                 cmpd    #$200
ROM:A9F6                 ble     loc_A9FB
ROM:A9F8                 ldd     #$200
ROM:A9FB
ROM:A9FB loc_A9FB:
ROM:A9FB                 addd    4,u
ROM:A9FD                 std     4,u
ROM:A9FF
ROM:A9FF locret_A9FF:
ROM:A9FF                 rts
ROM:AA00 ; ---------------------------------------------------------------------------
ROM:AA00
ROM:AA00 loc_AA00:
ROM:AA00                 ldu     ,x
ROM:AA02                 ldd     #$FF00
ROM:AA05                 addd    ,u
ROM:AA07                 std     ,u
ROM:AA09                 ldd     MReg4E
ROM:AA0F                 subd    4,u
ROM:AA11                 bmi     loc_AA23
ROM:AA13                 jsr     Shift_D_R_3
ROM:AA16                 cmpd    #$180
ROM:AA1A                 ble     loc_AA1F
ROM:AA1C                 ldd     #$180
ROM:AA1F
ROM:AA1F loc_AA1F:
ROM:AA1F                 addd    4,u
ROM:AA21                 std     4,u
ROM:AA23
ROM:AA23 loc_AA23:
ROM:AA23                 bra     loc_AA7D
ROM:AA23 ; ---------------------------------------------------------------------------
ROM:AA7D ; ---------------------------------------------------------------------------
ROM:AA7D
ROM:AA7D loc_AA7D:
ROM:AA7D                 lda     3,x
ROM:AA7F                 bita    #2
ROM:AA81                 beq     locret_AA85
ROM:AA83                 clr     3,x
ROM:AA85
ROM:AA85 locret_AA85:
ROM:AA85                 rts
ROM:AA85 ; End of function sub_A8DA
ROM:AA85
ROM:AA86
ROM:AA86 ; =============== S U B R O U T I N E =======================================
ROM:AA86
ROM:AA86 ; Exhaust port processing
ROM:AA86
ROM:AA86 sub_AA86:
ROM:AA86                 ldu     ,x
ROM:AA88                 jsr     loc_A90C
ROM:AA8B                 ldd     MReg4E
ROM:AA8E                 subd    4,u
ROM:AA90                 bmi     loc_AA99
ROM:AA92                 jsr     Shift_D_R_4
ROM:AA95                 addd    4,u
ROM:AA97                 std     4,u
ROM:AA99
ROM:AA99 loc_AA99:
ROM:AA99                 lda     byte_4B19
ROM:AA9C                 cmpa    #1
ROM:AA9E                 bcs     loc_AAA5
ROM:AAA0                 ldd     MReg4D
ROM:AAA3                 bra     loc_AAA8
ROM:AAA5 ; ---------------------------------------------------------------------------
ROM:AAA5
ROM:AAA5 loc_AAA5:
ROM:AAA5                 ldd     #$FE80
ROM:AAA8
ROM:AAA8 loc_AAA8:
ROM:AAA8                 subd    2,u
ROM:AAAA                 bmi     loc_AAB3
ROM:AAAC                 jsr     Shift_D_R_4
ROM:AAAF                 addd    2,u
ROM:AAB1                 std     2,u
ROM:AAB3
ROM:AAB3 loc_AAB3:
ROM:AAB3                 bra     loc_AA7D
ROM:AAB3 ; End of function sub_AA86
ROM:AAB3
ROM:AAB5
ROM:AAB5 ; =============== S U B R O U T I N E =======================================
ROM:AAB5
ROM:AAB5
ROM:AAB5 sub_AAB5:
ROM:AAB5                 ldu     ,x
ROM:AAB7                 jsr     loc_A90C
ROM:AABA                 ldd     MReg4E
ROM:AABD                 subd    4,u
ROM:AABF                 bmi     loc_AAC8
ROM:AAC1                 jsr     Shift_D_R_4
ROM:AAC4                 addd    4,u
ROM:AAC6                 std     4,u
ROM:AAC8
ROM:AAC8 loc_AAC8:
ROM:AAC8                 lda     byte_4B19
ROM:AACB                 cmpa    #1
ROM:AACD                 bcs     loc_AAD4
ROM:AACF                 ldd     MReg4D
ROM:AAD2                 bra     loc_AAD7
ROM:AAD4 ; ---------------------------------------------------------------------------
ROM:AAD4
ROM:AAD4 loc_AAD4:
ROM:AAD4                 ldd     #$180
ROM:AAD7
ROM:AAD7 loc_AAD7:
ROM:AAD7                 subd    2,u
ROM:AAD9                 bpl     loc_AAE2
ROM:AADB                 jsr     Shift_D_R_4
ROM:AADE                 addd    2,u
ROM:AAE0                 std     2,u
ROM:AAE2
ROM:AAE2 loc_AAE2:
ROM:AAE2                 bra     loc_AA7D
ROM:AAE2 ; End of function sub_AAB5
ROM:AAE2
ROM:AAE4
ROM:AAE4 ; =============== S U B R O U T I N E =======================================
ROM:AAE4
ROM:AAE4 ; Fireball processing
ROM:AAE4
ROM:AAE4 sub_AAE4:
ROM:AAE4                 ldx     #byte_494B      ; 6x Fireball data structure 2 ($6 bytes per fireball)
ROM:AAE7
ROM:AAE7 loc_AAE7:                               ; Fireball data pointer
ROM:AAE7                 stx     <DPbyte_A8
ROM:AAE9                 lda     3,x
ROM:AAEB                 lbeq    loc_AC34
ROM:AAEF                 bita    #$10
ROM:AAF1                 beq     loc_AAF9
ROM:AAF3                 jsr     sub_ACB1        ; Shield lost by fireball animation
ROM:AAF6                 jmp     loc_AC34
ROM:AAF9 ; ---------------------------------------------------------------------------
ROM:AAF9
ROM:AAF9 loc_AAF9:
ROM:AAF9                 bita    #4
ROM:AAFB                 beq     loc_AB11
ROM:AAFD                 ldd     MReg4C
ROM:AB00                 std     MReg20          ; XT2
ROM:AB03                 ldd     MReg4D
ROM:AB06                 std     MReg21          ; YT2
ROM:AB09                 ldd     MReg4E
ROM:AB0C                 std     MReg22          ; ZT2
ROM:AB0F                 bra     loc_AB1D
ROM:AB11 ; ---------------------------------------------------------------------------
ROM:AB11
ROM:AB11 loc_AB11:
ROM:AB11                 ldd     #0
ROM:AB14                 std     MReg20          ; XT2
ROM:AB17                 std     MReg21          ; YT2
ROM:AB1A                 std     MReg22          ; ZT2
ROM:AB1D
ROM:AB1D loc_AB1D:
ROM:AB1D                 clra
ROM:AB1E                 ldb     2,x
ROM:AB20                 std     MW1
ROM:AB23                 lda     #$67 ; g
ROM:AB25                 jsr     Math_Run_Start  ; Do math program run
ROM:AB28                 ldd     MReg00          ; Math result X
ROM:AB2B                 cmpd    #1
ROM:AB2F                 lble    loc_AC27
ROM:AB33                 cmpd    #$7F00
ROM:AB37                 lbhi    loc_AC27
ROM:AB3B                 std     DVSRH
ROM:AB3E                 std     MReg0C          ; XT
ROM:AB41                 ldd     MReg01          ; Math result Y
ROM:AB44                 std     MReg0D          ; YT
ROM:AB47                 bpl     loc_AB4D
ROM:AB49                 coma
ROM:AB4A                 negb
ROM:AB4B                 sbca    #$FF
ROM:AB4D
ROM:AB4D loc_AB4D:                               ; Math result X
ROM:AB4D                 subd    MReg00
ROM:AB50                 lbcc    loc_AC27
ROM:AB54                 ldd     MReg02          ; Math result Z
ROM:AB57                 std     MReg0E          ; ZT
ROM:AB5A                 bpl     loc_AB60
ROM:AB5C                 coma
ROM:AB5D                 negb
ROM:AB5E                 sbca    #$FF
ROM:AB60
ROM:AB60 loc_AB60:                               ; Math result X
ROM:AB60                 subd    MReg00
ROM:AB63                 lbcc    loc_AC27
ROM:AB67                 jsr     sub_CCF0        ; Get divider result and multiply by Math result Z, insert VCTR instruction
ROM:AB6A                 ldx     <DPbyte_A8      ; Fireball data pointer
ROM:AB6C                 lda     3,x
ROM:AB6E                 bita    #3
ROM:AB70                 beq     loc_ABC0
ROM:AB75                 std     MReg01          ; Math result Y
ROM:AB78                                         ; Reg02 = Reg02 x Reg00
ROM:AB7A                 jsr     Math_Run_Start  ; Do math program run
ROM:AB7D                 ldd     MReg01          ; Math result Y
ROM:AB80                 addd    #$A
ROM:AB83                 std     <DPbyte_3
ROM:AB85                 ldd     <DPbyte_D6
ROM:AB87                 subd    <DPbyte_B3
ROM:AB89                 bpl     loc_AB8F
ROM:AB8B                 coma
ROM:AB8C                 negb
ROM:AB8D                 sbca    #$FF
ROM:AB8F
ROM:AB8F loc_AB8F:
ROM:AB8F                 std     <DPbyte_1
ROM:AB91                 subd    <DPbyte_3
ROM:AB93                 bgt     loc_ABC0
ROM:AB95                 ldd     <DPbyte_D8
ROM:AB97                 subd    <DPbyte_B5
ROM:AB99                 bpl     loc_AB9F
ROM:AB9B                 coma
ROM:AB9C                 negb
ROM:AB9D                 sbca    #$FF
ROM:AB9F
ROM:AB9F loc_AB9F:
ROM:AB9F                 cmpd    <DPbyte_3
ROM:ABA2                 bgt     loc_ABC0
ROM:ABA4                 addd    <DPbyte_1
ROM:ABA6                 std     <DPbyte_1
ROM:ABA8                 ldd     <DPbyte_3
ROM:ABAA                 lsra
ROM:ABAB                 rorb
ROM:ABAC                 addd    <DPbyte_3
ROM:ABAE                 subd    <DPbyte_1
ROM:ABB0                 blt     loc_ABC0
ROM:ABB2                 ldd     MReg0C          ; XT
ROM:ABB5                 cmpd    <DPbyte_CC
ROM:ABB8                 bcc     loc_ABC0
ROM:ABBA                 std     <DPbyte_CC
ROM:ABBC                 ldx     <DPbyte_A8      ; Fireball data pointer
ROM:ABBE                 stx     <DPbyte_CA
ROM:ABC0
ROM:ABC0 loc_ABC0:
ROM:ABC0                 lda     3,x
ROM:ABC2                 bita    #1
ROM:ABC4                 beq     loc_AC22
ROM:ABC6                 ldd     MReg0C          ; XT
ROM:ABC9                 aslb
ROM:ABCA                 rola
ROM:ABCB                 bmi     loc_AC22
ROM:ABCD                 ldu     MReg43
ROM:ABD0                 cmpu    #$200
ROM:ABD4                 blt     loc_ABDB
ROM:ABD6                 subd    MReg43
ROM:ABD9                 bra     loc_ABDE
ROM:ABDB ; ---------------------------------------------------------------------------
ROM:ABDB
ROM:ABDB loc_ABDB:
ROM:ABDB                 subd    #$200
ROM:ABDE
ROM:ABDE loc_ABDE:
ROM:ABDE                 ble     loc_ABE5
ROM:ABE0                 subd    #$110
ROM:ABE3                 bgt     loc_AC22
ROM:ABE5
ROM:ABE5 loc_ABE5:
ROM:ABE5                 ldd     <DPbyte_D6
ROM:ABE7                 bmi     loc_ABF0
ROM:ABE9                 subd    #$1C0
ROM:ABEC                 bge     loc_AC22
ROM:ABEE                 bra     loc_ABF5
ROM:ABF0 ; ---------------------------------------------------------------------------
ROM:ABF0
ROM:ABF0 loc_ABF0:
ROM:ABF0                 subd    #$FE40
ROM:ABF3                 ble     loc_AC22
ROM:ABF5
ROM:ABF5 loc_ABF5:
ROM:ABF5                 ldd     <DPbyte_D8
ROM:ABF7                 bmi     loc_AC00
ROM:ABF9                 subd    #$1E0
ROM:ABFC                 bge     loc_AC22
ROM:ABFE                 bra     loc_AC05
ROM:AC00 ; ---------------------------------------------------------------------------
ROM:AC00
ROM:AC00 loc_AC00:
ROM:AC00                 subd    #$FE60
ROM:AC03                 ble     loc_AC22
ROM:AC05
ROM:AC05 loc_AC05:
ROM:AC05                 cmpx    <DPbyte_CA
ROM:AC07                 bne     loc_AC14
ROM:AC09                 lda     <DPbyte_BC
ROM:AC0B                 beq     loc_AC14
ROM:AC0D                 jsr     sub_AD20        ; Fireball destroyed
ROM:AC10                 ldx     <DPbyte_A8      ; Fireball data pointer
ROM:AC12                 bra     loc_AC22
ROM:AC14 ; ---------------------------------------------------------------------------
ROM:AC14
ROM:AC14 loc_AC14:                               ; Shield lost by fireball hit
ROM:AC14                 jsr     sub_ACE0
ROM:AC17                 ldd     #$8040
ROM:AC1A                 std     ,y++
ROM:AC1C                 jsr     sub_ACB1        ; Shield lost by fireball animation
ROM:AC1F                 jmp     loc_AC34
ROM:AC22 ; ---------------------------------------------------------------------------
ROM:AC22
ROM:AC22 loc_AC22:                               ; Fireball animation
ROM:AC22                 jsr     sub_AC52
ROM:AC25                 bra     loc_AC34
ROM:AC27 ; ---------------------------------------------------------------------------
ROM:AC27
ROM:AC27 loc_AC27:
ROM:AC27                 lda     3,x
ROM:AC29                 bita    #1
ROM:AC2B                 beq     loc_AC31
ROM:AC2D                 lda     #0
ROM:AC2F                 bra     loc_AC32
ROM:AC31 ; ---------------------------------------------------------------------------
ROM:AC31
ROM:AC31 loc_AC31:
ROM:AC31                 clra
ROM:AC32
ROM:AC32 loc_AC32:
ROM:AC32                 sta     3,x
ROM:AC34
ROM:AC34 loc_AC34:                               ; Fireball data pointer
ROM:AC34                 ldx     <DPbyte_A8
ROM:AC36                 leax    6,x
ROM:AC38                 cmpx    #byte_494B+$24  ; Check for all 6 fireball slots
ROM:AC3B                 lbcs    loc_AAE7
ROM:AC3F                 ldd     MReg4C
ROM:AC42                 std     MReg20          ; XT2
ROM:AC45                 ldd     MReg4D
ROM:AC48                 std     MReg21          ; YT2
ROM:AC4B                 ldd     MReg4E
ROM:AC4E                 std     MReg22          ; ZT2
ROM:AC51                 rts
ROM:AC51 ; End of function sub_AAE4
ROM:AC51
ROM:AC52
ROM:AC52 ; =============== S U B R O U T I N E =======================================
ROM:AC52
ROM:AC52 ; Fireball animation
ROM:AC52
ROM:AC52 sub_AC52:
ROM:AC52                 ldx     <DPbyte_A8      ; Fireball data pointer
ROM:AC54                 lda     #8
ROM:AC56                 sta     <DPbyte_1
ROM:AC58                 ldd     MReg0C          ; XT
ROM:AC5B
ROM:AC5B loc_AC5B:
ROM:AC5B                 dec     <DPbyte_1
ROM:AC5D                 beq     loc_AC65
ROM:AC5F                 aslb
ROM:AC60                 rola
ROM:AC61                 bpl     loc_AC5B
ROM:AC63                 anda    #$7F ; 
ROM:AC65
ROM:AC65 loc_AC65:
ROM:AC65                 sta     <DPbyte_2
ROM:AC67                 lda     3,x
ROM:AC69                 anda    #$20 ;  
ROM:AC6B                 bne     loc_AC7C
ROM:AC6D                 lda     <DPbyte_1
ROM:AC6F                 oraa    #$70 ; p
ROM:AC71                 ldb     <DPbyte_2
ROM:AC73                 std     ,y++
ROM:AC75                 ldd     #$A015
ROM:AC78                 std     ,y++
ROM:AC7A                 bra     loc_ACA6
ROM:AC7C ; ---------------------------------------------------------------------------
ROM:AC7C
ROM:AC7C loc_AC7C:
ROM:AC7C                 ldb     <DPbyte_2
ROM:AC7E                 lda     <DPbyte_1
ROM:AC80                 inca
ROM:AC81                 cmpa    #3
ROM:AC83                 bcc     loc_AC8A
ROM:AC85                 lda     #3
ROM:AC87                 clrb
ROM:AC88                 bra     loc_AC91
ROM:AC8A ; ---------------------------------------------------------------------------
ROM:AC8A
ROM:AC8A loc_AC8A:
ROM:AC8A                 cmpa    #6
ROM:AC8C                 bcs     loc_AC91
ROM:AC8E                 lda     #6
ROM:AC90                 clrb
ROM:AC91
ROM:AC91 loc_AC91:
ROM:AC91                 oraa    #$70 ; p
ROM:AC93                 std     ,y++
ROM:AC95                 ldb     5,x
ROM:AC97                 aslb
ROM:AC98                 aslb
ROM:AC99                 aslb
ROM:AC9A                 aslb
ROM:AC9B                 orab    #$F
ROM:AC9D                 lda     #$65 ; e
ROM:AC9F                 std     ,y++
ROM:ACA1                 ldd     #$A017
ROM:ACA4                 std     ,y++
ROM:ACA6
ROM:ACA6 loc_ACA6:
ROM:ACA6                 ldd     #$7200
ROM:ACA9                 std     ,y++
ROM:ACAB                 ldd     #$8040
ROM:ACAE                 std     ,y++
ROM:ACB0                 rts
ROM:ACB0 ; End of function sub_AC52
ROM:ACB0
ROM:ACB1
ROM:ACB1 ; =============== S U B R O U T I N E =======================================
ROM:ACB1
ROM:ACB1 ; Shield lost by fireball animation
ROM:ACB1
ROM:ACB1 sub_ACB1:
ROM:ACB1                 ldx     <DPbyte_A8      ; Fireball data pointer
ROM:ACB3                 ldu     ,x
ROM:ACB5                 ldd     ,u
ROM:ACB7                 std     ,y++
ROM:ACB9                 ldd     2,u
ROM:ACBB                 std     ,y++
ROM:ACBD                 lda     5,x
ROM:ACBF                 ldb     #$10
ROM:ACC1                 mul
ROM:ACC2                 lda     #$70 ; p
ROM:ACC4                 std     ,y++
ROM:ACC6                 ldb     5,x
ROM:ACC8                 aslb
ROM:ACC9                 aslb
ROM:ACCA                 aslb
ROM:ACCB                 aslb
ROM:ACCC                 lda     #$67 ; g
ROM:ACCE                 std     ,y++
ROM:ACD0                 ldd     #$A017
ROM:ACD3                 std     ,y++
ROM:ACD5                 ldd     #$7200
ROM:ACD8                 std     ,y++
ROM:ACDA                 ldd     #$8040
ROM:ACDD                 std     ,y++
ROM:ACDF                 rts
ROM:ACDF ; End of function sub_ACB1
ROM:ACDF
ROM:ACE0
ROM:ACE0 ; =============== S U B R O U T I N E =======================================
ROM:ACE0
ROM:ACE0 ; Shield lost by fireball hit
ROM:ACE0
ROM:ACE0 sub_ACE0:
ROM:ACE0                 ldu     ,x
ROM:ACE2                 ldd     -4,y
ROM:ACE4                 std     ,u
ROM:ACE6                 ldd     -2,y
ROM:ACE8                 std     2,u
ROM:ACEA                 lda     #$10
ROM:ACEC                 sta     3,x
ROM:ACEE                 lda     #$F
ROM:ACF0                 sta     5,x
ROM:ACF2                 lda     #0
ROM:ACF4                 sta     4,x
ROM:ACF6                 jsr     sub_9874
ROM:ACF9                 lda     <DPbyte_63
ROM:ACFB                 bne     loc_AD00
ROM:ACFD                 lda     PRNG
ROM:AD00
ROM:AD00 loc_AD00:
ROM:AD00                 ldb     #$20 ;  
ROM:AD02                 tsta
ROM:AD03                 bpl     loc_AD06
ROM:AD05                 negb
ROM:AD06
ROM:AD06 loc_AD06:
ROM:AD06                 stb     <DPbyte_63
ROM:AD08                 jsr     Sound_33
ROM:AD0B                 lda     byte_4B37
ROM:AD0E                 bne     locret_AD1F
ROM:AD10                 inc     byte_4B37
ROM:AD13                 lda     <DPbyte_60      ; Shield count
ROM:AD15                 cmpa    #3
ROM:AD17                 bls     locret_AD1F
ROM:AD19                 jsr     Sound_9
ROM:AD1C                 jsr     Sound_31
ROM:AD1F
ROM:AD1F locret_AD1F:
ROM:AD1F                 rts
ROM:AD1F ; End of function sub_ACE0
ROM:AD1F
ROM:AD20
ROM:AD20 ; =============== S U B R O U T I N E =======================================
ROM:AD20
ROM:AD20 ; Fireball destroyed
ROM:AD20
ROM:AD20 sub_AD20:
ROM:AD20                 ldu     <DPbyte_CA
ROM:AD22                 lda     3,u
ROM:AD24                 beq     locret_AD3D
ROM:AD26                 anda    #4
ROM:AD28                 oraa    #$20 ;  
ROM:AD2A                 sta     3,u
ROM:AD2C                 lda     #$F
ROM:AD2E                 sta     5,u
ROM:AD30                 lda     #0
ROM:AD32                 sta     4,u
ROM:AD34                 jsr     Sound_37
ROM:AD37                 jsr     sub_9801        ; Fireball score
ROM:AD3A                 jsr     Sound_34
ROM:AD3D
ROM:AD3D locret_AD3D:
ROM:AD3D                 rts
ROM:AD3D ; End of function sub_AD20
ROM:AD3D
ROM:AD3E
ROM:AD3E ; =============== S U B R O U T I N E =======================================
ROM:AD3E
ROM:AD3E
ROM:AD3E sub_AD3E:
ROM:AD3E                 lda     #1
ROM:AD40                 sta     <DPbyte_45
ROM:AD42                 ldd     MReg4C
ROM:AD45                 addd    #$100
ROM:AD48                 std     <DPbyte_46
ROM:AD4A                 ldd     MReg4D
ROM:AD4D                 std     <DPbyte_48
ROM:AD4F                 ldd     MReg4E
ROM:AD52                 std     <DPbyte_4A
ROM:AD54                 ldx     #byte_494B      ; 6x Fireball data structure 2 ($6 bytes per fireball)
ROM:AD57
ROM:AD57 loc_AD57:
ROM:AD57                 stx     <DPbyte_CA
ROM:AD59                 jsr     sub_AD20        ; Fireball destroyed
ROM:AD5C                 ldx     <DPbyte_CA
ROM:AD5E                 leax    6,x
ROM:AD60                 cmpx    #byte_494B+$24  ; 6x Fireball data structure 2 ($6 bytes per fireball)
ROM:AD63                 bcs     loc_AD57
ROM:AD65                 jsr     Sound_23
ROM:AD68                 jsr     Sound_2D
ROM:AD6B                 rts
ROM:AD6B ; End of function sub_AD3E
ROM:AD6B
ROM:AD6C
ROM:AD6C ; =============== S U B R O U T I N E =======================================
ROM:AD6C
ROM:AD6C
ROM:AD6C sub_AD6C:
ROM:AD6C                 lda     <DPbyte_45
ROM:AD6E                 beq     locret_ADAE
ROM:AD70                 ldd     <DPbyte_46
ROM:AD72                 addd    #$300
ROM:AD75                 addd    MReg43
ROM:AD78                 cmpd    <DPbyte_96
ROM:AD7B                 bmi     loc_AD7F
ROM:AD7D                 ldd     <DPbyte_96
ROM:AD7F
ROM:AD7F loc_AD7F:
ROM:AD7F                 std     <DPbyte_46
ROM:AD81                 ldd     <DPbyte_96
ROM:AD83                 subd    <DPbyte_46
ROM:AD85                 subd    #$1000
ROM:AD88                 cmpd    <DPbyte_4A
ROM:AD8B                 bge     loc_AD8F
ROM:AD8D                 std     <DPbyte_4A
ROM:AD8F
ROM:AD8F loc_AD8F:
ROM:AD8F                 ldd     <DPbyte_96
ROM:AD91                 subd    <DPbyte_46
ROM:AD93                 jsr     Shift_D_R_4
ROM:AD96                 tst     <DPbyte_48
ROM:AD98                 bmi     loc_ADA3
ROM:AD9A                 cmpd    <DPbyte_48
ROM:AD9D                 bge     loc_ADA1
ROM:AD9F                 std     <DPbyte_48
ROM:ADA1
ROM:ADA1 loc_ADA1:
ROM:ADA1                 bra     locret_ADAE
ROM:ADA3 ; ---------------------------------------------------------------------------
ROM:ADA3
ROM:ADA3 loc_ADA3:
ROM:ADA3                 coma
ROM:ADA4                 negb
ROM:ADA5                 sbca    #$FF
ROM:ADA7                 cmpd    <DPbyte_48
ROM:ADAA                 ble     locret_ADAE
ROM:ADAC                 std     <DPbyte_48
ROM:ADAE
ROM:ADAE locret_ADAE:
ROM:ADAE                 rts
ROM:ADAE ; End of function sub_AD6C
ROM:ADAE
ROM:ADAF
ROM:ADAF ; =============== S U B R O U T I N E =======================================
ROM:ADAF
ROM:ADAF
ROM:ADAF sub_ADAF:
ROM:ADAF                 lda     <DPbyte_45
ROM:ADB1                 beq     locret_ADD3
ROM:ADB3                 ldd     <DPbyte_46
ROM:ADB5                 std     MReg3C
ROM:ADB8                 ldd     <DPbyte_48
ROM:ADBA ; End of function sub_ADAF
ROM:ADBA
ROM:ADBD
ROM:ADBD ; =============== S U B R O U T I N E =======================================
ROM:ADBD
ROM:ADBD
ROM:ADBD sub_ADBD:
ROM:ADBD                 std     MReg3D
ROM:ADC0                 ldd     <DPbyte_4A
ROM:ADC2                 std     MReg3E
ROM:ADC5                 jsr     sub_ADD4
ROM:ADC8                 ldd     <DPbyte_48
ROM:ADCD                 std     MReg3D
ROM:ADD0                 jsr     sub_ADD4
ROM:ADD3
ROM:ADD3 locret_ADD3:
ROM:ADD3                 rts
ROM:ADD3 ; End of function sub_ADBD
ROM:ADD3
ROM:ADD4
ROM:ADD4 ; =============== S U B R O U T I N E =======================================
ROM:ADD4
ROM:ADD4
ROM:ADD4 sub_ADD4:
ROM:ADD4                 ldd     #$F             ; Point BIC to $5078 MReg3C
ROM:ADD7                 std     MW1
ROM:ADDA                 lda     #$67 ; g
ROM:ADDC                 jsr     Math_Run_Start  ; Do math program run
ROM:ADDF                 ldd     MReg00          ; Math result X
ROM:ADE2                 subd    #$E000
ROM:ADE5                 bgt     loc_ADEB
ROM:ADE7                 lda     #0
ROM:ADE9                 sta     <DPbyte_45
ROM:ADEB
ROM:ADEB loc_ADEB:                               ; Math result X
ROM:ADEB                 ldd     MReg00
ROM:ADEE                 cmpd    #1
ROM:ADF2                 blt     locret_AE5F
ROM:ADF4                 std     DVSRH
ROM:ADF7                 std     MReg0C          ; XT
ROM:ADFA                 ldd     MReg01          ; Math result Y
ROM:ADFD                 bpl     loc_AE03
ROM:ADFF                 coma
ROM:AE00                 negb
ROM:AE01                 sbca    #$FF
ROM:AE03
ROM:AE03 loc_AE03:                               ; Math result X
ROM:AE03                 subd    MReg00
ROM:AE06                 bge     locret_AE5F
ROM:AE08                 ldd     MReg02          ; Math result Z
ROM:AE0B                 bpl     loc_AE11
ROM:AE0D                 coma
ROM:AE0E                 negb
ROM:AE0F                 sbca    #$FF
ROM:AE11
ROM:AE11 loc_AE11:                               ; Math result X
ROM:AE11                 subd    MReg00
ROM:AE14                 bge     locret_AE5F
ROM:AE16                 ldd     MW0
ROM:AE19                 std     MReg00          ; Math result X
ROM:AE1C                                         ; Reg02 = Reg02 x Reg00
ROM:AE1E                 jsr     Math_Run_Start  ; Do math program run
ROM:AE21                 ldd     MReg02          ; Math result Z
ROM:AE24                 addd    #$FF98
ROM:AE27                 anda    #$1F
ROM:AE29                 std     ,y++
ROM:AE2B                 ldd     MReg01          ; Math result Y
ROM:AE2E                 anda    #$1F
ROM:AE30                 std     ,y++
ROM:AE32                 ldd     #$63FF
ROM:AE35                 std     ,y++
ROM:AE37                 lda     #6
ROM:AE39                 sta     <DPbyte_1
ROM:AE3B                 ldd     MReg0C          ; XT
ROM:AE3E
ROM:AE3E loc_AE3E:
ROM:AE3E                 dec     <DPbyte_1
ROM:AE40                 beq     loc_AE48
ROM:AE42                 aslb
ROM:AE43                 rola
ROM:AE44                 bpl     loc_AE3E
ROM:AE46                 anda    #$7F ; 
ROM:AE48
ROM:AE48 loc_AE48:
ROM:AE48                 ldb     <DPbyte_1
ROM:AE4A                 orab    #$70 ; p
ROM:AE4C                 stb     ,y+
ROM:AE4E                 sta     ,y+
ROM:AE50                 ldd     #$A016
ROM:AE53                 std     ,y++
ROM:AE55                 ldd     #$7200
ROM:AE58                 std     ,y++
ROM:AE5A                 ldd     #$8040
ROM:AE5D                 std     ,y++
ROM:AE5F
ROM:AE5F locret_AE5F:
ROM:AE5F                 rts
ROM:AE5F ; End of function sub_ADD4
ROM:AE5F
ROM:AE60
ROM:AE60 ; =============== S U B R O U T I N E =======================================
ROM:AE60
ROM:AE60
ROM:AE60 sub_AE60:
ROM:AE60                 lda     <DPbyte_BD
ROM:AE62                 ble     loc_AE6E
ROM:AE64                 dec     <DPbyte_BD
ROM:AE66                 lda     #0
ROM:AE68                 sta     <DPbyte_B7
ROM:AE6A                 sta     <DPbyte_BC
ROM:AE6C                 bra     loc_AE72
ROM:AE6E ; ---------------------------------------------------------------------------
ROM:AE6E
ROM:AE6E loc_AE6E:
ROM:AE6E                 lda     #0
ROM:AE70                 sta     <DPbyte_BD
ROM:AE72
ROM:AE72 loc_AE72:
ROM:AE72                 lda     #0
ROM:AE74                 sta     <DPbyte_BC
ROM:AE76                 orcc    #$10
ROM:AE78                 lda     <DPbyte_31
ROM:AE7A                 beq     loc_AE87
ROM:AE7C                 inc     byte_4B1B
ROM:AE7F                 clr     <DPbyte_BD
ROM:AE81                 ldb     #8
ROM:AE83                 stb     <DPbyte_B7
ROM:AE85                 clr     <DPbyte_31
ROM:AE87
ROM:AE87 loc_AE87:
ROM:AE87                 lda     <DPbyte_B7
ROM:AE89                 ble     loc_AE9F
ROM:AE8B                 dec     <DPbyte_B7
ROM:AE8D                 sta     <DPbyte_BC
ROM:AE8F                 ldd     <DPbyte_74
ROM:AE91                 std     <DPbyte_B8
ROM:AE93                 ldd     <DPbyte_6B
ROM:AE95                 std     <DPbyte_BA
ROM:AE97                 ldd     <DPbyte_2D
ROM:AE99                 std     <DPbyte_B3
ROM:AE9B                 ldd     <DPbyte_2F
ROM:AE9D                 std     <DPbyte_B5
ROM:AE9F
ROM:AE9F loc_AE9F:
ROM:AE9F                 andcc   #$EF ; n
ROM:AEA1                 lda     <DPbyte_B7
ROM:AEA3                 cmpa    #7
ROM:AEA5                 bne     loc_AEB2
ROM:AEA7                 lda     byte_4B36
ROM:AEAA                 bne     loc_AEAF
ROM:AEAC                 dec     byte_4B36
ROM:AEAF
ROM:AEAF loc_AEAF:
ROM:AEAF                 jsr     Sound_3A
ROM:AEB2
ROM:AEB2 loc_AEB2:
ROM:AEB2                 lda     #$FF
ROM:AEB4                 sta     <DPbyte_C4
ROM:AEB6                 sta     <DPbyte_C8
ROM:AEB8                 sta     <DPbyte_CC
ROM:AEBA                 sta     <DPbyte_D0
ROM:AEBC                 rts
ROM:AEBC ; End of function sub_AE60
ROM:AEBC
ROM:AEBD
ROM:AEBD ; =============== S U B R O U T I N E =======================================
ROM:AEBD
ROM:AEBD
ROM:AEBD sub_AEBD:
ROM:AEBD                 lda     <DPbyte_BC
ROM:AEBF                 oraa    <DPbyte_BD
ROM:AEC1                 bne     loc_AEC4
ROM:AEC3                 rts
ROM:AEC4 ; ---------------------------------------------------------------------------
ROM:AEC4
ROM:AEC4 loc_AEC4:
ROM:AEC4                 lda     byte_4B1B
ROM:AEC7                 anda    #1
ROM:AEC9                 beq     loc_AF25
ROM:AECB                 ldd     #$FF98
ROM:AECE                 addd    word_4B1E
ROM:AED1                 anda    #$1F
ROM:AED3                 std     ,y++
ROM:AED5                 ldd     <DPbyte_B5
ROM:AED7                 subd    #0
ROM:AEDA                 subd    word_4B1E
ROM:AEDD                 std     <DPbyte_3
ROM:AEDF                 ldd     #$FE7A
ROM:AEE2                 addd    word_4B1C
ROM:AEE5                 anda    #$1F
ROM:AEE7                 std     ,y++
ROM:AEE9                 ldd     <DPbyte_B3
ROM:AEEB                 subd    #$FE7A
ROM:AEEE                 subd    word_4B1C
ROM:AEF1                 std     <DPbyte_1
ROM:AEF3                 ldb     #0
ROM:AEF5                 jsr     sub_AF87
ROM:AEF8                 ldd     #$FDFB
ROM:AEFB                 addd    word_4B1E
ROM:AEFE                 anda    #$1F
ROM:AF00                 std     ,y++
ROM:AF02                 ldd     <DPbyte_B5
ROM:AF04                 subd    #$FE63
ROM:AF07                 subd    word_4B1E
ROM:AF0A                 std     <DPbyte_3
ROM:AF0C                 ldd     #$FE75
ROM:AF0F                 addd    word_4B1C
ROM:AF12                 anda    #$1F
ROM:AF14                 std     ,y++
ROM:AF16                 ldd     <DPbyte_B3
ROM:AF18                 subd    #$FE75
ROM:AF1B                 subd    word_4B1C
ROM:AF1E                 std     <DPbyte_1
ROM:AF20                 ldb     #8
ROM:AF22                 jsr     sub_AF87
ROM:AF25
ROM:AF25 loc_AF25:
ROM:AF25                 lda     byte_4B1B
ROM:AF28                 anda    #1
ROM:AF2A                 bne     locret_AF86
ROM:AF2C                 ldd     #$FDFB
ROM:AF2F                 addd    word_4B1E
ROM:AF32                 anda    #$1F
ROM:AF34                 std     ,y++
ROM:AF36                 ldd     <DPbyte_B5
ROM:AF38                 subd    #$FE63
ROM:AF3B                 subd    word_4B1E
ROM:AF3E                 std     <DPbyte_3
ROM:AF40                 ldd     #$18B
ROM:AF43                 addd    word_4B1C
ROM:AF46                 anda    #$1F
ROM:AF48                 std     ,y++
ROM:AF4A                 ldd     <DPbyte_B3
ROM:AF4C                 subd    #$18B
ROM:AF4F                 subd    word_4B1C
ROM:AF52                 std     <DPbyte_1
ROM:AF54                 ldb     #0
ROM:AF56                 jsr     sub_AF87
ROM:AF59                 ldd     #$FF98
ROM:AF5C                 addd    word_4B1E
ROM:AF5F                 anda    #$1F
ROM:AF61                 std     ,y++
ROM:AF63                 ldd     <DPbyte_B5
ROM:AF65                 subd    #0
ROM:AF68                 subd    word_4B1E
ROM:AF6B                 std     <DPbyte_3
ROM:AF6D                 ldd     #$186
ROM:AF70                 addd    word_4B1C
ROM:AF73                 anda    #$1F
ROM:AF75                 std     ,y++
ROM:AF77                 ldd     <DPbyte_B3
ROM:AF79                 subd    #$186
ROM:AF7C                 subd    word_4B1C
ROM:AF7F                 std     <DPbyte_1
ROM:AF81                 ldb     #8
ROM:AF83                 jsr     sub_AF87
ROM:AF86
ROM:AF86 locret_AF86:
ROM:AF86                 rts
ROM:AF86 ; End of function sub_AEBD
ROM:AF86
ROM:AF87
ROM:AF87 ; =============== S U B R O U T I N E =======================================
ROM:AF87
ROM:AF87
ROM:AF87 sub_AF87:
ROM:AF87                 ldu     #tbl0xB04F
ROM:AF8A                 leau    b,u
ROM:AF8C                 lda     <DPbyte_BD
ROM:AF8E                 ble     loc_AF9A
ROM:AF90                 ldb     #$3F ; ?
ROM:AF92                 mul
ROM:AF93                 lda     #$63 ; c
ROM:AF95                 std     ,y++
ROM:AF97                 jmp     loc_AFEF
ROM:AF9A ; ---------------------------------------------------------------------------
ROM:AF9A
ROM:AF9A loc_AF9A:
ROM:AF9A                 ldx     #Scratch_RAM_start
ROM:AF9D
ROM:AF9D loc_AF9D:
ROM:AF9D                 ldd     ,u++
ROM:AF9F                 std     ,y++
ROM:AFA1                 ldd     <DPbyte_3
ROM:AFA3                 bmi     loc_AFA8
ROM:AFA5                 addd    #1
ROM:AFA8
ROM:AFA8 loc_AFA8:
ROM:AFA8                 asra
ROM:AFA9                 rorb
ROM:AFAA                 std     ,y
ROM:AFAC                 coma
ROM:AFAD                 negb
ROM:AFAE                 sbca    #$FF
ROM:AFB0                 addd    <DPbyte_3
ROM:AFB2                 std     <DPbyte_3
ROM:AFB4                 ldd     ,y
ROM:AFB6                 anda    #$1F
ROM:AFB8                 std     ,y++
ROM:AFBA                 ldd     <DPbyte_1
ROM:AFBC                 bmi     loc_AFC1
ROM:AFBE                 addd    #1
ROM:AFC1
ROM:AFC1 loc_AFC1:
ROM:AFC1                 asra
ROM:AFC2                 rorb
ROM:AFC3                 std     ,y
ROM:AFC5                 coma
ROM:AFC6                 negb
ROM:AFC7                 sbca    #$FF
ROM:AFC9                 addd    <DPbyte_1
ROM:AFCB                 std     <DPbyte_1
ROM:AFCD                 ldd     ,y
ROM:AFCF                 oraa    #$E0 ; a
ROM:AFD1                 std     ,y++
ROM:AFD3                 ldd     <DPbyte_1
ROM:AFD5                 addd    #8
ROM:AFD8                 blt     loc_AF9D
ROM:AFDA                 subd    #$10
ROM:AFDD                 bgt     loc_AF9D
ROM:AFDF                 ldd     <DPbyte_3
ROM:AFE1                 addd    #8
ROM:AFE4                 blt     loc_AF9D
ROM:AFE6                 subd    #$10
ROM:AFE9                 bgt     loc_AF9D
ROM:AFEB                 ldd     ,u++
ROM:AFED                 std     ,y++
ROM:AFEF
ROM:AFEF loc_AFEF:
ROM:AFEF                 ldd     <DPbyte_3
ROM:AFF1                 anda    #$1F
ROM:AFF3                 std     ,y++
ROM:AFF5                 ldd     <DPbyte_1
ROM:AFF7                 oraa    #$E0 ; a
ROM:AFF9                 std     ,y++
ROM:AFFB                 lda     <DPbyte_BD
ROM:AFFD                 ble     loc_B006
ROM:AFFF                 ldd     #$A011
ROM:B002                 std     ,y++
ROM:B004                 bra     loc_B044
ROM:B006 ; ---------------------------------------------------------------------------
ROM:B006
ROM:B006 loc_B006:
ROM:B006                 bge     loc_B044
ROM:B008                 ldb     byte_4B22
ROM:B00B                 lda     #$71 ; q
ROM:B00D                 std     ,y++
ROM:B00F                 ldd     word_4B20
ROM:B012                 std     ,y++
ROM:B014                 lda     byte_4B23
ROM:B017                 anda    #1
ROM:B019                 beq     loc_B020
ROM:B01B                 ldd     #$A01C
ROM:B01E                 std     ,y++
ROM:B020
ROM:B020 loc_B020:
ROM:B020                 lda     byte_4B23
ROM:B023                 anda    #2
ROM:B025                 beq     loc_B02C
ROM:B027                 ldd     #$A023
ROM:B02A                 std     ,y++
ROM:B02C
ROM:B02C loc_B02C:
ROM:B02C                 lda     byte_4B23
ROM:B02F                 anda    #4
ROM:B031                 beq     loc_B038
ROM:B033                 ldd     #$A02A
ROM:B036                 std     ,y++
ROM:B038
ROM:B038 loc_B038:
ROM:B038                 lda     byte_4B23
ROM:B03B                 anda    #8
ROM:B03D                 beq     loc_B044
ROM:B03F                 ldd     #$A031
ROM:B042                 std     ,y++
ROM:B044
ROM:B044 loc_B044:
ROM:B044                 ldd     #$7200
ROM:B047                 std     ,y++
ROM:B049                 ldd     #$8040
ROM:B04C                 std     ,y++
ROM:B04E                 rts
ROM:B04E ; End of function sub_AF87
ROM:B04E
ROM:B04E ; ---------------------------------------------------------------------------
ROM:B071
ROM:B071 ; =============== S U B R O U T I N E =======================================
ROM:B071
ROM:B071
ROM:B071 sub_B071:
ROM:B071                 lda     <DPbyte_BC
ROM:B073                 beq     locret_B094
ROM:B075                 jsr     sub_B095
ROM:B078                 ldd     #$200
ROM:B07B                 std     DVDDH
ROM:B07E                 ldd     <DPbyte_CC
ROM:B080                 bmi     loc_B089
ROM:B082                 lda     #4
ROM:B084                 sta     <DPbyte_BD
ROM:B086                 jsr     sub_AD20        ; Fireball destroyed
ROM:B089
ROM:B089 loc_B089:
ROM:B089                 lda     <DPbyte_44
ROM:B08B                 ble     locret_B094
ROM:B08D                 lda     #$FF
ROM:B08F                 sta     <DPbyte_44
ROM:B091                 jsr     sub_AD3E
ROM:B094
ROM:B094 locret_B094:
ROM:B094                 rts
ROM:B094 ; End of function sub_B071
ROM:B094
ROM:B095
ROM:B095 ; =============== S U B R O U T I N E =======================================
ROM:B095
ROM:B095
ROM:B095 sub_B095:
ROM:B095                 ldd     #$7000
ROM:B098                 addd    MReg20          ; XT2
ROM:B09B                 std     <DPbyte_1
ROM:B09D                 ldd     #0
ROM:B0A0                 subd    <DPbyte_B8
ROM:B0A2                 jsr     Shift_D_R_3
ROM:B0A5                 addd    <DPbyte_B8
ROM:B0A7                 addd    MReg21          ; YT2
ROM:B0AA                 std     <DPbyte_3
ROM:B0AC                 ldd     #0
ROM:B0AF                 subd    <DPbyte_BA
ROM:B0B1                 jsr     Shift_D_R_3
ROM:B0B4                 addd    <DPbyte_BA
ROM:B0B6                 addd    MReg22          ; ZT2
ROM:B0B9                 std     <DPbyte_5
ROM:B0BB                 ldd     #$F000
ROM:B0BE                 subd    <DPbyte_5
ROM:B0C0                 lblt    loc_B158
ROM:B0C4                 std     DVDDH
ROM:B0C7                 ldd     MReg22          ; ZT2
ROM:B0CA                 subd    <DPbyte_5
ROM:B0CC                 std     DVSRH
ROM:B0CF                 ldd     <DPbyte_3
ROM:B0D1                 subd    MReg21          ; YT2
ROM:B0D4                 std     MReg01          ; Math result Y
ROM:B0D7                 ldd     <DPbyte_1
ROM:B0D9                 subd    MReg20          ; XT2
ROM:B0DC                 std     MReg02          ; Math result Z
ROM:B0DF                 ldd     MW0
ROM:B0E2                 std     MReg00          ; Math result X
ROM:B0E5                                         ; Reg02 = Reg02 x Reg00
ROM:B0E7                 jsr     Math_Run_Start  ; Do math program run
ROM:B0EA                 ldd     <DPbyte_3
ROM:B0EC                 subd    MReg01          ; Math result Y
ROM:B0EF                 bmi     loc_B0F9
ROM:B0F1                 cmpd    #$400
ROM:B0F5                 bgt     loc_B158
ROM:B0F7                 bra     loc_B0FF
ROM:B0F9 ; ---------------------------------------------------------------------------
ROM:B0F9
ROM:B0F9 loc_B0F9:
ROM:B0F9                 cmpd    #$FC00
ROM:B0FD                 blt     loc_B158
ROM:B0FF
ROM:B0FF loc_B0FF:
ROM:B0FF                 std     <DPbyte_3
ROM:B101                 ldd     <DPbyte_1
ROM:B103                 subd    MReg02          ; Math result Z
ROM:B106                 std     <DPbyte_1
ROM:B108                 std     <DPbyte_C0
ROM:B10A                 ldd     #$F000
ROM:B10D                 std     <DPbyte_5
ROM:B10F                 lda     #$FF
ROM:B111                 sta     <DPbyte_BD
ROM:B113                 lda     #3
ROM:B115                 sta     byte_4B23
ROM:B118                 lda     <DPbyte_1
ROM:B11A                 suba    MReg20          ; XT2
ROM:B11D                 ldb     #3
ROM:B11F                 mul
ROM:B120                 cmpd    #$E0 ; a
ROM:B124                 bcs     loc_B128
ROM:B126                 ldb     #$E0 ; a
ROM:B128
ROM:B128 loc_B128:
ROM:B128                 stb     byte_4B22
ROM:B12B                 ldd     #$6280
ROM:B12E                 std     word_4B20
ROM:B131                 lda     <DPbyte_95
ROM:B133                 beq     locret_B157
ROM:B135                 lda     <DPbyte_44
ROM:B137                 bne     locret_B157
ROM:B139                 ldd     <DPbyte_3
ROM:B13B                 addd    #$200
ROM:B13E                 blt     locret_B157
ROM:B140                 subd    #$400
ROM:B143                 bgt     locret_B157
ROM:B145                 ldd     <DPbyte_1
ROM:B147                 subd    <DPbyte_96
ROM:B149                 addd    #$200
ROM:B14C                 blt     locret_B157
ROM:B14E                 subd    #$400
ROM:B151                 bgt     locret_B157
ROM:B153                 lda     #1
ROM:B155                 sta     <DPbyte_44
ROM:B157
ROM:B157 locret_B157:
ROM:B157                 rts
ROM:B158 ; ---------------------------------------------------------------------------
ROM:B158
ROM:B158 loc_B158:
ROM:B158                 ldd     <DPbyte_3
ROM:B15A                 lbpl    loc_B1E3
ROM:B15E                 ldd     #$FC00
ROM:B161                 subd    <DPbyte_3
ROM:B163                 lblt    locret_B260
ROM:B167                 std     DVDDH
ROM:B16A                 ldd     MReg21          ; YT2
ROM:B16D                 subd    <DPbyte_3
ROM:B16F                 std     DVSRH
ROM:B172                 ldd     <DPbyte_5
ROM:B174                 subd    MReg22          ; ZT2
ROM:B177                 std     MReg02          ; Math result Z
ROM:B17A                 ldd     <DPbyte_1
ROM:B17C                 subd    MReg20          ; XT2
ROM:B17F                 std     MReg01          ; Math result Y
ROM:B182                 ldd     MW0
ROM:B185                 std     MReg00          ; Math result X
ROM:B188                                         ; Reg02 = Reg02 x Reg00
ROM:B18A                 jsr     Math_Run_Start  ; Do math program run
ROM:B18D                 ldd     <DPbyte_5
ROM:B18F                 subd    MReg02          ; Math result Z
ROM:B192                 bmi     loc_B19E
ROM:B194                 cmpd    #0
ROM:B198                 lbgt    locret_B260
ROM:B19C                 bra     loc_B1A6
ROM:B19E ; ---------------------------------------------------------------------------
ROM:B19E
ROM:B19E loc_B19E:
ROM:B19E                 cmpd    #$F000
ROM:B1A2                 lblt    locret_B260
ROM:B1A6
ROM:B1A6 loc_B1A6:
ROM:B1A6                 std     <DPbyte_5
ROM:B1A8                 addd    #$1000
ROM:B1AB                 std     <DPbyte_BE
ROM:B1AD                 ldd     <DPbyte_1
ROM:B1AF                 subd    MReg01          ; Math result Y
ROM:B1B2                 std     <DPbyte_1
ROM:B1B4                 std     <DPbyte_C0
ROM:B1B6                 ldd     #$FC00
ROM:B1B9                 std     <DPbyte_3
ROM:B1BB                 lda     #$FF
ROM:B1BD                 sta     <DPbyte_BD
ROM:B1BF                 lda     #9
ROM:B1C1                 sta     byte_4B23
ROM:B1C4                 lda     <DPbyte_1
ROM:B1C6                 suba    MReg20          ; XT2
ROM:B1C9                 ldb     #3
ROM:B1CB                 mul
ROM:B1CC                 cmpd    #$E0 ; a
ROM:B1D0                 bcs     loc_B1D4
ROM:B1D2                 ldb     #$E0 ; a
ROM:B1D4
ROM:B1D4 loc_B1D4:
ROM:B1D4                 stb     byte_4B22
ROM:B1D7                 ldd     #$6280
ROM:B1DA                 std     word_4B20
ROM:B1DD                 ldx     #$4989
ROM:B1E0                 jmp     loc_B261
ROM:B1E3 ; ---------------------------------------------------------------------------
ROM:B1E3
ROM:B1E3 loc_B1E3:
ROM:B1E3                 subd    #$400
ROM:B1E6                 blt     locret_B260
ROM:B1E8                 std     DVDDH
ROM:B1EB                 ldd     <DPbyte_3
ROM:B1ED                 subd    MReg21          ; YT2
ROM:B1F0                 std     DVSRH
ROM:B1F3                 ldd     <DPbyte_5
ROM:B1F5                 subd    MReg22          ; ZT2
ROM:B1F8                 std     MReg02          ; Math result Z
ROM:B1FB                 ldd     <DPbyte_1
ROM:B1FD                 subd    MReg20          ; XT2
ROM:B200                 std     MReg01          ; Math result Y
ROM:B203                 ldd     MW0
ROM:B206                 std     MReg00          ; Math result X
ROM:B209                                         ; Reg02 = Reg02 x Reg00
ROM:B20B                 jsr     Math_Run_Start  ; Do math program run
ROM:B20E                 ldd     <DPbyte_5
ROM:B210                 subd    MReg02          ; Math result Z
ROM:B213                 bmi     loc_B21D
ROM:B215                 cmpd    #0
ROM:B219                 bgt     locret_B260
ROM:B21B                 bra     loc_B223
ROM:B21D ; ---------------------------------------------------------------------------
ROM:B21D
ROM:B21D loc_B21D:
ROM:B21D                 cmpd    #$F000
ROM:B221                 blt     locret_B260
ROM:B223
ROM:B223 loc_B223:
ROM:B223                 std     <DPbyte_5
ROM:B225                 addd    #$1000
ROM:B228                 std     <DPbyte_BE
ROM:B22A                 ldd     <DPbyte_1
ROM:B22C                 subd    MReg01          ; Math result Y
ROM:B22F                 std     <DPbyte_1
ROM:B231                 std     <DPbyte_C0
ROM:B233                 ldd     #$400
ROM:B236                 std     <DPbyte_3
ROM:B238                 lda     #$FF
ROM:B23A                 sta     <DPbyte_BD
ROM:B23C                 lda     #6
ROM:B23E                 sta     byte_4B23
ROM:B241                 lda     <DPbyte_1
ROM:B243                 suba    MReg20          ; XT2
ROM:B246                 ldb     #3
ROM:B248                 mul
ROM:B249                 cmpd    #$E0 ; a
ROM:B24D                 bcs     loc_B251
ROM:B24F                 ldb     #$E0 ; a
ROM:B251
ROM:B251 loc_B251:
ROM:B251                 stb     byte_4B22
ROM:B254                 ldd     #$6280
ROM:B257                 std     word_4B20
ROM:B25A                 ldx     #$4999
ROM:B25D                 jmp     loc_B261
ROM:B260 ; ---------------------------------------------------------------------------
ROM:B260
ROM:B260 locret_B260:
ROM:B260                 rts
ROM:B261 ; ---------------------------------------------------------------------------
ROM:B261
ROM:B261 loc_B261:
ROM:B261                 lda     <DPbyte_BC
ROM:B263                 bne     loc_B266
ROM:B265                 rts
ROM:B266 ; ---------------------------------------------------------------------------
ROM:B266
ROM:B266 loc_B266:
ROM:B266                 ldb     <DPbyte_C0
ROM:B268                 lsrb
ROM:B269                 lsrb
ROM:B26A                 lsrb
ROM:B26B                 andb    #$F
ROM:B26D                 abx
ROM:B26E                 ldd     <DPbyte_C0
ROM:B270                 anda    #7
ROM:B272                 subd    #$1C0
ROM:B275                 blt     locret_B29B
ROM:B277                 subd    #$480
ROM:B27A                 bgt     locret_B29B
ROM:B27C                 lda     #3
ROM:B27E                 sta     <DPbyte_1
ROM:B280                 ldd     <DPbyte_BE
ROM:B282                 subd    #$40 ; @
ROM:B285
ROM:B285 loc_B285:
ROM:B285                 subd    #$380
ROM:B288                 bgt     loc_B292
ROM:B28A                 subd    #$FC80
ROM:B28D                 blt     locret_B29B
ROM:B28F                 jmp     loc_B29C
ROM:B292 ; ---------------------------------------------------------------------------
ROM:B292
ROM:B292 loc_B292:
ROM:B295                 asl     <DPbyte_1
ROM:B297                 asl     <DPbyte_1
ROM:B299                 bne     loc_B285
ROM:B29B
ROM:B29B locret_B29B:
ROM:B29B                 rts
ROM:B29C ; ---------------------------------------------------------------------------
ROM:B29C
ROM:B29C loc_B29C:
ROM:B29C                 lda     <DPbyte_1
ROM:B29E                 anda    ,x
ROM:B2A0                 beq     locret_B2D1
ROM:B2A2                 sta     <DPbyte_2
ROM:B2A4                 lda     <DPbyte_1
ROM:B2A6                 asla
ROM:B2A7                 anda    <DPbyte_1
ROM:B2A9                 cmpa    <DPbyte_2
ROM:B2AB                 beq     locret_B2D1
ROM:B2AD                 bls     loc_B2C1
ROM:B2AF                 lda     #4
ROM:B2B1                 sta     <DPbyte_BD
ROM:B2B3                 lda     ,x
ROM:B2B5                 eora    <DPbyte_2
ROM:B2B7                 sta     ,x
ROM:B2B9                 jsr     sub_97F2        ; Trench green squares score
ROM:B2BC                 jsr     Sound_35
ROM:B2BF                 bra     locret_B2D1
ROM:B2C1 ; ---------------------------------------------------------------------------
ROM:B2C1
ROM:B2C1 loc_B2C1:
ROM:B2C1                 lda     #4
ROM:B2C3                 sta     <DPbyte_BD
ROM:B2C5                 lda     ,x
ROM:B2C7                 eora    <DPbyte_2
ROM:B2C9                 sta     ,x
ROM:B2CB                 jsr     sub_97FC        ; Trench turrets score
ROM:B2CE                 jsr     Sound_35
ROM:B2D1
ROM:B2D1 locret_B2D1:
ROM:B2D1                 rts
ROM:B2D1 ; End of function sub_B095
ROM:B2D1
ROM:B2D2
ROM:B2D2 ; =============== S U B R O U T I N E =======================================
ROM:B2D2
ROM:B2D2
ROM:B2D2 sub_B2D2:
ROM:B2D2
ROM:B2D2 ; FUNCTION CHUNK AT ROM:A54B SIZE 00000045 BYTES
ROM:B2D2
ROM:B2D2                 lda     <DPbyte_BC
ROM:B2D4                 beq     locret_B2E3
ROM:B2D6                 ldd     <DPbyte_CC
ROM:B2D8                 bmi     loc_B2E1
ROM:B2DA                 lda     #4
ROM:B2DC                 sta     <DPbyte_BD
ROM:B2DE                 jsr     sub_AD20        ; Fireball destroyed
ROM:B2E1
ROM:B2E1 loc_B2E1:
ROM:B2E1                 bra     loc_B2E4
ROM:B2E3 ; ---------------------------------------------------------------------------
ROM:B2E3
ROM:B2E3 locret_B2E3:
ROM:B2E3                 rts
ROM:B2E4 ; ---------------------------------------------------------------------------
ROM:B2E4
ROM:B2E4 loc_B2E4:
ROM:B2E4                 ldd     <DPbyte_C4
ROM:B2E6                 bmi     loc_B2F8
ROM:B2E8                 cmpd    <DPbyte_C8
ROM:B2EB                 bhi     loc_B2F8
ROM:B2ED                 subd    <DPbyte_D0
ROM:B2EF                 bhi     loc_B307
ROM:B2F1                 lda     #4
ROM:B2F3                 sta     <DPbyte_BD
ROM:B2F5                 jmp     loc_8ACF
ROM:B2F8 ; ---------------------------------------------------------------------------
ROM:B2F8
ROM:B2F8 loc_B2F8:
ROM:B2F8                 ldd     <DPbyte_C8
ROM:B2FA                 bmi     loc_B307
ROM:B2FC                 subd    <DPbyte_D0
ROM:B2FE                 bhi     loc_B307
ROM:B300                 lda     #4
ROM:B302                 sta     <DPbyte_BD
ROM:B304                 jmp     loc_A54B
ROM:B307 ; ---------------------------------------------------------------------------
ROM:B307
ROM:B307 loc_B307:
ROM:B307                 ldd     <DPbyte_D0
ROM:B309                 bmi     locret_B32A
ROM:B30B                 lda     #$FF
ROM:B30D                 sta     <DPbyte_BD
ROM:B30F                 lda     #$F
ROM:B311                 sta     byte_4B23
ROM:B314                 lda     <DPbyte_D0
ROM:B316                 ldb     #3
ROM:B318                 mul
ROM:B319                 cmpd    #$E0 ; a
ROM:B31D                 bcs     loc_B321
ROM:B31F                 ldb     #$E0 ; a
ROM:B321
ROM:B321 loc_B321:
ROM:B321                 stb     byte_4B22
ROM:B324                 ldd     #$6680
ROM:B327                 std     word_4B20
ROM:B32A
ROM:B32A locret_B32A:
ROM:B32A                 rts
ROM:B32A ; End of function sub_B2D2
ROM:B32A
ROM:B32B
ROM:B32B ; =============== S U B R O U T I N E =======================================
ROM:B32B
ROM:B32B
ROM:B32B sub_B32B:
ROM:B32B
ROM:B32B ; FUNCTION CHUNK AT ROM:8ACF SIZE 0000009E BYTES
ROM:B32B
ROM:B32B                 lda     <DPbyte_BC
ROM:B32D                 beq     locret_B33D
ROM:B32F                 ldd     <DPbyte_CC
ROM:B331                 bmi     loc_B339
ROM:B333                 subd    <DPbyte_C4
ROM:B335                 bcs     loc_B33E
ROM:B337                 bra     loc_B345
ROM:B339 ; ---------------------------------------------------------------------------
ROM:B339
ROM:B339 loc_B339:
ROM:B339                 lda     <DPbyte_C4
ROM:B33B                 bge     loc_B345
ROM:B33D
ROM:B33D locret_B33D:
ROM:B33D                 rts
ROM:B33E ; ---------------------------------------------------------------------------
ROM:B33E
ROM:B33E loc_B33E:
ROM:B33E                 lda     #4
ROM:B340                 sta     <DPbyte_BD
ROM:B342                 jmp     sub_AD20        ; Fireball destroyed
ROM:B345 ; ---------------------------------------------------------------------------
ROM:B345
ROM:B345 loc_B345:
ROM:B345                 lda     #4
ROM:B347                 sta     <DPbyte_BD
ROM:B349                 jmp     loc_8ACF
ROM:B349 ; End of function sub_B32B
ROM:B349
ROM:B349 ; ---------------------------------------------------------------------------
ROM:B3E4
ROM:B3E4 ; =============== S U B R O U T I N E =======================================
ROM:B3E4
ROM:B3E4
ROM:B3E4 sub_B3E4:
ROM:B3E4                 lda     word_49BF+1
ROM:B3E7                 cmpa    #3
ROM:B3E7 ; End of function sub_B3E4
ROM:B3E7
ROM:B3E9
ROM:B3E9 ; =============== S U B R O U T I N E =======================================
ROM:B3E9
ROM:B3E9
ROM:B3E9 sub_B3E9:
ROM:B3E9                 bcs     loc_B3F0
ROM:B3EB                 lda     #0
ROM:B3ED                 sta     word_49BF+1
ROM:B3F0
ROM:B3F0 loc_B3F0:
ROM:B3F0                 lda     #1
ROM:B3F2                 sta     <DPbyte_9C
ROM:B3F4                 lda     #$B
ROM:B3F6                 sta     <DPbyte_DC
ROM:B3F8                 sta     <DPbyte_9D
ROM:B3FA                 jsr     sub_CD38        ; Trench left side turret calcs
ROM:B3FD                 jsr     sub_B43F
ROM:B400                 lda     <DPbyte_9D
ROM:B402                 sta     <DPbyte_DC
ROM:B404                 jsr     sub_CD44        ; Trench right side turret calcs
ROM:B407                 jsr     sub_B579
ROM:B40A                 lda     #2
ROM:B40C                 sta     <DPbyte_9C
ROM:B40E                 lda     #$E
ROM:B410                 sta     <DPbyte_DC
ROM:B412                 sta     <DPbyte_9D
ROM:B414                 jsr     sub_CD38        ; Trench left side turret calcs
ROM:B417                 jsr     sub_B43F
ROM:B41A                 lda     <DPbyte_9D
ROM:B41C                 sta     <DPbyte_DC
ROM:B41E                 jsr     sub_CD44        ; Trench right side turret calcs
ROM:B421                 jsr     sub_B579
ROM:B424                 lda     #3
ROM:B426                 sta     <DPbyte_9C
ROM:B428                 lda     #$C
ROM:B42A                 sta     <DPbyte_DC
ROM:B42C                 sta     <DPbyte_9D
ROM:B42E                 jsr     sub_CD38        ; Trench left side turret calcs
ROM:B431                 jsr     sub_B43F
ROM:B434                 lda     <DPbyte_9D
ROM:B436                 sta     <DPbyte_DC
ROM:B438                 jsr     sub_CD44        ; Trench right side turret calcs
ROM:B43B                 jsr     sub_B579
ROM:B43E                 rts
ROM:B43E ; End of function sub_B3E9
ROM:B43E
ROM:B43F
ROM:B43F ; =============== S U B R O U T I N E =======================================
ROM:B43F
ROM:B43F
ROM:B43F sub_B43F:
ROM:B43F                 lda     #0              ; Trench
ROM:B441                 sta     word_49BD
ROM:B444                 lda     word_49BF+1
ROM:B447                 sta     word_49BD+1
ROM:B44C                 sta     byte_49C1
ROM:B44F                 ldb     MReg20          ; XT2
ROM:B452                 lsrb
ROM:B453                 lsrb
ROM:B454                 lsrb
ROM:B455                 andb    #$F
ROM:B457                 ldx     #$4989
ROM:B45A                 abx
ROM:B45B                 stx     <DPbyte_64      ; Pointer to Tie fighter data
ROM:B45D                 lda     MReg20          ; XT2
ROM:B462                 adda    #4
ROM:B464                 ldb     #0
ROM:B466                 std     MReg3C
ROM:B469                 ldd     #$FC00
ROM:B46C                 std     MReg3D
ROM:B46F
ROM:B46F loc_B46F:
ROM:B46F                 ldd     #$F200
ROM:B472                 std     MReg3E
ROM:B475                 ldx     <DPbyte_64      ; Pointer to Tie fighter data
ROM:B477                 cmpx    #$4999
ROM:B47A                 bcs     loc_B47F
ROM:B47C                 leax    <-16,x
ROM:B47F
ROM:B47F loc_B47F:
ROM:B47F                 lda     ,x+
ROM:B481                 stx     <DPbyte_64      ; Pointer to Tie fighter data
ROM:B483
ROM:B483 loc_B483:
ROM:B483                 sta     <DPbyte_9E
ROM:B485                 anda    #3
ROM:B487                 cmpa    <DPbyte_9C
ROM:B489                 lbne    loc_B516
ROM:B48D                 lda     <DPbyte_9D
ROM:B48F                 sta     <DPbyte_DC
ROM:B491                 ldd     #$F             ; Point BIC to $5078 MReg3C
ROM:B494                 std     MW1
ROM:B497                 lda     #$67 ; g
ROM:B499                 jsr     Math_Run_Start  ; Do math program run
ROM:B49C                 lda     <DPbyte_9C
ROM:B49E                 cmpa    #2
ROM:B4A0                 bne     loc_B4B5
ROM:B4A2                 inc     word_49BD
ROM:B4A5                 ldb     word_49BD+1
ROM:B4A8                 aslb
ROM:B4A9                 ldx     #word_B6B3
ROM:B4AC                 ldd     b,x
ROM:B4AE                 std     ,y++
ROM:B4B0                 lda     byte_49C1
ROM:B4B3                 sta     -1,y
ROM:B4B5
ROM:B4B5 loc_B4B5:
ROM:B4B5                 ldd     MReg3C
ROM:B4B8                 subd    MReg20          ; XT2
ROM:B4BB                 cmpd    #$1000
ROM:B4BF                 bgt     loc_B510
ROM:B4C1                 lda     <DPbyte_9D
ROM:B4C3                 cmpa    #$E
ROM:B4C5                 bne     loc_B50B
ROM:B4C7                 ldd     MReg00          ; Math result X
ROM:B4CA                 subd    #0
ROM:B4CD                 blt     loc_B516
ROM:B4CF                 ldd     MReg21          ; YT2
ROM:B4D2                 bgt     loc_B50B
ROM:B4D4                 ldd     MReg3E
ROM:B4D7                 addd    #$200
ROM:B4DA                 subd    MReg22          ; ZT2
ROM:B4DD                 blt     loc_B50B
ROM:B4DF                 subd    #$400
ROM:B4E2                 bgt     loc_B50B
ROM:B4E4                 ldd     MReg3C
ROM:B4E7                 subd    MReg20          ; XT2
ROM:B4EA                 subd    #$400
ROM:B4ED                 bhi     loc_B50B
ROM:B4EF                 lda     #$F
ROM:B4F1                 sta     <DPbyte_DC
ROM:B4F3                 lda     <DPbyte_60      ; Shield count
ROM:B4F5                 blt     loc_B4FD
ROM:B4F7                 jsr     sub_9874
ROM:B4FA                 jsr     Sound_26        ; Explosion
ROM:B4FD
ROM:B4FD loc_B4FD:
ROM:B4FD                 lda     <DPbyte_63
ROM:B4FF                 bne     loc_B50B
ROM:B501                 lda     #$4E ; N
ROM:B503                 ldb     PRNG
ROM:B506                 bpl     loc_B509
ROM:B508                 nega
ROM:B509
ROM:B509 loc_B509:
ROM:B509                 sta     <DPbyte_63
ROM:B50B
ROM:B50B loc_B50B:                               ; Trench calcs
ROM:B50B                 jsr     sub_CD5C
ROM:B50E                 bra     loc_B513
ROM:B510 ; ---------------------------------------------------------------------------
ROM:B510
ROM:B510 loc_B510:
ROM:B510                 jsr     sub_CD50
ROM:B513
ROM:B513 loc_B513:                               ; Function select for an object
ROM:B513                 jsr     sub_CD74
ROM:B516
ROM:B516 loc_B516:
ROM:B516                 ldd     MReg3E
ROM:B519                 addd    #$400
ROM:B51C                 std     MReg3E
ROM:B51F                 lda     <DPbyte_9E
ROM:B521                 lsra
ROM:B522                 lsra
ROM:B523                 lbne    loc_B483
ROM:B527                 lda     <DPbyte_9C
ROM:B529                 cmpa    #2
ROM:B52B                 bne     loc_B565
ROM:B52D                 ldx     <DPbyte_64      ; Pointer to Tie fighter data
ROM:B52F                 lda     >$F,x
ROM:B533
ROM:B533 loc_B533:
ROM:B533                 asla
ROM:B534                 bcc     loc_B53D
ROM:B536                 bmi     loc_B53D
ROM:B538                 inc     word_49BD
ROM:B53B                 bra     loc_B540
ROM:B53D ; ---------------------------------------------------------------------------
ROM:B53D
ROM:B53D loc_B53D:
ROM:B53D                 asla
ROM:B53E                 bne     loc_B533
ROM:B540
ROM:B540 loc_B540:
ROM:B540                 lda     word_49BD
ROM:B543                 beq     loc_B565
ROM:B545                 lda     word_49BD+1
ROM:B548                 inca
ROM:B549                 cmpa    #3
ROM:B54B                 bcs     loc_B54F
ROM:B54D                 lda     #0
ROM:B54F
ROM:B54F loc_B54F:
ROM:B54F                 sta     word_49BD+1
ROM:B552                 lda     byte_49C1
ROM:B555                 suba    #8
ROM:B557                 cmpa    #$40 ; @
ROM:B559                 bcc     loc_B55D
ROM:B55B                 lda     #$40 ; @
ROM:B55D
ROM:B55D loc_B55D:
ROM:B55D                 sta     byte_49C1
ROM:B560                 lda     #0
ROM:B562                 sta     word_49BD
ROM:B565
ROM:B565 loc_B565:
ROM:B565                 ldd     MReg3C
ROM:B568                 addd    #$800
ROM:B56B                 std     MReg3C
ROM:B56E                 subd    MReg20          ; XT2
ROM:B571                 subd    #$7000
ROM:B574                 lbcs    loc_B46F
ROM:B578                 rts
ROM:B578 ; End of function sub_B43F
ROM:B578
ROM:B579
ROM:B579 ; =============== S U B R O U T I N E =======================================
ROM:B579
ROM:B579
ROM:B579 sub_B579:
ROM:B579                 lda     #0
ROM:B57B                 sta     word_49BD
ROM:B57E                 lda     word_49BF+1
ROM:B581                 sta     word_49BD+1
ROM:B586                 sta     byte_49C1
ROM:B589                 ldb     MReg20          ; XT2
ROM:B58C                 lsrb
ROM:B58D                 lsrb
ROM:B58E                 lsrb
ROM:B58F                 andb    #$F
ROM:B591                 ldx     #$4999
ROM:B594                 abx
ROM:B595                 stx     <DPbyte_64      ; Pointer to Tie fighter data
ROM:B597                 lda     MReg20          ; XT2
ROM:B59C                 adda    #4
ROM:B59E                 ldb     #0
ROM:B5A0                 std     MReg3C
ROM:B5A3                 ldd     #$400
ROM:B5A6                 std     MReg3D
ROM:B5A9
ROM:B5A9 loc_B5A9:
ROM:B5A9                 ldd     #$F200
ROM:B5AC                 std     MReg3E
ROM:B5AF                 ldx     <DPbyte_64      ; Pointer to Tie fighter data
ROM:B5B1                 cmpx    #$49A9
ROM:B5B4                 bcs     loc_B5B9
ROM:B5B6                 leax    <-16,x
ROM:B5B9
ROM:B5B9 loc_B5B9:
ROM:B5B9                 lda     ,x+
ROM:B5BB                 stx     <DPbyte_64      ; Pointer to Tie fighter data
ROM:B5BD
ROM:B5BD loc_B5BD:
ROM:B5BD                 sta     <DPbyte_9E
ROM:B5BF                 anda    #3
ROM:B5C1                 cmpa    <DPbyte_9C
ROM:B5C3                 lbne    loc_B650
ROM:B5C7                 lda     <DPbyte_9D
ROM:B5C9                 sta     <DPbyte_DC
ROM:B5CB                 ldd     #$F
ROM:B5CE                 std     MW1             ; Point BIC to $5078 MReg3C
ROM:B5D1                 lda     #$67 ; g
ROM:B5D3                 jsr     Math_Run_Start  ; Do math program run
ROM:B5D6                 lda     <DPbyte_9C
ROM:B5D8                 cmpa    #2
ROM:B5DA                 bne     loc_B5EF
ROM:B5DC                 inc     word_49BD
ROM:B5DF                 ldb     word_49BD+1
ROM:B5E2                 aslb
ROM:B5E3                 ldx     #word_B6B3
ROM:B5E6                 ldd     b,x
ROM:B5E8                 std     ,y++
ROM:B5EA                 lda     byte_49C1
ROM:B5ED                 sta     -1,y
ROM:B5EF
ROM:B5EF loc_B5EF:
ROM:B5EF                 ldd     MReg3C
ROM:B5F2                 subd    MReg20          ; XT2
ROM:B5F5                 cmpd    #$1000
ROM:B5F9                 bgt     loc_B64A
ROM:B5FB                 lda     <DPbyte_9D
ROM:B5FD                 cmpa    #$E
ROM:B5FF                 bne     loc_B645
ROM:B601                 ldd     MReg00          ; Math result X
ROM:B604                 subd    #0
ROM:B607                 blt     loc_B650
ROM:B609                 ldd     MReg21          ; YT2
ROM:B60C                 blt     loc_B645
ROM:B60E                 ldd     MReg3E
ROM:B611                 addd    #$200
ROM:B614                 subd    MReg22          ; ZT2
ROM:B617                 blt     loc_B645
ROM:B619                 subd    #$400
ROM:B61C                 bgt     loc_B645
ROM:B61E                 ldd     MReg3C
ROM:B621                 subd    MReg20          ; XT2
ROM:B624                 subd    #$400
ROM:B627                 bhi     loc_B645
ROM:B629                 lda     #$F
ROM:B62B                 sta     <DPbyte_DC
ROM:B62D                 lda     <DPbyte_60      ; Shield count
ROM:B62F                 blt     loc_B637
ROM:B631                 jsr     sub_9874
ROM:B634                 jsr     Sound_26        ; Explosion
ROM:B637
ROM:B637 loc_B637:
ROM:B637                 lda     <DPbyte_63
ROM:B639                 bne     loc_B645
ROM:B63B                 lda     #$4E ; N
ROM:B63D                 ldb     PRNG
ROM:B640                 bpl     loc_B643
ROM:B642                 nega
ROM:B643
ROM:B643 loc_B643:
ROM:B643                 sta     <DPbyte_63
ROM:B645
ROM:B645 loc_B645:                               ; Trench calcs
ROM:B645                 jsr     sub_CD5C
ROM:B648                 bra     loc_B64D
ROM:B64A ; ---------------------------------------------------------------------------
ROM:B64A
ROM:B64A loc_B64A:
ROM:B64A                 jsr     sub_CD50
ROM:B64D
ROM:B64D loc_B64D:                               ; Function select for an object
ROM:B64D                 jsr     sub_CD74
ROM:B650
ROM:B650 loc_B650:
ROM:B650                 ldd     MReg3E
ROM:B653                 addd    #$400
ROM:B656                 std     MReg3E
ROM:B659                 lda     <DPbyte_9E
ROM:B65B                 lsra
ROM:B65C                 lsra
ROM:B65D                 lbne    loc_B5BD
ROM:B661                 lda     <DPbyte_9C
ROM:B663                 cmpa    #2
ROM:B665                 bne     loc_B69F
ROM:B667                 ldx     <DPbyte_64      ; Pointer to Tie fighter data
ROM:B669                 lda     $FFEF,x
ROM:B66D
ROM:B66D loc_B66D:
ROM:B66D                 asla
ROM:B66E                 bcc     loc_B677
ROM:B670                 bmi     loc_B677
ROM:B672                 inc     word_49BD
ROM:B675                 bra     loc_B67A
ROM:B677 ; ---------------------------------------------------------------------------
ROM:B677
ROM:B677 loc_B677:
ROM:B677                 asla
ROM:B678                 bne     loc_B66D
ROM:B67A
ROM:B67A loc_B67A:
ROM:B67A                 lda     word_49BD
ROM:B67D                 beq     loc_B69F
ROM:B67F                 lda     word_49BD+1
ROM:B682                 inca
ROM:B683                 cmpa    #3
ROM:B685                 bcs     loc_B689
ROM:B687                 lda     #0
ROM:B689
ROM:B689 loc_B689:
ROM:B689                 sta     word_49BD+1
ROM:B68C                 lda     byte_49C1
ROM:B68F                 suba    #8
ROM:B691                 cmpa    #$40 ; @
ROM:B693                 bcc     loc_B697
ROM:B695                 lda     #$40 ; @
ROM:B697
ROM:B697 loc_B697:
ROM:B697                 sta     byte_49C1
ROM:B69A                 lda     #0
ROM:B69C                 sta     word_49BD
ROM:B69F
ROM:B69F loc_B69F:
ROM:B69F                 ldd     MReg3C
ROM:B6A2                 addd    #$800
ROM:B6A5                 std     MReg3C
ROM:B6A8                 subd    MReg20          ; XT2
ROM:B6AB                 subd    #$7000
ROM:B6AE                 lbcs    loc_B5A9
ROM:B6B2                 rts
ROM:B6B2 ; End of function sub_B579
ROM:B6B2
ROM:B6B2 ; ---------------------------------------------------------------------------
ROM:B6B9
ROM:B6B9 ; =============== S U B R O U T I N E =======================================
ROM:B6B9
ROM:B6B9 ; Insert vector instructions at joystick position for laser explosion 2
ROM:B6B9
ROM:B6B9 sub_B6B9:
ROM:B6B9                 jsr     sub_B6C7
ROM:B6BC                 jsr     sub_B6D7        ; Insert vector instructions at joystick position for laser explosion
ROM:B6BF                 rts
ROM:B6BF ; End of function sub_B6B9
ROM:B6BF
ROM:B6C0
ROM:B6C0 ; =============== S U B R O U T I N E =======================================
ROM:B6C0
ROM:B6C0 ; Insert vector instructions at joystick position for laser explosion 3
ROM:B6C0
ROM:B6C0 sub_B6C0:
ROM:B6C0                 jsr     sub_B6CC
ROM:B6C3                 jsr     sub_B6D7        ; Insert vector instructions at joystick position for laser explosion
ROM:B6C6                 rts
ROM:B6C6 ; End of function sub_B6C0
ROM:B6C6
ROM:B6C7
ROM:B6C7 ; =============== S U B R O U T I N E =======================================
ROM:B6C7
ROM:B6C7
ROM:B6C7 sub_B6C7:
ROM:B6C7                 ldd     #$6380
ROM:B6CA                 std     ,y++
ROM:B6CA ; End of function sub_B6C7
ROM:B6CA
ROM:B6CC
ROM:B6CC ; =============== S U B R O U T I N E =======================================
ROM:B6CC
ROM:B6CC
ROM:B6CC sub_B6CC:
ROM:B6CC                 ldd     #$A012
ROM:B6CF                 std     ,y++
ROM:B6D1                 ldd     word_32FE
ROM:B6D4                 std     ,y++
ROM:B6D6                 rts
ROM:B6D6 ; End of function sub_B6CC
ROM:B6D6
ROM:B6D7
ROM:B6D7 ; =============== S U B R O U T I N E =======================================
ROM:B6D7
ROM:B6D7 ; Insert vector instructions at joystick position for laser explosion
ROM:B6D7
ROM:B6D7 sub_B6D7:
ROM:B6D7                 lda     <DPbyte_7D      ; Joystick X
ROM:B6D9                 bpl     loc_B6DC
ROM:B6DB                 nega
ROM:B6DC
ROM:B6DC loc_B6DC:
ROM:B6DC                 ldb     #$6E ; n
ROM:B6DE                 mul
ROM:B6DF                 ldb     <DPbyte_7D      ; Joystick X
ROM:B6E1                 bpl     loc_B6E4
ROM:B6E3                 nega
ROM:B6E4
ROM:B6E4 loc_B6E4:
ROM:B6E4                 tfr     a, b
ROM:B6E6                 sex
ROM:B6E7                 std     word_4B1C
ROM:B6EA                 anda    #$1F
ROM:B6EC                 std     2,y
ROM:B6EE                 std     8,y
ROM:B6F0                 std     $E,y
ROM:B6F2                 std     $14,y
ROM:B6F5                 std     $1A,y
ROM:B6F8                 lda     <DPbyte_7F      ; Joystick Y
ROM:B6FA                 bpl     loc_B6FD
ROM:B6FC                 nega
ROM:B6FD
ROM:B6FD loc_B6FD:
ROM:B6FD                 ldb     #$50 ; P
ROM:B6FF                 mul
ROM:B700                 ldb     <DPbyte_7F      ; Joystick Y
ROM:B702                 bpl     loc_B705
ROM:B704                 nega
ROM:B705
ROM:B705 loc_B705:
ROM:B705                 tfr     a, b
ROM:B707                 sex
ROM:B708                 std     word_4B1E
ROM:B70B                 anda    #$1F
ROM:B70D                 std     ,y
ROM:B70F                 std     6,y
ROM:B711                 std     $C,y
ROM:B713                 std     $12,y
ROM:B716                 std     $18,y
ROM:B719                 ldd     #$BAAC
ROM:B71C                 std     4,y
ROM:B71E                 ldd     #$BA0D
ROM:B721                 std     $A,y
ROM:B723                 ldd     #$BB33
ROM:B726                 std     $10,y
ROM:B729                 ldd     #$BAE6
ROM:B72C                 std     $16,y
ROM:B72F                 ldd     #$BA5A
ROM:B732                 std     $1C,y
ROM:B735                 leay    $1E,y
ROM:B738                 rts
ROM:B738 ; End of function sub_B6D7
ROM:B738
ROM:B739
ROM:B739 ; =============== S U B R O U T I N E =======================================
ROM:B739
ROM:B739
ROM:B739 sub_B739:
ROM:B739                 lda     #0
ROM:B73B                 sta     3,x
ROM:B73D                 jsr     sub_8E1C
ROM:B740                 pshs    x,u
ROM:B742                 jsr     sub_B76C
ROM:B745                 puls    u,x
ROM:B747                 rts
ROM:B747 ; End of function sub_B739
ROM:B747
ROM:B747 ; ---------------------------------------------------------------------------
ROM:B76C
ROM:B76C ; =============== S U B R O U T I N E =======================================
ROM:B76C
ROM:B76C
ROM:B76C sub_B76C:
ROM:B76C                 ldu     ,x
ROM:B76E                 jsr     sub_B948
ROM:B771                 lda     #6
ROM:B773                 sta     $C,x
ROM:B775                 lda     #$18
ROM:B777                 sta     $D,x
ROM:B779                 ldd     #0
ROM:B77C                 subd    -$E,u
ROM:B77E                 jsr     Shift_D_R_6     ; Shift D register right
ROM:B781                 std     6,x
ROM:B783                 addd    8,u
ROM:B785                 std     ,x
ROM:B787                 ldd     #0
ROM:B78A                 subd    -6,u
ROM:B78C                 jsr     Shift_D_R_6     ; Shift D register right
ROM:B78F                 std     8,x
ROM:B791                 addd    $A,u
ROM:B793                 std     2,x
ROM:B795                 ldd     #0
ROM:B798                 subd    2,u
ROM:B79A                 jsr     Shift_D_R_6     ; Shift D register right
ROM:B79D                 std     $A,x
ROM:B79F                 addd    $C,u
ROM:B7A1                 std     4,x
ROM:B7A3                 jsr     sub_B83F
ROM:B7A6                 jsr     sub_B948
ROM:B7A9                 lda     #7
ROM:B7AB                 sta     $C,x
ROM:B7AD                 lda     #$18
ROM:B7AF                 sta     $D,x
ROM:B7B1                 ldd     -$E,u
ROM:B7B3                 jsr     Shift_D_R_6     ; Shift D register right
ROM:B7B6                 std     6,x
ROM:B7B8                 addd    8,u
ROM:B7BA                 std     ,x
ROM:B7BC                 ldd     -6,u
ROM:B7BE                 jsr     Shift_D_R_6     ; Shift D register right
ROM:B7C1                 std     8,x
ROM:B7C3                 addd    $A,u
ROM:B7C5                 std     2,x
ROM:B7C7                 ldd     2,u
ROM:B7C9                 jsr     Shift_D_R_6     ; Shift D register right
ROM:B7CC                 std     $A,x
ROM:B7CE                 addd    $C,u
ROM:B7D0                 std     4,x
ROM:B7D2                 jsr     sub_B83F
ROM:B7D5                 jsr     sub_B948
ROM:B7D8                 lda     #8
ROM:B7DA                 sta     $C,x
ROM:B7DC                 lda     #$10
ROM:B7DE                 sta     $D,x
ROM:B7E0                 ldd     8,u
ROM:B7E2                 std     ,x
ROM:B7E4                 std     6,x
ROM:B7E6                 ldd     $A,u
ROM:B7E8                 std     2,x
ROM:B7EA                 std     8,x
ROM:B7EC                 ldd     $C,u
ROM:B7EE                 std     4,x
ROM:B7F0                 std     $A,x
ROM:B7F2                 lda     6,x
ROM:B7F6
ROM:B7F6 loc_B7F6:
ROM:B7F6                 aslb
ROM:B7F7                 rola
ROM:B7F8                 bvc     loc_B7FE
ROM:B7FA                 rora
ROM:B7FB                 rorb
ROM:B7FC                 bra     loc_B81C
ROM:B7FE ; ---------------------------------------------------------------------------
ROM:B7FE
ROM:B7FE loc_B7FE:
ROM:B7FE                 asl     9,x
ROM:B800                 rol     8,x
ROM:B802                 bvc     loc_B80C
ROM:B804                 ror     8,x
ROM:B806                 ror     9,x
ROM:B808                 asra
ROM:B809                 rorb
ROM:B80A                 bra     loc_B81C
ROM:B80C ; ---------------------------------------------------------------------------
ROM:B80C
ROM:B80C loc_B80C:
ROM:B80C                 asl     $B,x
ROM:B80E                 rol     $A,x
ROM:B810                 bvc     loc_B7F6
ROM:B812                 ror     $A,x
ROM:B814                 ror     $B,x
ROM:B816                 asr     8,x
ROM:B818                 asr     9,x
ROM:B81A                 asra
ROM:B81B                 rorb
ROM:B81C
ROM:B81C loc_B81C:
ROM:B81C                 subd    ,x
ROM:B81E                 jsr     Shift_D_R_4
ROM:B821                 ldb     PRNG
ROM:B824                 std     6,x
ROM:B826                 ldd     8,x
ROM:B828                 subd    2,x
ROM:B82A                 jsr     Shift_D_R_4
ROM:B82D                 ldb     PRNG
ROM:B830                 std     8,x
ROM:B832                 ldd     $A,x
ROM:B834                 subd    4,x
ROM:B836
ROM:B836 loc_B836:
ROM:B836                 jsr     Shift_D_R_4
ROM:B839                 ldb     PRNG
ROM:B83C                 std     $A,x
ROM:B83E                 rts
ROM:B83E ; End of function sub_B76C
ROM:B83E
ROM:B83F
ROM:B83F ; =============== S U B R O U T I N E =======================================
ROM:B83F
ROM:B83F
ROM:B83F sub_B83F:
ROM:B83F                 ldd     -$A,u
ROM:B841                 addd    6,x
ROM:B843                 std     6,x
ROM:B845                 ldd     -2,u
ROM:B847                 addd    8,x
ROM:B849                 std     8,x
ROM:B84B
ROM:B84B loc_B84B:
ROM:B84B                 ldd     6,u
ROM:B84D                 addd    $A,x
ROM:B84F                 std     $A,x
ROM:B851                 rts
ROM:B851 ; End of function sub_B83F
ROM:B851
ROM:B852
ROM:B852 ; =============== S U B R O U T I N E =======================================
ROM:B852
ROM:B852
ROM:B852 sub_B852:
ROM:B852                 ldd     #1
ROM:B855                 std     <DPbyte_1
ROM:B857                 ldd     #$203
ROM:B85A                 std     <DPbyte_3
ROM:B85C                 bra     loc_B868
ROM:B85C ; End of function sub_B852
ROM:B85C
ROM:B85E
ROM:B85E ; =============== S U B R O U T I N E =======================================
ROM:B85E
ROM:B85E
ROM:B85E sub_B85E:
ROM:B85E                 ldd     #$304
ROM:B861                 std     <DPbyte_1
ROM:B863                 ldd     #$502
ROM:B866                 std     <DPbyte_3
ROM:B868
ROM:B868 loc_B868:
ROM:B868                 jsr     sub_B948
ROM:B86B                 lda     <DPbyte_1
ROM:B86D                 sta     $C,x
ROM:B86F                 lda     #$20 ;  
ROM:B871                 sta     $D,x
ROM:B873                 ldd     MReg0C          ; XT
ROM:B876
ROM:B876 loc_B876:
ROM:B876                 std     ,x
ROM:B878                 ldd     MReg0D          ; YT
ROM:B87D
ROM:B87D loc_B87D:
ROM:B87D                 std     2,x
ROM:B87F                 ldd     MReg0E          ; ZT
ROM:B882                 std     4,x
ROM:B884                 ldd     MReg4C
ROM:B887                 adda    #$7F ; 
ROM:B889                 subd    MReg0C          ; XT
ROM:B88C                 jsr     Shift_D_R_5     ; Shift D register right
ROM:B88F                 ldb     PRNG
ROM:B892                 std     6,x
ROM:B894                 ldd     MReg4D
ROM:B897                 adda    #$C1 ; -
ROM:B899                 subd    MReg0D          ; YT
ROM:B89C                 jsr     Shift_D_R_5     ; Shift D register right
ROM:B89F                 ldb     PRNG
ROM:B8A2                 std     8,x
ROM:B8A4                 lda     <DPbyte_4
ROM:B8A6                 ldb     PRNG
ROM:B8A9                 jsr     Shift_D_L_2
ROM:B8AC                 std     $A,x
ROM:B8AE                 jsr     sub_B948
ROM:B8B1                 lda     <DPbyte_2
ROM:B8B3                 sta     $C,x
ROM:B8B5                 lda     #$20 ;  
ROM:B8B7                 sta     $D,x
ROM:B8B9                 ldd     MReg0C          ; XT
ROM:B8BC                 adda    #2
ROM:B8BE                 std     ,x
ROM:B8C0                 ldd     MReg0D          ; YT
ROM:B8C3                 std     2,x
ROM:B8C5                 ldd     MReg0E          ; ZT
ROM:B8C8                 std     4,x
ROM:B8CA                 ldd     MReg4C
ROM:B8CD                 adda    #$7F ; 
ROM:B8CF                 subd    MReg0C          ; XT
ROM:B8D2                 jsr     Shift_D_R_5     ; Shift D register right
ROM:B8D5                 ldb     PRNG
ROM:B8D8                 std     6,x
ROM:B8DA                 ldd     MReg4D
ROM:B8DD                 subd    MReg0D          ; YT
ROM:B8E0                 jsr     Shift_D_R_5     ; Shift D register right
ROM:B8E3                 ldb     PRNG
ROM:B8E6                 std     8,x
ROM:B8E8                 lda     <DPbyte_4
ROM:B8EA                 ldb     PRNG
ROM:B8ED                 jsr     Shift_D_L_2
ROM:B8F0                 std     $A,x
ROM:B8F2                 jsr     sub_B948
ROM:B8F5                 lda     <DPbyte_3
ROM:B8F7                 sta     $C,x
ROM:B8F9                 lda     #$20 ;  
ROM:B8FB                 sta     $D,x
ROM:B8FD                 ldd     MReg0C          ; XT
ROM:B900                 std     ,x
ROM:B902                 ldd     MReg0D          ; YT
ROM:B905                 adda    #2
ROM:B907                 std     2,x
ROM:B909                 ldd     MReg0E          ; ZT
ROM:B90C                 std     4,x
ROM:B90E                 ldd     MReg4C
ROM:B911                 adda    #$7F ; 
ROM:B913                 subd    MReg0C          ; XT
ROM:B916                 jsr     Shift_D_R_5     ; Shift D register right
ROM:B919                 ldb     PRNG
ROM:B91C                 std     6,x
ROM:B91E                 ldd     MReg4D
ROM:B921                 adda    #$3F ; ?
ROM:B923                 subd    MReg0D          ; YT
ROM:B926                 jsr     Shift_D_R_5     ; Shift D register right
ROM:B929                 ldb     PRNG
ROM:B92C                 std     8,x
ROM:B92E                 lda     <DPbyte_4       ; Game over/insert coins timer
ROM:B930                 ldb     PRNG
ROM:B933                 jsr     Shift_D_L_2
ROM:B936                 std     $A,x
ROM:B938                 rts
ROM:B938 ; End of function sub_B85E
ROM:B938
ROM:B939
ROM:B939 ; =============== S U B R O U T I N E =======================================
ROM:B939
ROM:B939
ROM:B939 sub_B939:
ROM:B939                 ldx     #byte_49E2      ; 3D Object state data 2. 8 slots of 14 bytes
ROM:B93C
ROM:B93C loc_B93C:
ROM:B93C                 lda     #0
ROM:B93E                 sta     $D,x            ; Free up object state slot
ROM:B940                 leax    $E,x
ROM:B942                 cmpx    #byte_49E2+$70  ; 3D Object state data 2. 8 slots of 14 bytes
ROM:B945                 bcs     loc_B93C
ROM:B947                 rts
ROM:B947 ; End of function sub_B939
ROM:B947
ROM:B948
ROM:B948 ; =============== S U B R O U T I N E =======================================
ROM:B948
ROM:B948
ROM:B948 sub_B948:
ROM:B948                 ldb     <DPbyte_A2      ; 3D Object slot select
ROM:B94A                 incb
ROM:B94B                 cmpb    #8
ROM:B94D                 bcs     loc_B951
ROM:B94F                 ldb     #0
ROM:B951
ROM:B951 loc_B951:                               ; 3D Object slot select
ROM:B951                 stb     <DPbyte_A2
ROM:B953                 lda     #$E
ROM:B955                 mul
ROM:B956                 ldx     #byte_49E2      ; 3D Object state data 2. 8 slots of 14 bytes
ROM:B959                 leax    d,x
ROM:B95B                 rts
ROM:B95B ; End of function sub_B948
ROM:B95B
ROM:B95C ; ---------------------------------------------------------------------------
ROM:B95C ; START OF FUNCTION CHUNK FOR sub_B98B
ROM:B95C
ROM:B95C loc_B95C:
ROM:B95C                 ldd     #$14BD
ROM:B95F                 std     MReg11          ; Sine for rotation
ROM:B962                 ldd     #$3C8C
ROM:B965                 std     MReg12          ; Cosine for rotation
ROM:B968                 ldd     #$18
ROM:B96B                 std     MW1             ; Point BIC to $50C0
ROM:B96E                 lda     #0              ; Roll
ROM:B970                 jsr     Math_Run_Start  ; Do math program run
ROM:B973                 ldd     #$590
ROM:B976                 std     MReg11          ; Sine for rotation
ROM:B979                 ldd     #$3FC2
ROM:B97C                 std     MReg12          ; Cosine for rotation
ROM:B97F                 ldd     #$18
ROM:B982                 std     MW1             ; Point BIC to $50C0
ROM:B985                 lda     #$E             ; Pitch
ROM:B987                 jsr     Math_Run_Start  ; Do math program run
ROM:B98A                 rts
ROM:B98A ; END OF FUNCTION CHUNK FOR sub_B98B
ROM:B98B
ROM:B98B ; =============== S U B R O U T I N E =======================================
ROM:B98B
ROM:B98B ; Check if tie/bunker/tower been hit
ROM:B98B
ROM:B98B sub_B98B:
ROM:B98B
ROM:B98B ; FUNCTION CHUNK AT ROM:B95C SIZE 0000002F BYTES
ROM:B98B
ROM:B98B                 ldx     #byte_49E2      ; 3D Object state data 2. 8 slots of 14 bytes
ROM:B98E
ROM:B98E loc_B98E:
ROM:B98E                 lda     $D,x
ROM:B990                 beq     loc_B9A1        ; If object state slot active then
ROM:B992                 dec     $D,x
ROM:B994                 ldb     $C,x
ROM:B996                 cmpb    #9
ROM:B998                 bcs     loc_B99B
ROM:B99A                 swi
ROM:B99B
ROM:B99B loc_B99B:
ROM:B99B                 ldu     #jt1
ROM:B99E                 aslb
ROM:B99F                 jsr     [b,u]
ROM:B9A1
ROM:B9A1 loc_B9A1:
ROM:B9A1                 leax    $E,x
ROM:B9A3                 cmpx    #byte_49E2+$70  ; 3D Object state data 2. 8 slots of 14 bytes
ROM:B9A6                 bcs     loc_B98E        ; Loop until all 3D Object states processed
ROM:B9A8                 ldx     #byte_49E2      ; 3D Object state data 2. 8 slots of 14 bytes
ROM:B9AB
ROM:B9AB loc_B9AB:
ROM:B9AB                 lda     $D,x
ROM:B9AD                 beq     loc_B9B2
ROM:B9AF                 jmp     loc_B95C
ROM:B9B2 ; ---------------------------------------------------------------------------
ROM:B9B2
ROM:B9B2 loc_B9B2:
ROM:B9B2                 leax    $E,x
ROM:B9B4                 cmpx    #byte_49E2+$70  ; 3D Object state data 2. 8 slots of 14 bytes
ROM:B9B7                 bcs     loc_B9AB
ROM:B9B9                 ldu     #$50D0
ROM:B9BC                 jsr     sub_CDC3        ; Initialise math registers matrix
ROM:B9BF                 rts
ROM:B9BF ; End of function sub_B98B
ROM:B9BF
ROM:B9C0
ROM:B9C0 ; =============== S U B R O U T I N E =======================================
ROM:B9C0
ROM:B9C0
ROM:B9C0 sub_B9C0:
ROM:B9C0                 ldd     6,x
ROM:B9C2                 addd    ,x
ROM:B9C4                 std     ,x
ROM:B9C6                 ldd     #0
ROM:B9C9                 subd    6,x
ROM:B9CB                 jsr     Shift_D_R_5     ; Shift D register right
ROM:B9CE                 addd    6,x
ROM:B9D0                 std     6,x
ROM:B9D2                 ldd     8,x
ROM:B9D4                 addd    2,x
ROM:B9D6                 std     2,x
ROM:B9D8                 ldd     #0
ROM:B9DB                 subd    8,x
ROM:B9DD                 jsr     Shift_D_R_5     ; Shift D register right
ROM:B9E0                 addd    8,x
ROM:B9E2                 std     8,x
ROM:B9E4                 ldd     4,x
ROM:B9E6                 addd    $A,x
ROM:B9E8                 bvs     loc_B9F1
ROM:B9EA                 bge     loc_B9EF
ROM:B9EC                 ldd     #0
ROM:B9EF
ROM:B9EF loc_B9EF:
ROM:B9EF                 std     4,x
ROM:B9F1
ROM:B9F1 loc_B9F1:
ROM:B9F1                 ldd     $A,x
ROM:B9F3                 subd    #$C8 ; +
ROM:B9F6                 std     $A,x
ROM:B9F8                 rts
ROM:B9F8 ; End of function sub_B9C0
ROM:B9F8
ROM:B9F9
ROM:B9F9 ; =============== S U B R O U T I N E =======================================
ROM:B9F9
ROM:B9F9
ROM:B9F9 sub_B9F9:
ROM:B9F9                 ldd     6,x
ROM:B9FB                 addd    ,x
ROM:B9FD                 bvs     loc_BA01
ROM:B9FF                 std     ,x
ROM:BA01
ROM:BA01 loc_BA01:
ROM:BA01                 ldd     8,x
ROM:BA03                 addd    2,x
ROM:BA05                 bvs     loc_BA09
ROM:BA07                 std     2,x
ROM:BA09
ROM:BA09 loc_BA09:
ROM:BA09                 ldd     $A,x
ROM:BA0B                 addd    4,x
ROM:BA0D                 bvs     locret_BA11
ROM:BA0F                 std     4,x
ROM:BA11
ROM:BA11 locret_BA11:
ROM:BA11                 rts
ROM:BA11 ; End of function sub_B9F9
ROM:BA11
ROM:BA12
ROM:BA12 ; =============== S U B R O U T I N E =======================================
ROM:BA12
ROM:BA12 ; Process tie/tower/bunker explosions
ROM:BA12
ROM:BA12 sub_BA12:
ROM:BA12                 lda     #$18            ; BIC points to $50C0
ROM:BA14                 jsr     sub_CE18        ; Run math program $80 Copy [BIC] to Matrix 3
ROM:BA17                 lda     #$40 ; @      ; Matrix 1 = Matrix 2 x Matrix 3
ROM:BA19                 jsr     Math_Run_Start  ; Do math program run
ROM:BA1C                 ldx     #byte_49E2      ; 3D Object state data 2. 8 slots of 14 bytes
ROM:BA1F
ROM:BA1F loc_BA1F:                               ; Pointer to Tie fighter data
ROM:BA1F                 stx     <DPbyte_64
ROM:BA21                 lda     $D,x
ROM:BA23                 beq     loc_BA28
ROM:BA25                 jsr     sub_BA32        ; Tie/bunker/tower hit explosion
ROM:BA28
ROM:BA28 loc_BA28:                               ; Pointer to Tie fighter data
ROM:BA28                 ldx     <DPbyte_64
ROM:BA2A                 leax    $E,x
ROM:BA2C                 cmpx    #byte_49E2+$70  ; 3D Object state data 2. 8 slots of 14 bytes
ROM:BA2F                 bcs     loc_BA1F
ROM:BA31                 rts
ROM:BA31 ; End of function sub_BA12
ROM:BA31
ROM:BA32
ROM:BA32 ; =============== S U B R O U T I N E =======================================
ROM:BA32
ROM:BA32
ROM:BA32 sub_BA32:
ROM:BA32                 ldd     ,x
ROM:BA34                 std     MReg3C
ROM:BA37                 ldd     2,x
ROM:BA39                 std     MReg3D
ROM:BA3C                 ldd     4,x
ROM:BA3E                 std     MReg3E
ROM:BA41                 ldd     #$F
ROM:BA44                 std     MW1             ; Point BIC to $5078 MReg3C
ROM:BA47                 lda     #$67 ; g
ROM:BA49                 jsr     Math_Run_Start  ; Do math program run
ROM:BA4C                 ldd     MReg00          ; Math result X
ROM:BA4F                 bmi     loc_BA9D        ; If object behind observer then remove
ROM:BA51                 std     MReg0C          ; XT
ROM:BA54                 std     DVSRH
ROM:BA57                 ldd     MReg01          ; Math result Y
ROM:BA5A                 std     MReg0D          ; YT
ROM:BA5D                 bpl     loc_BA63
ROM:BA5F                 coma
ROM:BA60                 negb
ROM:BA61                 sbca    #$FF
ROM:BA63
ROM:BA63 loc_BA63:                               ; XT
ROM:BA63                 subd    MReg0C
ROM:BA66                 bge     loc_BA9D        ; Remove object if outside visible limit
ROM:BA68                 ldd     MReg02          ; Math result Z
ROM:BA6B                 std     MReg0E          ; ZT
ROM:BA6E                 bpl     loc_BA74
ROM:BA70                 coma
ROM:BA71                 negb
ROM:BA72                 sbca    #$FF
ROM:BA74
ROM:BA74 loc_BA74:
ROM:BA74                 lsra
ROM:BA75                 rorb
ROM:BA76                 subd    MReg0C          ; XT
ROM:BA79                 bge     loc_BA9D        ; Remove object if outside visible limit
ROM:BA7B                 ldb     $C,x
ROM:BA7D                 cmpb    #9
ROM:BA7F                 bcs     loc_BA82
ROM:BA81                 swi
ROM:BA82
ROM:BA82 loc_BA82:                               ; Tie/bunker/tower fragments table
ROM:BA82                 ldu     #off_B75A
ROM:BA85                 aslb
ROM:BA86                 jsr     [b,u]           ; Work out which colour for tie/bunker/ tower fragments
ROM:BA88                 jsr     sub_CCD8        ; Copy object 3D data to math ram
ROM:BA8B                 jsr     sub_CD20        ; Do 3D object transform using Matrix 1
ROM:BA8E                 jsr     sub_CD2C        ; Format vectors for ties, and tower/bunker explosions
ROM:BA91                 ldd     #$7200
ROM:BA94                 std     ,y++
ROM:BA96                 ldd     #$8040          ; Insert vector CNTR instruction
ROM:BA99                 std     ,y++
ROM:BA9B                 bra     locret_BA9F
ROM:BA9D ; ---------------------------------------------------------------------------
ROM:BA9D
ROM:BA9D loc_BA9D:                               ; Remove/clear object state flag
ROM:BA9D                 clr     $D,x
ROM:BA9F
ROM:BA9F locret_BA9F:
ROM:BA9F                 rts
ROM:BA9F ; End of function sub_BA32
ROM:BA9F
ROM:BAA0
ROM:BAA0 ; =============== S U B R O U T I N E =======================================
ROM:BAA0
ROM:BAA0
ROM:BAA0 sub_BAA0:
ROM:BAA0                 lda     #$14
ROM:BAA2                 bra     loc_BABE
ROM:BAA4 ; ---------------------------------------------------------------------------
ROM:BAA4
ROM:BAA4 loc_BAA4:
ROM:BAA4                 lda     #$15
ROM:BAA6                 bra     loc_BABE
ROM:BAA8 ; ---------------------------------------------------------------------------
ROM:BAA8
ROM:BAA8 loc_BAA8:
ROM:BAA8                 lda     #$16
ROM:BAAA                 bra     loc_BABE
ROM:BAAC ; ---------------------------------------------------------------------------
ROM:BAAC
ROM:BAAC loc_BAAC:
ROM:BAAC                 lda     #$11
ROM:BAAE                 bra     loc_BAB8
ROM:BAB0 ; ---------------------------------------------------------------------------
ROM:BAB0
ROM:BAB0 loc_BAB0:
ROM:BAB0                 lda     #$12
ROM:BAB2                 bra     loc_BAB8
ROM:BAB4 ; ---------------------------------------------------------------------------
ROM:BAB4
ROM:BAB4 loc_BAB4:
ROM:BAB4                 lda     #$13
ROM:BAB6                 bra     *+2
ROM:BAB8
ROM:BAB8 loc_BAB8:
ROM:BAB8                 sta     <DPbyte_DC
ROM:BABA                 lda     #$67 ; g      ; Tower fragments colour
ROM:BABC                 bra     loc_BAC2
ROM:BABE ; ---------------------------------------------------------------------------
ROM:BABE
ROM:BABE loc_BABE:
ROM:BABE                 sta     <DPbyte_DC
ROM:BAC0                 lda     #$64 ; d      ; Bunker fragments colour
ROM:BAC2
ROM:BAC2 loc_BAC2:
ROM:BAC2                 ldb     $D,x
ROM:BAC4                 cmpb    #7
ROM:BAC6                 bhi     loc_BACE
ROM:BAC8                 aslb
ROM:BAC9                 aslb
ROM:BACA                 aslb
ROM:BACB                 aslb
ROM:BACC                 bra     loc_BAD0
ROM:BACE ; ---------------------------------------------------------------------------
ROM:BACE
ROM:BACE loc_BACE:
ROM:BAD0
ROM:BAD0 loc_BAD0:
ROM:BAD0                 std     ,y++
ROM:BAD2                 ldd     ,x
ROM:BAD4                 std     MReg3C
ROM:BAD7                 ldd     2,x
ROM:BAD9                 std     MReg3D
ROM:BADC                 ldd     #0
ROM:BADF                 std     MReg3E
ROM:BAE2                 ldd     #$F
ROM:BAE5                 std     MW1             ; Point BIC to $5078 MReg3C
ROM:BAE8                 ldd     MReg0E          ; ZT
ROM:BAEB                 pshs    a,b,x,u
ROM:BAED                 ldu     MReg0D          ; YT
ROM:BAF0                 ldx     MReg0C          ; XT
ROM:BAF3                 lda     #$67 ; g
ROM:BAF5                 jsr     Math_Run_Start  ; Do math program run
ROM:BAF8                 stx     MReg0C          ; XT
ROM:BAFB                 stu     MReg0D          ; YT
ROM:BAFE                 puls    u,x,b,a
ROM:BB00                 std     MReg0E          ; ZT
ROM:BB03                 ldd     MReg00          ; Math result X
ROM:BB06                 std     DVSRH           ; Do division
ROM:BB09                 jsr     sub_CCF0        ; Get divider result and multiply by Math result Z, insert VCTR instruction
ROM:BB0C                 lda     #$72 ; r      ; Vector SCAL instruction
ROM:BB0E                 ldb     MReg0C          ; XT
ROM:BB11                 aslb
ROM:BB12                 aslb
ROM:BB13                 std     ,y++
ROM:BB15                 rts
ROM:BB15 ; End of function sub_BAA0
ROM:BB15
ROM:BB16
ROM:BB16 ; =============== S U B R O U T I N E =======================================
ROM:BB16
ROM:BB16
ROM:BB16 sub_BB16:
ROM:BB16                 ldb     #3
ROM:BB18                 bra     loc_BB22
ROM:BB18 ; End of function sub_BB16
ROM:BB18
ROM:BB1A
ROM:BB1A ; =============== S U B R O U T I N E =======================================
ROM:BB1A
ROM:BB1A
ROM:BB1A sub_BB1A:
ROM:BB1A                 ldb     #1
ROM:BB1C                 bra     loc_BB22
ROM:BB1C ; End of function sub_BB1A
ROM:BB1C
ROM:BB1E
ROM:BB1E ; =============== S U B R O U T I N E =======================================
ROM:BB1E
ROM:BB1E
ROM:BB1E sub_BB1E:
ROM:BB1E                 ldb     #2
ROM:BB20                 bra     *+2
ROM:BB22
ROM:BB22 loc_BB22:
ROM:BB22                 stb     <DPbyte_DC
ROM:BB24                 ldb     $D,x
ROM:BB26                 cmpb    #$1F
ROM:BB28                 bls     sub_BB2F        ; Tie fighter hit colour cycle table
ROM:BB2A                 ldd     #$A018
ROM:BB2D                 bra     loc_BB35
ROM:BB2D ; End of function sub_BB1E
ROM:BB2D
ROM:BB2F
ROM:BB2F ; =============== S U B R O U T I N E =======================================
ROM:BB2F
ROM:BB2F ; Tie fighter hit colour cycle table
ROM:BB2F
ROM:BB2F sub_BB2F:
ROM:BB2F                 ldu     #word_BB3B
ROM:BB32                 aslb
ROM:BB33                 ldd     b,u
ROM:BB35
ROM:BB35 loc_BB35:
ROM:BB35                 std     ,y++
ROM:BB37                 jsr     sub_CCF0        ; Get divider result and multiply by Math result Z, insert VCTR instruction
ROM:BB3A                 rts
ROM:BB3A ; End of function sub_BB2F
ROM:BB3A
ROM:BB3A ; ---------------------------------------------------------------------------
ROM:BB7B
ROM:BB7B ; =============== S U B R O U T I N E =======================================
ROM:BB7B
ROM:BB7B
ROM:BB7B sub_BB7B:
ROM:BB7B                 lda     #1
ROM:BB7D                 sta     <DPbyte_A1      ; Death Star explosion state
ROM:BB7F                 ldd     #1
ROM:BB82                 std     <DPbyte_9F
ROM:BB84                 rts
ROM:BB84 ; End of function sub_BB7B
ROM:BB84
ROM:BB85
ROM:BB85 ; =============== S U B R O U T I N E =======================================
ROM:BB85
ROM:BB85 ; Death Star explosion animation
ROM:BB85
ROM:BB85 sub_BB85:
ROM:BB85                 lda     <DPbyte_A1      ; Death Star explosion state
ROM:BB87                 asla
ROM:BB88                 ldx     #off_BB8E
ROM:BB8B                 jsr     [a,x]
ROM:BB8D
ROM:BB8D locret_BB8D:
ROM:BB8D                 rts
ROM:BB8D ; End of function sub_BB85
ROM:BB8D
ROM:BB8D ; ---------------------------------------------------------------------------
ROM:BB98
ROM:BB98 ; =============== S U B R O U T I N E =======================================
ROM:BB98
ROM:BB98
ROM:BB98 sub_BB98:
ROM:BB98                 ldd     #$6480
ROM:BB9B                 ldu     #$76F0
ROM:BB9E                 ldx     <DPbyte_9F
ROM:BBA0                 jsr     sub_BCAE
ROM:BBA3                 ldd     <DPbyte_9F
ROM:BBA5                 addd    #2
ROM:BBA8                 std     <DPbyte_9F
ROM:BBAA                 cmpd    #$3F ; ?
ROM:BBAE                 bcc     locret_BBBA
ROM:BBB0                 ldd     #1
ROM:BBB3                 std     <DPbyte_9F
ROM:BBB5                 inc     <DPbyte_A1      ; Death Star explosion state
ROM:BBB7                 jsr     Sound_27
ROM:BBBA
ROM:BBBA locret_BBBA:
ROM:BBBA                 rts
ROM:BBBA ; End of function sub_BB98
ROM:BBBA
ROM:BBBB
ROM:BBBB ; =============== S U B R O U T I N E =======================================
ROM:BBBB
ROM:BBBB
ROM:BBBB sub_BBBB:
ROM:BBBB                 ldx     <DPbyte_9F
ROM:BBBD                 ldd     #$61FF
ROM:BBC0                 ldu     #$76F0
ROM:BBC3                 jsr     sub_BCAE
ROM:BBC6                 ldd     <DPbyte_9F
ROM:BBC8                 addd    #2
ROM:BBCB                 std     <DPbyte_9F
ROM:BBCD                 cmpd    #$3F ; ?
ROM:BBD1                 bcc     loc_BC0B
ROM:BBD3                 ldb     #$3F ; ?
ROM:BBD5                 subb    <DPbyte_A0
ROM:BBD7                 clra
ROM:BBD8                 tfr     d, x
ROM:BBDA                 ldd     #$64FF
ROM:BBDD                 jsr     sub_BCAE
ROM:BBE0                 ldd     <DPbyte_9F
ROM:BBE2                 aslb
ROM:BBE3                 rola
ROM:BBE4                 aslb
ROM:BBE5                 rola
ROM:BBE6                 aslb
ROM:BBE7                 rola
ROM:BBE8                 coma
ROM:BBE9                 comb
ROM:BBEA                 bmi     loc_BBEF
ROM:BBEC                 deca
ROM:BBEF
ROM:BBEF loc_BBEF:
ROM:BBEF                 addd    #$7670
ROM:BBF2                 tstb
ROM:BBF3                 bmi     loc_BBF8
ROM:BBF5                 deca
ROM:BBF6                 andb    #$7F ; 
ROM:BBF8
ROM:BBF8 loc_BBF8:
ROM:BBF8                 tfr     d, u
ROM:BBFA                 ldd     <DPbyte_9F
ROM:BBFC                 lsrb
ROM:BBFD                 lsrb
ROM:BBFE                 andb    #7
ROM:BC00                 eorb    #7
ROM:BC02                 incb
ROM:BC03                 tfr     d, x
ROM:BC05                 ldd     #$64FF
ROM:BC08                 jsr     sub_BCC8
ROM:BC0B
ROM:BC0B loc_BC0B:
ROM:BC0B                 ldd     <DPbyte_9F
ROM:BC0D                 cmpd    #$3F ; ?
ROM:BC11                 bcs     locret_BC1D
ROM:BC13                 ldd     #1
ROM:BC16                 std     <DPbyte_9F
ROM:BC18                 inc     <DPbyte_A1      ; Death Star explosion state
ROM:BC1A                 jsr     Sound_27
ROM:BC1D
ROM:BC1D locret_BC1D:
ROM:BC1D                 rts
ROM:BC1D ; End of function sub_BBBB
ROM:BC1D
ROM:BC1E
ROM:BC1E ; =============== S U B R O U T I N E =======================================
ROM:BC1E
ROM:BC1E
ROM:BC1E sub_BC1E:
ROM:BC1E                 ldx     <DPbyte_9F
ROM:BC20                 ldd     #$67FF
ROM:BC23                 ldu     #$7670
ROM:BC26                 jsr     sub_BCAE
ROM:BC29                 ldd     <DPbyte_9F
ROM:BC2B                 addd    #3
ROM:BC2E                 std     <DPbyte_9F
ROM:BC30                 cmpd    #$3F ; ?
ROM:BC34                 bcc     loc_BC43
ROM:BC36                 ldb     #$3F ; ?
ROM:BC38                 subb    <DPbyte_A0
ROM:BC3A                 clra
ROM:BC3B                 tfr     d, x
ROM:BC3D                 ldd     #$61FF
ROM:BC40                 jsr     sub_BCAE
ROM:BC43
ROM:BC43 loc_BC43:
ROM:BC43                 ldd     <DPbyte_9F
ROM:BC45                 cmpd    #$3F ; ?
ROM:BC49                 bcc     loc_BC72
ROM:BC4B                 aslb
ROM:BC4C                 rola
ROM:BC4D                 aslb
ROM:BC4E                 rola
ROM:BC4F                 aslb
ROM:BC50                 rola
ROM:BC51                 coma
ROM:BC52                 comb
ROM:BC53                 bmi     loc_BC58
ROM:BC55                 deca
ROM:BC58
ROM:BC58 loc_BC58:
ROM:BC58                 addd    #$7670
ROM:BC5B                 tstb
ROM:BC5C                 bmi     loc_BC61
ROM:BC5E                 deca
ROM:BC5F                 andb    #$7F ; 
ROM:BC61
ROM:BC61 loc_BC61:
ROM:BC61                 tfr     d, u
ROM:BC63                 ldd     <DPbyte_9F
ROM:BC65                 andb    #$F
ROM:BC67                 eorb    #$F
ROM:BC69                 incb
ROM:BC6A                 tfr     d, x
ROM:BC6C                 ldd     #$61FF
ROM:BC6F                 jsr     sub_BCC8
ROM:BC72
ROM:BC72 loc_BC72:
ROM:BC72                 ldd     <DPbyte_9F
ROM:BC74                 cmpd    #$50 ; P
ROM:BC78                 bcs     locret_BC84
ROM:BC7D                 std     <DPbyte_9F
ROM:BC7F                 inc     <DPbyte_A1      ; Death Star explosion state
ROM:BC81                 jsr     Sound_27
ROM:BC84
ROM:BC84 locret_BC84:
ROM:BC84                 rts
ROM:BC84 ; End of function sub_BC1E
ROM:BC84
ROM:BC85
ROM:BC85 ; =============== S U B R O U T I N E =======================================
ROM:BC85
ROM:BC85
ROM:BC85 sub_BC85:
ROM:BC85                 ldd     <DPbyte_9F
ROM:BC87                 subd    #4
ROM:BC8A                 std     <DPbyte_9F
ROM:BC8C                 cmpd    #8
ROM:BC90                 bcs     loc_BCA9
ROM:BC92                 addd    #$7500
ROM:BC95                 tfr     d, u
ROM:BC97                 ldd     <DPbyte_9F
ROM:BC99                 lsra
ROM:BC9A                 rorb
ROM:BC9B                 andb    #$3F ; ?
ROM:BC9D                 eorb    #$3F ; ?
ROM:BC9F                 tfr     d, x
ROM:BCA1                 ldd     #$67FF
ROM:BCA4                 jsr     sub_BCC8
ROM:BCA7                 bra     locret_BCAD
ROM:BCA9 ; ---------------------------------------------------------------------------
ROM:BCA9
ROM:BCA9 loc_BCA9:
ROM:BCA9                 lda     #0
ROM:BCAB                 sta     <DPbyte_A1      ; Death Star explosion state
ROM:BCAD
ROM:BCAD locret_BCAD:
ROM:BCAD                 rts
ROM:BCAD ; End of function sub_BC85
ROM:BCAD
ROM:BCAE
ROM:BCAE ; =============== S U B R O U T I N E =======================================
ROM:BCAE
ROM:BCAE
ROM:BCAE sub_BCAE:
ROM:BCAE                 std     ,y++
ROM:BCB0
ROM:BCB0 loc_BCB0:
ROM:BCB0                 ldd     #$1F98
ROM:BCB3                 std     ,y++
ROM:BCB5                 ldd     #0
ROM:BCB8                 std     ,y++
ROM:BCBA                 stu     ,y++
ROM:BCBC                 ldd     #$BD69
ROM:BCBF                 std     ,y++
ROM:BCC1                 leau    -2,u
ROM:BCC3                 leax    -1,x
ROM:BCC5                 bne     loc_BCB0
ROM:BCC7                 rts
ROM:BCC7 ; End of function sub_BCAE
ROM:BCC7
ROM:BCC8
ROM:BCC8 ; =============== S U B R O U T I N E =======================================
ROM:BCC8
ROM:BCC8
ROM:BCC8 sub_BCC8:
ROM:BCC8                 std     ,y++
ROM:BCCA
ROM:BCCA loc_BCCA:
ROM:BCCA                 ldd     #$1F98
ROM:BCCD                 std     ,y++
ROM:BCCF                 ldd     #0
ROM:BCD2                 std     ,y++
ROM:BCD4                 stu     ,y++
ROM:BCD6                 ldd     #$BD69
ROM:BCD9                 std     ,y++
ROM:BCDB                 tfr     u, d
ROM:BCDD                 subd    #4
ROM:BCE0                 andb    #$7F ; 
ROM:BCE2                 tfr     d, u
ROM:BCE4                 leax    -1,x
ROM:BCE6                 bne     loc_BCCA
ROM:BCE8                 rts
ROM:BCE8 ; End of function sub_BCC8
ROM:BCE8
ROM:BCE9 ; ---------------------------------------------------------------------------
ROM:BCE9 ; START OF FUNCTION CHUNK FOR Sound_3
ROM:BCE9
ROM:BCE9 Write_Sound:
ROM:BCE9                 ldb     #$E
ROM:BCEB
ROM:BCEB loc_BCEB:
ROM:BCEB                 tst     SOUNDIO+1
ROM:BCEE                 bpl     loc_BCF5
ROM:BCF0                 decb
ROM:BCF1                 bne     loc_BCEB
ROM:BCF3                 lda     #0
ROM:BCF5
ROM:BCF5 loc_BCF5:
ROM:BCF5                 sta     SOUNDIO
ROM:BCF8                 rts
ROM:BCF8 ; END OF FUNCTION CHUNK FOR Sound_3
ROM:BCF9
ROM:BCF9 ; =============== S U B R O U T I N E =======================================
ROM:BCF9
ROM:BCF9
ROM:BCF9 Sound_1:
ROM:BCF9                 lda     #1
ROM:BCFB                 jmp     Write_Sound
ROM:BCFB ; End of function Sound_1
ROM:BCFB
ROM:BCFE
ROM:BCFE ; =============== S U B R O U T I N E =======================================
ROM:BCFE
ROM:BCFE
ROM:BCFE Sound_2:
ROM:BCFE                 lda     #2
ROM:BD00                 jmp     Write_Sound
ROM:BD00 ; End of function Sound_2
ROM:BD00
ROM:BD03
ROM:BD03 ; =============== S U B R O U T I N E =======================================
ROM:BD03
ROM:BD03 ; Attributes: noreturn
ROM:BD03
ROM:BD03 Sound_3:
ROM:BD03
ROM:BD03 ; FUNCTION CHUNK AT ROM:BCE9 SIZE 00000010 BYTES
ROM:BD03
ROM:BD03                 lda     #3
ROM:BD05                 jmp     Write_Sound
ROM:BD05 ; End of function Sound_3
ROM:BD05
ROM:BD08
ROM:BD08 ; =============== S U B R O U T I N E =======================================
ROM:BD08
ROM:BD08
ROM:BD08 Sound_4:
ROM:BD08                 lda     #4
ROM:BD0A                 jmp     Write_Sound
ROM:BD0A ; End of function Sound_4
ROM:BD0A
ROM:BD0D
ROM:BD0D ; =============== S U B R O U T I N E =======================================
ROM:BD0D
ROM:BD0D
ROM:BD0D Sound_5:
ROM:BD0D                 lda     #5
ROM:BD0F                 jmp     Write_Sound
ROM:BD0F ; End of function Sound_5
ROM:BD0F
ROM:BD12
ROM:BD12 ; =============== S U B R O U T I N E =======================================
ROM:BD12
ROM:BD12
ROM:BD12 Sound_6:
ROM:BD12                 lda     #6
ROM:BD14                 jmp     Write_Sound
ROM:BD14 ; End of function Sound_6
ROM:BD14
ROM:BD17
ROM:BD17 ; =============== S U B R O U T I N E =======================================
ROM:BD17
ROM:BD17
ROM:BD17 Sound_7:
ROM:BD17                 lda     #7
ROM:BD19                 jmp     Write_Sound
ROM:BD19 ; End of function Sound_7
ROM:BD19
ROM:BD1C
ROM:BD1C ; =============== S U B R O U T I N E =======================================
ROM:BD1C
ROM:BD1C
ROM:BD1C Sound_8:
ROM:BD1C                 lda     #8
ROM:BD1E                 jmp     Write_Sound
ROM:BD1E ; End of function Sound_8
ROM:BD1E
ROM:BD21
ROM:BD21 ; =============== S U B R O U T I N E =======================================
ROM:BD21
ROM:BD21
ROM:BD21 Sound_9:
ROM:BD21                 lda     #9
ROM:BD23                 jmp     Write_Sound
ROM:BD23 ; End of function Sound_9
ROM:BD23
ROM:BD26
ROM:BD26 ; =============== S U B R O U T I N E =======================================
ROM:BD26
ROM:BD26
ROM:BD26 Sound_A:
ROM:BD26                 lda     #$A
ROM:BD28                 jmp     Write_Sound
ROM:BD28 ; End of function Sound_A
ROM:BD28
ROM:BD2B
ROM:BD2B ; =============== S U B R O U T I N E =======================================
ROM:BD2B
ROM:BD2B
ROM:BD2B Sound_B:
ROM:BD2B                 lda     #$B
ROM:BD2D                 jmp     Write_Sound
ROM:BD2D ; End of function Sound_B
ROM:BD2D
ROM:BD30
ROM:BD30 ; =============== S U B R O U T I N E =======================================
ROM:BD30
ROM:BD30
ROM:BD30 Sound_C:
ROM:BD30                 lda     #$C
ROM:BD32                 jmp     Write_Sound
ROM:BD32 ; End of function Sound_C
ROM:BD32
ROM:BD35
ROM:BD35 ; =============== S U B R O U T I N E =======================================
ROM:BD35
ROM:BD35
ROM:BD35 Sound_D:
ROM:BD35                 lda     #$D
ROM:BD37                 jmp     Write_Sound
ROM:BD37 ; End of function Sound_D
ROM:BD37
ROM:BD3A
ROM:BD3A ; =============== S U B R O U T I N E =======================================
ROM:BD3A
ROM:BD3A
ROM:BD3A Sound_E:
ROM:BD3A                 lda     #$E
ROM:BD3C                 jmp     Write_Sound
ROM:BD3C ; End of function Sound_E
ROM:BD3C
ROM:BD3F
ROM:BD3F ; =============== S U B R O U T I N E =======================================
ROM:BD3F
ROM:BD3F
ROM:BD3F Sound_F:
ROM:BD3F                 lda     #$F
ROM:BD41                 jmp     Write_Sound
ROM:BD41 ; End of function Sound_F
ROM:BD41
ROM:BD44
ROM:BD44 ; =============== S U B R O U T I N E =======================================
ROM:BD44
ROM:BD44
ROM:BD44 Sound_10:
ROM:BD44                 lda     #$10
ROM:BD46                 jmp     Write_Sound
ROM:BD46 ; End of function Sound_10
ROM:BD46
ROM:BD49
ROM:BD49 ; =============== S U B R O U T I N E =======================================
ROM:BD49
ROM:BD49 ; Remember
ROM:BD49
ROM:BD49 Sound_11:
ROM:BD49                 lda     #$11
ROM:BD4B                 jmp     Write_Sound
ROM:BD4B ; End of function Sound_11
ROM:BD4B
ROM:BD4E
ROM:BD4E ; =============== S U B R O U T I N E =======================================
ROM:BD4E
ROM:BD4E
ROM:BD4E Sound_12:
ROM:BD4E                 lda     #$12
ROM:BD50                 jmp     Write_Sound
ROM:BD50 ; End of function Sound_12
ROM:BD50
ROM:BD53
ROM:BD53 ; =============== S U B R O U T I N E =======================================
ROM:BD53
ROM:BD53 ; Look at the size of that thing
ROM:BD53
ROM:BD53 Sound_13:
ROM:BD53                 lda     #$13
ROM:BD55                 jmp     Write_Sound
ROM:BD55 ; End of function Sound_13
ROM:BD55
ROM:BD58
ROM:BD58 ; =============== S U B R O U T I N E =======================================
ROM:BD58
ROM:BD58 ; Stay in attack formation
ROM:BD58
ROM:BD58 Sound_14:
ROM:BD58                 lda     #$14
ROM:BD5A                 jmp     Write_Sound
ROM:BD5A ; End of function Sound_14
ROM:BD5A
ROM:BD5D
ROM:BD5D ; =============== S U B R O U T I N E =======================================
ROM:BD5D
ROM:BD5D
ROM:BD5D Sound_15:
ROM:BD5D                 lda     #$15
ROM:BD5F                 jmp     Write_Sound
ROM:BD5F ; End of function Sound_15
ROM:BD5F
ROM:BD62
ROM:BD62 ; =============== S U B R O U T I N E =======================================
ROM:BD62
ROM:BD62 ; Force is strong in this one
ROM:BD62
ROM:BD62 Sound_16:
ROM:BD62                 lda     #$16
ROM:BD64                 jmp     Write_Sound
ROM:BD64 ; End of function Sound_16
ROM:BD64
ROM:BD67
ROM:BD67 ; =============== S U B R O U T I N E =======================================
ROM:BD67
ROM:BD67 ; Red 5 Im going in
ROM:BD67
ROM:BD67 Sound_17:
ROM:BD67                 lda     #$17
ROM:BD69                 jmp     Write_Sound
ROM:BD69 ; End of function Sound_17
ROM:BD69
ROM:BD6C
ROM:BD6C ; =============== S U B R O U T I N E =======================================
ROM:BD6C
ROM:BD6C ; Luke trust me
ROM:BD6C
ROM:BD6C Sound_18:
ROM:BD6C                 lda     #$18
ROM:BD6E                 jmp     Write_Sound
ROM:BD6E ; End of function Sound_18
ROM:BD6E
ROM:BD71
ROM:BD71 ; =============== S U B R O U T I N E =======================================
ROM:BD71
ROM:BD71
ROM:BD71 Sound_19:
ROM:BD71                 lda     #$19
ROM:BD73                 jmp     Write_Sound
ROM:BD73 ; End of function Sound_19
ROM:BD73
ROM:BD76
ROM:BD76 ; =============== S U B R O U T I N E =======================================
ROM:BD76
ROM:BD76 ; Yahoo youre all clear kid
ROM:BD76
ROM:BD76 Sound_1A:
ROM:BD76                 lda     #$1A
ROM:BD78                 jmp     Write_Sound
ROM:BD78 ; End of function Sound_1A
ROM:BD78
ROM:BD7B
ROM:BD7B ; =============== S U B R O U T I N E =======================================
ROM:BD7B
ROM:BD7B ; High score
ROM:BD7B
ROM:BD7B Sound_1B:
ROM:BD7B                 lda     #$1B
ROM:BD7D                 jmp     Write_Sound
ROM:BD7D ; End of function Sound_1B
ROM:BD7D
ROM:BD80
ROM:BD80 ; =============== S U B R O U T I N E =======================================
ROM:BD80
ROM:BD80
ROM:BD80 Sound_1C:
ROM:BD80                 lda     #$1C
ROM:BD82                 jmp     Write_Sound
ROM:BD82 ; End of function Sound_1C
ROM:BD82
ROM:BD85
ROM:BD85 ; =============== S U B R O U T I N E =======================================
ROM:BD85
ROM:BD85 ; Imperial March
ROM:BD85
ROM:BD85 Sound_1D:
ROM:BD85                 lda     #$1D
ROM:BD87                 jmp     Write_Sound
ROM:BD87 ; End of function Sound_1D
ROM:BD87
ROM:BD8A
ROM:BD8A ; =============== S U B R O U T I N E =======================================
ROM:BD8A
ROM:BD8A ; Enter Death Star
ROM:BD8A
ROM:BD8A Sound_1E:
ROM:BD8A                 lda     #$1E
ROM:BD8C                 jmp     Write_Sound
ROM:BD8C ; End of function Sound_1E
ROM:BD8C
ROM:BD8F
ROM:BD8F ; =============== S U B R O U T I N E =======================================
ROM:BD8F
ROM:BD8F ; Death Star destroyed
ROM:BD8F
ROM:BD8F Sound_1F:
ROM:BD8F                 lda     #$1F
ROM:BD91                 jmp     Write_Sound
ROM:BD91 ; End of function Sound_1F
ROM:BD91
ROM:BD94
ROM:BD94 ; =============== S U B R O U T I N E =======================================
ROM:BD94
ROM:BD94 ; Towers 1 music
ROM:BD94
ROM:BD94 Sound_20:
ROM:BD94                 lda     #$20 ;  
ROM:BD96                 jmp     Write_Sound
ROM:BD96 ; End of function Sound_20
ROM:BD96
ROM:BD99
ROM:BD99 ; =============== S U B R O U T I N E =======================================
ROM:BD99
ROM:BD99 ; Towers 2 music
ROM:BD99
ROM:BD99 Sound_21:
ROM:BD99                 lda     #$21 ; !
ROM:BD9B                 jmp     Write_Sound
ROM:BD9B ; End of function Sound_21
ROM:BD9B
ROM:BD9E
ROM:BD9E ; =============== S U B R O U T I N E =======================================
ROM:BD9E
ROM:BD9E ; Trench music
ROM:BD9E
ROM:BD9E Sound_22:
ROM:BD9E                 lda     #$22 ; '
ROM:BDA0                 jmp     Write_Sound
ROM:BDA0 ; End of function Sound_22
ROM:BDA0
ROM:BDA3
ROM:BDA3 ; =============== S U B R O U T I N E =======================================
ROM:BDA3
ROM:BDA3
ROM:BDA3 Sound_23:
ROM:BDA3                 lda     #$23 ; #
ROM:BDA5                 jmp     Write_Sound
ROM:BDA5 ; End of function Sound_23
ROM:BDA5
ROM:BDA8
ROM:BDA8 ; =============== S U B R O U T I N E =======================================
ROM:BDA8
ROM:BDA8 ; Space wave 1 music
ROM:BDA8
ROM:BDA8 Sound_24:
ROM:BDA8                 lda     #$24 ; $
ROM:BDAA                 jmp     Write_Sound
ROM:BDAA ; End of function Sound_24
ROM:BDAA
ROM:BDAD
ROM:BDAD ; =============== S U B R O U T I N E =======================================
ROM:BDAD
ROM:BDAD ; Space Wave 2 music
ROM:BDAD
ROM:BDAD Sound_25:
ROM:BDAD                 lda     #$25 ; %
ROM:BDAF                 jmp     Write_Sound
ROM:BDAF ; End of function Sound_25
ROM:BDAF
ROM:BDB2
ROM:BDB2 ; =============== S U B R O U T I N E =======================================
ROM:BDB2
ROM:BDB2 ; Explosion
ROM:BDB2
ROM:BDB2 Sound_26:
ROM:BDB2                 lda     #$26 ; &
ROM:BDB4                 jmp     Write_Sound
ROM:BDB4 ; End of function Sound_26
ROM:BDB4
ROM:BDB7
ROM:BDB7 ; =============== S U B R O U T I N E =======================================
ROM:BDB7
ROM:BDB7
ROM:BDB7 Sound_27:
ROM:BDB7                 lda     #$27 ; 
ROM:BDB9                 jmp     Write_Sound
ROM:BDB9 ; End of function Sound_27
ROM:BDB9
ROM:BDBC
ROM:BDBC ; =============== S U B R O U T I N E =======================================
ROM:BDBC
ROM:BDBC
ROM:BDBC Sound_28:
ROM:BDBC                 lda     #$28 ; (
ROM:BDBE                 jmp     Write_Sound
ROM:BDBE ; End of function Sound_28
ROM:BDBE
ROM:BDC1
ROM:BDC1 ; =============== S U B R O U T I N E =======================================
ROM:BDC1
ROM:BDC1
ROM:BDC1 Sound_29:
ROM:BDC1                 lda     #$29 ; )
ROM:BDC3                 jmp     Write_Sound
ROM:BDC3 ; End of function Sound_29
ROM:BDC3
ROM:BDC6
ROM:BDC6 ; =============== S U B R O U T I N E =======================================
ROM:BDC6
ROM:BDC6
ROM:BDC6 Sound_2A:
ROM:BDC6                 lda     #$2A ; *
ROM:BDC8                 jmp     Write_Sound
ROM:BDC8 ; End of function Sound_2A
ROM:BDC8
ROM:BDCB
ROM:BDCB ; =============== S U B R O U T I N E =======================================
ROM:BDCB
ROM:BDCB
ROM:BDCB Sound_2B:
ROM:BDCB                 lda     #$2B ; +
ROM:BDCD                 jmp     Write_Sound
ROM:BDCD ; End of function Sound_2B
ROM:BDCD
ROM:BDD0
ROM:BDD0 ; =============== S U B R O U T I N E =======================================
ROM:BDD0
ROM:BDD0
ROM:BDD0 Sound_2C:
ROM:BDD0                 lda     #$2C ; ,
ROM:BDD2                 jmp     Write_Sound
ROM:BDD2 ; End of function Sound_2C
ROM:BDD2
ROM:BDD5
ROM:BDD5 ; =============== S U B R O U T I N E =======================================
ROM:BDD5
ROM:BDD5
ROM:BDD5 Sound_2D:
ROM:BDD5                 lda     #$2D ; -
ROM:BDD7                 jmp     Write_Sound
ROM:BDD7 ; End of function Sound_2D
ROM:BDD7
ROM:BDDA
ROM:BDDA ; =============== S U B R O U T I N E =======================================
ROM:BDDA
ROM:BDDA
ROM:BDDA Sound_2E:
ROM:BDDA                 lda     #$2E ; .
ROM:BDDC                 jmp     Write_Sound
ROM:BDDC ; End of function Sound_2E
ROM:BDDC
ROM:BDDF
ROM:BDDF ; =============== S U B R O U T I N E =======================================
ROM:BDDF
ROM:BDDF
ROM:BDDF Sound_2F:
ROM:BDDF                 lda     #$2F ; /
ROM:BDE1                 jmp     Write_Sound
ROM:BDE1 ; End of function Sound_2F
ROM:BDE1
ROM:BDE4
ROM:BDE4 ; =============== S U B R O U T I N E =======================================
ROM:BDE4
ROM:BDE4
ROM:BDE4 Sound_30:
ROM:BDE4                 lda     #$30 ; 0
ROM:BDE6                 jmp     Write_Sound
ROM:BDE6 ; End of function Sound_30
ROM:BDE6
ROM:BDE9
ROM:BDE9 ; =============== S U B R O U T I N E =======================================
ROM:BDE9
ROM:BDE9
ROM:BDE9 Sound_31:
ROM:BDE9                 lda     #$31 ; 1
ROM:BDEB                 jmp     Write_Sound
ROM:BDEB ; End of function Sound_31
ROM:BDEB
ROM:BDEE
ROM:BDEE ; =============== S U B R O U T I N E =======================================
ROM:BDEE
ROM:BDEE ; R2 beeps entering Death Star
ROM:BDEE
ROM:BDEE Sound_32:
ROM:BDEE                 lda     #$32 ; 2
ROM:BDF0                 jmp     Write_Sound
ROM:BDF0 ; End of function Sound_32
ROM:BDF0
ROM:BDF3
ROM:BDF3 ; =============== S U B R O U T I N E =======================================
ROM:BDF3
ROM:BDF3
ROM:BDF3 Sound_33:
ROM:BDF3                 lda     #$33 ; 3
ROM:BDF5                 jmp     Write_Sound
ROM:BDF5 ; End of function Sound_33
ROM:BDF5
ROM:BDF8
ROM:BDF8 ; =============== S U B R O U T I N E =======================================
ROM:BDF8
ROM:BDF8
ROM:BDF8 Sound_34:
ROM:BDF8                 lda     #$34 ; 4
ROM:BDFA                 jmp     Write_Sound
ROM:BDFA ; End of function Sound_34
ROM:BDFA
ROM:BDFD
ROM:BDFD ; =============== S U B R O U T I N E =======================================
ROM:BDFD
ROM:BDFD
ROM:BDFD Sound_35:
ROM:BDFD                 lda     #$35 ; 5
ROM:BDFF                 jmp     Write_Sound
ROM:BDFF ; End of function Sound_35
ROM:BDFF
ROM:BE02
ROM:BE02 ; =============== S U B R O U T I N E =======================================
ROM:BE02
ROM:BE02
ROM:BE02 Sound_36:
ROM:BE02                 lda     #$36 ; 6
ROM:BE04                 jmp     Write_Sound
ROM:BE04 ; End of function Sound_36
ROM:BE04
ROM:BE07
ROM:BE07 ; =============== S U B R O U T I N E =======================================
ROM:BE07
ROM:BE07
ROM:BE07 Sound_37:
ROM:BE07                 lda     #$37 ; 7
ROM:BE09                 jmp     Write_Sound
ROM:BE09 ; End of function Sound_37
ROM:BE09
ROM:BE0C
ROM:BE0C ; =============== S U B R O U T I N E =======================================
ROM:BE0C
ROM:BE0C
ROM:BE0C Sound_38:
ROM:BE0C                 lda     #$38 ; 8
ROM:BE0E                 jmp     Write_Sound
ROM:BE0E ; End of function Sound_38
ROM:BE0E
ROM:BE11
ROM:BE11 ; =============== S U B R O U T I N E =======================================
ROM:BE11
ROM:BE11
ROM:BE11 Sound_39:
ROM:BE11                 lda     #$39 ; 9
ROM:BE13                 jmp     Write_Sound
ROM:BE13 ; End of function Sound_39
ROM:BE13
ROM:BE16
ROM:BE16 ; =============== S U B R O U T I N E =======================================
ROM:BE16
ROM:BE16
ROM:BE16 Sound_3A:
ROM:BE16                 lda     #$3A ; :
ROM:BE18                 jmp     Write_Sound
ROM:BE18 ; End of function Sound_3A
ROM:BE18
ROM:BE1B
ROM:BE1B ; =============== S U B R O U T I N E =======================================
ROM:BE1B
ROM:BE1B
ROM:BE1B Sound_3B:
ROM:BE1B                 lda     #$3B ; ;
ROM:BE1D                 jmp     Write_Sound
ROM:BE1D ; End of function Sound_3B
ROM:BE1D
ROM:BE20
ROM:BE20 ; =============== S U B R O U T I N E =======================================
ROM:BE20
ROM:BE20 ; Display accounting screen
ROM:BE20
ROM:BE20 sub_BE20:
ROM:BE20                 lda     #$59 ; Y
ROM:BE22
ROM:BE22 loc_BE22:                               ; Called from select screen, attract screen 1 + 3 when writing text
ROM:BE22                 jsr     sub_D8DF
ROM:BE25                 inca
ROM:BE26                 cmpa    #$65 ; e
ROM:BE28                 bcs     loc_BE22
ROM:BE2A                 lda     #$D3 ; +
ROM:BE2C                 jsr     sub_D8DF        ; Called from select screen, attract screen 1 + 3 when writing text
ROM:BE2F                 ldd     #$6480
ROM:BE32                 std     ,y++
ROM:BE34                 ldx     #$453C
ROM:BE37                 ldu     #word_C7BB
ROM:BE3A
ROM:BE3A loc_BE3A:
ROM:BE3A                 ldd     ,u++
ROM:BE3C                 std     ,y++
ROM:BE3E                 ldd     #$30 ; 0
ROM:BE41                 std     ,y++
ROM:BE43                 stu     byte_4AFA
ROM:BE46                 ldb     #5
ROM:BE48                 stb     <DPbyte_AD
ROM:BE4A                 ldb     #5
ROM:BE4C
ROM:BE4C loc_BE4C:
ROM:BE4C                 lda     ,x+
ROM:BE4E                 jsr     loc_E7AD
ROM:BE51                 decb
ROM:BE52                 bpl     loc_BE4C
ROM:BE54                 ldd     #$8040
ROM:BE57                 std     ,y++
ROM:BE59                 ldu     byte_4AFA
ROM:BE5C                 cmpx    #$4554
ROM:BE5F                 bcs     loc_BE3A
ROM:BE61                 ldd     word_C7C1
ROM:BE64                 std     ,y++
ROM:BE66                 ldd     #$13C
ROM:BE69                 std     ,y++
ROM:BE6B                 lda     #1
ROM:BE6D                 sta     <DPbyte_AD
ROM:BE6F                 lda     byte_4588
ROM:BE72                 jsr     loc_E7AD
ROM:BE75                 lda     byte_4589
ROM:BE78                 jsr     loc_E7AD
ROM:BE7B                 ldd     #$8040
ROM:BE7E                 std     ,y++
ROM:BE80                 ldx     #$4548
ROM:BE83                 jsr     sub_C6D4        ; Read NOVRAM
ROM:BE86                 ldu     #word_4AFE
ROM:BE89                 ldx     #$4542
ROM:BE8C                 jsr     sub_C6D7        ; Read NOVRAM
ROM:BE8F                 lda     byte_4AFC
ROM:BE92                 adda    word_4B00
ROM:BE95                 daa
ROM:BE96                 sta     byte_4AFC
ROM:BE99                 lda     byte_4AFB
ROM:BE9C                 adca    word_4AFE+1
ROM:BE9F                 daa
ROM:BEA0                 sta     byte_4AFB
ROM:BEA3                 lda     byte_4AFA
ROM:BEA6                 adca    word_4AFE
ROM:BEA9                 daa
ROM:BEAA                 sta     byte_4AFA
ROM:BEAD                 ldd     word_C7C3
ROM:BEB0                 std     ,y++
ROM:BEB2                 ldd     #$30 ; 0
ROM:BEB5                 std     ,y++
ROM:BEB7                 ldb     #5
ROM:BEB9                 stb     <DPbyte_AD
ROM:BEBB                 lda     byte_4AFA
ROM:BEBE                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:BEC1                 lda     byte_4AFB
ROM:BEC4                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:BEC7                 lda     byte_4AFC
ROM:BECA                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:BECD                 ldd     #$8040
ROM:BED0                 std     ,y++
ROM:BED2                 ldx     #$4554
ROM:BED5                 jsr     sub_C6D4        ; Read NOVRAM
ROM:BED8                 jsr     sub_C087
ROM:BEDB                 ldd     word_C7C9
ROM:BEDE                 std     ,y++
ROM:BEE0                 ldd     #$30 ; 0
ROM:BEE3                 std     ,y++
ROM:BEE5                 ldb     #7
ROM:BEE7                 stb     <DPbyte_AD
ROM:BEE9                 lda     byte_4AFA
ROM:BEEC                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:BEEF                 lda     byte_4AFB
ROM:BEF2                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:BEF5                 lda     byte_4AFC
ROM:BEF8                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:BEFB                 lda     byte_4AFD
ROM:BEFE                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:BF01                 ldd     #$8040
ROM:BF04                 std     ,y++
ROM:BF06                 ldx     #$455C
ROM:BF09                 jsr     sub_C6D4        ; Read NOVRAM
ROM:BF0C                 jsr     sub_C087
ROM:BF0F                 ldd     word_C7CB
ROM:BF12                 std     ,y++
ROM:BF14                 ldd     #$30 ; 0
ROM:BF17                 std     ,y++
ROM:BF19                 ldb     #7
ROM:BF1B                 stb     <DPbyte_AD
ROM:BF1D                 lda     byte_4AFA
ROM:BF20                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:BF23                 lda     byte_4AFB
ROM:BF26                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:BF29                 lda     byte_4AFC
ROM:BF2C                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:BF2F                 lda     byte_4AFD
ROM:BF32                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:BF35                 ldd     #$8040
ROM:BF38                 std     ,y++
ROM:BF3A                 ldx     #$454C
ROM:BF3D                 jsr     sub_C6D4        ; Read NOVRAM
ROM:BF40                 clr     byte_4AFA
ROM:BF43                 lda     byte_4AFB
ROM:BF46                 oraa    byte_4AFC
ROM:BF49                 oraa    byte_4AFD
ROM:BF4C                 beq     loc_BF7C
ROM:BF4E                 ldx     #$4554
ROM:BF51                 ldu     #word_4AFE
ROM:BF54                 jsr     sub_C6D7        ; Read NOVRAM
ROM:BF57                 jsr     sub_C02F
ROM:BF5A                 lda     byte_4AFA
ROM:BF5D                 anda    #$F
ROM:BF5F                 cmpa    #$F
ROM:BF61                 lda     byte_4AFA
ROM:BF64                 bcs     loc_BF69
ROM:BF66                 inc     byte_4AFA
ROM:BF69
ROM:BF69 loc_BF69:
ROM:BF69                 lsra
ROM:BF6A                 lsra
ROM:BF6B                 lsra
ROM:BF6C                 lsra
ROM:BF6D                 adda    byte_4AFA
ROM:BF70                 sta     byte_4AFA
ROM:BF73                 anda    #$F
ROM:BF75                 cmpa    #$F
ROM:BF77                 bcs     loc_BF7C
ROM:BF79                 inc     byte_4AFA
ROM:BF7C
ROM:BF7C loc_BF7C:
ROM:BF7C                 ldd     word_C7C5
ROM:BF7F                 std     ,y++
ROM:BF81                 ldd     #$30 ; 0
ROM:BF84                 std     ,y++
ROM:BF86                 lda     byte_4AFA
ROM:BF89                 jsr     sub_C70E
ROM:BF8C                 ldd     #$8040
ROM:BF8F                 std     ,y++
ROM:BF91                 ldx     #$455C
ROM:BF94                 jsr     sub_C6D4        ; Read NOVRAM
ROM:BF97                 lda     byte_4AFA
ROM:BF9A                 oraa    byte_4AFB
ROM:BF9D                 oraa    byte_4AFC
ROM:BFA0                 oraa    byte_4AFD
ROM:BFA3                 beq     loc_BFB4
ROM:BFA5                 ldx     #$4556
ROM:BFA8                 ldu     #word_4AFE
ROM:BFAB                 jsr     sub_C6D7        ; Read NOVRAM
ROM:BFAE                 clr     word_4B00+1
ROM:BFB1                 jsr     sub_C02F
ROM:BFB4
ROM:BFB4 loc_BFB4:
ROM:BFB4                 ldd     word_C7C7
ROM:BFB7                 std     ,y++
ROM:BFB9                 ldd     #$30 ; 0
ROM:BFBC                 std     ,y++
ROM:BFBE                 clra
ROM:BFBF                 ldb     byte_4AFA
ROM:BFC2                 ldx     #$10
ROM:BFC5                 jsr     sub_7720
ROM:BFC8                 ldb     #1
ROM:BFCA                 stb     <DPbyte_AD
ROM:BFCC                 lda     word_4AD6
ROM:BFCF                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:BFD2                 ldd     #$8040
ROM:BFD5                 std     ,y++
ROM:BFD7                 ldb     #$11
ROM:BFD9                 stb     byte_4AFA
ROM:BFDC                 ldu     #word_C7CD      ; Table for game time history text positions
ROM:BFDF                 stu     byte_4AFC
ROM:BFE2
ROM:BFE2 loc_BFE2:
ROM:BFE2                 ldu     byte_4AFC
ROM:BFE5                 ldd     ,u++
ROM:BFE7                 std     ,y++
ROM:BFE9                 cmpu    #word_C7CD+$14
ROM:BFED                 bcs     loc_BFF4
ROM:BFEF                 ldd     #$1ED4
ROM:BFF2                 bra     loc_BFF7
ROM:BFF4 ; ---------------------------------------------------------------------------
ROM:BFF4
ROM:BFF4 loc_BFF4:
ROM:BFF4                 ldd     #$64 ; d
ROM:BFF7
ROM:BFF7 loc_BFF7:
ROM:BFF7                 std     ,y++
ROM:BFF9                 stu     byte_4AFC
ROM:BFFC                 ldx     #unk_C7A3
ROM:BFFF                 ldb     byte_4AFA
ROM:C002                 lda     b,x
ROM:C004                 jsr     sub_C70E
ROM:C007                 ldd     $3002
ROM:C00A                 std     ,y++
ROM:C00C                 std     ,y++
ROM:C00E                 ldb     #0
ROM:C010                 stb     <DPbyte_AD
ROM:C012                 ldx     #$4564
ROM:C015                 ldb     byte_4AFA
ROM:C018                 aslb
ROM:C019                 lda     b,x
ROM:C01B                 jsr     loc_E7AD
ROM:C01E                 incb
ROM:C01F                 lda     b,x
ROM:C021                 jsr     loc_E7AD
ROM:C024                 ldd     #$8040
ROM:C027                 std     ,y++
ROM:C029                 dec     byte_4AFA
ROM:C02C                 bpl     loc_BFE2
ROM:C02E                 rts
ROM:C02E ; End of function sub_BE20
ROM:C02E
ROM:C02F
ROM:C02F ; =============== S U B R O U T I N E =======================================
ROM:C02F
ROM:C02F
ROM:C02F sub_C02F:
ROM:C02F                 ldx     #word_4AFE
ROM:C032                 lda     #1
ROM:C034                 sta     word_4B02
ROM:C037                 ldb     #3
ROM:C039
ROM:C039 loc_C039:
ROM:C03B                 suba    ,-x
ROM:C03D                 adda    word_4B02
ROM:C040                 daa
ROM:C041                 sta     ,x
ROM:C043                 bcs     loc_C04A
ROM:C045                 clr     word_4B02
ROM:C048                 bra     loc_C04F
ROM:C04A ; ---------------------------------------------------------------------------
ROM:C04A
ROM:C04A loc_C04A:
ROM:C04A                 lda     #1
ROM:C04C                 sta     word_4B02
ROM:C04F
ROM:C04F loc_C04F:
ROM:C04F                 decb
ROM:C050                 bpl     loc_C039
ROM:C052                 ldb     #$FF
ROM:C054
ROM:C054 loc_C054:
ROM:C054                 incb
ROM:C055                 cmpb    #$EF ; n
ROM:C057                 beq     loc_C083
ROM:C059                 lda     word_4B00+1
ROM:C05C                 adda    byte_4AFD
ROM:C05F                 daa
ROM:C060                 sta     word_4B00+1
ROM:C063                 lda     word_4B00
ROM:C066                 adca    byte_4AFC
ROM:C069                 daa
ROM:C06A                 sta     word_4B00
ROM:C06D                 lda     word_4AFE+1
ROM:C070                 adca    byte_4AFB
ROM:C073                 daa
ROM:C074                 sta     word_4AFE+1
ROM:C077                 lda     word_4AFE
ROM:C07A                 adca    byte_4AFA
ROM:C07D                 daa
ROM:C07E                 sta     word_4AFE
ROM:C081                 bcs     loc_C054
ROM:C083
ROM:C083 loc_C083:
ROM:C083                 stb     byte_4AFA
ROM:C086                 rts
ROM:C086 ; End of function sub_C02F
ROM:C086
ROM:C087
ROM:C087 ; =============== S U B R O U T I N E =======================================
ROM:C087
ROM:C087
ROM:C087 sub_C087:
ROM:C087                 bsr     *+2
ROM:C08B                 ldb     #3
ROM:C08D                 ldx     #byte_4AFD
ROM:C090
ROM:C090 loc_C090:
ROM:C090                 lda     ,x
ROM:C092                 adca    ,x
ROM:C094                 daa
ROM:C095                 sta     ,x
ROM:C097                 leax    -1,x
ROM:C099                 decb
ROM:C09A                 bpl     loc_C090
ROM:C09C                 rts
ROM:C09C ; End of function sub_C087
ROM:C09C
ROM:C09D
ROM:C09D ; =============== S U B R O U T I N E =======================================
ROM:C09D
ROM:C09D
ROM:C09D sub_C09D:
ROM:C09D                 lda     #2
ROM:C09F                 jsr     sub_C2C3
ROM:C0A2                 bne     locret_C0FE
ROM:C0A4                 clra
ROM:C0A5                 ldb     >byte_4815
ROM:C0A8                 aslb
ROM:C0A9                 rola
ROM:C0AA                 ldb     >byte_4816
ROM:C0AD                 aslb
ROM:C0AE                 rola
ROM:C0AF                 ldb     >byte_4817
ROM:C0B2                 aslb
ROM:C0B3                 rola
ROM:C0B4                 tfr     a, b
ROM:C0B6                 eorb    word_4AF4
ROM:C0B9                 andb    word_4AF4
ROM:C0BC                 sta     word_4AF4
ROM:C0BF                 ldx     #$4548
ROM:C0C2
ROM:C0C2 loc_C0C2:
ROM:C0C2                 lsrb
ROM:C0C3                 bcc     loc_C0F7
ROM:C0C5                 ldu     #word_4B5F
ROM:C0C8                 jsr     sub_C6D7        ; Read NOVRAM
ROM:C0CB                 lda     word_4B61
ROM:C0CE                 adda    #1
ROM:C0D0                 daa
ROM:C0D1                 sta     word_4B61
ROM:C0D4                 lda     word_4B5F+1
ROM:C0D7                 adca    #0
ROM:C0D9                 daa
ROM:C0DA                 sta     word_4B5F+1
ROM:C0DD                 lda     word_4B5F
ROM:C0E0                 adca    #0
ROM:C0E2                 daa
ROM:C0E3                 sta     word_4B5F
ROM:C0E6                 ldu     #word_4B5F
ROM:C0E9                 jsr     sub_C6F7
ROM:C0EC                 lda     #2
ROM:C0EE                 stb     word_4B61+1
ROM:C0F1                 jsr     sub_C2B3
ROM:C0F4                 ldb     word_4B61+1
ROM:C0F7
ROM:C0F7 loc_C0F7:
ROM:C0F7                 leax    -6,x
ROM:C0F9                 cmpx    #$453C
ROM:C0FC                 bcc     loc_C0C2
ROM:C0FE
ROM:C0FE locret_C0FE:
ROM:C0FE                 rts
ROM:C0FE ; End of function sub_C09D
ROM:C0FE
ROM:C0FF
ROM:C0FF ; =============== S U B R O U T I N E =======================================
ROM:C0FF
ROM:C0FF ; NVRAM something
ROM:C0FF
ROM:C0FF sub_C0FF:
ROM:C0FF                 lda     #2
ROM:C101                 jsr     sub_C413
ROM:C104                 ldx     #$4554
ROM:C107                 jsr     sub_C6D4        ; Read NOVRAM
ROM:C10A                 lda     byte_4AFD
ROM:C10D                 adda    >byte_481A
ROM:C110                 daa
ROM:C111                 sta     byte_4AFD
ROM:C114                 lda     byte_4AFC
ROM:C117                 adca    >byte_4819
ROM:C11A                 daa
ROM:C11B                 sta     byte_4AFC
ROM:C11E                 lda     byte_4AFB
ROM:C121                 adca    #0
ROM:C123                 daa
ROM:C124                 sta     byte_4AFB
ROM:C127                 lda     byte_4AFA
ROM:C12A                 adca    #0
ROM:C12C                 daa
ROM:C12D                 bcs     loc_C132
ROM:C12F                 sta     byte_4AFA
ROM:C132
ROM:C132 loc_C132:
ROM:C132                 lda     #3
ROM:C134                 stb     word_4B02
ROM:C137                 ldu     #byte_4AFA
ROM:C13A                 jsr     loc_C6F9
ROM:C13D                 ldx     #$454E
ROM:C140                 jsr     sub_C6D4        ; Read NOVRAM
ROM:C143                 lda     byte_4AFC
ROM:C146                 adda    #1
ROM:C148                 daa
ROM:C149                 sta     byte_4AFC
ROM:C14C                 lda     byte_4AFB
ROM:C14F                 adca    #0
ROM:C151                 daa
ROM:C152                 sta     byte_4AFB
ROM:C155                 lda     byte_4AFA
ROM:C158                 adca    #0
ROM:C15A                 daa
ROM:C15B                 sta     byte_4AFA
ROM:C15E                 jsr     sub_C6F4
ROM:C161                 ldx     #$4588
ROM:C164                 jsr     sub_C6D4        ; Read NOVRAM
ROM:C167                 lda     byte_4B16
ROM:C16A                 cmpa    byte_4AFA
ROM:C16D                 bls     loc_C17B
ROM:C16F                 sta     byte_4AFA
ROM:C172                 clr     byte_4AFB
ROM:C175                 clr     byte_4AFC
ROM:C178                 jsr     sub_C6F4
ROM:C17B
ROM:C17B loc_C17B:
ROM:C17B                 ldx     #$4586
ROM:C17E                 lda     >byte_4819
ROM:C181                 bne     loc_C19E
ROM:C183                 lda     >byte_481A
ROM:C186                 ldx     #$4564
ROM:C18B                 subb    word_C7A4
ROM:C18E                 stb     byte_4AFA
ROM:C191
ROM:C191 loc_C191:
ROM:C191                 adda    byte_4AFA
ROM:C194                 daa
ROM:C195                 bcc     loc_C19E
ROM:C197                 leax    2,x
ROM:C199                 cmpx    #$4586
ROM:C19C                 bcs     loc_C191
ROM:C19E
ROM:C19E loc_C19E:
ROM:C19E                 lda     1,x
ROM:C1A0                 anda    #$F
ROM:C1A2                 adda    #1
ROM:C1A4                 daa
ROM:C1A5                 sta     1,x
ROM:C1A7                 anda    #$F0 ; =
ROM:C1A9                 beq     loc_C1E9
ROM:C1AB                 lda     ,x
ROM:C1AD                 anda    #$F
ROM:C1AF                 adda    #1
ROM:C1B1                 daa
ROM:C1B2                 sta     ,x
ROM:C1B4                 anda    #$F0 ; =
ROM:C1B6                 beq     loc_C1E9
ROM:C1B8                 ldx     #$4564
ROM:C1BB
ROM:C1BB loc_C1BB:
ROM:C1BB                 lda     ,x
ROM:C1BD                 asla
ROM:C1BE                 asla
ROM:C1BF                 asla
ROM:C1C0                 asla
ROM:C1C1                 sta     byte_4AFA
ROM:C1C4                 lda     1,x
ROM:C1C6                 anda    #$F
ROM:C1C8                 adda    byte_4AFA
ROM:C1CB                 bita    #$10
ROM:C1CD                 beq     loc_C1D1
ROM:C1CF                 suba    #6
ROM:C1D1
ROM:C1D1 loc_C1D1:
ROM:C1D1                 lsra
ROM:C1D2                 sta     1,x
ROM:C1D4                 lsra
ROM:C1D5                 lsra
ROM:C1D6                 lsra
ROM:C1D7                 lsra
ROM:C1D8                 sta     ,x
ROM:C1DA                 leax    2,x
ROM:C1DC                 cmpx    #$4588
ROM:C1DF                 bcs     loc_C1BB
ROM:C1E1                 lda     #5
ROM:C1E3                 sta     ,u
ROM:C1E5                 lda     #0
ROM:C1E7                 sta     1,u
ROM:C1E9
ROM:C1E9 loc_C1E9:                               ; Joystick pitch data structure
ROM:C1E9                 lda     >byte_4866
ROM:C1EC                 sta     byte_4AFA
ROM:C1EF                 lda     >byte_4868
ROM:C1F2                 sta     byte_4AFB
ROM:C1F5                 lda     >byte_486F      ; Joystick roll data structure
ROM:C1F8                 sta     byte_4AFC
ROM:C1FB                 lda     >byte_4871
ROM:C1FE                 sta     byte_4AFD
ROM:C201                 ldx     #$4534
ROM:C204                 ldu     #$4AFA
ROM:C207                 lda     #3
ROM:C209                 jsr     loc_C6F9
ROM:C209 ; End of function sub_C0FF
ROM:C209
ROM:C20C
ROM:C20C ; =============== S U B R O U T I N E =======================================
ROM:C20C
ROM:C20C
ROM:C20C sub_C20C:
ROM:C20C                 ldx     #$455C
ROM:C20F                 jsr     sub_C6D4        ; Read NOVRAM
ROM:C212                 orcc    #$10
ROM:C214                 ldu     byte_4B06
ROM:C217                 ldd     byte_4B04
ROM:C21A                 andcc   #$EF ; n
ROM:C21C                 cmpd    byte_4AFA
ROM:C220                 bhi     loc_C22A
ROM:C222                 bcs     loc_C23D
ROM:C224                 cmpu    byte_4AFC
ROM:C228                 bls     loc_C23D
ROM:C22A
ROM:C22A loc_C22A:
ROM:C22A                 std     byte_4AFA
ROM:C22D                 stu     byte_4AFC
ROM:C230                 ldx     #$455C
ROM:C233                 ldu     #$4AFA
ROM:C236                 lda     #3
ROM:C238                 jsr     loc_C6F9
ROM:C23B                 bra     loc_C249
ROM:C23D ; ---------------------------------------------------------------------------
ROM:C23D
ROM:C23D loc_C23D:
ROM:C23D                 ldd     byte_4AFA
ROM:C240                 std     byte_4B04
ROM:C243                 ldd     byte_4AFC
ROM:C246                 std     byte_4B06
ROM:C249
ROM:C249 loc_C249:
ROM:C249                 lda     #2
ROM:C24B                 jmp     sub_C2B3
ROM:C24B ; End of function sub_C20C
ROM:C24B
ROM:C24E
ROM:C24E ; =============== S U B R O U T I N E =======================================
ROM:C24E
ROM:C24E
ROM:C24E sub_C24E:
ROM:C24E                 cmpa    #3
ROM:C250                 bcc     sub_C2B3
ROM:C252                 cmpa    #2
ROM:C254                 bcs     loc_C27F
ROM:C256                 ldx     #word_C7B7
ROM:C259                 ldb     a,x
ROM:C25B                 subb    #2
ROM:C25D                 stb     byte_4AFB
ROM:C260                 ldb     #$45 ; E
ROM:C262                 stb     byte_4AFA
ROM:C265                 ldx     #unk_C7B6
ROM:C268                 ldb     a,x
ROM:C26A                 ldx     #(loc_C706+1)
ROM:C26D                 abx
ROM:C26E                 tfr     x, u
ROM:C270                 ldx     #byte_4500      ; NOVRAM
ROM:C273                 abx
ROM:C274
ROM:C274 loc_C274:
ROM:C274                 ldb     ,u+
ROM:C276                 stb     ,x+
ROM:C278                 cmpx    byte_4AFA
ROM:C27B                 bcs     loc_C274
ROM:C27D                 bra     sub_C2B3
ROM:C27F ; ---------------------------------------------------------------------------
ROM:C27F
ROM:C27F loc_C27F:
ROM:C27F                 tfr     a, b
ROM:C281                 tsta
ROM:C282                 bne     loc_C29B
ROM:C284                 lda     <Opt1_Shad
ROM:C286                 sta     byte_4AFA
ROM:C289                 lda     <Opt0_Shad
ROM:C28B                 sta     byte_4AFB
ROM:C28E                 lda     #0
ROM:C290                 sta     byte_4AFC
ROM:C293                 ldx     #byte_4500      ; NOVRAM
ROM:C296                 jsr     sub_C6F4
ROM:C299                 bra     loc_C2B1
ROM:C29B ; ---------------------------------------------------------------------------
ROM:C29B
ROM:C29B loc_C29B:
ROM:C29B                 ldx     #byte_4508
ROM:C29E                 ldu     #word_CC98      ; High scores init table
ROM:C2A1                 lda     #$B
ROM:C2A3                 jsr     loc_C6F9
ROM:C2A6                 ldx     #byte_4520
ROM:C2A9                 ldu     #word_CC7A      ; High score names
ROM:C2AC                 lda     #8
ROM:C2AE                 jsr     loc_C6F9
ROM:C2B1
ROM:C2B1 loc_C2B1:
ROM:C2B1                 tfr     b, a
ROM:C2B1 ; End of function sub_C24E
ROM:C2B1
ROM:C2B3
ROM:C2B3 ; =============== S U B R O U T I N E =======================================
ROM:C2B3
ROM:C2B3
ROM:C2B3 sub_C2B3:
ROM:C2B3                 jsr     sub_C2C3
ROM:C2B6                 beq     locret_C2C2
ROM:C2B8                 stb     1,x
ROM:C2BA                 lsrb
ROM:C2BB                 lsrb
ROM:C2BC                 lsrb
ROM:C2BD                 lsrb
ROM:C2BE                 stb     ,x
ROM:C2C0                 ldb     #$FF
ROM:C2C2
ROM:C2C2 locret_C2C2:
ROM:C2C2                 rts
ROM:C2C2 ; End of function sub_C2B3
ROM:C2C2
ROM:C2C3
ROM:C2C3 ; =============== S U B R O U T I N E =======================================
ROM:C2C3
ROM:C2C3
ROM:C2C3 sub_C2C3:
ROM:C2C3                 leas    -3,s
ROM:C2C5                 ldx     #word_C7B7
ROM:C2C8                 ldb     a,x
ROM:C2CA                 ldx     #unk_C7B6
ROM:C2CD                 subb    a,x
ROM:C2CF                 subb    #2
ROM:C2D1                 stb     ,s
ROM:C2D3                 ldb     a,x
ROM:C2D5                 ldx     #byte_4500      ; NOVRAM
ROM:C2D8                 abx
ROM:C2D9                 ldb     #0
ROM:C2DB                 stb     1,s
ROM:C2DD                 orcc    #1
ROM:C2DF
ROM:C2DF loc_C2DF:
ROM:C2DF                 ldb     ,x+
ROM:C2E1                 andb    #$F
ROM:C2E3                 adcb    1,s
ROM:C2E5                 stb     1,s
ROM:C2E7                 dec     ,s
ROM:C2E9                 bne     loc_C2DF
ROM:C2EB                 adcb    #0
ROM:C2ED                 stb     1,s
ROM:C2EF                 ldb     ,x
ROM:C2F1                 aslb
ROM:C2F2                 aslb
ROM:C2F3                 aslb
ROM:C2F4                 aslb
ROM:C2F5                 stb     2,s
ROM:C2F7                 ldb     1,x
ROM:C2F9                 andb    #$F
ROM:C2FB                 addb    2,s
ROM:C2FD                 stb     2,s
ROM:C2FF                 ldb     1,s
ROM:C301                 cmpb    2,s
ROM:C303                 leas    3,s
ROM:C305                 rts
ROM:C305 ; End of function sub_C2C3
ROM:C305
ROM:C306
ROM:C306 ; =============== S U B R O U T I N E =======================================
ROM:C306
ROM:C306
ROM:C306 sub_C306:
ROM:C306                 ldx     #byte_4500      ; NOVRAM
ROM:C309                 ldu     #Scratch_RAM_start
ROM:C30C
ROM:C30C loc_C30C:
ROM:C30C                 ldd     ,x++
ROM:C30E                 std     ,u++
ROM:C310                 cmpx    #byte_4500+$100 ; NOVRAM
ROM:C313                 bcs     loc_C30C
ROM:C315                 lda     #$FF
ROM:C317                 sta     NVRecall
ROM:C31A                 ldx     #$100
ROM:C31D
ROM:C31D loc_C31D:
ROM:C31D                 sta     WDCLR
ROM:C320                 leax    -1,x
ROM:C322                 bne     loc_C31D
ROM:C324                 lda     #0
ROM:C326                 sta     NVRecall
ROM:C329                 ldx     #$A000
ROM:C32C
ROM:C32C loc_C32C:
ROM:C32C                 sta     WDCLR
ROM:C32F                 leax    -1,x
ROM:C331                 bne     loc_C32C
ROM:C333                 ldx     #byte_4500      ; NOVRAM
ROM:C336                 ldy     #Scratch_RAM_start
ROM:C33A
ROM:C33A loc_C33A:
ROM:C33A                 ldu     ,x
ROM:C33C                 ldd     ,y
ROM:C33E                 stu     ,y++
ROM:C340                 std     ,x++
ROM:C342                 cmpx    #byte_4500+$100 ; NOVRAM
ROM:C345                 bcs     loc_C33A
ROM:C347                 lda     #3
ROM:C349                 jsr     sub_C2C3
ROM:C34C                 beq     loc_C37C
ROM:C34E                 lda     #0
ROM:C350                 jsr     sub_C2C3
ROM:C353                 beq     loc_C36C
ROM:C355                 jsr     sub_C3EE
ROM:C358                 lda     #3
ROM:C35A                 jsr     sub_C3EE
ROM:C35D                 jsr     sub_C2C3
ROM:C360                 beq     loc_C37C
ROM:C362                 lda     #0
ROM:C364                 jsr     sub_C2C3
ROM:C367                 beq     loc_C36C
ROM:C369
ROM:C369 loc_C369:
ROM:C369                 jsr     sub_C24E
ROM:C36C
ROM:C36C loc_C36C:
ROM:C36C                 ldx     #unk_C7B6
ROM:C36F                 ldb     >3,x
ROM:C373                 ldx     #byte_4500      ; NOVRAM
ROM:C376                 abx
ROM:C377                 ldu     #byte_4500      ; NOVRAM
ROM:C37A                 bra     loc_C3B7
ROM:C37C ; ---------------------------------------------------------------------------
ROM:C37C
ROM:C37C loc_C37C:
ROM:C37C                 lda     #0
ROM:C37E                 jsr     sub_C2C3
ROM:C381                 bne     loc_C3A7
ROM:C383                 lda     byte_4596
ROM:C386                 anda    #$F
ROM:C388                 sta     byte_4AFA
ROM:C38B                 lda     byte_4506
ROM:C38E                 anda    #$F
ROM:C390                 cmpa    byte_4AFA
ROM:C393                 bne     loc_C3A5
ROM:C395                 lda     byte_4597
ROM:C398                 anda    #$F
ROM:C39A                 sta     byte_4AFA
ROM:C39D                 lda     byte_4507
ROM:C3A0                 anda    #$F
ROM:C3A2                 cmpa    byte_4AFA
ROM:C3A5
ROM:C3A5 loc_C3A5:
ROM:C3A5                 beq     loc_C3C6
ROM:C3A7
ROM:C3A7 loc_C3A7:
ROM:C3A7                 ldx     #unk_C7B6
ROM:C3AA                 ldb     >3,x
ROM:C3AE                 ldx     #byte_4500      ; NOVRAM
ROM:C3B1                 abx
ROM:C3B2                 tfr     x, u
ROM:C3B4                 ldx     #byte_4500      ; NOVRAM
ROM:C3B7
ROM:C3B7 loc_C3B7:
ROM:C3B7                 ldb     word_C7B7
ROM:C3BA                 stb     word_4B02
ROM:C3BD
ROM:C3BD loc_C3BD:
ROM:C3BD                 ldb     ,u+
ROM:C3BF                 stb     ,x+
ROM:C3C1                 dec     word_4B02
ROM:C3C4                 bne     loc_C3BD
ROM:C3C6
ROM:C3C6 loc_C3C6:
ROM:C3C6                 lda     #2
ROM:C3C8
ROM:C3C8 loc_C3C8:
ROM:C3C8                 jsr     sub_C2C3
ROM:C3CB                 beq     loc_C3D8
ROM:C3CD                 jsr     sub_C3EE
ROM:C3D0                 jsr     sub_C2C3
ROM:C3D3                 beq     loc_C3D8
ROM:C3D5                 jsr     sub_C24E
ROM:C3D8
ROM:C3D8 loc_C3D8:
ROM:C3D8                 deca
ROM:C3D9                 bne     loc_C3C8
ROM:C3DB                 ldx     #byte_455C
ROM:C3DE                 jsr     sub_C6D4        ; Read NOVRAM
ROM:C3E1                 ldd     byte_4AFA
ROM:C3E4                 std     byte_4B04
ROM:C3E7                 ldd     byte_4AFC
ROM:C3EA                 std     byte_4B06
ROM:C3ED                 rts
ROM:C3ED ; End of function sub_C306
ROM:C3ED
ROM:C3EE
ROM:C3EE ; =============== S U B R O U T I N E =======================================
ROM:C3EE
ROM:C3EE
ROM:C3EE sub_C3EE:
ROM:C3EE                 ldx     #word_C7B7
ROM:C3F1                 ldb     a,x
ROM:C3F3                 ldx     #byte_4500      ; NOVRAM
ROM:C3F6                 abx
ROM:C3F7                 stx     byte_4AFA
ROM:C3FA                 ldx     #unk_C7B6
ROM:C3FD                 ldb     a,x
ROM:C3FF                 ldx     #Scratch_RAM_start
ROM:C402                 abx
ROM:C403                 tfr     x, u
ROM:C405                 ldx     #byte_4500      ; NOVRAM
ROM:C408                 abx
ROM:C409
ROM:C409 loc_C409:
ROM:C409                 ldb     ,u+
ROM:C40B                 stb     ,x+
ROM:C40D                 cmpx    byte_4AFA
ROM:C410                 bcs     loc_C409
ROM:C412                 rts
ROM:C412 ; End of function sub_C3EE
ROM:C412
ROM:C413
ROM:C413 ; =============== S U B R O U T I N E =======================================
ROM:C413
ROM:C413
ROM:C413 sub_C413:
ROM:C413                 jsr     sub_C2C3
ROM:C416                 beq     locret_C44F
ROM:C418                 sta     byte_4AFA
ROM:C41B                 ldx     #byte_4500      ; NOVRAM
ROM:C41E                 ldu     #Scratch_RAM_start
ROM:C421
ROM:C421 loc_C421:
ROM:C421                 ldd     ,x++
ROM:C423                 std     ,u++
ROM:C425                 cmpx    #byte_4500+$100 ; NOVRAM
ROM:C428                 bcs     loc_C421
ROM:C42A                 jsr     sub_C6B8
ROM:C42D                 ldx     #byte_4500      ; NOVRAM
ROM:C430                 ldy     #Scratch_RAM_start
ROM:C434
ROM:C434 loc_C434:
ROM:C434                 ldu     ,x
ROM:C436                 ldd     ,y
ROM:C438                 stu     ,y++
ROM:C43A                 std     ,x++
ROM:C43C                 cmpx    #byte_4500+$100 ; NOVRAM
ROM:C43F                 bcs     loc_C434
ROM:C441                 lda     byte_4AFA
ROM:C444                 jsr     sub_C3EE
ROM:C447                 jsr     sub_C2C3
ROM:C44A                 beq     locret_C44F
ROM:C44C                 jsr     sub_C24E
ROM:C44F
ROM:C44F locret_C44F:
ROM:C44F                 rts
ROM:C44F ; End of function sub_C413
ROM:C44F
ROM:C450
ROM:C450 ; =============== S U B R O U T I N E =======================================
ROM:C450
ROM:C450
ROM:C450 sub_C450:
ROM:C450                 lda     #$65 ; e
ROM:C452
ROM:C452 loc_C452:                               ; Called from select screen, attract screen 1 + 3 when writing text
ROM:C452                 jsr     sub_D8DF
ROM:C455                 inca
ROM:C456                 cmpa    #$74 ; t
ROM:C458                 bcs     loc_C452
ROM:C45A                 lda     #$D4 ; +
ROM:C45C                 jsr     sub_D8DF        ; Called from select screen, attract screen 1 + 3 when writing text
ROM:C45F                 ldd     #$6280
ROM:C462                 std     ,y++
ROM:C464                 lda     #$B
ROM:C466                 sta     word_4AFE
ROM:C469
ROM:C469 loc_C469:
ROM:C469                 lda     word_4AFE
ROM:C46C                 jsr     sub_C5A4
ROM:C46F                 dec     word_4AFE
ROM:C472                 bpl     loc_C469
ROM:C474                 jsr     sub_C690
ROM:C477                 lda     byte_4598
ROM:C47A                 anda    #$F
ROM:C47C                 beq     locret_C4EA
ROM:C47E                 ldb     #$D5 ; +
ROM:C480                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:C483                 lda     <DPbyte_AC
ROM:C485                 anda    #$40 ; @
ROM:C487                 beq     locret_C4EA
ROM:C489                 lda     byte_4598
ROM:C48C                 anda    #8
ROM:C48E                 beq     loc_C498
ROM:C490                 lda     #1
ROM:C492                 jsr     sub_C24E
ROM:C495                 jsr     sub_CC18
ROM:C498
ROM:C498 loc_C498:
ROM:C498                 lda     byte_4598
ROM:C49B                 anda    #4
ROM:C49D                 beq     loc_C4B1
ROM:C49F                 ldx     #byte_454E
ROM:C4A2                 ldd     #0
ROM:C4A5
ROM:C4A5 loc_C4A5:
ROM:C4A5                 std     ,x++
ROM:C4A7                 cmpx    #byte_458E
ROM:C4AA                 bcs     loc_C4A5
ROM:C4AC                 lda     #2
ROM:C4AE                 jsr     sub_C2B3
ROM:C4B1
ROM:C4B1 loc_C4B1:
ROM:C4B1                 lda     byte_4598
ROM:C4B4                 anda    #2
ROM:C4B6                 beq     loc_C4DA
ROM:C4B8                 lda     #0
ROM:C4BA                 jsr     sub_C24E
ROM:C4BD                 ldx     #unk_C7B6
ROM:C4C0                 ldb     >3,x
ROM:C4C4                 ldx     #byte_4500      ; NOVRAM
ROM:C4C7                 abx
ROM:C4C8                 ldu     #byte_4500      ; NOVRAM
ROM:C4CB                 ldb     word_C7B7
ROM:C4CE                 stb     word_4B02
ROM:C4D1
ROM:C4D1 loc_C4D1:
ROM:C4D1                 ldb     ,u+
ROM:C4D3                 stb     ,x+
ROM:C4D5                 dec     word_4B02
ROM:C4D8                 bne     loc_C4D1
ROM:C4DA
ROM:C4DA loc_C4DA:
ROM:C4DA                 lda     byte_4598
ROM:C4DD                 anda    #1
ROM:C4DF                 beq     loc_C4E4
ROM:C4E1                 jsr     sub_C5F2
ROM:C4E4
ROM:C4E4 loc_C4E4:
ROM:C4E4                 ldd     #0
ROM:C4E7                 std     byte_4598
ROM:C4EA
ROM:C4EA locret_C4EA:
ROM:C4EA                 rts
ROM:C4EA ; End of function sub_C450
ROM:C4EA
ROM:C4EB
ROM:C4EB ; =============== S U B R O U T I N E =======================================
ROM:C4EB
ROM:C4EB
ROM:C4EB sub_C4EB:
ROM:C4EB                 ldb     <DPbyte_43      ; Game over/insert coins timer
ROM:C4ED                 andb    #$F
ROM:C4EF                 bne     loc_C519
ROM:C4F1                 ldb     >word_487F
ROM:C4F4                 cmpb    #$D0 ; -
ROM:C4F6                 bcc     loc_C519
ROM:C4F8                 cmpb    #$30 ; 0
ROM:C4FA                 bls     loc_C519
ROM:C4FC                 tstb
ROM:C4FD                 bmi     loc_C50C
ROM:C4FF                 ldb     word_4AF6
ROM:C502                 decb
ROM:C503                 bpl     loc_C507
ROM:C505                 ldb     #$B
ROM:C507
ROM:C507 loc_C507:
ROM:C507                 stb     word_4AF6
ROM:C50A                 bra     loc_C519
ROM:C50C ; ---------------------------------------------------------------------------
ROM:C50C
ROM:C50C loc_C50C:
ROM:C50C                 ldb     word_4AF6
ROM:C50F                 incb
ROM:C510                 cmpb    #$B
ROM:C512                 bls     loc_C516
ROM:C514                 ldb     #0
ROM:C516
ROM:C516 loc_C516:
ROM:C516                 stb     word_4AF6
ROM:C519
ROM:C519 loc_C519:
ROM:C519                 ldx     #byte_C797
ROM:C51C                 lda     word_4AF6
ROM:C51F                 ldb     a,x
ROM:C521                 stb     byte_4AFC
ROM:C524                 lsrb
ROM:C525                 lsrb
ROM:C526                 lsrb
ROM:C527                 andb    #3
ROM:C529                 ldx     #byte_C737
ROM:C52C                 lda     b,x
ROM:C52E                 sta     byte_4AFA
ROM:C531                 ldb     <DPbyte_AC
ROM:C535                 beq     locret_C5A3
ROM:C537                 ldb     word_4AF4+1
ROM:C53A                 incb
ROM:C53B                 cmpb    byte_4AFA
ROM:C53E                 bls     loc_C542
ROM:C540                 ldb     #0
ROM:C542
ROM:C542 loc_C542:
ROM:C542                 sta     word_4AF4+1
ROM:C545                 lda     byte_4AFC
ROM:C548                 rola
ROM:C549                 rola
ROM:C54A                 rola
ROM:C54B                 rola
ROM:C54C                 anda    #7
ROM:C54E
ROM:C54E loc_C54E:
ROM:C54E                 deca
ROM:C54F                 bmi     loc_C557
ROM:C551                 aslb
ROM:C552                 asl     byte_4AFA
ROM:C555                 bra     loc_C54E
ROM:C557 ; ---------------------------------------------------------------------------
ROM:C557
ROM:C557 loc_C557:
ROM:C557                 lda     byte_4AFC
ROM:C55A                 anda    #7
ROM:C55C                 asla
ROM:C55D                 ldx     #byte_4590
ROM:C560                 leax    a,x
ROM:C562                 lda     ,x
ROM:C564                 asla
ROM:C565                 asla
ROM:C566                 asla
ROM:C567                 asla
ROM:C568                 sta     byte_4AFB
ROM:C56B                 lda     1,x
ROM:C56D                 anda    #$F
ROM:C56F                 adda    byte_4AFB
ROM:C572                 sta     byte_4AFB
ROM:C575                 eorb    byte_4AFB
ROM:C578                 andb    byte_4AFA
ROM:C57B                 eorb    byte_4AFB
ROM:C57E                 stb     1,x
ROM:C580                 lsrb
ROM:C581                 lsrb
ROM:C582                 lsrb
ROM:C583                 lsrb
ROM:C584                 stb     ,x
ROM:C586                 lda     #3
ROM:C588                 jsr     sub_C2B3
ROM:C58B                 ldx     #byte_4500      ; NOVRAM
ROM:C58E                 ldu     #Scratch_RAM_start
ROM:C591
ROM:C591 loc_C591:
ROM:C591                 ldd     ,x++
ROM:C593                 std     ,u++
ROM:C595                 cmpx    #byte_4500+$FF  ; NOVRAM
ROM:C598                 bcs     loc_C591
ROM:C59A                 jsr     loc_C3A7
ROM:C59D                 lda     word_4AF6
ROM:C5A0                 jsr     sub_C5A4
ROM:C5A3
ROM:C5A3 locret_C5A3:
ROM:C5A3                 rts
ROM:C5A3 ; End of function sub_C4EB
ROM:C5A3
ROM:C5A4
ROM:C5A4 ; =============== S U B R O U T I N E =======================================
ROM:C5A4
ROM:C5A4
ROM:C5A4 sub_C5A4:
ROM:C5A4                 ldx     #byte_C797
ROM:C5A7                 ldb     a,x
ROM:C5A9                 stb     byte_4AFA
ROM:C5AC                 andb    #7
ROM:C5AE                 ldx     #byte_4590
ROM:C5B1                 aslb
ROM:C5B2                 abx
ROM:C5B3                 ldb     byte_4AFA
ROM:C5B6                 lsrb
ROM:C5B7                 lsrb
ROM:C5B8                 lsrb
ROM:C5B9                 stb     byte_4AFA
ROM:C5BC                 andb    #3
ROM:C5BE                 ldu     #byte_C737
ROM:C5C1                 leau    b,u
ROM:C5C3                 ldb     byte_4AFA
ROM:C5C6                 lsrb
ROM:C5C7                 lsrb
ROM:C5C8                 stb     byte_4AFA
ROM:C5CB                 ldb     ,x
ROM:C5CD                 aslb
ROM:C5CE                 aslb
ROM:C5CF                 aslb
ROM:C5D0                 aslb
ROM:C5D1                 stb     byte_4AFB
ROM:C5D4                 ldb     1,x
ROM:C5D6                 andb    #$F
ROM:C5D8                 addb    byte_4AFB
ROM:C5DB
ROM:C5DB loc_C5DB:
ROM:C5DB                 dec     byte_4AFA
ROM:C5DE                 bmi     loc_C5E3
ROM:C5E0                 lsrb
ROM:C5E1                 bra     loc_C5DB
ROM:C5E3 ; ---------------------------------------------------------------------------
ROM:C5E3
ROM:C5E3 loc_C5E3:
ROM:C5E3                 andb    ,u
ROM:C5E5                 stb     word_4AF4+1
ROM:C5E8                 ldx     #byte_C7F1
ROM:C5EB                 leax    a,x
ROM:C5ED                 addb    ,x
ROM:C5EF                 jmp     sub_E7D3
ROM:C5EF ; End of function sub_C5A4
ROM:C5EF
ROM:C5F2
ROM:C5F2 ; =============== S U B R O U T I N E =======================================
ROM:C5F2
ROM:C5F2
ROM:C5F2 sub_C5F2:
ROM:C5F2
ROM:C5F2 ; FUNCTION CHUNK AT ROM:C65B SIZE 0000001F BYTES
ROM:C5F2
ROM:C5F2                 ldx     #byte_4500      ; NOVRAM
ROM:C5F5                 ldu     #Scratch_RAM_start
ROM:C5F8
ROM:C5F8 loc_C5F8:
ROM:C5F8                 ldd     ,x++
ROM:C5FA                 std     ,u++
ROM:C5FC                 cmpx    #byte_4500+$100 ; NOVRAM
ROM:C5FF                 bcs     loc_C5F8
ROM:C601                 ldx     #byte_4500      ; NOVRAM
ROM:C604
ROM:C604 loc_C604:
ROM:C604                 lda     ,x
ROM:C606                 coma
ROM:C607                 sta     ,x+
ROM:C609                 cmpx    #byte_4500+$100 ; NOVRAM
ROM:C60C                 bcs     loc_C604
ROM:C60E                 sta     NSTORE
ROM:C611                 jsr     sub_C688
ROM:C614                 jsr     sub_C67A
ROM:C617                 jsr     sub_C6B8
ROM:C61A                 ldx     #byte_4500      ; NOVRAM
ROM:C61D
ROM:C61D loc_C61D:
ROM:C61D                 lda     ,x
ROM:C61F                 coma
ROM:C620                 sta     ,x+
ROM:C622                 cmpx    #byte_4500+$100 ; NOVRAM
ROM:C625                 bcs     loc_C61D
ROM:C627                 sta     NSTORE
ROM:C62A                 jsr     sub_C688
ROM:C62D                 jsr     sub_C641
ROM:C630                 bne     loc_C65B
ROM:C632                 jsr     sub_C67A
ROM:C635                 jsr     sub_C6B8
ROM:C638                 jsr     sub_C641
ROM:C63B                 beq     locret_C640
ROM:C63D                 jmp     loc_C65B
ROM:C640 ; ---------------------------------------------------------------------------
ROM:C640
ROM:C640 locret_C640:
ROM:C640                 rts
ROM:C640 ; End of function sub_C5F2
ROM:C640
ROM:C641
ROM:C641 ; =============== S U B R O U T I N E =======================================
ROM:C641
ROM:C641
ROM:C641 sub_C641:
ROM:C641                 ldx     #byte_4500      ; NOVRAM
ROM:C644                 ldu     #Scratch_RAM_start
ROM:C647
ROM:C647 loc_C647:
ROM:C647                 lda     ,x+
ROM:C649                 eora    ,u+
ROM:C64B                 anda    #$F
ROM:C64D                 bne     locret_C65A
ROM:C64F                 cmpx    #byte_4500+$100 ; NOVRAM
ROM:C652                 bcs     loc_C647
ROM:C654                 lda     #1
ROM:C656                 sta     word_4AF6+1
ROM:C659                 clra
ROM:C65A
ROM:C65A locret_C65A:
ROM:C65A                 rts
ROM:C65A ; End of function sub_C641
ROM:C65A
ROM:C65B ; ---------------------------------------------------------------------------
ROM:C65B ; START OF FUNCTION CHUNK FOR sub_C5F2
ROM:C65B
ROM:C65B loc_C65B:
ROM:C65B                 leax    -1,x
ROM:C65D                 tfr     x, d
ROM:C65F                 std     word_4AF8
ROM:C662                 lda     #$FF
ROM:C664                 sta     word_4AF6+1
ROM:C667                 ldx     #byte_4500      ; NOVRAM
ROM:C66A                 ldu     #Scratch_RAM_start
ROM:C66D
ROM:C66D loc_C66D:
ROM:C66D                 ldd     ,u++
ROM:C66F                 std     ,x++
ROM:C671                 cmpx    #byte_4500+$100 ; NOVRAM
ROM:C674                 bcs     loc_C66D
ROM:C676                 tst     word_4AF6+1
ROM:C679                 rts
ROM:C679 ; END OF FUNCTION CHUNK FOR sub_C5F2
ROM:C67A
ROM:C67A ; =============== S U B R O U T I N E =======================================
ROM:C67A
ROM:C67A
ROM:C67A sub_C67A:
ROM:C67A                 ldx     #byte_4500      ; NOVRAM
ROM:C67D                 ldd     #0
ROM:C680
ROM:C680 loc_C680:
ROM:C680                 std     ,x++
ROM:C682                 cmpx    #byte_4500+$100 ; NOVRAM
ROM:C685                 bcs     loc_C680
ROM:C687                 rts
ROM:C687 ; End of function sub_C67A
ROM:C687
ROM:C688
ROM:C688 ; =============== S U B R O U T I N E =======================================
ROM:C688
ROM:C688
ROM:C688 sub_C688:
ROM:C688                 ldx     #$7D0
ROM:C68B
ROM:C68B loc_C68B:
ROM:C68B                 leax    -1,x
ROM:C68D                 bne     loc_C68B
ROM:C68F                 rts
ROM:C68F ; End of function sub_C688
ROM:C68F
ROM:C690
ROM:C690 ; =============== S U B R O U T I N E =======================================
ROM:C690
ROM:C690
ROM:C690 sub_C690:
ROM:C690                 lda     word_4AF6+1
ROM:C693                 beq     locret_C6B7
ROM:C695                 cmpa    #1
ROM:C697                 bne     loc_C69D
ROM:C69B                 bra     loc_C6B4
ROM:C69D ; ---------------------------------------------------------------------------
ROM:C69D
ROM:C69D loc_C69D:
ROM:C69D                 ldd     #$1F6A
ROM:C6A0                 std     ,y++
ROM:C6A2                 ldd     #$1A4
ROM:C6A5                 std     ,y++
ROM:C6A7                 lda     word_4AF8+1
ROM:C6AA                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:C6AD                 ldd     #$8040
ROM:C6B0                 std     ,y++
ROM:C6B4
ROM:C6B4 loc_C6B4:                               ; Print text string from pointer table
ROM:C6B4                 jsr     sub_E7C7
ROM:C6B7
ROM:C6B7 locret_C6B7:
ROM:C6B7                 rts
ROM:C6B7 ; End of function sub_C690
ROM:C6B7
ROM:C6B8
ROM:C6B8 ; =============== S U B R O U T I N E =======================================
ROM:C6B8
ROM:C6B8
ROM:C6B8 sub_C6B8:
ROM:C6B8                 lda     #$FF
ROM:C6BA                 sta     NVRecall
ROM:C6BD                 jsr     sub_6005
ROM:C6C0                 lda     #0
ROM:C6C2                 sta     NVRecall
ROM:C6C5                 ldu     #0
ROM:C6C8
ROM:C6C8 loc_C6C8:
ROM:C6C8                 jsr     sub_6005
ROM:C6CB                 leau    1,u
ROM:C6CD                 cmpu    #$20 ;  
ROM:C6D1                 bcs     loc_C6C8
ROM:C6D3                 rts
ROM:C6D3 ; End of function sub_C6B8
ROM:C6D3
ROM:C6D4
ROM:C6D4 ; =============== S U B R O U T I N E =======================================
ROM:C6D4
ROM:C6D4 ; Read NOVRAM
ROM:C6D4
ROM:C6D4 sub_C6D4:
ROM:C6D4                 ldu     #$4AFA
ROM:C6D4 ; End of function sub_C6D4
ROM:C6D4
ROM:C6D7
ROM:C6D7 ; =============== S U B R O U T I N E =======================================
ROM:C6D7
ROM:C6D7 ; Read NOVRAM
ROM:C6D7
ROM:C6D7 sub_C6D7:
ROM:C6D7                 lda     #3
ROM:C6D9
ROM:C6D9 loc_C6D9:
ROM:C6D9                 sta     word_4B02
ROM:C6DC
ROM:C6DC loc_C6DC:
ROM:C6DC                 lda     ,x+
ROM:C6DE                 asla
ROM:C6DF                 asla
ROM:C6E0                 asla
ROM:C6E1                 asla
ROM:C6E2                 sta     ,u
ROM:C6E4                 lda     ,x+
ROM:C6E6                 anda    #$F
ROM:C6E8                 adda    ,u
ROM:C6EA                 sta     ,u+
ROM:C6EC                 dec     word_4B02
ROM:C6EF                 bpl     loc_C6DC
ROM:C6F1                 leax    -8,x
ROM:C6F3                 rts
ROM:C6F3 ; End of function sub_C6D7
ROM:C6F3
ROM:C6F4
ROM:C6F4 ; =============== S U B R O U T I N E =======================================
ROM:C6F4
ROM:C6F4
ROM:C6F4 sub_C6F4:
ROM:C6F4                 ldu     #byte_4AFA
ROM:C6F4 ; End of function sub_C6F4
ROM:C6F4
ROM:C6F7
ROM:C6F7 ; =============== S U B R O U T I N E =======================================
ROM:C6F7
ROM:C6F7
ROM:C6F7 sub_C6F7:
ROM:C6F7                 lda     #2
ROM:C6F9
ROM:C6F9 loc_C6F9:
ROM:C6F9                 sta     word_4B02
ROM:C6FC
ROM:C6FC loc_C6FC:
ROM:C6FC                 lda     ,u+
ROM:C6FE                 sta     1,x
ROM:C700                 lsra
ROM:C701                 lsra
ROM:C702                 lsra
ROM:C703                 lsra
ROM:C704                 sta     ,x++
ROM:C706
ROM:C706 loc_C706:
ROM:C706                 dec     word_4B02
ROM:C709                 bpl     loc_C6FC
ROM:C70B                 leax    -6,x
ROM:C70D                 rts
ROM:C70D ; End of function sub_C6F7
ROM:C70D
ROM:C70E
ROM:C70E ; =============== S U B R O U T I N E =======================================
ROM:C70E
ROM:C70E
ROM:C70E sub_C70E:
ROM:C70E                 ldb     #0
ROM:C710                 stb     <DPbyte_AD
ROM:C712                 tfr     a, b
ROM:C714                 lsra
ROM:C715                 lsra
ROM:C716                 lsra
ROM:C717                 lsra
ROM:C718                 cmpa    #$A
ROM:C71A                 bcs     loc_C71E
ROM:C71C                 lda     #9
ROM:C71E
ROM:C71E loc_C71E:
ROM:C71E                 jsr     loc_E7AD
ROM:C721                 lda     #$B8 ; +
ROM:C723                 sta     ,y+
ROM:C727                 sta     ,y+
ROM:C729                 clra
ROM:C72A                 andb    #$F
ROM:C72C                 beq     loc_C734
ROM:C72E
ROM:C72E loc_C72E:
ROM:C72E                 adda    #4
ROM:C730                 daa
ROM:C731                 decb
ROM:C732                 bne     loc_C72E
ROM:C734
ROM:C734 loc_C734:                               ; Display BCD numbers
ROM:C734                 jmp     Display_Vect_BCD
ROM:C734 ; End of function sub_C70E
ROM:C734
ROM:C734 ; ---------------------------------------------------------------------------
ROM:C7FD
ROM:C7FD ; =============== S U B R O U T I N E =======================================
ROM:C7FD
ROM:C7FD ; Display high scores
ROM:C7FD
ROM:C7FD sub_C7FD:
ROM:C7FD                 tst     word_4AEC
ROM:C800                 bmi     loc_C811
ROM:C802                 lda     #$3E ; >
ROM:C804                 jsr     sub_D8DF        ; Called from select screen, attract screen 1 + 3 when writing text
ROM:C807                 ldd     #$7200
ROM:C80A                 std     ,y++
ROM:C80C                 ldd     #word_CA64      ; High scores text position table
ROM:C80F                 bra     loc_C81E
ROM:C811 ; ---------------------------------------------------------------------------
ROM:C811
ROM:C811 loc_C811:
ROM:C811                 lda     #$3F ; ?
ROM:C813                 jsr     sub_D8DF        ; Called from select screen, attract screen 1 + 3 when writing text
ROM:C816                 ldd     #$7140          ; High scores text size
ROM:C819                 std     ,y++
ROM:C81B                 ldd     #word_CA78
ROM:C81E
ROM:C81E loc_C81E:
ROM:C81E                 std     word_4AF1
ROM:C821                 lda     #0
ROM:C823                 sta     word_4AEA
ROM:C826
ROM:C826 loc_C826:
ROM:C826                 ldu     word_4AF1
ROM:C829                 ldd     ,u
ROM:C82B                 std     ,y++
ROM:C82D                 ldd     #$1F80
ROM:C830                 std     ,y++
ROM:C832                 ldb     word_4AEA
ROM:C835                 aslb
ROM:C836                 addb    word_4AEA
ROM:C839                 ldx     #byte_4AB6
ROM:C83C                 abx
ROM:C83D                 cmpx    word_4AEC
ROM:C840                 bne     loc_C847
ROM:C842                 ldd     #$6780
ROM:C845                 bra     loc_C84A
ROM:C847 ; ---------------------------------------------------------------------------
ROM:C847
ROM:C847 loc_C847:                               ; Attract text colour/intensity for fading
ROM:C847                 ldd     byte_4B10
ROM:C84A
ROM:C84A loc_C84A:
ROM:C84A                 std     ,y++
ROM:C84C                 std     <DPbyte_1
ROM:C84E                 ldu     #$3016
ROM:C851                 tst     word_4AEC
ROM:C854                 bmi     loc_C871
ROM:C856                 lda     word_4AEE
ROM:C859                 cmpa    #0
ROM:C85B                 bne     loc_C86D
ROM:C85D                 lda     word_4843
ROM:C860                 anda    #1
ROM:C862                 bne     loc_C869
ROM:C864                 ldd     byte_4B10       ; Attract text colour/intensity for fading
ROM:C867                 bra     loc_C86B
ROM:C869 ; ---------------------------------------------------------------------------
ROM:C869
ROM:C869 loc_C869:
ROM:C869                 ldd     <DPbyte_1
ROM:C86B
ROM:C86B loc_C86B:
ROM:C86B                 bra     loc_C86F
ROM:C86D ; ---------------------------------------------------------------------------
ROM:C86D
ROM:C86D loc_C86D:
ROM:C86D                 ldd     <DPbyte_1
ROM:C86F
ROM:C86F loc_C86F:
ROM:C86F                 std     ,y++
ROM:C871
ROM:C871 loc_C871:
ROM:C871                 lda     ,x+
ROM:C873                 bne     loc_C884
ROM:C875                 tst     word_4AEC
ROM:C878                 bmi     loc_C87F
ROM:C87A                 ldd     $3054
ROM:C87D                 bra     loc_C882
ROM:C87F ; ---------------------------------------------------------------------------
ROM:C87F
ROM:C87F loc_C87F:
ROM:C87F                 ldd     $3002
ROM:C882
ROM:C882 loc_C882:
ROM:C882                 bra     loc_C887
ROM:C884 ; ---------------------------------------------------------------------------
ROM:C884
ROM:C884 loc_C884:
ROM:C884                 asla
ROM:C885                 ldd     a,u
ROM:C887
ROM:C887 loc_C887:
ROM:C887                 std     ,y++
ROM:C889                 tst     word_4AEC
ROM:C88C                 bmi     loc_C8A9
ROM:C88E                 lda     word_4AEE
ROM:C891                 cmpa    #1
ROM:C893                 bne     loc_C8A5
ROM:C895                 lda     >word_4843
ROM:C898                 anda    #1
ROM:C89A                 bne     loc_C8A1
ROM:C89C                 ldd     byte_4B10       ; Attract text colour/intensity for fading
ROM:C89F                 bra     loc_C8A3
ROM:C8A1 ; ---------------------------------------------------------------------------
ROM:C8A1
ROM:C8A1 loc_C8A1:
ROM:C8A1                 ldd     <DPbyte_1
ROM:C8A3
ROM:C8A3 loc_C8A3:
ROM:C8A3                 bra     loc_C8A7
ROM:C8A5 ; ---------------------------------------------------------------------------
ROM:C8A5
ROM:C8A5 loc_C8A5:
ROM:C8A5                 ldd     <DPbyte_1
ROM:C8A7
ROM:C8A7 loc_C8A7:
ROM:C8A7                 std     ,y++
ROM:C8A9
ROM:C8A9 loc_C8A9:
ROM:C8A9                 lda     ,x+
ROM:C8AB                 bne     loc_C8BC
ROM:C8AD                 tst     word_4AEC
ROM:C8B0                 bmi     loc_C8B7
ROM:C8B2                 ldd     $3054
ROM:C8B5                 bra     loc_C8BA
ROM:C8B7 ; ---------------------------------------------------------------------------
ROM:C8B7
ROM:C8B7 loc_C8B7:
ROM:C8B7                 ldd     $3002
ROM:C8BA
ROM:C8BA loc_C8BA:
ROM:C8BA                 bra     loc_C8BF
ROM:C8BC ; ---------------------------------------------------------------------------
ROM:C8BC
ROM:C8BC loc_C8BC:
ROM:C8BC                 asla
ROM:C8BD                 ldd     a,u
ROM:C8BF
ROM:C8BF loc_C8BF:
ROM:C8BF                 std     ,y++
ROM:C8C1                 tst     word_4AEC
ROM:C8C4                 bmi     loc_C8E1
ROM:C8C6                 lda     word_4AEE
ROM:C8C9                 cmpa    #2
ROM:C8CB                 bne     loc_C8DD
ROM:C8CD                 lda     >word_4843
ROM:C8D0                 anda    #1
ROM:C8D2                 bne     loc_C8D9
ROM:C8D4                 ldd     byte_4B10       ; Attract text colour/intensity for fading
ROM:C8D7                 bra     loc_C8DB
ROM:C8D9 ; ---------------------------------------------------------------------------
ROM:C8D9
ROM:C8D9 loc_C8D9:
ROM:C8D9                 ldd     <DPbyte_1
ROM:C8DB
ROM:C8DB loc_C8DB:
ROM:C8DB                 bra     loc_C8DF
ROM:C8DD ; ---------------------------------------------------------------------------
ROM:C8DD
ROM:C8DD loc_C8DD:
ROM:C8DD                 ldd     <DPbyte_1
ROM:C8DF
ROM:C8DF loc_C8DF:
ROM:C8DF                 std     ,y++
ROM:C8E1
ROM:C8E1 loc_C8E1:
ROM:C8E1                 lda     ,x+
ROM:C8E3                 bne     loc_C8F4
ROM:C8E5                 tst     word_4AEC
ROM:C8E8                 bmi     loc_C8EF
ROM:C8EA                 ldd     $3054
ROM:C8ED                 bra     loc_C8F2
ROM:C8EF ; ---------------------------------------------------------------------------
ROM:C8EF
ROM:C8EF loc_C8EF:
ROM:C8EF                 ldd     $3002
ROM:C8F2
ROM:C8F2 loc_C8F2:
ROM:C8F2                 bra     loc_C8F7
ROM:C8F4 ; ---------------------------------------------------------------------------
ROM:C8F4
ROM:C8F4 loc_C8F4:
ROM:C8F4                 asla
ROM:C8F5                 ldd     a,u
ROM:C8F7
ROM:C8F7 loc_C8F7:
ROM:C8F7                 std     ,y++
ROM:C8F9                 ldd     <DPbyte_1
ROM:C8FB                 std     ,y++
ROM:C8FD                 ldd     #$8040
ROM:C900                 std     ,y++
ROM:C902                 ldu     word_4AF1
ROM:C905                 ldd     ,u
ROM:C907                 std     ,y++
ROM:C909                 ldd     #$1F38
ROM:C90C                 std     ,y++
ROM:C90E                 lda     word_4AEA
ROM:C911                 inca
ROM:C912                 cmpa    #$A
ROM:C914                 bcs     loc_C918
ROM:C916                 lda     #$10
ROM:C918
ROM:C918 loc_C918:
ROM:C918                 ldb     #1
ROM:C91A                 stb     <DPbyte_AD
ROM:C91C                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:C91F                 ldd     #$B8DC
ROM:C922                 std     ,y++
ROM:C924                 ldd     #$8040
ROM:C927                 std     ,y++
ROM:C929                 ldb     word_4AEA
ROM:C92C                 aslb
ROM:C92D                 aslb
ROM:C92E                 ldx     #byte_4A8E      ; High scores RAM
ROM:C931                 abx
ROM:C932                 ldu     word_4AF1
ROM:C935                 ldd     ,u++
ROM:C937                 std     ,y++
ROM:C939                 ldd     #$1FF0
ROM:C93C                 std     ,y++
ROM:C93E                 stu     word_4AF1
ROM:C941                 ldb     #6
ROM:C943                 stb     <DPbyte_AD
ROM:C945                 jsr     sub_E764
ROM:C948                 leax    4,x
ROM:C94A                 ldd     #$8040
ROM:C94D                 std     ,y++
ROM:C94F                 inc     word_4AEA
ROM:C952                 lda     word_4AEA
ROM:C955                 cmpa    #$A
ROM:C957                 lbcs    loc_C826
ROM:C95B                 ldd     #$7200
ROM:C95E                 std     ,y++
ROM:C960                 ldd     word_4AEC
ROM:C963                 bpl     loc_C966
ROM:C965                 rts
ROM:C966 ; ---------------------------------------------------------------------------
ROM:C966
ROM:C966 loc_C966:
ROM:C966                 ldd     #$6480
ROM:C969                 std     ,y++
ROM:C96B                 ldx     #(word_CBA6+2)
ROM:C96E                 ldu     #$3018
ROM:C971
ROM:C971 loc_C971:
ROM:C971                 ldd     2,x
ROM:C973                 anda    #$1F
ROM:C975                 std     ,y++
ROM:C977                 ldd     ,x
ROM:C979                 anda    #$1F
ROM:C97B                 std     ,y++
ROM:C97D                 ldd     ,u++
ROM:C97F                 std     ,y++
ROM:C981                 ldd     #$8040
ROM:C984                 std     ,y++
ROM:C986                 leax    4,x
ROM:C988                 cmpx    #word_CC10
ROM:C98B                 bcs     loc_C971
ROM:C98D                 ldd     word_CBA6
ROM:C990                 anda    #$1F
ROM:C992                 std     ,y++
ROM:C994                 ldd     word_CBA4
ROM:C997                 anda    #$1F
ROM:C999                 std     ,y++
ROM:C99B                 ldd     $3054
ROM:C99E                 std     ,y++
ROM:C9A0                 ldd     #$7200
ROM:C9A3                 std     ,y++
ROM:C9A5                 ldd     #$8040
ROM:C9A8                 std     ,y++
ROM:C9AA                 ldb     word_4AEE+1
ROM:C9AD                 cmpb    #$1B
ROM:C9AF                 bne     loc_C9B6
ROM:C9B1                 ldd     #$6750
ROM:C9B4                 bra     loc_C9B9
ROM:C9B6 ; ---------------------------------------------------------------------------
ROM:C9B6
ROM:C9B6 loc_C9B6:
ROM:C9B6                 ldd     #$6450
ROM:C9B9
ROM:C9B9 loc_C9B9:
ROM:C9B9                 std     ,y++
ROM:C9BB                 ldd     2,x
ROM:C9BD                 anda    #$1F
ROM:C9BF                 std     ,y++
ROM:C9C1                 ldd     ,x
ROM:C9C3                 subd    #8
ROM:C9C6                 anda    #$1F
ROM:C9C8                 std     ,y++
ROM:C9CA                 ldd     #$71C0
ROM:C9CD                 std     ,y++
ROM:C9CF                 ldd     $303A
ROM:C9D2                 std     ,y++
ROM:C9D4                 ldd     $3040
ROM:C9D7                 std     ,y++
ROM:C9D9                 ldd     $301A
ROM:C9DC                 std     ,y++
ROM:C9DE                 ldd     #$7200
ROM:C9E1                 std     ,y++
ROM:C9E3                 ldd     #$8040
ROM:C9E6                 std     ,y++
ROM:C9E8                 ldb     word_4AEE+1
ROM:C9EB                 cmpb    #$1C
ROM:C9ED                 bne     loc_C9F4
ROM:C9EF                 ldd     #$6750
ROM:C9F2                 bra     loc_C9F7
ROM:C9F4 ; ---------------------------------------------------------------------------
ROM:C9F4
ROM:C9F4 loc_C9F4:
ROM:C9F4                 ldd     #$6450
ROM:C9F7
ROM:C9F7 loc_C9F7:
ROM:C9F7                 std     ,y++
ROM:C9F9                 ldd     6,x
ROM:C9FB                 anda    #$1F
ROM:C9FD                 std     ,y++
ROM:C9FF                 ldd     4,x
ROM:CA01                 subd    #8
ROM:CA04                 anda    #$1F
ROM:CA06                 std     ,y++
ROM:CA08                 ldd     #$71C0
ROM:CA0B                 std     ,y++
ROM:CA0D                 ldd     $3020
ROM:CA10                 std     ,y++
ROM:CA12                 ldd     $3032
ROM:CA15                 std     ,y++
ROM:CA17                 ldd     $301E
ROM:CA1A                 std     ,y++
ROM:CA1C                 ldd     #$7200
ROM:CA1F                 std     ,y++
ROM:CA21                 ldd     #$8040
ROM:CA24                 std     ,y++
ROM:CA26                 ldd     #$6780
ROM:CA29                 std     ,y++
ROM:CA2B                 ldb     word_4AEE+1
ROM:CA2E                 cmpb    #$1B
ROM:CA30                 bcc     loc_CA5B
ROM:CA32                 aslb
ROM:CA33                 aslb
ROM:CA34                 ldx     #word_CBA4
ROM:CA37                 abx
ROM:CA38                 ldd     2,x
ROM:CA3A                 anda    #$1F
ROM:CA3C                 std     ,y++
ROM:CA3E                 ldd     ,x
ROM:CA40                 anda    #$1F
ROM:CA42                 std     ,y++
ROM:CA44                 ldb     word_4AEE+1
ROM:CA47                 bne     loc_CA4E
ROM:CA49                 ldd     $3054
ROM:CA4C                 bra     loc_CA54
ROM:CA4E ; ---------------------------------------------------------------------------
ROM:CA4E
ROM:CA4E loc_CA4E:
ROM:CA4E                 aslb
ROM:CA4F                 ldx     #$3016
ROM:CA52                 ldd     b,x
ROM:CA54
ROM:CA54 loc_CA54:
ROM:CA54                 std     ,y++
ROM:CA56                 ldd     #$8040          ; Vector CNTR instruction
ROM:CA59                 std     ,y++
ROM:CA5B
ROM:CA5B loc_CA5B:
ROM:CA5B                 ldd     #$6680
ROM:CA5E                 std     ,y++
ROM:CA60                 jsr     sub_B6CC
ROM:CA63                 rts
ROM:CA63 ; End of function sub_C7FD
ROM:CA63
ROM:CA63 ; ---------------------------------------------------------------------------
ROM:CA8C
ROM:CA8C ; =============== S U B R O U T I N E =======================================
ROM:CA8C
ROM:CA8C ; Score
ROM:CA8C
ROM:CA8C sub_CA8C:
ROM:CA8C                 ldx     #byte_4A8E      ; High scores RAM
ROM:CA8F
ROM:CA8F loc_CA8F:                               ; Score millions
ROM:CA8F                 ldd     <DPbyte_5C
ROM:CA91                 subd    ,x
ROM:CA93                 bhi     loc_CAA5
ROM:CA95                 bne     loc_CA9D
ROM:CA97                 ldd     <DPbyte_5E      ; Score thousands
ROM:CA99                 subd    2,x
ROM:CA9B                 bcc     loc_CAA5
ROM:CA9D
ROM:CA9D loc_CA9D:
ROM:CA9D                 leax    4,x
ROM:CA9F                 cmpx    #byte_4AB6
ROM:CAA2                 bcs     loc_CA8F
ROM:CAA4                 rts
ROM:CAA5 ; ---------------------------------------------------------------------------
ROM:CAA5
ROM:CAA5 loc_CAA5:
ROM:CAA5                 jsr     sub_CAB7
ROM:CAA8                 lda     #0
ROM:CAAA                 sta     word_4AEE
ROM:CAAD                 ldd     #0
ROM:CAB0                 std     word_4AEE+1
ROM:CAB3                 ldx     #byte_4AB6
ROM:CAB6                 rts
ROM:CAB6 ; End of function sub_CA8C
ROM:CAB6
ROM:CAB7
ROM:CAB7 ; =============== S U B R O U T I N E =======================================
ROM:CAB7
ROM:CAB7
ROM:CAB7 sub_CAB7:
ROM:CAB7                 stx     word_4AEC
ROM:CABA                 ldu     #byte_4AD1
ROM:CABD                 ldx     #byte_4AB2
ROM:CAC0                 cmpx    word_4AEC
ROM:CAC3                 beq     loc_CADE
ROM:CAC5
ROM:CAC5 loc_CAC5:
ROM:CAC5                 ldd     -4,x
ROM:CAC7                 std     ,x
ROM:CAC9                 ldd     -2,x
ROM:CACB                 std     2,x
ROM:CACD                 ldd     -3,u
ROM:CACF                 std     ,u
ROM:CAD1                 lda     -1,u
ROM:CAD3                 sta     2,u
ROM:CAD5                 leau    -3,u
ROM:CAD7                 leax    -4,x
ROM:CAD9                 cmpx    word_4AEC
ROM:CADC                 bhi     loc_CAC5
ROM:CADE
ROM:CADE loc_CADE:
ROM:CADE                 stu     word_4AEC
ROM:CAE1                 lda     #0
ROM:CAE3                 sta     ,u
ROM:CAE5                 ldd     #0
ROM:CAE8                 std     1,u
ROM:CAEA                 ldd     <DPbyte_5C      ; Score millions
ROM:CAEC                 std     ,x
ROM:CAEE                 ldd     <DPbyte_5E      ; Score thousands
ROM:CAF0                 std     2,x
ROM:CAF2                 rts
ROM:CAF2 ; End of function sub_CAB7
ROM:CAF2
ROM:CAF3
ROM:CAF3 ; =============== S U B R O U T I N E =======================================
ROM:CAF3
ROM:CAF3
ROM:CAF3 sub_CAF3:
ROM:CAF3                 ldx     word_4AEC
ROM:CAF6                 ldb     word_4AEE
ROM:CAF9                 abx
ROM:CAFA                 tfr     x, u
ROM:CAFC                 lda     word_4AEE
ROM:CAFF                 cmpa    #3
ROM:CB01                 bcs     loc_CB08
ROM:CB03                 ldx     #word_CC10
ROM:CB06                 bra     loc_CB0B
ROM:CB08 ; ---------------------------------------------------------------------------
ROM:CB08
ROM:CB08 loc_CB08:
ROM:CB08                 ldx     #word_CBA4
ROM:CB0B
ROM:CB0B loc_CB0B:
ROM:CB0B                 ldd     >byte_4879
ROM:CB0E                 subd    #8
ROM:CB11                 subd    ,x
ROM:CB13                 tsta
ROM:CB14                 bpl     loc_CB1A
ROM:CB16                 coma
ROM:CB17                 negb
ROM:CB18                 sbca    #$FF
ROM:CB1A
ROM:CB1A loc_CB1A:
ROM:CB1A                 std     <DPbyte_1
ROM:CB1C                 cmpd    #$18
ROM:CB20                 bcc     loc_CB49
ROM:CB22                 ldd     >word_487B
ROM:CB25                 addd    #$FF8C
ROM:CB28                 subd    2,x
ROM:CB2A                 tsta
ROM:CB2B                 bpl     loc_CB31
ROM:CB2D                 coma
ROM:CB2E                 negb
ROM:CB2F                 sbca    #$FF
ROM:CB31
ROM:CB31 loc_CB31:
ROM:CB31                 cmpd    #$18
ROM:CB35                 bcc     loc_CB49
ROM:CB37                 addd    <DPbyte_1
ROM:CB39                 cmpd    #$20 ;  
ROM:CB3D                 bcc     loc_CB49
ROM:CB3F                 tfr     x, d
ROM:CB41                 subd    #word_CBA4
ROM:CB44                 lsrb
ROM:CB45                 lsrb
ROM:CB46                 stb     word_4AEE+1
ROM:CB49
ROM:CB49 loc_CB49:
ROM:CB49                 leax    4,x
ROM:CB4B                 cmpx    #word_CC10+8
ROM:CB4E                 bcs     loc_CB0B
ROM:CB50                 lda     word_4AEE+1
ROM:CB53                 cmpa    #$1B
ROM:CB55                 bcc     loc_CB59
ROM:CB57                 sta     ,u
ROM:CB59
ROM:CB59 loc_CB59:
ROM:CB59                 lda     <DPbyte_AC
ROM:CB5B                 anda    #$F0 ; =
ROM:CB5D                 beq     locret_CBA3
ROM:CB5F                 lda     word_4AEE+1
ROM:CB62                 cmpa    #$1B
ROM:CB64                 bne     loc_CB82
ROM:CB66                 lda     word_4AEE
ROM:CB69                 cmpa    #2
ROM:CB6B                 bhi     loc_CB71
ROM:CB6D                 lda     #0
ROM:CB6F                 sta     ,u
ROM:CB71
ROM:CB71 loc_CB71:
ROM:CB71                 lda     word_4AEE
ROM:CB74                 beq     loc_CB7D
ROM:CB76                 dec     word_4AEE
ROM:CB79                 lda     #0
ROM:CB7B                 sta     -1,u
ROM:CB7D
ROM:CB7D loc_CB7D:
ROM:CB7D                 jsr     Sound_34
ROM:CB80                 bra     locret_CBA3
ROM:CB82 ; ---------------------------------------------------------------------------
ROM:CB82
ROM:CB82 loc_CB82:
ROM:CB82                 cmpa    #$1C
ROM:CB84                 bne     loc_CB91
ROM:CB86                 ldd     #$FFFF
ROM:CB89                 std     word_4AEC
ROM:CB8C                 jsr     Sound_2D
ROM:CB8F                 bra     locret_CBA3
ROM:CB91 ; ---------------------------------------------------------------------------
ROM:CB91
ROM:CB91 loc_CB91:
ROM:CB91                 inc     word_4AEE
ROM:CB94                 lda     word_4AEE
ROM:CB97                 cmpa    #3
ROM:CB99                 bcs     loc_CBA0
ROM:CB9B                 lda     #$1C
ROM:CB9D                 sta     word_4AEE+1
ROM:CBA0
ROM:CBA0 loc_CBA0:
ROM:CBA0                 jsr     Sound_3A
ROM:CBA3
ROM:CBA3 locret_CBA3:
ROM:CBA3                 rts
ROM:CBA3 ; End of function sub_CAF3
ROM:CBA3
ROM:CBA3 ; ---------------------------------------------------------------------------
ROM:CC18
ROM:CC18 ; =============== S U B R O U T I N E =======================================
ROM:CC18
ROM:CC18
ROM:CC18 sub_CC18:
ROM:CC18                 jsr     sub_CC5B
ROM:CC1B                 lda     #1
ROM:CC1D                 jsr     sub_C2C3
ROM:CC20                 bne     loc_CC38
ROM:CC22                 ldu     #byte_4AB6
ROM:CC25                 ldx     #byte_4520
ROM:CC28                 lda     #8
ROM:CC2A                 jsr     loc_C6D9
ROM:CC2D                 ldu     #byte_4A8E      ; High scores RAM
ROM:CC30                 ldx     #byte_4508
ROM:CC33                 lda     #$B
ROM:CC35                 jsr     loc_C6D9
ROM:CC38
ROM:CC38 loc_CC38:
ROM:CC38                 ldx     #byte_4AB6
ROM:CC3B
ROM:CC3B loc_CC3B:
ROM:CC3B                 lda     ,x+
ROM:CC3D                 cmpa    #$1B
ROM:CC3F                 bcc     sub_CC5B
ROM:CC41                 cmpx    #word_4AD4
ROM:CC44                 bcs     loc_CC3B
ROM:CC46                 ldx     #byte_4A8E      ; High scores RAM
ROM:CC49
ROM:CC49 loc_CC49:
ROM:CC49                 lda     ,x+
ROM:CC4D                 bcc     sub_CC5B
ROM:CC4F                 anda    #$F
ROM:CC51                 cmpa    #$A
ROM:CC53                 bcc     sub_CC5B
ROM:CC55                 cmpx    #byte_4AB6
ROM:CC58                 bcs     loc_CC49
ROM:CC5A                 rts
ROM:CC5A ; End of function sub_CC18
ROM:CC5A
ROM:CC5B
ROM:CC5B ; =============== S U B R O U T I N E =======================================
ROM:CC5B
ROM:CC5B
ROM:CC5B sub_CC5B:
ROM:CC5B                 ldx     #byte_4AB6
ROM:CC5E                 ldu     #word_CC7A      ; High score names
ROM:CC61
ROM:CC61 loc_CC61:
ROM:CC61                 ldd     ,u++
ROM:CC63                 std     ,x++
ROM:CC65                 cmpx    #word_4AD4
ROM:CC68                 bcs     loc_CC61
ROM:CC6A                 ldx     #byte_4A8E      ; High scores RAM
ROM:CC6D                 ldu     #word_CC98      ; High scores init table
ROM:CC70
ROM:CC70 loc_CC70:
ROM:CC70                 ldd     ,u++
ROM:CC72                 std     ,x++
ROM:CC74                 cmpx    #byte_4AB6
ROM:CC77                 bcs     loc_CC70
ROM:CC79                 rts
ROM:CC79 ; End of function sub_CC5B
ROM:CC79
ROM:CC79 ; ---------------------------------------------------------------------------
ROM:CCC0
ROM:CCC0 ; =============== S U B R O U T I N E =======================================
ROM:CCC0
ROM:CCC0 ; Initialise object?
ROM:CCC0
ROM:CCC0 sub_CCC0:
ROM:CCC0                 orcc    #1
ROM:CCC2                 ror     MPAGE
ROM:CCC5                 jsr     $670D
ROM:CCC8                 clr     MPAGE
ROM:CCCB                 rts
ROM:CCCB ; End of function sub_CCC0
ROM:CCCB
ROM:CCCC
ROM:CCCC ; =============== S U B R O U T I N E =======================================
ROM:CCCC
ROM:CCCC ; Copy XYZ data to math RAM
ROM:CCCC
ROM:CCCC sub_CCCC:
ROM:CCCC                 orcc    #1
ROM:CCCE                 ror     MPAGE
ROM:CCD1                 jsr     $6724
ROM:CCD4                 clr     MPAGE
ROM:CCD7                 rts
ROM:CCD7 ; End of function sub_CCCC
ROM:CCD7
ROM:CCD8
ROM:CCD8 ; =============== S U B R O U T I N E =======================================
ROM:CCD8
ROM:CCD8 ; Copy object 3D data to math ram
ROM:CCD8
ROM:CCD8 sub_CCD8:
ROM:CCD8                 orcc    #1
ROM:CCDA                 ror     MPAGE
ROM:CCDD                 jsr     $6726
ROM:CCE0                 clr     MPAGE
ROM:CCE3                 rts
ROM:CCE3 ; End of function sub_CCD8
ROM:CCE3
ROM:CCE4
ROM:CCE4 ; =============== S U B R O U T I N E =======================================
ROM:CCE4
ROM:CCE4
ROM:CCE4 sub_CCE4:
ROM:CCE4                 orcc    #1
ROM:CCE6                 ror     MPAGE           ; Change memory page
ROM:CCE9                 jsr     $6761
ROM:CCEC                 clr     MPAGE
ROM:CCEF                 rts
ROM:CCEF ; End of function sub_CCE4
ROM:CCEF
ROM:CCF0
ROM:CCF0 ; =============== S U B R O U T I N E =======================================
ROM:CCF0
ROM:CCF0 ; Get divider result and multiply by Math result Z, insert VCTR instruction
ROM:CCF0
ROM:CCF0 sub_CCF0:
ROM:CCF0                 orcc    #1
ROM:CCF2                 ror     MPAGE
ROM:CCF5                 jsr     $6761
ROM:CCF8                 clr     MPAGE
ROM:CCFB                 rts
ROM:CCFB ; End of function sub_CCF0
ROM:CCFB
ROM:CCFC
ROM:CCFC ; =============== S U B R O U T I N E =======================================
ROM:CCFC
ROM:CCFC ; Trench floor lines calcs
ROM:CCFC
ROM:CCFC sub_CCFC:
ROM:CCFC                 orcc    #1
ROM:CCFE                 ror     MPAGE
ROM:CD01                 jsr     $6782
ROM:CD04                 clr     MPAGE
ROM:CD07                 rts
ROM:CD07 ; End of function sub_CCFC
ROM:CD07
ROM:CD08
ROM:CD08 ; =============== S U B R O U T I N E =======================================
ROM:CD08
ROM:CD08 ; Trench side vertical lines calcs
ROM:CD08
ROM:CD08 sub_CD08:
ROM:CD08                 orcc    #1
ROM:CD0A                 ror     MPAGE
ROM:CD0D                 jsr     $67AA
ROM:CD10                 clr     MPAGE
ROM:CD13                 rts
ROM:CD13 ; End of function sub_CD08
ROM:CD13
ROM:CD14
ROM:CD14 ; =============== S U B R O U T I N E =======================================
ROM:CD14
ROM:CD14 ; Math program 0x50. Matrix Multiply - Transposed
ROM:CD14 ; Then do perspective division?
ROM:CD14
ROM:CD14 sub_CD14:
ROM:CD14                 orcc    #1
ROM:CD16                 ror     MPAGE
ROM:CD19                 jsr     $67D2
ROM:CD1C                 clr     MPAGE
ROM:CD1F                 rts
ROM:CD1F ; End of function sub_CD14
ROM:CD1F
ROM:CD20
ROM:CD20 ; =============== S U B R O U T I N E =======================================
ROM:CD20
ROM:CD20 ; Do 3D object transform using Matrix 1
ROM:CD20
ROM:CD20 sub_CD20:
ROM:CD20                 orcc    #1
ROM:CD22                 ror     MPAGE
ROM:CD25                 jsr     $67D4
ROM:CD28                 clr     MPAGE
ROM:CD2B                 rts
ROM:CD2B ; End of function sub_CD20
ROM:CD2B
ROM:CD2C
ROM:CD2C ; =============== S U B R O U T I N E =======================================
ROM:CD2C
ROM:CD2C ; Format vectors for ties, and tower/bunker explosions
ROM:CD2C
ROM:CD2C sub_CD2C:
ROM:CD2C                 orcc    #1
ROM:CD2E                 ror     MPAGE
ROM:CD31                 jsr     $6819
ROM:CD34                 clr     MPAGE
ROM:CD37                 rts
ROM:CD37 ; End of function sub_CD2C
ROM:CD37
ROM:CD38
ROM:CD38 ; =============== S U B R O U T I N E =======================================
ROM:CD38
ROM:CD38 ; Trench left side turret calcs
ROM:CD38
ROM:CD38 sub_CD38:
ROM:CD38                 orcc    #1
ROM:CD3A                 ror     MPAGE
ROM:CD3D                 jsr     $6864
ROM:CD40                 clr     MPAGE
ROM:CD43                 rts
ROM:CD43 ; End of function sub_CD38
ROM:CD43
ROM:CD44
ROM:CD44 ; =============== S U B R O U T I N E =======================================
ROM:CD44
ROM:CD44 ; Trench right side turret calcs
ROM:CD44
ROM:CD44 sub_CD44:
ROM:CD44                 orcc    #1
ROM:CD46                 ror     MPAGE
ROM:CD49                 jsr     $68C7
ROM:CD4C                 clr     MPAGE
ROM:CD4F                 rts
ROM:CD4F ; End of function sub_CD44
ROM:CD4F
ROM:CD50
ROM:CD50 ; =============== S U B R O U T I N E =======================================
ROM:CD50
ROM:CD50
ROM:CD50 sub_CD50:
ROM:CD50                 orcc    #1              ; Called during towers
ROM:CD52                 ror     MPAGE
ROM:CD55                 jsr     $692D
ROM:CD58                 clr     MPAGE
ROM:CD5B                 rts
ROM:CD5B ; End of function sub_CD50
ROM:CD5B
ROM:CD5C
ROM:CD5C ; =============== S U B R O U T I N E =======================================
ROM:CD5C
ROM:CD5C ; Trench calcs
ROM:CD5C
ROM:CD5C sub_CD5C:
ROM:CD5C                 orcc    #1              ; Called during trench start
ROM:CD5E                 ror     MPAGE
ROM:CD61                 jsr     $6978
ROM:CD64                 clr     MPAGE
ROM:CD67                 rts
ROM:CD67 ; End of function sub_CD5C
ROM:CD67
ROM:CD68
ROM:CD68 ; =============== S U B R O U T I N E =======================================
ROM:CD68
ROM:CD68
ROM:CD68 sub_CD68:
ROM:CD68                 orcc    #1              ; Called during towers
ROM:CD6A                 ror     MPAGE
ROM:CD6D                 jsr     $6A0C
ROM:CD70                 clr     MPAGE
ROM:CD73                 rts
ROM:CD73 ; End of function sub_CD68
ROM:CD73
ROM:CD74
ROM:CD74 ; =============== S U B R O U T I N E =======================================
ROM:CD74
ROM:CD74 ; Function select for an object
ROM:CD74
ROM:CD74 sub_CD74:
ROM:CD74                 orcc    #1
ROM:CD76                 ror     MPAGE
ROM:CD79                 jsr     $6AA0
ROM:CD7C                 clr     MPAGE
ROM:CD7F                 rts
ROM:CD7F ; End of function sub_CD74
ROM:CD7F
ROM:CD80
ROM:CD80 ; =============== S U B R O U T I N E =======================================
ROM:CD80
ROM:CD80 ; Starfield
ROM:CD80
ROM:CD80 sub_CD80:
ROM:CD80                 orcc    #1              ; Starfield attract screen 1 + 3 + 4
ROM:CD82                 ror     MPAGE
ROM:CD85                 jsr     $7D9A
ROM:CD88                 clr     MPAGE
ROM:CD8B                 rts
ROM:CD8B ; End of function sub_CD80
ROM:CD8B
ROM:CD8C
ROM:CD8C ; =============== S U B R O U T I N E =======================================
ROM:CD8C
ROM:CD8C ; Towers surface dots
ROM:CD8C
ROM:CD8C sub_CD8C:
ROM:CD8C                 orcc    #1
ROM:CD8E                 ror     MPAGE
ROM:CD91                 jsr     $7EAF
ROM:CD94                 clr     MPAGE
ROM:CD97                 rts
ROM:CD97 ; End of function sub_CD8C
ROM:CD97
ROM:CD98
ROM:CD98 ; =============== S U B R O U T I N E =======================================
ROM:CD98
ROM:CD98 ; Unused
ROM:CD98
ROM:CD98 sub_CD98:
ROM:CD98                 asra
ROM:CD99                 rorb
ROM:CD9A                 asra
ROM:CD9B                 rorb
ROM:CD9B ; End of function sub_CD98
ROM:CD9B
ROM:CD9C
ROM:CD9C ; =============== S U B R O U T I N E =======================================
ROM:CD9C
ROM:CD9C ; Shift D register right
ROM:CD9C
ROM:CD9C Shift_D_R_6:
ROM:CD9C                 asra
ROM:CD9D                 rorb
ROM:CD9D ; End of function Shift_D_R_6
ROM:CD9D
ROM:CD9E
ROM:CD9E ; =============== S U B R O U T I N E =======================================
ROM:CD9E
ROM:CD9E ; Shift D register right
ROM:CD9E
ROM:CD9E Shift_D_R_5:
ROM:CD9E                 asra
ROM:CD9F                 rorb
ROM:CDA0
ROM:CDA0 Shift_D_R_4:
ROM:CDA0                 asra
ROM:CDA1                 rorb
ROM:CDA2
ROM:CDA2 Shift_D_R_3:
ROM:CDA2                 asra
ROM:CDA3                 rorb
ROM:CDA4                 asra
ROM:CDA5                 rorb
ROM:CDA6                 asra
ROM:CDA7                 rorb
ROM:CDA8                 rts
ROM:CDA8 ; End of function Shift_D_R_5
ROM:CDA8
ROM:CDA9
ROM:CDA9 ; =============== S U B R O U T I N E =======================================
ROM:CDA9
ROM:CDA9 ; Shift D register left
ROM:CDA9
ROM:CDA9 sub_CDA9:
ROM:CDA9                 aslb
ROM:CDAA                 rola
ROM:CDAA ; End of function sub_CDA9
ROM:CDAA
ROM:CDAB
ROM:CDAB ; =============== S U B R O U T I N E =======================================
ROM:CDAB
ROM:CDAB
ROM:CDAB Shift_D_L_7:
ROM:CDAB                 aslb
ROM:CDAC                 rola
ROM:CDAD                 aslb
ROM:CDAE                 rola
ROM:CDAF                 aslb
ROM:CDB0                 rola
ROM:CDB1
ROM:CDB1 Shift_D_L_4:
ROM:CDB1                 aslb
ROM:CDB2                 rola
ROM:CDB3                 aslb
ROM:CDB4                 rola
ROM:CDB5
ROM:CDB5 Shift_D_L_2:
ROM:CDB5                 aslb
ROM:CDB6                 rola
ROM:CDB7                 aslb
ROM:CDB8                 rola
ROM:CDB9                 rts
ROM:CDB9 ; End of function Shift_D_L_7
ROM:CDB9
ROM:CDBA
ROM:CDBA ; =============== S U B R O U T I N E =======================================
ROM:CDBA
ROM:CDBA ; Do math program run
ROM:CDBA
ROM:CDBA Math_Run_Start:
ROM:CDBA                 sta     MW0
ROM:CDBD
ROM:CDBD Math_Wait_Til_Halt:
ROM:CDBD                 tst     IO_Port_1
ROM:CDC0                 bmi     Math_Wait_Til_Halt
ROM:CDC2                 rts
ROM:CDC2 ; End of function Math_Run_Start
ROM:CDC2
ROM:CDC3
ROM:CDC3 ; =============== S U B R O U T I N E =======================================
ROM:CDC3
ROM:CDC3 ; Initialise math registers matrix
ROM:CDC3
ROM:CDC3 sub_CDC3:
ROM:CDC3                 ldd     #0
ROM:CDC6                 std     -$A,u
ROM:CDC8                 std     -2,u
ROM:CDCA                 std     6,u
ROM:CDCC                 std     8,u
ROM:CDCE                 std     $A,u
ROM:CDD0                 std     $C,u
ROM:CDD2                 std     -$E,u
ROM:CDD4                 std     -$C,u
ROM:CDD6                 std     -8,u
ROM:CDD8                 std     -4,u
ROM:CDDA                 std     ,u
ROM:CDDC                 std     2,u
ROM:CDDE                 lda     #$40 ; @
ROM:CDE0                 std     -$10,u
ROM:CDE2                 std     -6,u
ROM:CDE4                 std     4,u
ROM:CDE6                 rts
ROM:CDE6 ; End of function sub_CDC3
ROM:CDE6
ROM:CDE7
ROM:CDE7 ; =============== S U B R O U T I N E =======================================
ROM:CDE7
ROM:CDE7 ; Swap Matrix 2  x, y, z to  x, y, z
ROM:CDE7
ROM:CDE7 sub_CDE7:
ROM:CDE7                 ldd     MReg15          ; Ay2
ROM:CDEA                 ldu     MReg18          ; Bx2
ROM:CDED                 std     MReg18          ; Bx2
ROM:CDF0                 stu     MReg15          ; Ay2
ROM:CDF3                 ldd     MReg16          ; Az2
ROM:CDF6                 ldu     MReg1C          ; Cx2
ROM:CDF9                 std     MReg1C          ; Cx2
ROM:CDFC                 stu     MReg16          ; Az2
ROM:CDFF                 ldd     MReg1A          ; Bz2
ROM:CE02                 ldu     MReg1D          ; Cy2
ROM:CE05                 std     MReg1D          ; Cy2
ROM:CE08                 stu     MReg1A          ; Bz2
ROM:CE0B                 rts
ROM:CE0B ; End of function sub_CDE7
ROM:CE0B
ROM:CE0C
ROM:CE0C ; =============== S U B R O U T I N E =======================================
ROM:CE0C
ROM:CE0C ; Copy transform data from [BIC] to matrix 2
ROM:CE0C
ROM:CE0C sub_CE0C:
ROM:CE0C                 sta     MW2
ROM:CE0F                 clr     MW1
ROM:CE12                 lda     #$77 ; w
ROM:CE14                 jsr     Math_Run_Start  ; Do math program run
ROM:CE17                 rts
ROM:CE17 ; End of function sub_CE0C
ROM:CE17
ROM:CE18
ROM:CE18 ; =============== S U B R O U T I N E =======================================
ROM:CE18
ROM:CE18 ; Run math program $80 Copy [BIC] to Matrix 3
ROM:CE18
ROM:CE18 sub_CE18:
ROM:CE18                 sta     MW2
ROM:CE1B                 clr     MW1
ROM:CE20                 jsr     Math_Run_Start  ; Do math program run
ROM:CE23                 rts
ROM:CE23 ; End of function sub_CE18
ROM:CE23
ROM:CE24
ROM:CE24 ; =============== S U B R O U T I N E =======================================
ROM:CE24
ROM:CE24 ; Run math program $00 Roll on Matrix 4
ROM:CE24
ROM:CE24 sub_CE24:
ROM:CE24                 ldd     #$10
ROM:CE27                 std     MW1             ; Point BIC to $5080 MReg40 Matrix 4
ROM:CE2A                 lda     #0
ROM:CE2C                 jmp     Math_Run_Start  ; Do math program run
ROM:CE2C ; End of function sub_CE24
ROM:CE2C
ROM:CE2F
ROM:CE2F ; =============== S U B R O U T I N E =======================================
ROM:CE2F
ROM:CE2F ; Run math program $0E Pitch on Matrix 4
ROM:CE2F
ROM:CE2F sub_CE2F:
ROM:CE2F                 ldd     #$10
ROM:CE32                 std     MW1             ; Point BIC to $5080 MReg40 Matrix 4
ROM:CE35                 lda     #$E
ROM:CE37                 jmp     Math_Run_Start  ; Do math program run
ROM:CE37 ; End of function sub_CE2F
ROM:CE37
ROM:CE3A
ROM:CE3A ; =============== S U B R O U T I N E =======================================
ROM:CE3A
ROM:CE3A ; Run math program $1C Yaw on Matrix 4
ROM:CE3A
ROM:CE3A sub_CE3A:
ROM:CE3A                 ldd     #$10
ROM:CE3D                 std     MW1             ; Point BIC to $5080 MReg40 Matrix 4
ROM:CE40                 lda     #$1C
ROM:CE42                 jmp     Math_Run_Start  ; Do math program run
ROM:CE42 ; End of function sub_CE3A
ROM:CE42
ROM:CE45
ROM:CE45 ; =============== S U B R O U T I N E =======================================
ROM:CE45
ROM:CE45 ; Update random numbers
ROM:CE45
ROM:CE45 Gen_Random:
ROM:CE45                 ldd     <DPbyte_53
ROM:CE47                 std     <DPbyte_54
ROM:CE49                 lda     PRNG
ROM:CE4C                 sta     <DPbyte_53
ROM:CE4E                 rts
ROM:CE4E ; End of function Gen_Random
ROM:CE4E
ROM:CE4E ; ---------------------------------------------------------------------------
ROM:D660
ROM:D660 ; =============== S U B R O U T I N E =======================================
ROM:D660
ROM:D660
ROM:D660 sub_D660:
ROM:D660                 jsr     sub_D68D        ; Point U to vector RAM $38
ROM:D663                 jsr     sub_D690        ; Animate laser target hit
ROM:D666                 ldd     #$C000          ; Vector RTSL instruction
ROM:D669                 std     ,u++
ROM:D66B                 jsr     sub_D6A0
ROM:D66E                 jsr     sub_D6A3
ROM:D671                 ldd     #$C000
ROM:D674                 std     ,u++
ROM:D676                 jsr     sub_D6BC
ROM:D679                 jsr     sub_D6BF
ROM:D67C                 ldd     #$C000
ROM:D67F                 std     ,u++
ROM:D681                 jsr     sub_D6E7
ROM:D684                 jsr     sub_D6EA
ROM:D687                 ldd     #$C000
ROM:D68A                 std     ,u++
ROM:D68C                 rts
ROM:D68C ; End of function sub_D660
ROM:D68C
ROM:D68D
ROM:D68D ; =============== S U B R O U T I N E =======================================
ROM:D68D
ROM:D68D ; Point U to vector RAM $38
ROM:D68D
ROM:D68D sub_D68D:
ROM:D68D                 ldu     #$38 ; 8
ROM:D68D ; End of function sub_D68D
ROM:D68D
ROM:D690
ROM:D690 ; =============== S U B R O U T I N E =======================================
ROM:D690
ROM:D690 ; Animate laser target hit
ROM:D690
ROM:D690 sub_D690:
ROM:D690                 jsr     sub_D709        ; Laser target animation
ROM:D693                 ldd     ,x++
ROM:D695                 std     ,u++
ROM:D697                 ldd     ,x++
ROM:D699                 std     ,u++
ROM:D69B                 ldd     ,x
ROM:D69D                 std     ,u++
ROM:D69F                 rts
ROM:D69F ; End of function sub_D690
ROM:D69F
ROM:D6A0
ROM:D6A0 ; =============== S U B R O U T I N E =======================================
ROM:D6A0
ROM:D6A0
ROM:D6A0 sub_D6A0:
ROM:D6A0                 ldu     #$46 ; F
ROM:D6A0 ; End of function sub_D6A0
ROM:D6A0
ROM:D6A3
ROM:D6A3 ; =============== S U B R O U T I N E =======================================
ROM:D6A3
ROM:D6A3
ROM:D6A3 sub_D6A3:
ROM:D6A3                 jsr     sub_D709        ; Laser target animation
ROM:D6A6                 ldd     ,x++
ROM:D6A8                 negb
ROM:D6A9                 andb    #$1F
ROM:D6AB                 std     ,u++
ROM:D6AD                 ldd     ,x++
ROM:D6AF                 negb
ROM:D6B0                 orab    #$E0 ; a
ROM:D6B2                 std     ,u++
ROM:D6B4                 ldd     ,x
ROM:D6B6                 negb
ROM:D6B7                 andb    #$1F
ROM:D6B9                 std     ,u++
ROM:D6BB                 rts
ROM:D6BB ; End of function sub_D6A3
ROM:D6BB
ROM:D6BC
ROM:D6BC ; =============== S U B R O U T I N E =======================================
ROM:D6BC
ROM:D6BC
ROM:D6BC sub_D6BC:
ROM:D6BC                 ldu     #$54 ; T
ROM:D6BC ; End of function sub_D6BC
ROM:D6BC
ROM:D6BF
ROM:D6BF ; =============== S U B R O U T I N E =======================================
ROM:D6BF
ROM:D6BF
ROM:D6BF sub_D6BF:
ROM:D6BF                 jsr     sub_D709        ; Laser target animation
ROM:D6C2                 ldd     ,x++
ROM:D6C4                 nega
ROM:D6C5                 anda    #$1F
ROM:D6C7                 oraa    #$40 ; @
ROM:D6C9                 negb
ROM:D6CA                 andb    #$1F
ROM:D6CC                 std     ,u++
ROM:D6CE                 ldd     ,x++
ROM:D6D0                 nega
ROM:D6D1                 anda    #$1F
ROM:D6D3                 oraa    #$40 ; @
ROM:D6D5                 negb
ROM:D6D6                 orab    #$E0 ; a
ROM:D6D8                 std     ,u++
ROM:D6DA                 ldd     ,x
ROM:D6DC                 nega
ROM:D6DD                 anda    #$1F
ROM:D6DF                 oraa    #$40 ; @
ROM:D6E1                 negb
ROM:D6E2                 andb    #$1F
ROM:D6E4                 std     ,u++
ROM:D6E6                 rts
ROM:D6E6 ; End of function sub_D6BF
ROM:D6E6
ROM:D6E7
ROM:D6E7 ; =============== S U B R O U T I N E =======================================
ROM:D6E7
ROM:D6E7
ROM:D6E7 sub_D6E7:
ROM:D6E7                 ldu     #$62 ; b
ROM:D6E7 ; End of function sub_D6E7
ROM:D6E7
ROM:D6EA
ROM:D6EA ; =============== S U B R O U T I N E =======================================
ROM:D6EA
ROM:D6EA
ROM:D6EA sub_D6EA:
ROM:D6EA                 jsr     sub_D709        ; Laser target animation
ROM:D6ED                 ldd     ,x++
ROM:D6EF                 nega
ROM:D6F0                 anda    #$1F
ROM:D6F2                 oraa    #$40 ; @
ROM:D6F4                 std     ,u++
ROM:D6F6                 ldd     ,x++
ROM:D6F8                 nega
ROM:D6F9                 anda    #$1F
ROM:D6FB                 oraa    #$40 ; @
ROM:D6FD                 std     ,u++
ROM:D6FF                 ldd     ,x
ROM:D701                 nega
ROM:D702                 anda    #$1F
ROM:D704                 oraa    #$40 ; @
ROM:D706                 std     ,u++
ROM:D708                 rts
ROM:D708 ; End of function sub_D6EA
ROM:D708
ROM:D709
ROM:D709 ; =============== S U B R O U T I N E =======================================
ROM:D709
ROM:D709 ; Laser target animation
ROM:D709
ROM:D709 sub_D709:
ROM:D709                 lda     PRNG            ; Get random number
ROM:D70C                 anda    #$F             ; Mask 0-15
ROM:D70E                 ldb     #6
ROM:D710                 mul                     ; Multiply by 6 for 0- 90 range
ROM:D711                 ldx     #word_D716      ; Table of vector SVEC instructions for laser hit target animation
ROM:D714                 abx                     ; Point X reg to word from table
ROM:D715                 rts
ROM:D715 ; End of function sub_D709
ROM:D715
ROM:D715 ; ---------------------------------------------------------------------------
ROM:D776
ROM:D776 ; =============== S U B R O U T I N E =======================================
ROM:D776
ROM:D776 ; Check coin inputs
ROM:D776
ROM:D776 sub_D776:
ROM:D776                 lda     IO_Port_0
ROM:D779                 anda    #$F
ROM:D77B                 cmpa    #$F
ROM:D77D                 beq     loc_D783        ; Check for coin or slam inputs
ROM:D77F                 lda     #$FF
ROM:D781                 sta     <DPbyte_18
ROM:D783
ROM:D783 loc_D783:
ROM:D783                 lda     <DPbyte_18
ROM:D785                 bne     loc_D788
ROM:D787                 rts
ROM:D788 ; ---------------------------------------------------------------------------
ROM:D788
ROM:D788 loc_D788:
ROM:D788                 dec     <DPbyte_18
ROM:D78A                 lda     #$12
ROM:D78C                 cmpa    <DPbyte_14      ; Credits
ROM:D78E                 bcc     loc_D792
ROM:D790                 sta     <DPbyte_14      ; Credits
ROM:D792
ROM:D792 loc_D792:
ROM:D792                 lda     <DPbyte_17
ROM:D794                 sta     CoinCtr1
ROM:D797                 ldb     <DPbyte_16
ROM:D799                 stb     CoinCtr2
ROM:D79C                 oraa    <DPbyte_16
ROM:D79E                 oraa    <DPbyte_15
ROM:D7A0                 beq     loc_D7A6
ROM:D7A2                 lda     #$FF
ROM:D7A4                 sta     <DPbyte_18
ROM:D7A6
ROM:D7A6 loc_D7A6:
ROM:D7A6                 lda     IO_Port_0
ROM:D7A9                 anda    #$10
ROM:D7AB                 bne     loc_D7B0
ROM:D7AD                 jmp     loc_D8AE
ROM:D7B0 ; ---------------------------------------------------------------------------
ROM:D7B0
ROM:D7B0 loc_D7B0:
ROM:D7B0                 lda     byte_4590
ROM:D7B3                 asla
ROM:D7B4                 asla
ROM:D7B5                 asla
ROM:D7B6                 asla
ROM:D7B7                 sta     <DPbyte_9
ROM:D7B9                 lda     byte_4591
ROM:D7BC                 anda    #$F
ROM:D7BE                 oraa    <DPbyte_9
ROM:D7C0                 sta     <DPbyte_9
ROM:D7C2                 lda     <DPbyte_A
ROM:D7C4                 anda    #3
ROM:D7C6                 bne     loc_D7CB
ROM:D7C8                 jsr     sub_C09D
ROM:D7CB
ROM:D7CB loc_D7CB:
ROM:D7CB                 ldx     #byte_480E
ROM:D7CE
ROM:D7CE loc_D7CE:
ROM:D7CE                 lda     IO_Port_0
ROM:D7D1                 cmpx    #byte_480D
ROM:D7D4                 beq     loc_D7D9
ROM:D7D6                 bcc     loc_D7DA
ROM:D7D8                 lsra
ROM:D7D9
ROM:D7D9 loc_D7D9:
ROM:D7D9                 lsra
ROM:D7DA
ROM:D7DA loc_D7DA:
ROM:D7DA                 lsra
ROM:D7DB                 lda     ,x
ROM:D7DD                 anda    #$1F
ROM:D7DF                 bcs     loc_D812
ROM:D7E1                 beq     loc_D7EF
ROM:D7E3                 cmpa    #$1B
ROM:D7E5                 bcc     loc_D7ED
ROM:D7E7                 ldb     <DPbyte_A
ROM:D7E9                 andb    #1
ROM:D7EB                 bne     loc_D7EF
ROM:D7ED
ROM:D7ED loc_D7ED:
ROM:D7ED                 suba    #1
ROM:D7EF
ROM:D7EF loc_D7EF:
ROM:D7EF                 sta     ,x
ROM:D7F1                 lda     IO_Port_0
ROM:D7F4                 anda    #8
ROM:D7F6                 bne     loc_D7FC
ROM:D7F8                 lda     #$F0 ; =
ROM:D7FA                 sta     <DPbyte_B
ROM:D7FC
ROM:D7FC loc_D7FC:
ROM:D7FC                 lda     <DPbyte_B
ROM:D7FE                 beq     loc_D808
ROM:D800                 dec     <DPbyte_B
ROM:D802                 lda     #0
ROM:D804                 sta     ,x
ROM:D806                 sta     3,x
ROM:D808
ROM:D808 loc_D808:
ROM:D808                 lda     3,x
ROM:D80A                 beq     loc_D860
ROM:D80C                 dec     3,x
ROM:D80E                 beq     loc_D82F
ROM:D810                 bra     loc_D860
ROM:D812 ; ---------------------------------------------------------------------------
ROM:D812
ROM:D812 loc_D812:
ROM:D812                 cmpa    #$1B
ROM:D814                 bcc     loc_D81E
ROM:D816                 lda     ,x
ROM:D818                 adda    #$20 ;  
ROM:D81A                 bcc     loc_D7EF
ROM:D81C                 bne     loc_D822
ROM:D81E
ROM:D81E loc_D81E:
ROM:D81E                 lda     #$1F
ROM:D820                 bra     loc_D7EF
ROM:D822 ; ---------------------------------------------------------------------------
ROM:D822
ROM:D822 loc_D822:
ROM:D822                 lda     #$1F
ROM:D824                 sta     ,x
ROM:D826                 ldb     3,x
ROM:D828                 lda     #$78 ; x
ROM:D82A                 sta     3,x
ROM:D82C                 tstb
ROM:D82D                 beq     loc_D860
ROM:D82F
ROM:D82F loc_D82F:
ROM:D82F                 clra
ROM:D830                 cmpx    #byte_480D
ROM:D833                 bcs     loc_D853
ROM:D835                 beq     loc_D84B
ROM:D837                 lda     <DPbyte_9
ROM:D839                 anda    #$C
ROM:D83B                 lsra
ROM:D83C                 lsra
ROM:D83D                 beq     loc_D853
ROM:D83F                 adda    #2
ROM:D841                 bra     loc_D853
ROM:D841 ; ---------------------------------------------------------------------------
ROM:D84B ; ---------------------------------------------------------------------------
ROM:D84B
ROM:D84B loc_D84B:
ROM:D84B                 lda     <DPbyte_9
ROM:D84D                 anda    #$10
ROM:D84F                 beq     loc_D853
ROM:D851                 lda     #1
ROM:D853
ROM:D853 loc_D853:
ROM:D853                 inca
ROM:D854                 tfr     a, b
ROM:D856                 addb    <DPbyte_13
ROM:D858                 stb     <DPbyte_13
ROM:D85A                 adda    <DPbyte_12
ROM:D85C                 sta     <DPbyte_12
ROM:D85E                 inc     9,x
ROM:D860
ROM:D860 loc_D860:
ROM:D860                 leax    -1,x
ROM:D862                 cmpx    #byte_480C
ROM:D865                 lbge    loc_D7CE
ROM:D869                 lda     <DPbyte_9
ROM:D86B                 lsra
ROM:D86C                 lsra
ROM:D86D                 lsra
ROM:D86E                 lsra
ROM:D86F                 lsra
ROM:D870                 ldb     <DPbyte_13
ROM:D872                 aslb
ROM:D873                 ldx     #byte_D843
ROM:D876                 subb    a,x
ROM:D878                 bcs     loc_D88B
ROM:D87A                 asl     <DPbyte_13
ROM:D87C                 rorb
ROM:D87D                 cmpa    #3
ROM:D87F                 beq     loc_D885
ROM:D883                 bcc     loc_D889
ROM:D885
ROM:D885 loc_D885:
ROM:D885                 inc     <DPbyte_12
ROM:D887                 inc     <DPbyte_12
ROM:D889
ROM:D889 loc_D889:
ROM:D889                 stb     <DPbyte_13
ROM:D88B
ROM:D88B loc_D88B:
ROM:D88B                 lda     <DPbyte_9
ROM:D88D                 anda    #3
ROM:D88F                 beq     loc_D8AC
ROM:D891                 tfr     a, b
ROM:D893                 nega
ROM:D894                 asra
ROM:D895                 adda    <DPbyte_12
ROM:D897                 bpl     loc_D8A4
ROM:D899                 tst     <DPbyte_13
ROM:D89B                 bpl     loc_D8AE
ROM:D89D                 inca
ROM:D89E                 bmi     loc_D8AE
ROM:D8A0                 asl     <DPbyte_13
ROM:D8A2                 lsr     <DPbyte_13
ROM:D8A4
ROM:D8A4 loc_D8A4:
ROM:D8A4                 cmpb    #1
ROM:D8A6                 bne     loc_D8AA
ROM:D8A8                 inc     <DPbyte_14      ; Credits
ROM:D8AA
ROM:D8AA loc_D8AA:                               ; Credits
ROM:D8AA                 inc     <DPbyte_14
ROM:D8AC
ROM:D8AC loc_D8AC:
ROM:D8AC                 sta     <DPbyte_12
ROM:D8AE
ROM:D8AE loc_D8AE:
ROM:D8AE                 ldb     <DPbyte_A
ROM:D8B0                 andb    #$F
ROM:D8B2                 bne     locret_D8DE
ROM:D8B4                 ldx     #byte_4817
ROM:D8B7
ROM:D8B7 loc_D8B7:
ROM:D8B7                 lda     ,x
ROM:D8B9                 bpl     loc_D8C0
ROM:D8BB                 anda    #$7F ; 
ROM:D8BD                 incb
ROM:D8BE                 sta     ,x
ROM:D8C0
ROM:D8C0 loc_D8C0:
ROM:D8C0                 leax    -1,x
ROM:D8C2                 cmpx    #byte_4815
ROM:D8C5                 bge     loc_D8B7
ROM:D8C7                 tstb
ROM:D8C8                 bne     locret_D8DE
ROM:D8CA                 ldx     #byte_4817
ROM:D8CD
ROM:D8CD loc_D8CD:
ROM:D8CD                 lda     ,x
ROM:D8CF                 beq     loc_D8D7
ROM:D8D1                 adda    #$7F ; 
ROM:D8D3                 sta     ,x
ROM:D8D5                 bra     locret_D8DE
ROM:D8D7 ; ---------------------------------------------------------------------------
ROM:D8D7
ROM:D8D7 loc_D8D7:
ROM:D8D7                 leax    -1,x
ROM:D8D9                 cmpx    #byte_4815
ROM:D8DC                 bge     loc_D8CD
ROM:D8DE
ROM:D8DE locret_D8DE:
ROM:D8DE                 rts
ROM:D8DE ; End of function sub_D776
ROM:D8DE
ROM:D8DF
ROM:D8DF ; =============== S U B R O U T I N E =======================================
ROM:D8DF
ROM:D8DF ; Called from select screen, attract screen 1 + 3 when writing text
ROM:D8DF
ROM:D8DF sub_D8DF:
ROM:D8DF                 ldx     #byte_4A52
ROM:D8E2                 cmpx    word_4AD9
ROM:D8E5                 bcc     loc_D8F1
ROM:D8E7
ROM:D8E7 loc_D8E7:
ROM:D8E7                 cmpa    ,x+
ROM:D8E9                 bne     loc_D8EC
ROM:D8EB                 rts
ROM:D8EC ; ---------------------------------------------------------------------------
ROM:D8EC
ROM:D8EC loc_D8EC:
ROM:D8EC                 cmpx    word_4AD9
ROM:D8EF                 bcs     loc_D8E7
ROM:D8F1
ROM:D8F1 loc_D8F1:
ROM:D8F1                 sta     ,x+
ROM:D8F3                 stx     word_4AD9
ROM:D8F6                 rts
ROM:D8F6 ; End of function sub_D8DF
ROM:D8F6
ROM:D8F7
ROM:D8F7 ; =============== S U B R O U T I N E =======================================
ROM:D8F7
ROM:D8F7 ; Doesnt seem to be used anywhere
ROM:D8F7
ROM:D8F7 sub_D8F7:
ROM:D8F7                 ldx     #byte_4A52
ROM:D8FA
ROM:D8FA loc_D8FA:
ROM:D8FA                 cmpa    ,x
ROM:D8FC                 bne     loc_D912
ROM:D8FE                 ldu     word_4AD9
ROM:D901                 cmpu    #byte_4A52
ROM:D905                 bls     loc_D912
ROM:D907                 leau    -1,u
ROM:D909                 lda     ,u
ROM:D90B                 sta     ,x
ROM:D90D                 stu     word_4AD9
ROM:D910                 leax    ,u
ROM:D912
ROM:D912 loc_D912:
ROM:D912                 leax    1,x
ROM:D914                 cmpx    word_4AD9
ROM:D917                 bcs     loc_D8FA
ROM:D919                 rts
ROM:D919 ; End of function sub_D8F7
ROM:D919
ROM:D91A
ROM:D91A ; =============== S U B R O U T I N E =======================================
ROM:D91A
ROM:D91A
ROM:D91A sub_D91A:
ROM:D91A                 ldx     #byte_4A52
ROM:D91D                 clr     ,x
ROM:D91F                 stx     word_4AD9
ROM:D922                 rts
ROM:D922 ; End of function sub_D91A
ROM:D922
ROM:D923
ROM:D923 ; =============== S U B R O U T I N E =======================================
ROM:D923
ROM:D923 ; Called from attract screen 1
ROM:D923
ROM:D923 sub_D923:
ROM:D923                 ldu     #byte_4A52
ROM:D926                 cmpu    word_4AD9
ROM:D92A                 bcc     locret_D941
ROM:D92C
ROM:D92C loc_D92C:
ROM:D92C                 ldb     ,u+
ROM:D92E                 cmpb    #$D6 ; +
ROM:D930                 bcc     loc_D93B
ROM:D932                 stb     >byte_48AE      ; Text string index
ROM:D935                 jsr     sub_E7DD        ; Insert text colour vector instruction
ROM:D938                 jsr     loc_E7FC
ROM:D93B
ROM:D93B loc_D93B:
ROM:D93B                 cmpu    word_4AD9
ROM:D93F                 bcs     loc_D92C
ROM:D941
ROM:D941 locret_D941:
ROM:D941                 rts
ROM:D941 ; End of function sub_D923
ROM:D941
ROM:D942
ROM:D942 ; =============== S U B R O U T I N E =======================================
ROM:D942
ROM:D942 ; Called from Attract screen 3 + 4
ROM:D942
ROM:D942 sub_D942:
ROM:D942                 ldu     #byte_4A52
ROM:D945                 cmpu    word_4AD9
ROM:D949                 bcc     locret_D95D
ROM:D94B
ROM:D94B loc_D94B:
ROM:D94B                 ldb     ,u+
ROM:D94D                 cmpb    #$D6 ; +
ROM:D94F                 bcc     loc_D957
ROM:D951                 stb     >byte_48AE      ; Text string index
ROM:D954                 jsr     loc_E7FC
ROM:D957
ROM:D957 loc_D957:
ROM:D957                 cmpu    word_4AD9
ROM:D95B                 bcs     loc_D94B
ROM:D95D
ROM:D95D locret_D95D:
ROM:D95D                 rts
ROM:D95D ; End of function sub_D942
ROM:D95D
ROM:D95E
ROM:D95E ; =============== S U B R O U T I N E =======================================
ROM:D95E
ROM:D95E ; Attract screen 2 text position control
ROM:D95E
ROM:D95E sub_D95E:
ROM:D95E                 ldu     word_4ADD
ROM:D961                 sta     ,u+
ROM:D963                 ldd     #0
ROM:D966                 std     ,u++
ROM:D968                 ldd     #$100
ROM:D96B                 std     ,u++
ROM:D96D                 stu     word_4ADD
ROM:D970                 rts
ROM:D970 ; End of function sub_D95E
ROM:D970
ROM:D971
ROM:D971 ; =============== S U B R O U T I N E =======================================
ROM:D971
ROM:D971
ROM:D971 sub_D971:
ROM:D971                 ldu     #byte_4A66
ROM:D974
ROM:D974 loc_D974:
ROM:D974                 cmpa    ,u
ROM:D976                 bne     loc_D97C
ROM:D978                 lda     #0
ROM:D97A                 std     ,u
ROM:D97C
ROM:D97C loc_D97C:
ROM:D97C                 leau    5,u
ROM:D97E                 cmpu    word_4ADD
ROM:D982                 bcs     loc_D974
ROM:D984                 rts
ROM:D984 ; End of function sub_D971
ROM:D984
ROM:D985
ROM:D985 ; =============== S U B R O U T I N E =======================================
ROM:D985
ROM:D985
ROM:D985 sub_D985:
ROM:D985                 ldu     #byte_4A66
ROM:D988                 cmpu    word_4ADD
ROM:D98C                 bcc     locret_D9DB
ROM:D98E                 ldd     #$7200
ROM:D991                 std     ,y++
ROM:D993
ROM:D993 loc_D993:
ROM:D993                 lda     ,u+
ROM:D995                 beq     loc_D9D3
ROM:D997                 sta     >byte_48AE      ; Text string index
ROM:D99A                 ldd     #$198
ROM:D99D                 std     ,y++
ROM:D99F                 ldd     #0
ROM:D9A2                 std     ,y++
ROM:D9A4                 ldb     ,u
ROM:D9A6                 lda     #$71 ; q
ROM:D9A8                 std     ,y++
ROM:D9AA                 comb
ROM:D9AB                 addb    #$10
ROM:D9AD                 lda     #$62 ; b
ROM:D9AF                 std     ,y++
ROM:D9B1                 ldx     #off_E99E
ROM:D9B4                 ldb     >byte_48AE      ; Text string index
ROM:D9B7                 abx
ROM:D9B8                 abx
ROM:D9B9                 ldd     #$1DD0
ROM:D9BC                 std     ,y++
ROM:D9BE                 ldd     ,x
ROM:D9C0                 anda    #$1F
ROM:D9C2                 oraa    #0
ROM:D9C4                 std     ,y++
ROM:D9C6                 jsr     sub_E821        ; Text handling
ROM:D9C9                 ldd     #$7200
ROM:D9CC                 std     ,y++
ROM:D9CE                 ldd     #$8040
ROM:D9D1                 std     ,y++
ROM:D9D3
ROM:D9D3 loc_D9D3:
ROM:D9D3                 leau    4,u
ROM:D9D5                 cmpu    word_4ADD
ROM:D9D9                 bcs     loc_D993
ROM:D9DB
ROM:D9DB locret_D9DB:
ROM:D9DB                 rts
ROM:D9DB ; End of function sub_D985
ROM:D9DB
ROM:D9DC
ROM:D9DC ; =============== S U B R O U T I N E =======================================
ROM:D9DC
ROM:D9DC ; Initialise before game start
ROM:D9DC
ROM:D9DC sub_D9DC:
ROM:D9DC                 ldd     #0
ROM:D9DF                 std     word_4AE4
ROM:D9E2                 ldd     #$6018
ROM:D9E5                 std     word_4AE6
ROM:D9E8                 ldd     #byte_4A66
ROM:D9EB                 std     word_4ADD
ROM:D9EE                 ldd     word_DB2F
ROM:D9F1                 std     word_4AE2
ROM:D9F4                 lda     #$51 ; Q
ROM:D9F6                 sta     word_4ADF
ROM:D9F9                 rts
ROM:D9F9 ; End of function sub_D9DC
ROM:D9F9
ROM:D9FA
ROM:D9FA ; =============== S U B R O U T I N E =======================================
ROM:D9FA
ROM:D9FA ; Attract screen 2 large Star Wars logo handling
ROM:D9FA
ROM:D9FA sub_D9FA:
ROM:D9FA                 ldd     word_4AE4
ROM:D9FD                 addd    #1
ROM:DA00                 std     word_4AE4
ROM:DA07                 lbcc    loc_DA94
ROM:DA0B                 cmpd    #$40 ; @
ROM:DA0F                 bcc     loc_DA1E
ROM:DA11                 ldd     word_4AE6
ROM:DA14                 addb    #3
ROM:DA16                 std     word_4AE6
ROM:DA19                 ldd     #$40 ; @
ROM:DA1C                 bra     loc_DA2A
ROM:DA1E ; ---------------------------------------------------------------------------
ROM:DA1E
ROM:DA1E loc_DA1E:
ROM:DA1E                 ldd     word_4AE4
ROM:DA21                 comb
ROM:DA22                 addb    #$18
ROM:DA24                 std     word_4AE6
ROM:DA27                 ldd     word_4AE4
ROM:DA2A
ROM:DA2A loc_DA2A:
ROM:DA2A                 oraa    #$73 ; s
ROM:DA2C                 std     word_4AE8
ROM:DA2F                 ldd     word_4AE6
ROM:DA32                 oraa    #$61 ; a
ROM:DA34                 std     ,y++
ROM:DA36                 ldd     #$198
ROM:DA39                 std     ,y
ROM:DA3B                 std     8,y
ROM:DA3D                 std     $10,y
ROM:DA40                 std     $18,y
ROM:DA43                 std     $20,y
ROM:DA46                 std     $28,y
ROM:DA49                 ldd     #0
ROM:DA4C                 std     2,y
ROM:DA4E                 std     $A,y
ROM:DA50                 std     $12,y
ROM:DA53                 std     $1A,y
ROM:DA56                 std     $22,y
ROM:DA59                 std     $2A,y
ROM:DA5C                 ldd     word_4AE8
ROM:DA5F                 std     4,y
ROM:DA61                 std     $C,y
ROM:DA63                 std     $14,y
ROM:DA66                 std     $1C,y
ROM:DA69                 std     $24,y
ROM:DA6C                 std     $2C,y
ROM:DA6F                 ldd     #$B400
ROM:DA72                 std     6,y
ROM:DA74                 ldd     #$B434
ROM:DA77                 std     $E,y
ROM:DA79                 ldd     #$B458
ROM:DA7C                 std     $16,y
ROM:DA7F                 ldd     #$B488
ROM:DA82                 std     $1E,y
ROM:DA85                 ldd     #$B4AE
ROM:DA88                 std     $26,y
ROM:DA8B                 ldd     #$B4D2
ROM:DA8E                 std     $2E,y
ROM:DA91                 leay    $30,y
ROM:DA94
ROM:DA94 loc_DA94:
ROM:DA94                 ldx     #byte_4A66
ROM:DA97                 cmpx    word_4ADD
ROM:DA9A                 bcc     loc_DAF5
ROM:DA9C
ROM:DA9C loc_DA9C:
ROM:DA9C                 ldd     word_4AE4
ROM:DA9F                 cmpd    #$E0 ; a
ROM:DAA3                 bcc     loc_DAB3
ROM:DAA5                 cmpd    #$40 ; @
ROM:DAA9                 bcs     loc_DAB1
ROM:DAAB                 ldd     1,x
ROM:DAAD                 addd    3,x
ROM:DAAF                 std     1,x
ROM:DAB1
ROM:DAB1 loc_DAB1:
ROM:DAB1                 bra     loc_DAEE
ROM:DAB3 ; ---------------------------------------------------------------------------
ROM:DAB3
ROM:DAB3 loc_DAB3:
ROM:DAB3                 cmpd    #$160
ROM:DAB7                 bcc     loc_DAC1
ROM:DAB9                 ldd     #$400
ROM:DABC                 std     word_4A69
ROM:DABF                 bra     loc_DAEE
ROM:DAC1 ; ---------------------------------------------------------------------------
ROM:DAC1
ROM:DAC1 loc_DAC1:
ROM:DAC1                 ldd     1,x
ROM:DAC3                 addd    3,x
ROM:DAC5                 std     1,x
ROM:DAC7                 cmpd    #$F000
ROM:DACB                 bcs     loc_DAEE
ROM:DACD                 lda     ,x
ROM:DACF                 inca
ROM:DAD0                 ldu     #byte_4A66
ROM:DAD3
ROM:DAD3 loc_DAD3:
ROM:DAD3                 cmpa    ,u
ROM:DAD5                 bne     loc_DADF
ROM:DAD7                 ldd     #$400
ROM:DADA                 std     3,u
ROM:DADC                 ldu     word_4ADD
ROM:DADF
ROM:DADF loc_DADF:
ROM:DADF                 leau    5,u
ROM:DAE1                 cmpu    word_4ADD
ROM:DAE5                 bcs     loc_DAD3
ROM:DAE7                 lda     ,x
ROM:DAE9                 jsr     sub_D971
ROM:DAEC                 leax    -5,x
ROM:DAEE
ROM:DAEE loc_DAEE:
ROM:DAEE                 leax    5,x
ROM:DAF0                 cmpx    word_4ADD
ROM:DAF3                 bcs     loc_DA9C
ROM:DAF5
ROM:DAF5 loc_DAF5:
ROM:DAF5                 ldd     word_4AE4
ROM:DAF8                 cmpd    #$200
ROM:DAFC                 bcs     loc_DB03
ROM:DAFE                 lda     #7
ROM:DB00                 sta     word_4841
ROM:DB03
ROM:DB03 loc_DB03:
ROM:DB03                 cmpd    word_4AE2
ROM:DB07                 bcs     locret_DB2E
ROM:DB09                 lda     word_4ADF
ROM:DB0C                 jsr     sub_D95E        ; Attract screen 2 text position control
ROM:DB0F                 lda     word_4ADF
ROM:DB12                 inca
ROM:DB13                 cmpa    #$59 ; Y
ROM:DB15                 bcs     loc_DB1F
ROM:DB17                 ldd     #$FFFF
ROM:DB1A                 std     word_4AE2
ROM:DB1D                 bra     locret_DB2E
ROM:DB1F ; ---------------------------------------------------------------------------
ROM:DB1F
ROM:DB1F loc_DB1F:
ROM:DB1F                 sta     word_4ADF
ROM:DB22                 ldx     #aStarWar-$B2
ROM:DB25                 tfr     a, b
ROM:DB27                 abx
ROM:DB28                 abx
ROM:DB29                 ldd     ,x
ROM:DB2B                 std     word_4AE2
ROM:DB2E
ROM:DB2E locret_DB2E:
ROM:DB2E                 rts
ROM:DB2E ; End of function sub_D9FA
ROM:DB2E
ROM:DB2E ; ---------------------------------------------------------------------------
ROM:E764
ROM:E764 ; =============== S U B R O U T I N E =======================================
ROM:E764
ROM:E764
ROM:E764 sub_E764:
ROM:E764                 lda     ,x
ROM:E766                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:E769                 lda     <DPbyte_AD
ROM:E76B                 bgt     sub_E772        ; Display BCD number text
ROM:E76D                 ldd     #$B913
ROM:E770                 std     ,y++
ROM:E770 ; End of function sub_E764
ROM:E770
ROM:E772
ROM:E772 ; =============== S U B R O U T I N E =======================================
ROM:E772
ROM:E772 ; Display BCD number text
ROM:E772
ROM:E772 sub_E772:
ROM:E772                 lda     1,x
ROM:E774                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:E777                 lda     2,x
ROM:E779                 lsra
ROM:E77A                 lsra
ROM:E77B                 lsra
ROM:E77C                 lsra
ROM:E77D                 jsr     loc_E7AD
ROM:E780                 lda     <DPbyte_AD
ROM:E782                 bgt     loc_E789
ROM:E784                 ldd     #$B913
ROM:E787                 std     ,y++
ROM:E789
ROM:E789 loc_E789:
ROM:E789                 lda     2,x
ROM:E78B                 jsr     loc_E7AD
ROM:E78E                 lda     3,x
ROM:E78E ; End of function sub_E772
ROM:E78E
ROM:E790
ROM:E790 ; =============== S U B R O U T I N E =======================================
ROM:E790
ROM:E790 ; Display BCD numbers
ROM:E790
ROM:E790 Display_Vect_BCD:
ROM:E790                 tfr     a, b
ROM:E792                 lsrb
ROM:E793                 lsrb
ROM:E794                 lsrb
ROM:E795                 andb    #$1E
ROM:E797                 bne     loc_E7A2
ROM:E799                 tst     <DPbyte_AD
ROM:E79B                 ble     loc_E7A2
ROM:E79D                 ldu     $3002
ROM:E7A0                 bra     loc_E7A9
ROM:E7A2 ; ---------------------------------------------------------------------------
ROM:E7A2
ROM:E7A2 loc_E7A2:
ROM:E7A2                 clr     <DPbyte_AD
ROM:E7A4                 ldu     #$3004
ROM:E7A7                 ldu     b,u
ROM:E7A9
ROM:E7A9 loc_E7A9:
ROM:E7A9                 dec     <DPbyte_AD
ROM:E7AB                 stu     ,y++
ROM:E7AD
ROM:E7AD loc_E7AD:
ROM:E7AD                 asla
ROM:E7AE                 anda    #$1E
ROM:E7B0                 bne     loc_E7BB
ROM:E7B2                 tst     <DPbyte_AD
ROM:E7B4                 ble     loc_E7BB
ROM:E7B6                 ldu     $3002
ROM:E7B9                 bra     loc_E7C2
ROM:E7BB ; ---------------------------------------------------------------------------
ROM:E7BB
ROM:E7BB loc_E7BB:
ROM:E7BB                 clr     <DPbyte_AD
ROM:E7BD                 ldu     #(word_3002+2)
ROM:E7C0                 ldu     a,u
ROM:E7C2
ROM:E7C2 loc_E7C2:
ROM:E7C2                 dec     <DPbyte_AD
ROM:E7C4                 stu     ,y++
ROM:E7C6                 rts
ROM:E7C6 ; End of function Display_Vect_BCD
ROM:E7C6
ROM:E7C7
ROM:E7C7 ; =============== S U B R O U T I N E =======================================
ROM:E7C7
ROM:E7C7 ; Print text string from pointer table
ROM:E7C7
ROM:E7C7 sub_E7C7:
ROM:E7C7                 cmpb    #$D6 ; +
ROM:E7C9                 bcc     locret_E7D2
ROM:E7CB                 stb     >byte_48AE      ; Text string index
ROM:E7CE                 bsr     sub_E7DD        ; Insert text colour vector instruction
ROM:E7D0                 bsr     sub_E7EA        ; Insert text position vector instruction
ROM:E7D2
ROM:E7D2 locret_E7D2:
ROM:E7D2                 rts
ROM:E7D2 ; End of function sub_E7C7
ROM:E7D2
ROM:E7D3
ROM:E7D3 ; =============== S U B R O U T I N E =======================================
ROM:E7D3
ROM:E7D3
ROM:E7D3 sub_E7D3:
ROM:E7D3                 cmpb    #$D6 ; +
ROM:E7D5                 bcc     locret_E7DC
ROM:E7D7                 stb     >byte_48AE      ; Text string index
ROM:E7DA                 bsr     sub_E7EA        ; Insert text position vector instruction
ROM:E7DC
ROM:E7DC locret_E7DC:
ROM:E7DC                 rts
ROM:E7DC ; End of function sub_E7D3
ROM:E7DC
ROM:E7DD
ROM:E7DD ; =============== S U B R O U T I N E =======================================
ROM:E7DD
ROM:E7DD ; Insert text colour vector instruction
ROM:E7DD
ROM:E7DD sub_E7DD:
ROM:E7DD                 ldb     >byte_48AE      ; Text string index
ROM:E7E0                 ldx     #word_EDA8      ; Text string colour
ROM:E7E3                 abx
ROM:E7E4                 abx
ROM:E7E5                 ldd     ,x
ROM:E7E7                 std     ,y++
ROM:E7E9                 rts
ROM:E7E9 ; End of function sub_E7DD
ROM:E7E9
ROM:E7EA
ROM:E7EA ; =============== S U B R O U T I N E =======================================
ROM:E7EA
ROM:E7EA ; Insert text position vector instruction
ROM:E7EA
ROM:E7EA sub_E7EA:
ROM:E7EA                 ldb     >byte_48AE      ; Text string index
ROM:E7ED                 ldx     #word_EA50      ; Text string position
ROM:E7F0                 abx
ROM:E7F1                 abx
ROM:E7F2                 abx
ROM:E7F3                 abx
ROM:E7F4                 ldd     2,x
ROM:E7F6                 std     ,y++
ROM:E7F8                 ldd     ,x
ROM:E7FA                 bra     loc_E811
ROM:E7FC ; ---------------------------------------------------------------------------
ROM:E7FC
ROM:E7FC loc_E7FC:                               ; Text string index
ROM:E7FC                 ldb     >byte_48AE
ROM:E7FF                 ldx     #word_EA50      ; Text string position
ROM:E802                 abx
ROM:E803                 abx
ROM:E804                 abx
ROM:E805                 abx
ROM:E806                 ldd     2,x
ROM:E808                 subd    >byte_48AF
ROM:E80B                 anda    #$1F
ROM:E80D                 std     ,y++
ROM:E80F                 ldd     ,x
ROM:E811
ROM:E811 loc_E811:
ROM:E811                 std     ,y++
ROM:E813                 jsr     sub_E821        ; Text handling
ROM:E816                 ldd     #$7200          ; Vector SCAL 2,0 instruction
ROM:E819                 std     ,y++
ROM:E81B                 ldd     #$8040          ; Vector CNTR instruction
ROM:E81E                 std     ,y++
ROM:E820                 rts
ROM:E820 ; End of function sub_E7EA
ROM:E820
ROM:E821
ROM:E821 ; =============== S U B R O U T I N E =======================================
ROM:E821
ROM:E821 ; Text handling
ROM:E821
ROM:E821 sub_E821:
ROM:E821                 ldx     #ptrText
ROM:E824                 ldb     >byte_48AE      ; Text string index
ROM:E827                 abx
ROM:E828                 abx
ROM:E829                 ldx     ,x
ROM:E82B
ROM:E82B loc_E82B:
ROM:E82B                 ldb     ,x+
ROM:E82D                 stx     >word_48B1
ROM:E830                 aslb
ROM:E833                 bcs     loc_E83C
ROM:E835                 ldx     #$3016
ROM:E838                 andb    #$7F ; 
ROM:E83A                 bra     loc_E888
ROM:E83C ; ---------------------------------------------------------------------------
ROM:E83C
ROM:E83C loc_E83C:
ROM:E83C                 cmpb    #$74 ; t
ROM:E83E                 bne     loc_E845
ROM:E840                 ldx     #$2FDE
ROM:E843                 bra     loc_E888
ROM:E845 ; ---------------------------------------------------------------------------
ROM:E845
ROM:E845 loc_E845:
ROM:E847                 bne     loc_E84F
ROM:E849                 ldx     #$3058
ROM:E84C                 clrb
ROM:E84D                 bra     loc_E888
ROM:E84F ; ---------------------------------------------------------------------------
ROM:E84F
ROM:E84F loc_E84F:
ROM:E84F                 cmpb    #$60 ; `
ROM:E851                 bcs     loc_E858
ROM:E853                 ldx     #$2FA4
ROM:E856                 bra     loc_E888
ROM:E858 ; ---------------------------------------------------------------------------
ROM:E858
ROM:E858 loc_E858:
ROM:E858                 cmpb    #$40 ; @
ROM:E85A                 bne     loc_E861
ROM:E85C                 ldx     #$2FC2
ROM:E85F                 bra     loc_E888
ROM:E861 ; ---------------------------------------------------------------------------
ROM:E861
ROM:E861 loc_E861:
ROM:E861                 cmpb    #$4E ; N
ROM:E863                 bne     loc_E86A
ROM:E865                 ldx     #$2FFE
ROM:E868                 bra     loc_E888
ROM:E86A ; ---------------------------------------------------------------------------
ROM:E86A
ROM:E86A loc_E86A:
ROM:E86A                 cmpb    #$58 ; X
ROM:E86C                 bne     loc_E873
ROM:E86E                 ldx     #$2FF6
ROM:E871                 bra     loc_E888
ROM:E873 ; ---------------------------------------------------------------------------
ROM:E873
ROM:E873 loc_E873:
ROM:E873                 cmpb    #$5A ; Z
ROM:E875                 bne     loc_E87C
ROM:E877                 ldx     #word_3000
ROM:E87A                 bra     loc_E888
ROM:E87C ; ---------------------------------------------------------------------------
ROM:E87C
ROM:E87C loc_E87C:
ROM:E87C                 cmpb    #$4A ; J
ROM:E87E                 bne     loc_E885
ROM:E880                 ldx     #(word_3002+$A)
ROM:E883                 bra     loc_E888
ROM:E885 ; ---------------------------------------------------------------------------
ROM:E885
ROM:E885 loc_E885:
ROM:E885                 ldx     #$2FF4
ROM:E888
ROM:E888 loc_E888:
ROM:E888                 ldd     b,x
ROM:E88A                 std     ,y++
ROM:E88C                 ldx     >word_48B1
ROM:E88F                 tst     -1,x
ROM:E891                 bpl     loc_E82B
ROM:E893                 rts
ROM:E893 ; End of function sub_E821
ROM:E893
ROM:E893 ; ---------------------------------------------------------------------------
ROM:EF54
ROM:EF54 ; =============== S U B R O U T I N E =======================================
ROM:EF54
ROM:EF54 ; Attributes: noreturn
ROM:EF54
ROM:EF54                 ; public BADIRQ
ROM:EF54 BADIRQ:
ROM:EF54                 bra     BADIRQ
ROM:EF54 ; End of function BADIRQ
ROM:EF54
ROM:EF56
ROM:EF56 ; =============== S U B R O U T I N E =======================================
ROM:EF56
ROM:EF56
ROM:EF56                 ; public IRQ
ROM:EF56 IRQ:
ROM:EF56                 ldx     $A,s
ROM:EF58                 cmpx    #$6000          ; Bounds check for return address in ROM
ROM:EF5B                 bcc     loc_EF5E
ROM:EF5D                 swi
ROM:EF5E
ROM:EF5E loc_EF5E:                               ; Only allow IRQ calls from lower in ROM than BADIRQ function
ROM:EF5E                 cmpx    #BADIRQ
ROM:EF61                 bcs     loc_EF64
ROM:EF63                 swi
ROM:EF64
ROM:EF64 loc_EF64:
ROM:EF64                 lda     #$48 ; H
ROM:EF66                 tfr     a, dp
ROM:EF68                 sta     WDCLR
ROM:EF6B                 lda     <DPSanity_Check ; Check sanity byte is $3F
ROM:EF6D                 cmpa    #$3F ; ?
ROM:EF6F                 beq     loc_EF72
ROM:EF71                 swi
ROM:EF72
ROM:EF72 loc_EF72:
ROM:EF72                 dec     <DPbyte_3E
ROM:EF74                 bpl     loc_EF7F
ROM:EF76                 lda     #$B
ROM:EF78                 sta     <DPbyte_3E
ROM:EF7A                 inc     <DPbyte_3D
ROM:EF7C                 bvc     loc_EF7F
ROM:EF7E                 swi
ROM:EF7F
ROM:EF7F loc_EF7F:
ROM:EF7F                 inc     <DPbyte_A
ROM:EF81                 jsr     sub_D776        ; Check coin inputs
ROM:EF84                 lda     <DPbyte_14      ; Credits
ROM:EF86                 cmpa    #$24 ; $
ROM:EF88                 bcs     loc_EF8B
ROM:EF8A                 swi
ROM:EF8B
ROM:EF8B loc_EF8B:
ROM:EF8B                 ldx     #$481C
ROM:EF8E                 lda     IO_Port_0
ROM:EF91                 jsr     sub_F133        ; Inputs debounce
ROM:EF94                 lda     IO_Port_1
ROM:EF97                 jsr     sub_F133        ; Inputs debounce
ROM:EF9A                 lda     OPT0
ROM:EF9D                 jsr     sub_F133        ; Inputs debounce
ROM:EFA0                 lda     OPT1
ROM:EFA3                 jsr     sub_F133        ; Inputs debounce
ROM:EFA6                 lda     <DPbyte_33
ROM:EFA8                 sta     <DPbyte_34
ROM:EFAA                 lda     >word_4821
ROM:EFAD                 anda    #$30 ; 0
ROM:EFAF                 sta     -1,s
ROM:EFB1                 lda     >word_481E
ROM:EFB4                 anda    #$CF ; -
ROM:EFB6                 oraa    -1,s
ROM:EFB8                 sta     <DPbyte_33
ROM:EFBA                 eora    <DPbyte_34
ROM:EFBC                 anda    <DPbyte_34
ROM:EFBE                 sta     <DPbyte_32
ROM:EFC0                 lda     <DPbyte_32
ROM:EFC2                 anda    #$F0 ; =
ROM:EFC4                 beq     loc_EFCA
ROM:EFC6                 oraa    <DPbyte_31
ROM:EFC8                 sta     <DPbyte_31
ROM:EFCA
ROM:EFCA loc_EFCA:                               ; Joystick processing
ROM:EFCA                 jsr     sub_F146
ROM:EFCD                 lda     <DPbyte_A
ROM:EFCF                 bne     loc_EFE6
ROM:EFD1                 lda     SOUNDIO+1
ROM:EFD4                 asla
ROM:EFD5                 bpl     loc_EFDE
ROM:EFD7                 lda     SOUNDIO
ROM:EFDA                 cmpa    #$5A ; Z
ROM:EFDC                 beq     loc_EFE6
ROM:EFDE
ROM:EFDE loc_EFDE:
ROM:EFDE                 sta     SOUNDRST
ROM:EFE1                 lda     #0
ROM:EFE3                 sta     SOUNDIO
ROM:EFE6
ROM:EFE6 loc_EFE6:
ROM:EFE6                 lda     <DPbyte_A
ROM:EFE8                 anda    #3
ROM:EFEA                 bne     loc_F034
ROM:EFEC                 lda     >word_481B
ROM:EFEF                 adda    #1
ROM:EFF3                 bcs     loc_EFF7
ROM:EFF5                 lda     #0
ROM:EFF7
ROM:EFF7 loc_EFF7:
ROM:EFF7                 sta     >byte_481B
ROM:EFFA                 bne     loc_F034
ROM:EFFC                 lda     >byte_481A
ROM:EFFF                 adda    #1
ROM:F001                 daa
ROM:F002                 sta     >byte_481A
ROM:F005                 lda     >byte_4819
ROM:F008                 adca    #0
ROM:F00A                 daa
ROM:F00B                 bcs     loc_F010
ROM:F00D                 sta     >byte_4819
ROM:F010
ROM:F010 loc_F010:
ROM:F010                 lda     byte_4B07
ROM:F013                 adda    #1
ROM:F015                 daa
ROM:F016                 sta     byte_4B07
ROM:F019                 lda     byte_4B06
ROM:F01C                 adca    #0
ROM:F01E                 daa
ROM:F01F                 sta     byte_4B06
ROM:F022                 lda     byte_4B05
ROM:F025                 adca    #0
ROM:F027                 daa
ROM:F028                 sta     byte_4B05
ROM:F02B                 lda     byte_4B04
ROM:F02E                 adca    #0
ROM:F030                 daa
ROM:F031                 sta     byte_4B04
ROM:F034
ROM:F034 loc_F034:
ROM:F034                 dec     <DPbyte_40
ROM:F036                 bvc     loc_F041
ROM:F038                 sta     EVGRESET
ROM:F03B                 jsr     sub_611E        ; Copies Star Wars logo vector data to vector RAM
ROM:F03E                 jmp     loc_F12F
ROM:F041 ; ---------------------------------------------------------------------------
ROM:F041
ROM:F041 loc_F041:
ROM:F041                 lbpl    loc_F12F
ROM:F045                 lda     IO_Port_1
ROM:F048                 asla
ROM:F049                 lbpl    loc_F12F        ; If VGHALT is high, VG is ready
ROM:F04D                 lda     <DPbyte_3F      ; Vector pointer state
ROM:F04F                 bpl     loc_F06A
ROM:F051                 lda     >$0000
ROM:F054                 anda    #$A
ROM:F056                 beq     loc_F05A
ROM:F058                 lda     #$14
ROM:F05A
ROM:F05A loc_F05A:                               ; What the heck is going on here???
ROM:F05A                 oraa    #0
ROM:F05C                 sta     <DPbyte_3F      ; Vector pointer state
ROM:F05E                 ldb     #$38 ; 8
ROM:F060                 lsra
ROM:F061                 anda    #$A
ROM:F063                 eora    #$A
ROM:F065                 oraa    #$E0 ; a
ROM:F067                 std     >$0000          ; Seems to toggle vector address $0000 from $E038 and $EA38 JMPL $038 and $A38
ROM:F06A
ROM:F06A loc_F06A:
ROM:F06A                 dec     <DPbyte_28
ROM:F06C                 bpl     loc_F073
ROM:F06E                 clr     <DPbyte_28
ROM:F070                 jsr     sub_F18D
ROM:F073
ROM:F073 loc_F073:
ROM:F073                 jsr     sub_F22B
ROM:F076                 ldb     <DPbyte_3A
ROM:F078                 addb    #2
ROM:F07A                 cmpb    #$20 ;  
ROM:F07C                 bcs     loc_F07F
ROM:F07E                 clrb
ROM:F07F
ROM:F07F loc_F07F:                               ; Colour cycle blue/cyan for lasers
ROM:F07F                 stb     <DPbyte_3A
ROM:F081                 ldx     #4
ROM:F084                 abx                     ; Points to jump table that jump into vector ROM for laser colour cycle
ROM:F085                 ldu     #word_D620      ; Copies vector JMPL instructions into vector RAM
ROM:F088
ROM:F088 loc_F088:
ROM:F088                 ldd     ,u++
ROM:F08A                 std     ,--x
ROM:F08C                 cmpx    #2
ROM:F08F                 bgt     loc_F088
ROM:F091                 ldx     #$22 ; '
ROM:F094
ROM:F094 loc_F094:
ROM:F094                 cmpu    #word_D640
ROM:F098                 bcc     loc_F0A0
ROM:F09A                 ldd     ,u++
ROM:F09C                 std     ,--x
ROM:F09E                 bra     loc_F094
ROM:F0A0 ; ---------------------------------------------------------------------------
ROM:F0A0
ROM:F0A0 loc_F0A0:
ROM:F0A0                 ldb     <DPbyte_3B
ROM:F0A2                 addb    #2
ROM:F0A4                 cmpb    #8
ROM:F0A6                 bcs     loc_F0A9
ROM:F0A8                 clrb
ROM:F0A9
ROM:F0A9 loc_F0A9:
ROM:F0A9                 stb     <DPbyte_3B
ROM:F0AB                 ldu     #word_D640
ROM:F0AE                 ldd     b,u
ROM:F0B0                 std     >$0022
ROM:F0B3                 dec     <DPbyte_36
ROM:F0B5                 bgt     loc_F0D8
ROM:F0B7                 ldb     #4
ROM:F0B9                 stb     <DPbyte_36
ROM:F0BB                 ldb     <DPbyte_37
ROM:F0BD                 addb    #2
ROM:F0BF                 cmpb    #8
ROM:F0C1                 bcs     loc_F0C4
ROM:F0C3                 clrb
ROM:F0C4
ROM:F0C4 loc_F0C4:
ROM:F0C4                 stb     <DPbyte_37
ROM:F0C6                 ldu     #word_D648
ROM:F0C9                 ldd     b,u
ROM:F0CB                 std     >$002A
ROM:F0CE                 ldb     <DPbyte_37
ROM:F0D0                 ldu     #word_D650
ROM:F0D3                 ldd     b,u
ROM:F0D5                 std     >$002E
ROM:F0D8
ROM:F0D8 loc_F0D8:
ROM:F0D8                 dec     <DPbyte_38
ROM:F0DA                 bgt     loc_F0F3
ROM:F0DC                 ldb     #1
ROM:F0DE                 stb     <DPbyte_38
ROM:F0E0                 ldb     <DPbyte_39
ROM:F0E2                 addb    #2
ROM:F0E4                 cmpb    #8
ROM:F0E6                 bcs     loc_F0E9
ROM:F0E8                 clrb
ROM:F0E9
ROM:F0E9 loc_F0E9:
ROM:F0E9                 stb     <DPbyte_39
ROM:F0EB                 ldu     #word_D658
ROM:F0EE                 ldd     b,u
ROM:F0F0                 std     >$002C
ROM:F0F3
ROM:F0F3 loc_F0F3:
ROM:F0F3                 ldb     <DPbyte_35
ROM:F0F5                 addb    #2
ROM:F0F7                 cmpb    #$E
ROM:F0F9                 bcs     loc_F0FC
ROM:F0FB                 clrb
ROM:F0FC
ROM:F0FC loc_F0FC:
ROM:F0FC                 stb     <DPbyte_35
ROM:F0FE                 ldu     #word_D604
ROM:F101                 ldd     b,u
ROM:F103                 std     >$0030
ROM:F106                 ldd     #$C000          ; Vector RTSL
ROM:F109                 std     >$0032
ROM:F10C                 ldb     <DPbyte_3C      ; Cycle through 7 colours
ROM:F10E                 addb    #2
ROM:F110                 cmpb    #$E
ROM:F112                 bcs     loc_F115
ROM:F114                 clrb
ROM:F115
ROM:F115 loc_F115:                               ; Vector colour cycle count
ROM:F115                 stb     <DPbyte_3C
ROM:F117                 ldu     #word_D612
ROM:F11A                 ldd     b,u
ROM:F11C                 std     >$0034
ROM:F11F                 ldd     #$C000          ; Vector RTSL
ROM:F122                 std     >$0036
ROM:F125                 jsr     sub_D660        ; Update laser target hit vector animations
ROM:F128                 sta     EVGGO           ; Start vector generator run
ROM:F12B                 lda     #5
ROM:F12D                 sta     <DPbyte_40
ROM:F12F
ROM:F12F loc_F12F:
ROM:F12F                 sta     IRQCLR
ROM:F132                 rti
ROM:F132 ; End of function IRQ
ROM:F132
ROM:F133
ROM:F133 ; =============== S U B R O U T I N E =======================================
ROM:F133
ROM:F133 ; Inputs debounce
ROM:F133
ROM:F133 sub_F133:
ROM:F133                 ldb     ,x              ; Inputs debounce
ROM:F135                 stb     1,x
ROM:F137                 sta     ,x
ROM:F139                 anda    1,x
ROM:F13B                 oraa    2,x
ROM:F13D                 sta     2,x
ROM:F13F                 orab    ,x++
ROM:F141                 andb    ,x
ROM:F143                 stb     ,x+
ROM:F145                 rts
ROM:F145 ; End of function sub_F133
ROM:F145
ROM:F146
ROM:F146 ; =============== S U B R O U T I N E =======================================
ROM:F146
ROM:F146 ; Joystick processing
ROM:F146
ROM:F146 sub_F146:
ROM:F146                 lda     <DPbyte_A
ROM:F148                 lsra
ROM:F149                 ldy     #$4829
ROM:F14D                 bcs     loc_F153
ROM:F14F                 ldy     #$482B
ROM:F153
ROM:F153 loc_F153:
ROM:F153                 ldb     1,y
ROM:F155                 lda     ADC
ROM:F158                 sta     1,y
ROM:F15A                 cmpa    ,y
ROM:F15C                 bcs     loc_F16C
ROM:F15E                 cmpb    ,y
ROM:F160                 bls     loc_F16A
ROM:F162                 cmpb    1,y
ROM:F164                 bls     loc_F168
ROM:F166                 ldb     1,y
ROM:F168
ROM:F168 loc_F168:
ROM:F168                 stb     ,y
ROM:F16A
ROM:F16A loc_F16A:
ROM:F16A                 bra     loc_F178
ROM:F16C ; ---------------------------------------------------------------------------
ROM:F16C
ROM:F16C loc_F16C:
ROM:F16C                 cmpb    ,y
ROM:F16E                 bcc     loc_F178
ROM:F170                 cmpb    1,y
ROM:F172                 bcc     loc_F176
ROM:F174                 ldb     1,y
ROM:F176
ROM:F176 loc_F176:
ROM:F176                 stb     ,y
ROM:F178
ROM:F178 loc_F178:
ROM:F178                 cmpy    #byte_4829
ROM:F17C                 bne     loc_F186
ROM:F17E                 sta     ADCSTART
ROM:F181                 sta     ADCSTART
ROM:F184                 bra     locret_F18C
ROM:F186 ; ---------------------------------------------------------------------------
ROM:F186
ROM:F186 loc_F186:
ROM:F186                 sta     ADCSTART+1
ROM:F189                 sta     ADCSTART+1
ROM:F18C
ROM:F18C locret_F18C:
ROM:F18C                 rts
ROM:F18C ; End of function sub_F146
ROM:F18C
ROM:F18D
ROM:F18D ; =============== S U B R O U T I N E =======================================
ROM:F18D
ROM:F18D
ROM:F18D sub_F18D:
ROM:F18D                 ldx     #byte_4866      ; Joystick pitch data structure
ROM:F190                 lda     <DPbyte_2B      ; Joystick Y
ROM:F192                 nop
ROM:F193                 jsr     sub_F1C6
ROM:F196                 lda     4,x
ROM:F198                 cmpa    #$78 ; x
ROM:F19A                 ble     loc_F19E
ROM:F19C                 lda     #$78 ; x
ROM:F19E
ROM:F19E loc_F19E:
ROM:F1A0                 bge     loc_F1A4
ROM:F1A4
ROM:F1A4 loc_F1A4:
ROM:F1A4                 sta     4,x
ROM:F1A6                 jsr     sub_F1FD
ROM:F1A9                 ldx     #byte_486F      ; Joystick roll data structure
ROM:F1AC                 lda     <DPbyte_29      ; Joystick X
ROM:F1AE                 nop
ROM:F1AF                 jsr     sub_F1C6
ROM:F1B2                 lda     4,x
ROM:F1B4                 cmpa    #$70 ; p
ROM:F1B6                 ble     loc_F1BA
ROM:F1B8                 lda     #$70 ; p
ROM:F1BA
ROM:F1BA loc_F1BA:
ROM:F1BC                 bge     loc_F1C0
ROM:F1C0
ROM:F1C0 loc_F1C0:
ROM:F1C0                 sta     4,x
ROM:F1C2                 jsr     sub_F1FD
ROM:F1C5                 rts
ROM:F1C5 ; End of function sub_F18D
ROM:F1C5
ROM:F1C6
ROM:F1C6 ; =============== S U B R O U T I N E =======================================
ROM:F1C6
ROM:F1C6
ROM:F1C6 sub_F1C6:
ROM:F1C6                 cmpa    ,x
ROM:F1C8                 bcc     loc_F1D0
ROM:F1CA                 cmpa    1,x
ROM:F1CC                 bcs     loc_F1D0
ROM:F1CE                 dec     ,x
ROM:F1D0
ROM:F1D0 loc_F1D0:
ROM:F1D0                 sta     1,x
ROM:F1D2                 cmpa    ,x
ROM:F1D4                 bcc     loc_F1D8
ROM:F1D6                 lda     ,x
ROM:F1D8
ROM:F1D8 loc_F1D8:
ROM:F1D8                 suba    ,x
ROM:F1DA                 sta     <DPbyte_51
ROM:F1DC                 ldb     2,x
ROM:F1DE                 mul
ROM:F1DF                 adda    <DPbyte_51
ROM:F1E1                 bne     loc_F1E5
ROM:F1E3                 lda     #1
ROM:F1E5
ROM:F1E5 loc_F1E5:
ROM:F1E5                 bcs     loc_F1EB
ROM:F1E7                 clr     3,x
ROM:F1E9                 bra     loc_F1F7
ROM:F1EB ; ---------------------------------------------------------------------------
ROM:F1EB
ROM:F1EB loc_F1EB:
ROM:F1EB                 lda     #$FF
ROM:F1ED                 inc     3,x
ROM:F1EF                 ldb     3,x
ROM:F1F1                 cmpb    #2
ROM:F1F3                 bcs     loc_F1F7
ROM:F1F5                 dec     2,x
ROM:F1F7
ROM:F1F7 loc_F1F7:
ROM:F1F7                 clrb
ROM:F1FA                 sta     4,x
ROM:F1FC                 rts
ROM:F1FC ; End of function sub_F1C6
ROM:F1FC
ROM:F1FD
ROM:F1FD ; =============== S U B R O U T I N E =======================================
ROM:F1FD
ROM:F1FD
ROM:F1FD sub_F1FD:
ROM:F1FD                 clr     <DPbyte_51
ROM:F1FF                 lda     4,x
ROM:F203                 subd    5,x
ROM:F205                 bge     loc_F20A
ROM:F207                 nega
ROM:F208                 dec     <DPbyte_51
ROM:F20A
ROM:F20A loc_F20A:
ROM:F20A                 ble     loc_F20F
ROM:F20C                 addd    #$FF
ROM:F20F
ROM:F20F loc_F20F:
ROM:F211                 bls     loc_F215
ROM:F215
ROM:F215 loc_F215:
ROM:F215                 ldb     #$60 ; `
ROM:F217                 cmpa    #$40 ; @
ROM:F219                 bcc     loc_F21D
ROM:F21B                 ldb     #$30 ; 0
ROM:F21D
ROM:F21D loc_F21D:
ROM:F21D                 mul
ROM:F21E                 tst     <DPbyte_51
ROM:F220                 bpl     loc_F226
ROM:F222                 coma
ROM:F223                 negb
ROM:F224                 sbca    #$FF
ROM:F226
ROM:F226 loc_F226:
ROM:F226                 addd    5,x
ROM:F228                 std     5,x
ROM:F22A                 rts
ROM:F22A ; End of function sub_F1FD
ROM:F22A
ROM:F22B
ROM:F22B ; =============== S U B R O U T I N E =======================================
ROM:F22B
ROM:F22B
ROM:F22B sub_F22B:
ROM:F22B                 ldb     <DPbyte_6B
ROM:F22D                 lda     <DPbyte_6C
ROM:F22F                 anda    #$C0 ; +
ROM:F231                 asla
ROM:F232                 rolb
ROM:F233                 bcc     loc_F237
ROM:F235                 oraa    #$3F ; ?
ROM:F237
ROM:F237 loc_F237:
ROM:F237                 rola
ROM:F238                 rolb
ROM:F239                 rola
ROM:F23A                 std     <DPbyte_2F
ROM:F23C                 addd    #$FF98
ROM:F23F                 anda    #$1F
ROM:F241                 std     >$0024
ROM:F244                 ldb     <DPbyte_74
ROM:F246                 lda     <DPbyte_75
ROM:F248                 anda    #$C0 ; +
ROM:F24A                 asla
ROM:F24B                 rolb
ROM:F24C                 bcc     loc_F250
ROM:F24E                 oraa    #$3F ; ?
ROM:F250
ROM:F250 loc_F250:
ROM:F250                 rola
ROM:F251                 rolb
ROM:F252                 rola
ROM:F253                 std     <DPbyte_2D
ROM:F255                 anda    #$1F
ROM:F257                 std     >$0026
ROM:F25A                 ldd     #$C000
ROM:F25D                 std     >$0028
ROM:F260                 rts
ROM:F260 ; End of function sub_F22B
ROM:F260
ROM:F261 ; ---------------------------------------------------------------------------
ROM:F261 ; START OF FUNCTION CHUNK FOR sub_6532
ROM:F261
ROM:F261                 ; public Reset
ROM:F261 Reset:
ROM:F261                 orcc    #$10
ROM:F263                 clr     MPAGE
ROM:F266                 lda     #0
ROM:F268                 sta     LED1
ROM:F26B                 sta     LED2
ROM:F26E                 sta     LED3
ROM:F271                 lda     #0
ROM:F273                 sta     PRNGClr
ROM:F278                 sta     PRNGClr
ROM:F27B                 sta     EVGRESET
ROM:F27E                 ldu     #0
ROM:F281
ROM:F281 loc_F281:
ROM:F281                 sta     WDCLR
ROM:F284                 leau    -1,u
ROM:F286                 cmpu    #0
ROM:F28A                 bne     loc_F281
ROM:F28C                 lds     #$4FFF          ; Stack top at $4FFF
ROM:F290                 lda     #$48 ; H      ; Direct Page at $4800
ROM:F292                 tfr     a, dp
ROM:F294                 sta     SOUNDRST
ROM:F297                 lda     #0
ROM:F299                 sta     SOUNDIO
ROM:F29C                 ldx     #$4800
ROM:F29F                 ldd     #0
ROM:F2A2
ROM:F2A2 loc_F2A2:
ROM:F2A2                 std     ,x++
ROM:F2A4                 cmpx    #$5000
ROM:F2A7                 bcs     loc_F2A2
ROM:F2A9                 sta     WDCLR
ROM:F2AC                 ldx     #$5000
ROM:F2AF                 ldd     #0
ROM:F2B2
ROM:F2B2 loc_F2B2:
ROM:F2B2                 std     ,x++
ROM:F2B4                 sta     WDCLR
ROM:F2B7                 cmpx    #$6000
ROM:F2BA                 bcs     loc_F2B2
ROM:F2BC                 ldx     #0
ROM:F2BF                 ldd     #0
ROM:F2C2
ROM:F2C2 loc_F2C2:
ROM:F2C2                 std     ,x++
ROM:F2C4                 sta     WDCLR
ROM:F2C7                 cmpx    #$3000
ROM:F2CA                 bcs     loc_F2C2
ROM:F2CC                 lda     IO_Port_0       ; Check self test switch
ROM:F2CF                 anda    #$10
ROM:F2D1                 bne     loc_F2D6
ROM:F2D3                 jmp     loc_F36E
ROM:F2D6 ; ---------------------------------------------------------------------------
ROM:F2D6
ROM:F2D6 loc_F2D6:                               ; Read option switches
ROM:F2D6                 lda     OPT0
ROM:F2D9                 ldb     OPT1
ROM:F2DC
ROM:F2DC loc_F2DC:
ROM:F2DC                 sta     <Opt0_Shad
ROM:F2DE                 stb     <Opt1_Shad      ; Store in shadow RAM
ROM:F2E0                 ldx     #$800
ROM:F2E3
ROM:F2E3 loc_F2E3:
ROM:F2E3                 leax    -1,x
ROM:F2E5                 bne     loc_F2E3
ROM:F2E7                 lda     OPT0
ROM:F2EA                 ldb     OPT1
ROM:F2ED                 cmpa    <Opt0_Shad
ROM:F2EF                 bne     loc_F2DC
ROM:F2F1                 cmpb    <Opt1_Shad
ROM:F2F3                 bne     loc_F2DC
ROM:F2F5                 ldd     #$2020
ROM:F2F8                 ldx     #0
ROM:F2FB
ROM:F2FB loc_F2FB:                               ; Clear vector RAM to HALT instructions
ROM:F2FB                 std     ,x++
ROM:F2FD                 sta     WDCLR
ROM:F300                 cmpx    #$2800
ROM:F303                 bcs     loc_F2FB
ROM:F305                 ldd     #$E038          ; Set up first vector instruction to JSRL 38
ROM:F308                 std     >$0000
ROM:F30B                 lda     #$FF
ROM:F30D                 sta     <DPbyte_3F      ; Vector pointer state
ROM:F30F                 lda     #$3F ; ?
ROM:F311                 sta     <DPSanity_Check
ROM:F313                 lda     #$40 ; @
ROM:F315                 sta     <DPbyte_28
ROM:F317                 jsr     sub_C306        ; Read NOVRAM
ROM:F31A                 sta     WDCLR
ROM:F31D                 lda     #$FF
ROM:F31F                 sta     LED1
ROM:F322                 sta     LED2
ROM:F325                 sta     LED3
ROM:F328                 sta     IRQCLR
ROM:F32B                 jmp     loc_6036        ; Jump to main game loop
ROM:F32B ; END OF FUNCTION CHUNK FOR sub_6532
ROM:F32B ; ---------------------------------------------------------------------------
ROM:F36E ; ---------------------------------------------------------------------------
ROM:F36E ; START OF FUNCTION CHUNK FOR sub_6532
ROM:F36E
ROM:F36E loc_F36E:                               ; Self test
ROM:F36E                 lda     IO_Port_1
ROM:F371                 anda    #4
ROM:F373                 bne     loc_F380        ; Check Aux coin
ROM:F375                 lda     OPT0
ROM:F378                 coma
ROM:F379                 anda    #$7F ; 
ROM:F37B                 beq     loc_F380
ROM:F37D                 jmp     Check_Test_Diag
ROM:F380 ; ---------------------------------------------------------------------------
ROM:F380
ROM:F380 loc_F380:
ROM:F380                 lds     #0
ROM:F384                 ldu     #word_F32E
ROM:F387
ROM:F387 loc_F387:
ROM:F387                 ldx     ,u++
ROM:F389                 ldy     #$800
ROM:F38D
ROM:F38D loc_F38D:
ROM:F38D                 lda     ,x
ROM:F38F                 beq     loc_F39D
ROM:F391                 tfr     s, d
ROM:F393                 oraa    $1E,u
ROM:F396                 orab    $1F,u
ROM:F399                 tfr     d, s
ROM:F39B                 bra     loc_F3DC
ROM:F39D ; ---------------------------------------------------------------------------
ROM:F39D
ROM:F39D loc_F39D:
ROM:F39F                 asla
ROM:F3A0
ROM:F3A0 loc_F3A0:
ROM:F3A0                 rola
ROM:F3A1                 sta     ,x
ROM:F3A3                 tfr     a, b
ROM:F3A5                 eorb    ,x
ROM:F3A7                 beq     loc_F3B5
ROM:F3A9                 tfr     s, d
ROM:F3AB                 oraa    $1E,u
ROM:F3AE                 orab    $1F,u
ROM:F3B1                 tfr     d, s
ROM:F3B3                 bra     loc_F3DC
ROM:F3B5 ; ---------------------------------------------------------------------------
ROM:F3B5
ROM:F3B5 loc_F3B5:
ROM:F3B5                 bcc     loc_F3BE
ROM:F3B7                 tsta
ROM:F3B8                 bne     loc_F3A0
ROM:F3BA                 adda    #$FF
ROM:F3BC                 bra     loc_F3A0
ROM:F3BE ; ---------------------------------------------------------------------------
ROM:F3BE
ROM:F3BE loc_F3BE:
ROM:F3BE                 tfr     a, b
ROM:F3C0                 incb
ROM:F3C1                 bne     loc_F3A0
ROM:F3C3                 sta     WDCLR
ROM:F3C6                 cmpu    #word_F332
ROM:F3CA                 beq     loc_F3D2
ROM:F3CC                 cmpu    #word_F334
ROM:F3D0                 bne     loc_F3D6
ROM:F3D2
ROM:F3D2 loc_F3D2:
ROM:F3D2                 leax    2,x
ROM:F3D4                 bra     loc_F3D8
ROM:F3D6 ; ---------------------------------------------------------------------------
ROM:F3D6
ROM:F3D6 loc_F3D6:
ROM:F3D6                 leax    1,x
ROM:F3D8
ROM:F3D8 loc_F3D8:
ROM:F3D8                 leay    -1,y
ROM:F3DA                 bne     loc_F38D
ROM:F3DC
ROM:F3DC loc_F3DC:
ROM:F3DC                 cmpu    #off_F340
ROM:F3E0                 bcs     loc_F387
ROM:F3E2                 ldu     #word_F32E
ROM:F3E5
ROM:F3E5 loc_F3E5:
ROM:F3E5                 ldx     ,u++
ROM:F3E7                 ldy     #$800
ROM:F3EB
ROM:F3EB loc_F3EB:
ROM:F3EB                 inc     ,x
ROM:F3ED                 beq     loc_F3FB
ROM:F3EF                 tfr     s, d
ROM:F3F1                 oraa    $1E,u
ROM:F3F4                 orab    $1F,u
ROM:F3F7                 tfr     d, s
ROM:F3F9                 bra     loc_F424
ROM:F3FB ; ---------------------------------------------------------------------------
ROM:F3FB
ROM:F3FB loc_F3FB:
ROM:F3FB                 lda     ,x
ROM:F3FD                 beq     loc_F40B
ROM:F3FF                 tfr     s, d
ROM:F401                 oraa    $1E,u
ROM:F404                 orab    $1F,u
ROM:F407                 tfr     d, s
ROM:F409                 bra     loc_F424
ROM:F40B ; ---------------------------------------------------------------------------
ROM:F40B
ROM:F40B loc_F40B:
ROM:F40B                 sta     WDCLR
ROM:F40E                 cmpu    #word_F332
ROM:F412                 beq     loc_F41A
ROM:F414                 cmpu    #word_F334
ROM:F418                 bne     loc_F41E
ROM:F41A
ROM:F41A loc_F41A:
ROM:F41A                 leax    2,x
ROM:F41C                 bra     loc_F420
ROM:F41E ; ---------------------------------------------------------------------------
ROM:F41E
ROM:F41E loc_F41E:
ROM:F41E                 leax    1,x
ROM:F420
ROM:F420 loc_F420:
ROM:F420                 leay    -1,y
ROM:F422                 bne     loc_F3EB
ROM:F424
ROM:F424 loc_F424:
ROM:F424                 cmpu    #off_F340
ROM:F428                 bcs     loc_F3E5
ROM:F42A                 tfr     s, d
ROM:F42C                 andb    #1
ROM:F42E                 bne     loc_F43F
ROM:F430                 ldx     #byte_4500      ; NOVRAM
ROM:F433                 ldu     #Scratch_RAM_start
ROM:F436
ROM:F436 loc_F436:
ROM:F436                 ldd     ,x++
ROM:F438                 std     ,u++
ROM:F43A                 cmpx    #byte_4500+$100 ; NOVRAM
ROM:F43D                 bcs     loc_F436
ROM:F43F
ROM:F43F loc_F43F:
ROM:F43F                 ldu     #word_F342
ROM:F442                 ldx     #byte_4500      ; NOVRAM
ROM:F445                 ldd     #0
ROM:F448
ROM:F448 loc_F448:
ROM:F448                 std     ,x++
ROM:F44A                 cmpx    #byte_4500+$100 ; NOVRAM
ROM:F44D                 bcs     loc_F448
ROM:F44F                 ldx     #byte_4500      ; NOVRAM
ROM:F452
ROM:F452 loc_F452:
ROM:F452                 lda     ,x
ROM:F454                 anda    #$F
ROM:F456                 beq     loc_F464
ROM:F458                 tfr     s, d
ROM:F45A                 oraa    $1E,u
ROM:F45D                 orab    $1F,u
ROM:F460                 tfr     d, s
ROM:F462                 bra     loc_F4B7
ROM:F464 ; ---------------------------------------------------------------------------
ROM:F464
ROM:F464 loc_F464:
ROM:F466                 asla
ROM:F467                 ldy     #4
ROM:F46B
ROM:F46B loc_F46B:
ROM:F46B                 rola
ROM:F46C                 sta     ,x
ROM:F46E                 tfr     a, b
ROM:F470                 eorb    ,x
ROM:F472                 andb    #$F
ROM:F474                 beq     loc_F482
ROM:F476                 tfr     s, d
ROM:F478                 oraa    $1E,u
ROM:F47B                 orab    $1F,u
ROM:F47E                 tfr     d, s
ROM:F480                 bra     loc_F4B7
ROM:F482 ; ---------------------------------------------------------------------------
ROM:F482
ROM:F482 loc_F482:
ROM:F482                 leay    -1,y
ROM:F484                 bne     loc_F46B
ROM:F486                 tsta
ROM:F487                 bmi     loc_F491
ROM:F489                 lda     #$FF
ROM:F48B                 ldy     #5
ROM:F48F                 bra     loc_F46B
ROM:F491 ; ---------------------------------------------------------------------------
ROM:F491
ROM:F491 loc_F491:
ROM:F491                 sta     WDCLR
ROM:F494                 leax    1,x
ROM:F496                 cmpx    #byte_4500+$100 ; NOVRAM
ROM:F499                 bcs     loc_F452
ROM:F49B                 ldx     #byte_4500      ; NOVRAM
ROM:F49E
ROM:F49E loc_F49E:
ROM:F49E                 inc     ,x
ROM:F4A0                 lda     ,x+
ROM:F4A2                 anda    #$F
ROM:F4A4                 beq     loc_F4B2
ROM:F4A6                 tfr     s, d
ROM:F4A8                 oraa    $1E,u
ROM:F4AB                 orab    $1F,u
ROM:F4AE                 tfr     d, s
ROM:F4B0                 bra     loc_F4B7
ROM:F4B2 ; ---------------------------------------------------------------------------
ROM:F4B2
ROM:F4B2 loc_F4B2:                               ; NOVRAM
ROM:F4B2                 cmpx    #byte_4500+$100
ROM:F4B5                 bcs     loc_F49E
ROM:F4B7
ROM:F4B7 loc_F4B7:
ROM:F4B7                 tfr     s, d
ROM:F4B9                 andb    #1
ROM:F4BB                 bne     loc_F4CE
ROM:F4BD                 ldx     #Scratch_RAM_start
ROM:F4C0                 ldu     #byte_4500      ; NOVRAM
ROM:F4C3
ROM:F4C3 loc_F4C3:
ROM:F4C3                 ldd     ,x++
ROM:F4C5                 std     ,u++
ROM:F4C7                 cmpx    #Scratch_RAM_start+$100
ROM:F4CA                 bcs     loc_F4C3
ROM:F4CC                 bra     loc_F4EC
ROM:F4CE ; ---------------------------------------------------------------------------
ROM:F4CE
ROM:F4CE loc_F4CE:
ROM:F4CE                 lda     #$FF
ROM:F4D0                 sta     NVRecall
ROM:F4D3                 ldx     #$100
ROM:F4D6
ROM:F4D6 loc_F4D6:
ROM:F4D6                 sta     WDCLR
ROM:F4D9                 leax    -1,x
ROM:F4DB                 bne     loc_F4D6
ROM:F4DD                 lda     #0
ROM:F4DF                 sta     NVRecall
ROM:F4E2                 ldx     #$A000
ROM:F4E5
ROM:F4E5 loc_F4E5:
ROM:F4E5                 sta     WDCLR
ROM:F4E8                 leax    -1,x
ROM:F4EA                 bne     loc_F4E5
ROM:F4EC
ROM:F4EC loc_F4EC:
ROM:F4EC                 sta     WDCLR
ROM:F4EF                 lda     #0
ROM:F4F1                 sta     MPAGE
ROM:F4F4                 ldx     word_F342
ROM:F4F7                 ldy     #$2000
ROM:F4FB                 tfr     x, d
ROM:F4FD
ROM:F4FD loc_F4FD:
ROM:F4FD                 adcb    1,x
ROM:F4FF                 adca    ,x++
ROM:F501                 sta     WDCLR
ROM:F504                 leay    -2,y
ROM:F506                 bne     loc_F4FD
ROM:F508                 tfr     d, x
ROM:F50A                 lda     #$FF
ROM:F50C                 sta     MPAGE
ROM:F50F                 ldu     #word_F344      ; Point to ROM start address table
ROM:F512                 tfr     x, d
ROM:F514                 ldy     #$2000          ; Size of each ROM
ROM:F518                 ldx     word_F342
ROM:F51B                 bra     loc_F528
ROM:F51B ; END OF FUNCTION CHUNK FOR sub_6532
ROM:F51D
ROM:F51D ; =============== S U B R O U T I N E =======================================
ROM:F51D
ROM:F51D
ROM:F51D sub_F51D:
ROM:F51D                 ldu     #word_F344      ; Point to ROM start address table
ROM:F51D ; End of function sub_F51D
ROM:F51D
ROM:F520 ; START OF FUNCTION CHUNK FOR sub_6532
ROM:F520
ROM:F520 loc_F520:                               ; Next ROM address start
ROM:F520                 ldx     ,u++
ROM:F522                 ldy     #$2000          ; Size of ROM
ROM:F526
ROM:F526 loc_F526:
ROM:F526                 tfr     x, d
ROM:F528
ROM:F528 loc_F528:
ROM:F528                 adcb    1,x
ROM:F52A                 adca    ,x++
ROM:F52C                 sta     WDCLR
ROM:F52F                 leay    -2,y
ROM:F531                 bne     loc_F528
ROM:F533                 std     $5593,u
ROM:F537                 beq     loc_F543
ROM:F539                 tfr     s, d
ROM:F53B                 oraa    $1E,u
ROM:F53E                 orab    $1F,u
ROM:F541                 tfr     d, s
ROM:F543
ROM:F543 loc_F543:
ROM:F543                 cmpu    #word_F34C
ROM:F547                 bcs     loc_F520
ROM:F549                 cmpu    #word_F34E
ROM:F54D                 bcc     loc_F557
ROM:F54F                 ldx     ,u++
ROM:F551                 ldy     #$1000
ROM:F555                 bra     loc_F526
ROM:F557 ; ---------------------------------------------------------------------------
ROM:F557
ROM:F557 loc_F557:
ROM:F557                 lda     #$FF
ROM:F559                 sta     LED1
ROM:F55C                 sta     LED2
ROM:F55F                 sta     LED3
ROM:F562                 clr     <DPbyte_D1
ROM:F564                 lda     IO_Port_1
ROM:F567                 anda    #4
ROM:F569                 bne     loc_F56E
ROM:F56B                 jmp     Check_Test_Diag
ROM:F56E ; ---------------------------------------------------------------------------
ROM:F56E
ROM:F56E loc_F56E:
ROM:F56E                 sta     WDCLR
ROM:F571                 sts     <DPbyte_D2
ROM:F574                 tfr     s, d
ROM:F576                 andb    #1
ROM:F578                 bne     loc_F5ED
ROM:F57A                 ldy     #0
ROM:F57E                 ldd     #$6000
ROM:F581                 std     ,y++
ROM:F583                 ldd     #$BFAE
ROM:F586                 std     ,y++
ROM:F588                 ldd     #$8040
ROM:F58B                 std     ,y++
ROM:F58D                 lda     #$48 ; H
ROM:F58F                 tfr     a, dp
ROM:F591                 sts     <DPbyte_CC
ROM:F594                 lds     #$4FFF
ROM:F598                 ldb     #$D3 ; +
ROM:F59A                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:F59F                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:F5A4                 stb     <DPbyte_CE
ROM:F5A6                 ldd     <DPbyte_CC
ROM:F5A8                 bne     loc_F5B1
ROM:F5AC                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:F5AF                 bra     loc_F5EB
ROM:F5B1 ; ---------------------------------------------------------------------------
ROM:F5B1
ROM:F5B1 loc_F5B1:
ROM:F5B1                 lsra
ROM:F5B2                 rorb
ROM:F5B3                 std     <DPbyte_CC
ROM:F5B5                 bcc     loc_F5E5
ROM:F5B7                 ldb     <DPbyte_CE
ROM:F5B9                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:F5BC                 ldb     <DPbyte_CE
ROM:F5BE                 subb    #$BC ; +
ROM:F5C0                 bcs     loc_F5E5
ROM:F5C2                 aslb
ROM:F5C3                 ldx     #$F743
ROM:F5C6                 abx
ROM:F5C7                 ldu     ,x
ROM:F5C9                 stu     ,y++
ROM:F5CB                 ldu     #$120
ROM:F5CE                 stu     ,y++
ROM:F5D0                 ldx     #$48D7
ROM:F5D3                 abx
ROM:F5D4                 lda     ,x+
ROM:F5D6                 coma
ROM:F5D7                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:F5DA                 lda     ,x
ROM:F5DC                 coma
ROM:F5DD                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:F5E0                 ldd     #$8040
ROM:F5E3                 std     ,y++
ROM:F5E5
ROM:F5E5 loc_F5E5:
ROM:F5E5                 inc     <DPbyte_CE
ROM:F5E7                 ldd     <DPbyte_CC
ROM:F5E9                 bne     loc_F5B1
ROM:F5EB
ROM:F5EB loc_F5EB:
ROM:F5EB                 bra     loc_F643
ROM:F5ED ; ---------------------------------------------------------------------------
ROM:F5ED
ROM:F5ED loc_F5ED:
ROM:F5ED                 ldx     #8
ROM:F5F0                 tfr     s, d
ROM:F5F2
ROM:F5F2 loc_F5F2:
ROM:F5F2                 lsrb
ROM:F5F3                 bcc     loc_F5F9
ROM:F5F5                 lda     #$29 ; )
ROM:F5F7                 bra     loc_F5FB
ROM:F5F9 ; ---------------------------------------------------------------------------
ROM:F5F9
ROM:F5F9 loc_F5F9:
ROM:F5F9                 lda     #$3B ; ;
ROM:F5FB
ROM:F5FB loc_F5FB:
ROM:F5FB                 sta     SOUNDIO
ROM:F5FE                 ldu     #0
ROM:F601
ROM:F601 loc_F601:
ROM:F601                 stb     WDCLR
ROM:F604                 leau    1,u
ROM:F606                 cmpu    #$A000
ROM:F60A                 bcs     loc_F601
ROM:F60C                 leax    -1,x
ROM:F60E                 bne     loc_F5F2
ROM:F610                 ldx     #8
ROM:F613                 tfr     s, d
ROM:F615
ROM:F615 loc_F615:
ROM:F615                 lsra
ROM:F616                 bcc     loc_F61C
ROM:F618                 ldb     #$29 ; )
ROM:F61A                 bra     loc_F61E
ROM:F61C ; ---------------------------------------------------------------------------
ROM:F61C
ROM:F61C loc_F61C:
ROM:F61C                 ldb     #$3B ; ;
ROM:F61E
ROM:F61E loc_F61E:
ROM:F61E                 stb     SOUNDIO
ROM:F621                 ldu     #0
ROM:F624
ROM:F624 loc_F624:
ROM:F624                 sta     WDCLR
ROM:F627                 leau    1,u
ROM:F629                 cmpu    #$A000
ROM:F62D                 bcs     loc_F624
ROM:F62F                 leax    -1,x
ROM:F631                 bne     loc_F615
ROM:F633                 ldu     #0
ROM:F636
ROM:F636 loc_F636:
ROM:F636                 sta     WDCLR
ROM:F639                 leau    1,u
ROM:F63B                 cmpu    #$FF00
ROM:F63F                 bcs     loc_F636
ROM:F641                 bra     loc_F5ED
ROM:F643 ; ---------------------------------------------------------------------------
ROM:F643
ROM:F643 loc_F643:
ROM:F643                 ldd     #$2020
ROM:F646                 std     ,y++
ROM:F648                 ldu     #off_F723
ROM:F64B                 clr     <DPbyte_C0
ROM:F64D                 lda     #3
ROM:F64F                 sta     <DPbyte_C5
ROM:F651                 sta     <DPbyte_C6
ROM:F653                 sta     <DPbyte_C7
ROM:F655                 sta     <DPbyte_D6
ROM:F657                 ldx     #word_F34E
ROM:F65A                 stx     <DPbyte_D4
ROM:F65C
ROM:F65C loc_F65C:
ROM:F65C                 ldd     #1
ROM:F65F                 ldx     #0
ROM:F662
ROM:F662 loc_F662:
ROM:F662                 sta     WDCLR
ROM:F665                 leax    d,x
ROM:F667                 cmpx    #$708
ROM:F66A                 bcs     loc_F662
ROM:F66C                 sta     EVGRESET
ROM:F66F                 lda     IO_Port_1
ROM:F672                 anda    #4
ROM:F674                 bne     loc_F679
ROM:F676                 jmp     loc_F720
ROM:F679 ; ---------------------------------------------------------------------------
ROM:F679
ROM:F679 loc_F679:
ROM:F679                 lda     IO_Port_0
ROM:F67C                 anda    #4
ROM:F67E                 bne     loc_F69F
ROM:F680                 lda     <DPbyte_C5
ROM:F682                 beq     loc_F69D
ROM:F684                 deca
ROM:F685                 bne     loc_F69D
ROM:F687                 leau    2,u
ROM:F689                 cmpu    #word_F735
ROM:F68D                 bcs     loc_F692
ROM:F68F                 ldu     #off_F725
ROM:F692
ROM:F692 loc_F692:
ROM:F692                 ldd     #0
ROM:F695                 std     <DPbyte_C2
ROM:F697                 sta     <DPbyte_C4
ROM:F699                 sta     <DPbyte_C0
ROM:F69D
ROM:F69D loc_F69D:
ROM:F69D                 bra     loc_F6A1
ROM:F69F ; ---------------------------------------------------------------------------
ROM:F69F
ROM:F69F loc_F69F:
ROM:F69F                 lda     #3
ROM:F6A1
ROM:F6A1 loc_F6A1:
ROM:F6A1                 sta     <DPbyte_C5
ROM:F6A3                 lda     IO_Port_0
ROM:F6A6                 coma
ROM:F6A7                 anda    #$C0 ; +
ROM:F6A9                 beq     loc_F6C7
ROM:F6AB                 lda     <DPbyte_C6
ROM:F6AD                 beq     loc_F6C5
ROM:F6AF                 deca
ROM:F6B0                 bne     loc_F6C5
ROM:F6B2                 ldb     <DPbyte_C0
ROM:F6B4                 addb    #2
ROM:F6B6                 cmpb    #$E
ROM:F6B8                 bcs     loc_F6BB
ROM:F6BA                 clrb
ROM:F6BB
ROM:F6BB loc_F6BB:
ROM:F6BB                 stb     <DPbyte_C0
ROM:F6BD                 cmpb    #4
ROM:F6BF                 bne     loc_F6C3
ROM:F6C1                 clr     <DPbyte_C1
ROM:F6C3
ROM:F6C3 loc_F6C3:
ROM:F6C5
ROM:F6C5 loc_F6C5:
ROM:F6C5                 bra     loc_F6C9
ROM:F6C7 ; ---------------------------------------------------------------------------
ROM:F6C7
ROM:F6C7 loc_F6C7:
ROM:F6C7                 lda     #3
ROM:F6C9
ROM:F6C9 loc_F6C9:
ROM:F6C9                 sta     <DPbyte_C6
ROM:F6CB                 cmpu    #off_F733
ROM:F6CF                 bne     loc_F6F0
ROM:F6D1                 lda     IO_Port_1
ROM:F6D4                 coma
ROM:F6D5                 anda    #$30 ; 0
ROM:F6D7                 beq     loc_F6EA
ROM:F6D9                 lda     <DPbyte_C7
ROM:F6DB                 beq     loc_F6E8
ROM:F6DD                 deca
ROM:F6DE                 bne     loc_F6E8
ROM:F6E0                 ldb     <DPbyte_C1
ROM:F6E2                 eorb    #1
ROM:F6E4                 stb     <DPbyte_C1
ROM:F6E8
ROM:F6E8 loc_F6E8:
ROM:F6E8                 bra     loc_F6EC
ROM:F6EA ; ---------------------------------------------------------------------------
ROM:F6EA
ROM:F6EA loc_F6EA:
ROM:F6EA                 lda     #3
ROM:F6EC
ROM:F6EC loc_F6EC:
ROM:F6EC                 sta     <DPbyte_C7
ROM:F6EE                 bra     loc_F6F2
ROM:F6F0 ; ---------------------------------------------------------------------------
ROM:F6F0
ROM:F6F0 loc_F6F0:
ROM:F6F0                 clr     <DPbyte_C1
ROM:F6F2
ROM:F6F2 loc_F6F2:
ROM:F6F2                 ldy     #0
ROM:F6F6                 ldb     <DPbyte_C0
ROM:F6F8                 ldx     #word_F735
ROM:F6FB                 ldd     b,x
ROM:F6FD                 cmpd    #$6780
ROM:F701                 bne     loc_F709
ROM:F703                 tst     <DPbyte_C1
ROM:F705                 beq     loc_F709
ROM:F707                 ldb     #$20 ;  
ROM:F709
ROM:F709 loc_F709:
ROM:F709                 std     ,y++
ROM:F70B                 jmp     [,u]
ROM:F70B ; END OF FUNCTION CHUNK FOR sub_6532
ROM:F70D
ROM:F70D ; =============== S U B R O U T I N E =======================================
ROM:F70D
ROM:F70D
ROM:F70D sub_F70D:
ROM:F70D                 ldd     #$2020
ROM:F710                 std     ,y++
ROM:F712                 std     ,y++
ROM:F714
ROM:F714 loc_F714:
ROM:F714                 sta     EVGGO
ROM:F717                 lda     IO_Port_0
ROM:F71A                 anda    #$10
ROM:F71C                 lbeq    loc_F65C
ROM:F71C ; End of function sub_F70D
ROM:F71C
ROM:F720 ; START OF FUNCTION CHUNK FOR sub_6532
ROM:F720
ROM:F720 loc_F720:
ROM:F720                 jmp     loc_F720
ROM:F720 ; END OF FUNCTION CHUNK FOR sub_6532
ROM:F720 ; ---------------------------------------------------------------------------
ROM:F74F
ROM:F74F ; =============== S U B R O U T I N E =======================================
ROM:F74F
ROM:F74F
ROM:F74F sub_F74F:
ROM:F74F                 dec     <DPbyte_D6
ROM:F751                 bpl     loc_F77C
ROM:F753                 lda     #$10
ROM:F755                 sta     <DPbyte_D6
ROM:F757                 ldx     <DPbyte_D4
ROM:F759                 ldd     <DPbyte_D2
ROM:F75B                 anda    ,x
ROM:F75D                 bne     loc_F767
ROM:F75F                 andb    1,x
ROM:F761                 bne     loc_F767
ROM:F763                 lda     #$3B ; ;
ROM:F765                 bra     loc_F769
ROM:F767 ; ---------------------------------------------------------------------------
ROM:F767
ROM:F767 loc_F767:
ROM:F767                 lda     #$29 ; )
ROM:F769
ROM:F769 loc_F769:
ROM:F769                 sta     SOUNDIO
ROM:F76C                 leax    2,x
ROM:F76E                 cmpx    #word_F34E+$20
ROM:F771                 bcs     loc_F77A
ROM:F773                 lda     #$20 ;  
ROM:F775                 sta     <DPbyte_D6
ROM:F777                 ldx     #word_F34E
ROM:F77A
ROM:F77A loc_F77A:
ROM:F77A                 stx     <DPbyte_D4
ROM:F77C
ROM:F77C loc_F77C:
ROM:F77C                 jmp     loc_F714
ROM:F77C ; End of function sub_F74F
ROM:F77C
ROM:F77F
ROM:F77F ; =============== S U B R O U T I N E =======================================
ROM:F77F
ROM:F77F
ROM:F77F sub_F77F:
ROM:F77F                 sta     ADCSTART
ROM:F782                 sta     ADCSTART
ROM:F785                 ldd     #$BFAE
ROM:F788                 std     ,y++
ROM:F78A                 ldd     #$8040
ROM:F78D                 std     ,y++
ROM:F78F                 lds     #$4FFF
ROM:F793                 ldb     #$9E ; P
ROM:F795                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:F798                 ldb     #$D3 ; +
ROM:F79A                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:F79F                 stb     <DPbyte_CE
ROM:F7A1                 lda     IO_Port_0
ROM:F7A4                 ldb     IO_Port_1
ROM:F7A9                 std     <DPbyte_CC
ROM:F7AB
ROM:F7AB loc_F7AB:
ROM:F7AB                 aslb
ROM:F7AC                 rola
ROM:F7AD                 std     <DPbyte_CC
ROM:F7AF                 bcs     loc_F7B6
ROM:F7B1                 ldb     <DPbyte_CE
ROM:F7B3                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:F7B6
ROM:F7B6 loc_F7B6:
ROM:F7B6                 inc     <DPbyte_CE
ROM:F7B8                 ldd     <DPbyte_CC
ROM:F7BA                 bne     loc_F7AB
ROM:F7BC                 ldd     <DPbyte_C8
ROM:F7BE                 std     <DPbyte_CA
ROM:F7C0                 lda     IO_Port_0
ROM:F7C3                 anda    #$CF ; -
ROM:F7C5                 ldb     IO_Port_1
ROM:F7C8                 andb    #$3A ; :
ROM:F7CA                 std     <DPbyte_C8
ROM:F7CC                 eora    <DPbyte_CA
ROM:F7CE                 anda    <DPbyte_CA
ROM:F7D0                 eorb    <DPbyte_CB
ROM:F7D2                 andb    <DPbyte_CB
ROM:F7D4                 cmpd    #0
ROM:F7D8                 beq     loc_F7DF
ROM:F7DA                 lda     #$3B ; ;
ROM:F7DC                 sta     SOUNDIO
ROM:F7DF
ROM:F7DF loc_F7DF:
ROM:F7DF                 ldd     #$1EA2
ROM:F7E2                 std     ,y++
ROM:F7E4                 ldd     #$1F74
ROM:F7E7                 std     ,y++
ROM:F7E9                 lda     #$10
ROM:F7EB                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:F7EE                 ldd     word_301E
ROM:F7F1                 std     ,y++
ROM:F7F3                 ldd     word_3002
ROM:F7F6                 std     ,y++
ROM:F7F8                 lda     OPT0
ROM:F7FB                 jsr     sub_F86C
ROM:F7FE                 ldd     #$1E70
ROM:F801                 std     ,y++
ROM:F803                 ldd     #$1F5C
ROM:F806                 std     ,y++
ROM:F808                 lda     #$10
ROM:F80A                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:F80D                 ldd     word_3020
ROM:F810                 std     ,y++
ROM:F812                 ldd     word_3020+2
ROM:F815                 std     ,y++
ROM:F817                 ldd     word_3002
ROM:F81A                 std     ,y++
ROM:F81C                 lda     OPT1
ROM:F81F                 jsr     sub_F86C
ROM:F824                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:F827                 ldd     #$BFD5
ROM:F82A                 std     ,y++
ROM:F82C                 ldd     #0
ROM:F82F                 std     ,y++
ROM:F831                 ldd     #$140
ROM:F834                 std     ,y++
ROM:F836                 ldb     ADC
ROM:F83B                 sex
ROM:F83C                 tfr     d, u
ROM:F83E                 asra
ROM:F83F                 rorb
ROM:F840                 leau    d,u
ROM:F842                 tfr     u, d
ROM:F844                 anda    #$1F
ROM:F846                 std     ,y++
ROM:F848                 sta     ADCSTART+1
ROM:F84B                 sta     ADCSTART+1
ROM:F84E                 ldx     #$14
ROM:F851
ROM:F851 loc_F851:
ROM:F851                 leax    -1,x
ROM:F853                 bne     loc_F851
ROM:F855                 ldb     ADC
ROM:F85A                 sex
ROM:F85B                 anda    #$1F
ROM:F85D                 oraa    #$E0 ; a
ROM:F85F                 std     ,y++
ROM:F861                 ldd     #$8040
ROM:F864                 std     ,y++
ROM:F866                 ldu     #off_F725
ROM:F869                 jmp     sub_F70D
ROM:F869 ; End of function sub_F77F
ROM:F869
ROM:F86C
ROM:F86C ; =============== S U B R O U T I N E =======================================
ROM:F86C
ROM:F86C
ROM:F86C sub_F86C:
ROM:F86C                 ldb     #7
ROM:F86E
ROM:F86E loc_F86E:
ROM:F86E                 lsra
ROM:F86F                 bcc     loc_F876
ROM:F871                 ldx     word_3020+2
ROM:F874                 bra     loc_F879
ROM:F876 ; ---------------------------------------------------------------------------
ROM:F876
ROM:F876 loc_F876:
ROM:F876                 ldx     word_3032
ROM:F879
ROM:F879 loc_F879:
ROM:F879                 stx     ,y++
ROM:F87B                 decb
ROM:F87C                 bpl     loc_F86E
ROM:F87E                 ldd     #$8040
ROM:F881                 std     ,y++
ROM:F883                 rts
ROM:F883 ; End of function sub_F86C
ROM:F883
ROM:F884
ROM:F884 ; =============== S U B R O U T I N E =======================================
ROM:F884
ROM:F884
ROM:F884 sub_F884:
ROM:F884                 ldd     #$BF20
ROM:F887                 std     ,y++
ROM:F889                 jmp     sub_F70D
ROM:F889 ; End of function sub_F884
ROM:F889
ROM:F88C
ROM:F88C ; =============== S U B R O U T I N E =======================================
ROM:F88C
ROM:F88C
ROM:F88C sub_F88C:
ROM:F88C                 ldd     #$BEFD
ROM:F88F                 std     ,y++
ROM:F891                 jmp     sub_F70D
ROM:F891 ; End of function sub_F88C
ROM:F891
ROM:F894
ROM:F894 ; =============== S U B R O U T I N E =======================================
ROM:F894
ROM:F894
ROM:F894 sub_F894:
ROM:F894                 ldd     #$BEA7
ROM:F897                 std     ,y++
ROM:F899                 ldb     #$CE ; +
ROM:F89B
ROM:F89B loc_F89B:
ROM:F89B                 stb     <DPbyte_CE
ROM:F89D                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:F8A0                 ldb     <DPbyte_CE
ROM:F8A2                 incb
ROM:F8A3                 cmpb    #$D3 ; +
ROM:F8A5                 bcs     loc_F89B
ROM:F8A7                 jmp     sub_F70D
ROM:F8A7 ; End of function sub_F894
ROM:F8A7
ROM:F8AA
ROM:F8AA ; =============== S U B R O U T I N E =======================================
ROM:F8AA
ROM:F8AA
ROM:F8AA sub_F8AA:
ROM:F8AA                 ldd     #$BFAE
ROM:F8AD                 std     ,y++
ROM:F8AF                 ldd     #$BFB3
ROM:F8B2                 std     ,y++
ROM:F8B4                 std     ,y++
ROM:F8B6                 std     ,y++
ROM:F8B8                 std     ,y++
ROM:F8BA                 ldd     #$8040
ROM:F8BD                 std     ,y++
ROM:F8BF                 ldb     #$C9 ; +
ROM:F8C1                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:F8C4                 ldb     #$CA ; -
ROM:F8C6                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:F8C9                 jmp     sub_F70D
ROM:F8C9 ; End of function sub_F8AA
ROM:F8C9
ROM:F8CC
ROM:F8CC ; =============== S U B R O U T I N E =======================================
ROM:F8CC
ROM:F8CC
ROM:F8CC sub_F8CC:
ROM:F8CC                 lda     <DPbyte_C6
ROM:F8CE                 cmpa    #1
ROM:F8D0                 bhi     loc_F8D9
ROM:F8D2                 ldd     #0
ROM:F8D5                 std     <DPbyte_C2
ROM:F8D7                 sta     <DPbyte_C4
ROM:F8D9
ROM:F8D9 loc_F8D9:
ROM:F8D9                 ldd     #$6000
ROM:F8DC                 std     ,y++
ROM:F8DE                 ldd     #$BFAF
ROM:F8E1                 std     ,y++
ROM:F8E3                 ldd     #$8040
ROM:F8E6                 std     ,y++
ROM:F8E8                 ldd     <DPbyte_C2
ROM:F8EA                 addd    #1
ROM:F8ED                 tst     <DPbyte_C4
ROM:F8EF                 bne     loc_F900
ROM:F8F1                 cmpb    #$FC ; n
ROM:F8F3                 bcs     loc_F8FC
ROM:F8F5                 lda     #1
ROM:F8F7                 sta     <DPbyte_C4
ROM:F8F9                 ldd     #0
ROM:F8FC
ROM:F8FC loc_F8FC:
ROM:F8FC                 std     <DPbyte_C2
ROM:F8FE                 bra     loc_F917
ROM:F900 ; ---------------------------------------------------------------------------
ROM:F900
ROM:F900 loc_F900:
ROM:F902                 bcs     loc_F906
ROM:F904                 clrb
ROM:F905                 inca
ROM:F906
ROM:F906 loc_F906:
ROM:F906                 cmpa    #8
ROM:F908                 bcs     loc_F90F
ROM:F90A                 clr     <DPbyte_C4
ROM:F90C                 ldd     #0
ROM:F90F
ROM:F90F loc_F90F:
ROM:F90F                 std     <DPbyte_C2
ROM:F911                 cmpb    #$7F ; 
ROM:F913                 bcs     loc_F917
ROM:F915                 ldb     #$7F ; 
ROM:F917
ROM:F917 loc_F917:
ROM:F917                 oraa    #$70 ; p
ROM:F919                 std     ,y++
ROM:F91B                 ldd     #$6280
ROM:F91E                 std     ,y++
ROM:F920                 ldd     #$BFBC
ROM:F923                 std     ,y++
ROM:F925                 ldd     #$7200
ROM:F928                 std     ,y++
ROM:F92A                 ldb     <DPbyte_C4
ROM:F92C                 bne     loc_F932
ROM:F930                 bra     loc_F934
ROM:F932 ; ---------------------------------------------------------------------------
ROM:F932
ROM:F932 loc_F932:
ROM:F932                 ldb     #$CD ; -
ROM:F934
ROM:F934 loc_F934:                               ; Print text string from pointer table
ROM:F934                 jsr     sub_E7C7
ROM:F937                 ldb     #$CB ; -
ROM:F939                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:F93C                 jmp     sub_F70D
ROM:F93C ; End of function sub_F8CC
ROM:F93C
ROM:F93F
ROM:F93F ; =============== S U B R O U T I N E =======================================
ROM:F93F
ROM:F93F
ROM:F93F sub_F93F:
ROM:F93F                 ldd     #$BFC8
ROM:F942                 std     ,y++
ROM:F944                 ldx     #$38 ; 8
ROM:F947                 ldd     #$BFCC
ROM:F94A
ROM:F94A loc_F94A:
ROM:F94A                 std     ,y++
ROM:F94C                 leax    -1,x
ROM:F94E                 bne     loc_F94A
ROM:F950                 ldd     #$8040
ROM:F953                 std     ,y++
ROM:F955                 jmp     sub_F70D
ROM:F955 ; End of function sub_F93F
ROM:F955
ROM:F958
ROM:F958 ; =============== S U B R O U T I N E =======================================
ROM:F958
ROM:F958
ROM:F958 sub_F958:
ROM:F958                 ldd     #$BFAE
ROM:F95B                 std     ,y++
ROM:F95D                 ldd     #$8040
ROM:F960                 std     ,y++
ROM:F962                 ldd     #$7200
ROM:F965                 std     ,y++
ROM:F967                 lds     #$4FFF
ROM:F96B                 ldb     #$C2 ; -
ROM:F96D                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:F970                 lda     #$5D ; ]
ROM:F972                 sta     MW0
ROM:F975                 tst     IO_Port_1
ROM:F978                 bpl     loc_F97F
ROM:F97A                 tst     IO_Port_1
ROM:F97D                 bpl     loc_F98A
ROM:F97F
ROM:F97F loc_F97F:
ROM:F97F                 ldb     #$C3 ; +
ROM:F981                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:F984                 ldu     #off_F727
ROM:F987                 jmp     sub_F70D
ROM:F98A ; ---------------------------------------------------------------------------
ROM:F98A
ROM:F98A loc_F98A:
ROM:F98A                 ldd     #$6280
ROM:F98D                 std     ,y++
ROM:F98F                 clr     <DPbyte_CC
ROM:F991                 ldx     #word_FB4B
ROM:F994
ROM:F994 loc_F994:
ROM:F994                 lds     #sub_F99B
ROM:F998                 jmp     loc_FB38
ROM:F998 ; End of function sub_F958
ROM:F998
ROM:F99B
ROM:F99B ; =============== S U B R O U T I N E =======================================
ROM:F99B
ROM:F99B
ROM:F99B sub_F99B:
ROM:F99B                 beq     loc_FA19
ROM:F99D                 std     <DPbyte_D2
ROM:F99F                 inc     <DPbyte_CC
ROM:F9A1                 lds     #$4FFF
ROM:F9A5                 ldd     6,x
ROM:F9A7                 std     ,y++
ROM:F9A9                 ldd     #$1E98
ROM:F9AC                 std     ,y++
ROM:F9AE                 ldd     word_3032
ROM:F9B1                 std     ,y++
ROM:F9B3                 std     ,y++
ROM:F9B5                 std     ,y++
ROM:F9B7                 std     ,y++
ROM:F9B9                 ldd     word_3002
ROM:F9BC                 std     ,y++
ROM:F9BE                 tfr     x, d
ROM:F9C0                 subd    #$FB4B
ROM:F9C3                 aslb
ROM:F9C4                 lda     #3
ROM:F9C6
ROM:F9C6 loc_F9C6:
ROM:F9C6                 aslb
ROM:F9C7                 bcs     loc_F9CE
ROM:F9C9                 ldu     word_3020+2
ROM:F9CC                 bra     loc_F9D1
ROM:F9CE ; ---------------------------------------------------------------------------
ROM:F9CE
ROM:F9CE loc_F9CE:
ROM:F9CE                 ldu     word_3032
ROM:F9D1
ROM:F9D1 loc_F9D1:
ROM:F9D1                 stu     ,y++
ROM:F9D3                 deca
ROM:F9D4                 bpl     loc_F9C6
ROM:F9D6                 ldd     word_3002
ROM:F9D9                 std     ,y++
ROM:F9DB                 std     ,y++
ROM:F9DD                 lda     ,x
ROM:F9DF                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:F9E2                 lda     1,x
ROM:F9E4                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:F9E7                 ldd     word_3002
ROM:F9EA                 std     ,y++
ROM:F9EC                 lda     2,x
ROM:F9EE                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:F9F1                 lda     3,x
ROM:F9F3                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:F9F6                 ldd     word_3002
ROM:F9F9                 std     ,y++
ROM:F9FB                 lda     4,x
ROM:F9FD                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:FA00                 lda     5,x
ROM:FA02                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:FA05                 ldd     word_3002
ROM:FA08                 std     ,y++
ROM:FA0A                 lda     <DPbyte_D2
ROM:FA0C                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:FA0F                 lda     <DPbyte_D3
ROM:FA11                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:FA14                 ldd     #$8040
ROM:FA17                 std     ,y++
ROM:FA19
ROM:FA19 loc_FA19:
ROM:FA19                 leax    8,x
ROM:FA1B                 cmpx    #word_FB73
ROM:FA1E                 lbcs    loc_F994
ROM:FA22                 lds     #$4FFF
ROM:FA26                 tst     <DPbyte_CC
ROM:FA28                 bne     loc_FA2E
ROM:FA2A                 ldb     #$C5 ; +
ROM:FA2C                 bra     loc_FA35
ROM:FA2E ; ---------------------------------------------------------------------------
ROM:FA2E
ROM:FA2E loc_FA2E:
ROM:FA2E                 ldb     #$C4 ; -
ROM:FA30                 jsr     sub_E7C7        ; Print text string from pointer table
ROM:FA35
ROM:FA35 loc_FA35:                               ; Print text string from pointer table
ROM:FA35                 jsr     sub_E7C7
ROM:FA38                 ldx     #off_FAE1
ROM:FA3B                 clr     <DPbyte_CC
ROM:FA3D                 ldd     #$6480
ROM:FA40                 std     ,y++
ROM:FA42
ROM:FA42 loc_FA42:
ROM:FA42                 tfr     x, d
ROM:FA44                 subd    #off_FAE9
ROM:FA47                 lsrb
ROM:FA48                 lds     #sub_FA4E
ROM:FA4C                 jmp     [,x]
ROM:FA4C ; End of function sub_F99B
ROM:FA4C
ROM:FA4E
ROM:FA4E ; =============== S U B R O U T I N E =======================================
ROM:FA4E
ROM:FA4E
ROM:FA4E sub_FA4E:
ROM:FA4E                 beq     loc_FAC1
ROM:FA50                 std     <DPbyte_D2
ROM:FA52                 inc     <DPbyte_CC
ROM:FA54                 cmpx    #off_FAF9
ROM:FA57                 bcc     loc_FA92
ROM:FA59                 ldd     2,x
ROM:FA5B                 std     ,y++
ROM:FA5D                 ldd     #$1EA2
ROM:FA60                 std     ,y++
ROM:FA62                 ldd     word_3032
ROM:FA65                 std     ,y++
ROM:FA67                 std     ,y++
ROM:FA69                 std     ,y++
ROM:FA6B                 ldd     word_3020+2
ROM:FA6E                 std     ,y++
ROM:FA70                 ldd     word_3002
ROM:FA73                 std     ,y++
ROM:FA75                 tfr     x, d
ROM:FA77                 subd    #off_FAE1
ROM:FA7A                 aslb
ROM:FA7B                 aslb
ROM:FA7C                 addb    #$50 ; P
ROM:FA7E                 lda     #3
ROM:FA80
ROM:FA80 loc_FA80:
ROM:FA80                 aslb
ROM:FA81                 bcs     loc_FA88
ROM:FA83                 ldu     word_3020+2
ROM:FA86                 bra     loc_FA8B
ROM:FA88 ; ---------------------------------------------------------------------------
ROM:FA88
ROM:FA88 loc_FA88:
ROM:FA88                 ldu     word_3032
ROM:FA8B
ROM:FA8B loc_FA8B:
ROM:FA8B                 stu     ,y++
ROM:FA8D                 deca
ROM:FA8E                 bpl     loc_FA80
ROM:FA90                 bra     loc_FAA9
ROM:FA92 ; ---------------------------------------------------------------------------
ROM:FA92
ROM:FA92 loc_FA92:
ROM:FA92                 ldd     2,x
ROM:FA94                 std     ,y++
ROM:FA99                 std     ,y++
ROM:FA9B                 tfr     x, d
ROM:FA9D                 subd    #off_FAF9
ROM:FAA0                 lsrb
ROM:FAA1                 lds     #$3018
ROM:FAA5                 ldd     b,s
ROM:FAA7                 std     ,y++
ROM:FAA9
ROM:FAA9 loc_FAA9:
ROM:FAA9                 ldd     word_3002
ROM:FAAC                 std     ,y++
ROM:FAAE                 lds     #$4FFF
ROM:FAB2                 lda     <DPbyte_D2
ROM:FAB4                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:FAB7                 lda     <DPbyte_D3
ROM:FAB9                 jsr     Display_Vect_BCD ; Display BCD numbers
ROM:FABC                 ldd     #$8040
ROM:FABF                 std     ,y++
ROM:FAC1
ROM:FAC1 loc_FAC1:
ROM:FAC1                 leax    4,x
ROM:FAC3                 cmpx    #off_FAF9+$10
ROM:FAC6                 lbcs    loc_FA42
ROM:FACA                 lds     #$4FFF
ROM:FACE                 tst     <DPbyte_CC
ROM:FAD0                 bne     loc_FAD6
ROM:FAD2                 ldb     #$C8 ; +
ROM:FAD4                 bra     loc_FAD8
ROM:FAD6 ; ---------------------------------------------------------------------------
ROM:FAD6
ROM:FAD6 loc_FAD6:
ROM:FAD8
ROM:FAD8 loc_FAD8:                               ; Print text string from pointer table
ROM:FAD8                 jsr     sub_E7C7
ROM:FADB                 ldu     #off_F727
ROM:FADE                 jmp     sub_F70D
ROM:FADE ; End of function sub_FA4E
ROM:FADE
ROM:FADE ; ---------------------------------------------------------------------------
ROM:FB09
ROM:FB09 ; =============== S U B R O U T I N E =======================================
ROM:FB09
ROM:FB09
ROM:FB09 sub_FB09:
ROM:FB09
ROM:FB09 ; FUNCTION CHUNK AT ROM:FBF6 SIZE 00000026 BYTES
ROM:FB09
ROM:FB09                 lds     #sub_FB10
ROM:FB0D                 jmp     loc_FBF6
ROM:FB0D ; End of function sub_FB09
ROM:FB0D
ROM:FB10
ROM:FB10 ; =============== S U B R O U T I N E =======================================
ROM:FB10
ROM:FB10
ROM:FB10 sub_FB10:
ROM:FB10                 cmpd    #1
ROM:FB14                 beq     loc_FB19
ROM:FB16                 jmp     sub_FA4E
ROM:FB19 ; ---------------------------------------------------------------------------
ROM:FB19
ROM:FB19 loc_FB19:
ROM:FB19                 ldu     #2
ROM:FB1C
ROM:FB1C loc_FB1C:
ROM:FB1C                 lds     #sub_FB23
ROM:FB20                 jmp     loc_FC0D
ROM:FB20 ; End of function sub_FB10
ROM:FB20
ROM:FB23
ROM:FB23 ; =============== S U B R O U T I N E =======================================
ROM:FB23
ROM:FB23
ROM:FB23 sub_FB23:
ROM:FB23                 cmpd    word_F34E,u
ROM:FB28                 beq     loc_FB2D
ROM:FB2A                 jmp     sub_FA4E
ROM:FB2D ; ---------------------------------------------------------------------------
ROM:FB2D
ROM:FB2D loc_FB2D:
ROM:FB2D                 leau    2,u
ROM:FB2F                 cmpu    #$20 ;  
ROM:FB33                 bcs     loc_FB1C
ROM:FB35                 jmp     sub_FA4E
ROM:FB35 ; End of function sub_FB23
ROM:FB35
ROM:FB38 ; ---------------------------------------------------------------------------
ROM:FB38 ; START OF FUNCTION CHUNK FOR sub_FE7C
ROM:FB38
ROM:FB38 loc_FB38:
ROM:FB38                 ldd     ,x
ROM:FB3A                 std     DVDDH
ROM:FB3D                 ldd     2,x
ROM:FB3F                 std     DVSRH
ROM:FB42                 mul
ROM:FB43                 ldd     MW0
ROM:FB46                 cmpd    4,x
ROM:FB49                 jmp     ,s
ROM:FB49 ; END OF FUNCTION CHUNK FOR sub_FE7C
ROM:FB49 ; ---------------------------------------------------------------------------
ROM:FB75
ROM:FB75 ; =============== S U B R O U T I N E =======================================
ROM:FB75
ROM:FB75
ROM:FB75 sub_FB75:
ROM:FB75                 ldd     #$5555
ROM:FB78                 std     MReg0F          ; Math zero constant
ROM:FB7B                 lda     #$57 ; W
ROM:FB7D                 sta     MW0
ROM:FB80                 bra     word_FB73
ROM:FB80 ; End of function sub_FB75
ROM:FB80
ROM:FB82
ROM:FB82 ; =============== S U B R O U T I N E =======================================
ROM:FB82
ROM:FB82
ROM:FB82 sub_FB82:
ROM:FB82                 ldd     #$AAAA
ROM:FB85                 std     MReg0F          ; Math zero constant
ROM:FB88                 lda     #$58 ; X
ROM:FB8A                 sta     MW0
ROM:FB8D                 bra     word_FB73
ROM:FB8D ; End of function sub_FB82
ROM:FB8D
ROM:FB8F
ROM:FB8F ; =============== S U B R O U T I N E =======================================
ROM:FB8F
ROM:FB8F
ROM:FB8F sub_FB8F:
ROM:FB8F                 ldd     #$5555
ROM:FB92                 std     MReg0F          ; Math zero constant
ROM:FB95                 lda     #$59 ; Y
ROM:FB97                 sta     MW0
ROM:FB9A                 bra     word_FB73
ROM:FB9A ; End of function sub_FB8F
ROM:FB9A
ROM:FB9C
ROM:FB9C ; =============== S U B R O U T I N E =======================================
ROM:FB9C
ROM:FB9C
ROM:FB9C sub_FB9C:
ROM:FB9C                 lda     #$5A ; Z
ROM:FB9E                 sta     MW0
ROM:FBA1                 bra     word_FB73
ROM:FBA1 ; End of function sub_FB9C
ROM:FBA1
ROM:FBA3
ROM:FBA3 ; =============== S U B R O U T I N E =======================================
ROM:FBA3
ROM:FBA3
ROM:FBA3 sub_FBA3:
ROM:FBA3                 lda     #$5B ; [
ROM:FBA5                 sta     MW0
ROM:FBA8                 bra     word_FB73
ROM:FBA8 ; End of function sub_FBA3
ROM:FBA8
ROM:FBAA
ROM:FBAA ; =============== S U B R O U T I N E =======================================
ROM:FBAA
ROM:FBAA
ROM:FBAA sub_FBAA:
ROM:FBAA                 ldd     #$5555
ROM:FBAD                 std     MReg00          ; Math result X
ROM:FBB0                 lda     #$5C ; \
ROM:FBB2                 sta     MW0
ROM:FBB5                 nop
ROM:FBB6                 ldd     MReg01          ; Math result Y
ROM:FBB9                 cmpd    #$5555
ROM:FBBD                 bra     word_FB73
ROM:FBBD ; End of function sub_FBAA
ROM:FBBD
ROM:FBBF
ROM:FBBF ; =============== S U B R O U T I N E =======================================
ROM:FBBF
ROM:FBBF
ROM:FBBF sub_FBBF:
ROM:FBBF                 ldd     #$AAAA
ROM:FBC2                 std     MReg00          ; Math result X
ROM:FBC5                 lda     #$5C ; \
ROM:FBC7                 sta     MW0
ROM:FBCA                 nop
ROM:FBCB                 ldd     MReg01          ; Math result Y
ROM:FBCE                 cmpd    #$AAAA
ROM:FBD2                 bra     word_FB73
ROM:FBD2 ; End of function sub_FBBF
ROM:FBD2
ROM:FBD4
ROM:FBD4 ; =============== S U B R O U T I N E =======================================
ROM:FBD4
ROM:FBD4
ROM:FBD4 sub_FBD4:
ROM:FBD4                 ldd     #$2696
ROM:FBD7                 std     MReg0C          ; XT
ROM:FBDA                 ldd     #$1B2C
ROM:FBDD                 std     MReg0D          ; YT
ROM:FBE0                 ldd     #$4000
ROM:FBE3                 std     MReg0E          ; ZT
ROM:FBE6                 lda     #$5D ; ]
ROM:FBE8                 sta     MW0
ROM:FBEB                 mul
ROM:FBEC                 ldd     MReg00          ; Math result X
ROM:FBEF                 cmpd    #$B6A
ROM:FBF3                 jmp     word_FB73
ROM:FBF3 ; End of function sub_FBD4
ROM:FBF3
ROM:FBF6 ; ---------------------------------------------------------------------------
ROM:FBF6 ; START OF FUNCTION CHUNK FOR sub_FB09
ROM:FBF6
ROM:FBF6 loc_FBF6:
ROM:FBF6                 lda     #$5A ; Z
ROM:FBF8                 sta     MW0
ROM:FBFB                 ldd     #0
ROM:FBFE                 std     MReg0D          ; YT
ROM:FC01                 ldd     #$4000
ROM:FC04                 std     MReg0E          ; ZT
ROM:FC07                 ldd     #1
ROM:FC0A                 std     MReg0C          ; XT
ROM:FC0D
ROM:FC0D loc_FC0D:                               ; XT
ROM:FC0D                 std     MReg0C
ROM:FC10                 lda     #$5E ; ^
ROM:FC12                 sta     MW0
ROM:FC15                 mul
ROM:FC16                 ldd     MReg00          ; Math result X
ROM:FC19                 jmp     word_FB73
ROM:FC19 ; END OF FUNCTION CHUNK FOR sub_FB09
ROM:FC1C
ROM:FC1C ; =============== S U B R O U T I N E =======================================
ROM:FC1C
ROM:FC1C
ROM:FC1C sub_FC1C:
ROM:FC1C                 ldu     #$5028
ROM:FC1F                 ldd     #5
ROM:FC22
ROM:FC22 loc_FC22:
ROM:FC22                 std     ,u
ROM:FC24                 addd    #1
ROM:FC27                 leau    8,u
ROM:FC29                 cmpu    #$6000
ROM:FC2D                 bcs     loc_FC22
ROM:FC2F                 ldd     #0
ROM:FC32                 std     MReg0F          ; Math zero constant
ROM:FC35                 ldd     #$4000
ROM:FC38                 std     MReg10          ; Math 1.000 constant
ROM:FC3B                 ldd     #4
ROM:FC3E                 std     MW1             ; Point BIC to $5020 MReg10
ROM:FC41                 ldu     #8
ROM:FC44
ROM:FC44 loc_FC44:
ROM:FC44                 sta     WDCLR
ROM:FC47                 tfr     u, d
ROM:FC49                 lsra
ROM:FC4A                 rorb
ROM:FC4B
ROM:FC4B loc_FC4B:
ROM:FC4B                 lda     #$5B ; [
ROM:FC4D                 sta     MW0             ; Test routine $5B
ROM:FC50                 decb
ROM:FC51                 bne     loc_FC4B
ROM:FC53                 lda     #$5F ; _
ROM:FC55                 sta     MW0
ROM:FC58                 mul
ROM:FC59                 cmpu    MReg00          ; Math result X
ROM:FC5D                 beq     loc_FC62
ROM:FC5F                 jmp     word_FB73
ROM:FC62 ; ---------------------------------------------------------------------------
ROM:FC62
ROM:FC62 loc_FC62:
ROM:FC62                 tfr     u, d
ROM:FC64                 leau    d,u
ROM:FC66                 cmpu    #$200
ROM:FC6A                 bcs     loc_FC44
ROM:FC6C                 ldd     #0
ROM:FC6F                 jmp     word_FB73
ROM:FC6F ; End of function sub_FC1C
ROM:FC6F
ROM:FC72
ROM:FC72 ; =============== S U B R O U T I N E =======================================
ROM:FC72
ROM:FC72
ROM:FC72 sub_FC72:
ROM:FC72                 ldd     #$1B2C
ROM:FC75                 std     MReg0C          ; XT
ROM:FC78                 ldd     #0
ROM:FC7B                 std     MReg0D          ; YT
ROM:FC7E                 ldd     #$4000
ROM:FC81                 std     MReg0E          ; ZT
ROM:FC84                 lda     #$5D ; ]
ROM:FC86                 sta     MW0
ROM:FC89                 mul
ROM:FC8A                 ldd     #$196A
ROM:FC8D                 std     MReg0C          ; XT
ROM:FC90                 ldd     #0
ROM:FC93                 std     MReg0D          ; YT
ROM:FC96                 ldd     #$4000
ROM:FC99                 std     MReg0E          ; ZT
ROM:FC9C                 lda     #$5E ; ^
ROM:FC9E                 sta     MW0
ROM:FCA1                 mul
ROM:FCA2                 ldd     MReg00          ; Math result X
ROM:FCA5                 cmpd    #$3496
ROM:FCA9                 jmp     word_FB73
ROM:FCA9 ; End of function sub_FC72
ROM:FCA9
ROM:FCAC
ROM:FCAC ; =============== S U B R O U T I N E =======================================
ROM:FCAC
ROM:FCAC
ROM:FCAC sub_FCAC:
ROM:FCAC                 aslb
ROM:FCAD                 aslb
ROM:FCAE                 ldu     #word_FCD1
ROM:FCB1                 leau    b,u
ROM:FCB3                 ldd     ,u
ROM:FCB5                 std     MReg0C          ; XT
ROM:FCB8                 ldd     2,u
ROM:FCBA                 std     MReg0D          ; YT
ROM:FCBD                 ldd     4,u
ROM:FCBF                 std     MReg0E          ; ZT
ROM:FCC2                 lda     #$5D ; ]
ROM:FCC4                 sta     MW0
ROM:FCC7                 mul
ROM:FCC8                 ldd     MReg00          ; Math result X
ROM:FCCB                 cmpd    6,u
ROM:FCCE                 jmp     word_FB73
ROM:FCCE ; End of function sub_FCAC
ROM:FCCE
ROM:FCCE ; ---------------------------------------------------------------------------
ROM:FD07 ; ---------------------------------------------------------------------------
ROM:FD07 ; START OF FUNCTION CHUNK FOR sub_6532
ROM:FD07
ROM:FD07 Check_Test_Diag:
ROM:FD07                 lda     IO_Port_0
ROM:FD0A                 anda    #$10
ROM:FD0C                 ldb     IO_Port_1
ROM:FD0F                 andb    #4
ROM:FD11                 cmpd    #0
ROM:FD15                 beq     loc_FD1A
ROM:FD17                 jmp     loc_F720
ROM:FD1A ; ---------------------------------------------------------------------------
ROM:FD1A
ROM:FD1A loc_FD1A:                               ; Self test and Diag selected
ROM:FD1A                 sta     WDCLR
ROM:FD1D                 lda     #$FF
ROM:FD1F                 sta     LED1
ROM:FD22                 sta     LED2
ROM:FD25                 sta     LED3
ROM:FD28                 ldb     OPT0            ; Get diag test option
ROM:FD2B                 comb
ROM:FD2C                 ldu     #Diag_Test_Table
ROM:FD2F
ROM:FD2F loc_FD2F:
ROM:FD2F                 cmpb    ,u+
ROM:FD31                 bne     loc_FD5A
ROM:FD33                 sta     EVGRESET
ROM:FD36                 ldy     #0              ; Point to Vector RAM start instruction
ROM:FD3A                 ldd     #$BFAE          ; Vector instruction JRSL 0x1FAE
ROM:FD3D                 std     ,y++
ROM:FD3F                 ldd     #$8040          ; Vector instruction CNTR 0x40
ROM:FD42                 std     ,y++
ROM:FD44                 lda     ,u              ; Get BCD number of diag test from table
ROM:FD46                 lds     #$4FFF          ; Reset stack pointer
ROM:FD4A                 jsr     Display_Vect_BCD ; Display 2 digit BCD number in A
ROM:FD4D                 ldd     #$2020          ; Vector HALT
ROM:FD50                 std     ,y++
ROM:FD52                 std     ,y++
ROM:FD54                 sta     EVGGO
ROM:FD57                 ldu     #sub_FDBC       ; Bounds check
ROM:FD5A
ROM:FD5A loc_FD5A:
ROM:FD5A                 leau    1,u
ROM:FD5C                 cmpu    #sub_FDBC
ROM:FD60                 bcs     loc_FD2F
ROM:FD62                 ldb     OPT0
ROM:FD65                 comb
ROM:FD66                 tfr     b, a
ROM:FD68                 andb    #$F
ROM:FD6C                 cmpa    #$C0 ; +
ROM:FD6E                 beq     loc_FD72
ROM:FD70                 clr     <DPbyte_D1
ROM:FD72
ROM:FD72 loc_FD72:
ROM:FD72                 ldx     #JMPTBL_Diag
ROM:FD75
ROM:FD75 loc_FD75:
ROM:FD75                 cmpa    ,x+
ROM:FD77                 bne     loc_FD7B
ROM:FD79                 jmp     [,x]
ROM:FD7B ; ---------------------------------------------------------------------------
ROM:FD7B
ROM:FD7B loc_FD7B:
ROM:FD7B                 leax    2,x
ROM:FD7D                 cmpx    #Diag_Test_Table ; Bounds check
ROM:FD80                 bcs     loc_FD75
ROM:FD82                 jmp     loc_FF24
ROM:FD82 ; END OF FUNCTION CHUNK FOR sub_6532
ROM:FD82 ; ---------------------------------------------------------------------------
ROM:FD9A Diag_Test_Table:fcb $E0, $10, $E1, $11, $E2, $12, $E3, $13
ROM:FDBC
ROM:FDBC ; =============== S U B R O U T I N E =======================================
ROM:FDBC
ROM:FDBC
ROM:FDBC sub_FDBC:
ROM:FDBC                 tstb
ROM:FDBD                 beq     loc_FDC2
ROM:FDBF                 jmp     loc_FF24
ROM:FDC2 ; ---------------------------------------------------------------------------
ROM:FDC2
ROM:FDC2 loc_FDC2:
ROM:FDC2                 tfr     s, d
ROM:FDC4                 anda    #$40 ; @
ROM:FDC6                 andb    #1
ROM:FDC8                 cmpd    #0
ROM:FDCC                 bne     loc_FDD4
ROM:FDCE                 ldu     #LED1
ROM:FDD1                 jmp     loc_FEFF
ROM:FDD4 ; ---------------------------------------------------------------------------
ROM:FDD4
ROM:FDD4 loc_FDD4:
ROM:FDD4                 jmp     Check_Test_Diag
ROM:FDD4 ; End of function sub_FDBC
ROM:FDD4
ROM:FDD7
ROM:FDD7 ; =============== S U B R O U T I N E =======================================
ROM:FDD7
ROM:FDD7
ROM:FDD7 sub_FDD7:
ROM:FDD7                 tstb
ROM:FDD8                 beq     loc_FDDD
ROM:FDDA                 jmp     loc_FF24
ROM:FDDD ; ---------------------------------------------------------------------------
ROM:FDDD
ROM:FDDD loc_FDDD:
ROM:FDDD                 tfr     s, d
ROM:FDE3                 cmpd    #0
ROM:FDE7                 bne     loc_FDEF
ROM:FDE9                 ldu     #LED2
ROM:FDEC                 jmp     loc_FEFF
ROM:FDEF ; ---------------------------------------------------------------------------
ROM:FDEF
ROM:FDEF loc_FDEF:
ROM:FDEF                 jmp     Check_Test_Diag
ROM:FDEF ; End of function sub_FDD7
ROM:FDEF
ROM:FDF2
ROM:FDF2 ; =============== S U B R O U T I N E =======================================
ROM:FDF2
ROM:FDF2
ROM:FDF2 sub_FDF2:
ROM:FDF2                 cmpb    #6
ROM:FDF4                 bne     loc_FE0E
ROM:FDF6                 tst     <DPbyte_D1
ROM:FDF8                 bne     loc_FE0C
ROM:FDFA                 ldx     #$800
ROM:FDFD                 lda     #0
ROM:FDFF
ROM:FDFF loc_FDFF:
ROM:FDFF                 sta     ,x+
ROM:FE01                 adda    #5
ROM:FE03                 cmpx    #$1000
ROM:FE06                 bcs     loc_FDFF
ROM:FE08                 lda     #$FF
ROM:FE0A                 sta     <DPbyte_D1
ROM:FE0C
ROM:FE0C loc_FE0C:
ROM:FE0C                 bra     loc_FE34
ROM:FE0E ; ---------------------------------------------------------------------------
ROM:FE0E
ROM:FE0E loc_FE0E:
ROM:FE0E                 clr     <DPbyte_D1
ROM:FE10                 sta     EVGRESET
ROM:FE13                 ldx     #Diag_Vect_Data ; Point to diag vector test instructions
ROM:FE16                 aslb
ROM:FE17                 aslb
ROM:FE18                 abx
ROM:FE19                 cmpx    #$FE4F
ROM:FE1C                 bcs     loc_FE21
ROM:FE1E                 jmp     loc_FF24
ROM:FE21 ; ---------------------------------------------------------------------------
ROM:FE21
ROM:FE21 loc_FE21:
ROM:FE21                 ldd     ,x
ROM:FE23                 std     >$0000
ROM:FE26                 ldd     2,x
ROM:FE28                 std     >$0002
ROM:FE2B                 ldd     #$2020
ROM:FE2E                 std     >$0004
ROM:FE31                 sta     EVGGO           ; Run diag vector test
ROM:FE34
ROM:FE34 loc_FE34:
ROM:FE34                 jmp     Check_Test_Diag
ROM:FE34 ; End of function sub_FDF2
ROM:FE34
ROM:FE34 ; ---------------------------------------------------------------------------
ROM:FE4F
ROM:FE4F ; =============== S U B R O U T I N E =======================================
ROM:FE4F
ROM:FE4F
ROM:FE4F sub_FE4F:
ROM:FE4F                 ldx     #off_FCF1
ROM:FE52                 aslb
ROM:FE53                 abx
ROM:FE54                 ldy     #0
ROM:FE58
ROM:FE58 loc_FE58:
ROM:FE58                 cmpx    #Check_Test_Diag
ROM:FE5B                 bcs     loc_FE60
ROM:FE5D                 jmp     loc_FF24
ROM:FE60 ; ---------------------------------------------------------------------------
ROM:FE60
ROM:FE60 loc_FE60:
ROM:FE60                 sta     WDCLR
ROM:FE63                 leay    1,y
ROM:FE65                 cmpy    #$200
ROM:FE69                 bcs     loc_FE71
ROM:FE6B                 lds     #Check_Test_Diag
ROM:FE6F                 bra     loc_FE75
ROM:FE71 ; ---------------------------------------------------------------------------
ROM:FE71
ROM:FE71 loc_FE71:
ROM:FE71                 lds     #loc_FE58
ROM:FE75
ROM:FE75 loc_FE75:
ROM:FE75                 tfr     x, d
ROM:FE77                 subd    #off_FCFF
ROM:FE7A                 jmp     [,x]
ROM:FE7A ; End of function sub_FE4F
ROM:FE7A
ROM:FE7C
ROM:FE7C ; =============== S U B R O U T I N E =======================================
ROM:FE7C
ROM:FE7C
ROM:FE7C sub_FE7C:
ROM:FE7C
ROM:FE7C ; FUNCTION CHUNK AT ROM:FB38 SIZE 00000013 BYTES
ROM:FE7C
ROM:FE7C                 ldx     #word_FB4B
ROM:FE7F                 aslb
ROM:FE80                 aslb
ROM:FE81                 aslb
ROM:FE82                 abx
ROM:FE83                 ldy     #0
ROM:FE87
ROM:FE87 loc_FE87:
ROM:FE87                 cmpx    #word_FB73
ROM:FE8A                 bcs     loc_FE8F
ROM:FE8C                 jmp     loc_FF24
ROM:FE8F ; ---------------------------------------------------------------------------
ROM:FE8F
ROM:FE8F loc_FE8F:
ROM:FE8F                 sta     WDCLR
ROM:FE92                 leay    1,y
ROM:FE94                 cmpy    #$200
ROM:FE98                 bcs     loc_FEA0
ROM:FE9A
ROM:FE9A loc_FE9A:
ROM:FE9A                 lds     #Check_Test_Diag
ROM:FE9E                 bra     loc_FEA4
ROM:FEA0 ; ---------------------------------------------------------------------------
ROM:FEA0
ROM:FEA0 loc_FEA0:
ROM:FEA0                 lds     #loc_FE87
ROM:FEA4
ROM:FEA4 loc_FEA4:
ROM:FEA4                 jmp     loc_FB38
ROM:FEA4 ; End of function sub_FE7C
ROM:FEA4
ROM:FEA7
ROM:FEA7 ; =============== S U B R O U T I N E =======================================
ROM:FEA7
ROM:FEA7
ROM:FEA7 sub_FEA7:
ROM:FEA7                 andb    #7
ROM:FEA9                 beq     loc_FEAE
ROM:FEAB                 jmp     loc_FF24
ROM:FEAE ; ---------------------------------------------------------------------------
ROM:FEAE
ROM:FEAE loc_FEAE:
ROM:FEAE                 lda     #1
ROM:FEB0
ROM:FEB0 loc_FEB0:
ROM:FEB0                 stb     SOUNDRST
ROM:FEB3                 tfr     x, u
ROM:FEB5                 ldb     SOUNDIO
ROM:FEB8                 ldb     SOUNDIO+1
ROM:FEBB                 andb    #$40 ; @
ROM:FEBD                 bne     loc_FF03
ROM:FEC1
ROM:FEC1 loc_FEC1:
ROM:FEC1                 decb
ROM:FEC2                 bmi     loc_FF03
ROM:FEC4                 sta     WDCLR
ROM:FEC7                 tst     SOUNDIO+1
ROM:FECA                 bmi     loc_FEC1
ROM:FECC                 sta     SOUNDIO
ROM:FECF                 ldb     SOUNDIO+1
ROM:FED2                 bpl     loc_FF03
ROM:FED4                 ldx     #$100
ROM:FED7
ROM:FED7 loc_FED7:
ROM:FED7                 leax    -1,x
ROM:FED9                 beq     loc_FF03
ROM:FEDB                 sta     WDCLR
ROM:FEDE                 ldb     SOUNDIO+1
ROM:FEE1                 andb    #$40 ; @
ROM:FEE3                 beq     loc_FED7
ROM:FEE5                 tst     SOUNDIO+1
ROM:FEE8                 bmi     loc_FF03
ROM:FEEA                 cmpa    SOUNDIO
ROM:FEED                 bne     loc_FF03
ROM:FEEF                 ldb     SOUNDIO+1
ROM:FEF2                 andb    #$40 ; @
ROM:FEF4                 bmi     loc_FF03
ROM:FEF6                 asla
ROM:FEF7                 bcc     loc_FEB0
ROM:FEF9                 ldu     #$4682
ROM:FEFC                 jmp     *+3
ROM:FEFF
ROM:FEFF loc_FEFF:
ROM:FEFF                 lda     #0
ROM:FF01                 sta     ,u
ROM:FF03
ROM:FF03 loc_FF03:
ROM:FF03                 ldx     #0
ROM:FF06
ROM:FF06 loc_FF06:
ROM:FF06                 sta     WDCLR
ROM:FF09                 leax    1,x
ROM:FF0B                 cmpx    #$AC55
ROM:FF0E                 bcs     loc_FF06
ROM:FF10                 lda     #$FF
ROM:FF12                 sta     ,u
ROM:FF14                 ldx     #0
ROM:FF17
ROM:FF17 loc_FF17:
ROM:FF17                 sta     WDCLR
ROM:FF1A                 leax    1,x
ROM:FF1C                 cmpx    #$AC55
ROM:FF1F                 bcs     loc_FF17
ROM:FF21                 jmp     Check_Test_Diag
ROM:FF21 ; End of function sub_FEA7
ROM:FF21
ROM:FF24 ; ---------------------------------------------------------------------------
ROM:FF24 ; START OF FUNCTION CHUNK FOR sub_6532
ROM:FF24
ROM:FF24 loc_FF24:
ROM:FF24                 lda     #0
ROM:FF26                 sta     LED1
ROM:FF29                 sta     LED2
ROM:FF2C                 sta     LED3
ROM:FF2F                 ldx     #0
ROM:FF32
ROM:FF32 loc_FF32:
ROM:FF32                 sta     WDCLR
ROM:FF35                 leax    1,x
ROM:FF37                 cmpx    #$5600
ROM:FF3A                 bcs     loc_FF32
ROM:FF3C                 lda     #$FF
ROM:FF3E                 sta     LED1
ROM:FF41                 sta     LED2
ROM:FF44                 sta     LED3
ROM:FF47                 ldx     #0
ROM:FF4A
ROM:FF4A loc_FF4A:
ROM:FF4A                 sta     WDCLR
ROM:FF4D                 leax    1,x
ROM:FF4F                 cmpx    #$5600
ROM:FF52                 bcs     loc_FF4A
ROM:FF54                 jmp     Check_Test_Diag
ROM:FF54 ; END OF FUNCTION CHUNK FOR sub_6532
ROM:FF54 ; ---------------------------------------------------------------------------
ROM:FFFE ; end of ROM
ROM:FFFE
ROM:FFFE
ROM:FFFE                 end
