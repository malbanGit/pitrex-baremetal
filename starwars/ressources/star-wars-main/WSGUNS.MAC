	.TITLE	WSGUNS	GUNS AS SHOOTING OBJECTSWSMAIN GAME PLAY
	.INCLUDE	WSCOMN	;<<<<<<<<<<<<<<<<<<<<<<<<<<<<
				;===
A$UVP	==0			;UNIT VECTOR POINTER
A$BIC	==2			;BLOCK INDEX COUNTER, LO BANK
A$TYP	==3			;TYPE (O.DEAD; 3.EXPLODING
A$PIC	==4			;PICTURE #
A$DIE	==5			;PROCESS OF DIEING
A$GLW	==6			;PROCESS OF GLOWING
A$HTA	==7			;HITS AVAILABLE BEFORE DIEING
A$DMC	==8			;CUNENT DAMAGE COUNT
A$ROL	==9			;FORCE ROLL OF SHIP
A$AIM	==10.			;AIMED AT PLAYER
A$TRGT	==11.			;=O.GO FOR HOME BASE; =-1.PLAYER
;A$SPD	==12.			;UPDATE RATE IN DEEP SPACE
A$CHPC	==13.			;PC FOR CURRENT CHOREOG
A$CHOP	==15.			;OP CODE
A$CHTM	==16.			;TIMER
A$CHTW	==17.			;TWIRL FLAGS
A$CHMV	==18.			;TW+1, MOVE FLAGS
A$CHCN	==19.			;CONTROL MASK, UNTIL STRUCTURE
A$CHST	==21.			;STATUS TESTED BY CONTROL
A$CHRT	==23.			;RETURN PC, SUBROUTINE
A$IZE	==25.			;# OF BYTES PER RECORD
A$EQ	==3			;# OF ALIEN RECORDS IN SEQUENCE
				;---
G$UVP	==0			;MATH BOX POINTER
G$BIC	==2			;MATH BOX BIC, LO BANK
G$TYP	==3			;DESCRIPTOR OF GUN TYPE
G$MOV	==4			;MOVE ROUTINE
G$TMR	==5			;TIMER
G$IZE	==6
G$EQ	==6
				;---
				;---
M$AX	==-10+0
M$AY	==-10+0+2
M$AZ	==-10+0+0+4

M$BX	==-10+0+8
M$BY	==-10+0+8+2
M$BZ	==-10+0+8+4

M$CX	==-10+0+10
M$CY	==-10+0+10+2
M$CZ	==-10+0+10+4

M$TX	==-10+18+0
M$TY	==-10+18+2
M$TZ	==-10+18+4

M$VX	==-10+6
M$VY	==-10+6+8
M$VZ	==-10+6+10

				;===
	.GLOBL GD$MNT
				;---
				;D-PAGE RAM
	.GLOBB BJ.CX,BJ.CY
	.GLOBB BS.PLC,BS.PFL
	.GLOBB CL.GDS,CL.GP
	.GLOBB GN.PTR
	.GLOBB LZ.ON,LZ.CX,LZ.CY
	.GLOBB PT.LIV,PT.X,PT.Y,PT.Z
	.GLOBB SI.RSX
	.GLOBB S.GAS,S.ROL
	.GLOBB S2.PRM
				;---
				;RAM
	.GLOBL AM.PTR
	.GLOBL GUN,GUNZ
	.GLOBL Q.GHIT,Q.SHK
	.GLOBL WV.HRD
				;---
				;OUTSIDE ROUTINES
	.GLOBL AUDPH,AUDRS,AUDSH,AUDSS,AUDTC,AUDTCZ,AUDTL
	.GLOBL BG1GLW
	.GLOBL MGOWT
	.GLOBL OBJCENT
	.GLOBL PMSF2
	.GLOBL SCRSHT
	.GLOBL SPKHIT,SPKSHK
				;---
				;MATH BOX
	.GLOBL M$CNCT
	.GLOBL M$PERS,M$PSB2
	.GLOBL M$X0BC
	.GLOBL M.BIC
	.GLOBL M.DVD,M.DVN
	.GLOBL M.QUO
	.GLOBL M.S1
	.GLOBL M.U1
	.GLOBL M.X0,M.Y0,M.Z0
	.GLOBL M.XP,M.XT
	.GLOBL M.YP,M.YT
	.GLOBL M.ZP,M.ZT
				;---
				;VECTOR GENERATOR
	.GLOBL VGCNTR
	.GLOBL VGCURB,VGCURL,VGCURR,VGCURT
	.GLOBL VGCPRP,VGCTRQ,VGCWHT,VGCOPC,VGCOLR
	.GLOBL VGOFFY
	.GLOBL VGSCAL
	.GLOBL VJGNB,VJGNT,VJGNX
				;---
				;HARDWARE
	.GLOBL P.RND1
				;---
				;SHIFT ROUTINES
	.IRP .A,<3,4,5>
	.GLOBL ASRD'.A'
	.ENDR

	.IRP .A,<2>
	.GLOBL LSLD'.A'
	.ENDR
				;===

	.MACRO .PAGG		;GLOBAL PAGE NUMBERS
	.PAGEG U		;GUNS
	.ENDM

	.CSECT GUNS

	.PAGG
	.SBTTLE	GUN EQUATES, OFFSETS

				;===
TYP$LV	=1			;LIVE SHELL, FULLY ARMED
TYP$PR	=2			;PRETTY, BUT DISARMED
TYP$UN	=4			;UNIVERSE COORDS FOR GROUND SHOT, PANEL SHOT
TYP$GL	=10			;GLOWING AGAINST PLAYERS SHIELDS
TYP$HR	=20			;GUN HAS BEEN HURT BY PLAYER
				;===

TMOVE:				;MOVE ROUTINES
	.IRP .A,<ST,AM,LV,WF,WL,WR,BF,BL,BR,PL,PR>
	MOV$'.A=.-TMOVE/2
	.WORD MOV'.A
	.ENDR
ZMOVE:
				;===
	.PAGG
	.SBTTL	FIRE GUNS
FRAGUN::			;FIRE ALIENS GUN
				;X-->ALIEN PARM
				;U-->GUN PARM
	STU GN.PTR
	LDB #40
	STB G$TMR(U)
	LDB #TYP$LV
	STB G$TYP(U)
	LDB #MOV$AM
	STB G$MOV(U)
				;---
	LDA Q.SHK
	IFGT			;?STILL WAITING FOR 'CANT SHAKE HIM'?
	CMPX AM.PTR
	IFEQ			;?IS THIS THE ONE WE ARE POINTING AT?
	DEC Q.SHK		;COUNT DOWN ONE LESS SHOT
	IFEQ
	JSR SPKSHK		;I CANT SHAKE HIM
	ENDIF
	ENDIF
	ENDIF
				;---
	LDU G$UVP(U)		;U-->GUN UVP
	LDX A$UVP(X)		;X-->ALIEN UVP
	LDD M$TX(X)
	SUBD M$TX+M.S1
	STD 0(U)		;POSITION SHOT RELATIVE TO PLAYER
	LDD M$TY(X)
	SUBD M$TY+M.S1
	STD 2(U)		;Y POS
	LDD M$TZ(X)
	SUBD M$TZ+M.S1
	STD 4(U)		;Z POS
				;---
	JSR AUDTC		;TIE FIGHTER CANNONS
	RTS
				;===
TGNGD:				;GROUND BUNKERS
	.WORD GUNZ-<1*G$IZE>	;
	.WORD GUNZ-<1*G$IZE>	;1 MODERATE
	.WORD GUNZ-<2*G$IZE>
	.WORD GUNZ-<2*G$IZE>	;3 MODERATE
	.WORD GUNZ-<3*G$IZE>
	.WORD GUNZ-<3*G$IZE>	;5 MODERATE
	.WORD GUNZ-<4*G$IZE>
	.WORD GUNZ-<4*G$IZE>
	.WORD GUNZ-<5*G$IZE>
	.WORD GUNZ-<5*G$IZE>
	.WORD GUNZ-<6*G$IZE>
	.WORD GUNZ-<6*G$IZE>
ZGNGD:
				;
GNGDAVAIL:			;# OF GROUND GUNS
	LDB WV.HRD
	CMPB #ZGNGD-TGNGD/2
	IFHS			;LIMIT TO TABLE SIZE
	LDX #ZGNGD-2
	ELSE
	LSLB			;WORD ENTRIES
	LDX #TGNGD
	LDX B(X)
	ENDIF
	BRA TSTAVAIL
				;---
GNBSAVAIL:			;ONLY ALLOW BASE GUNS
	LDB WV.HRD
	CMPB #7
	IFHI			;LIMIT TO TABLE SIZE
	LDB #7
	ENDIF
	LSLB			;WORD ENTRIES
	LDX #TGNBS
	LDX B(X)
	BRA TSTAVAIL

GNAVAIL:			;FIND AN AVAILABLE GUN, PUT INTO GN.PTR AND X
				;ELSE POP TO PREVIOUS CALLER
	LDX #GUN
TSTAVAIL:
	BEGIN
	STX GN.PTR
	LDA G$TYP(X)
	BEQ 90$			;B IF FOUND A GOOD GUN
	LEAX G$IZE(X)
	CMPX #GUNZ
	HSEND
	LEAS 2(S)		;POP UP ONE MORE LEVEL IF NO GUNS FOUND
90$:
	RTS
				;===
TGNBS:				;BASE
	.WORD GUNZ-<1*G$IZE>
	.WORD GUNZ-<1*G$IZE>	;1 MODERATE
	.WORD GUNZ-<2*G$IZE>
	.WORD GUNZ-<2*G$IZE>	;3 MODERATE
	.WORD GUNZ-<3*G$IZE>
	.WORD GUNZ-<3*G$IZE>	;5 MODERATE
	.WORD GUNZ-<3*G$IZE>
	.WORD GUNZ-<4*G$IZE>

FRBFGN::			;BUNKER FIRES A FORWARD GUN
FRBLGN::			;BUNKER FIRES A LEFT DIAG GUN
FRBRGN::			;BUNKER FIRES A RIGHT GUN
	JSR GNGDAVAIL
				;
	LDA #70
	STA G$TMR(X)
	LDA #TYP$LV+TYP$UN
	STA G$TYP(X)
				;---
	LDU S2.PRM
				;
	TEMP	GRM,2
				;
	STX TMPGRM
				;
	LDD 2(U)
	SUBD M$TY+M.S1
	IFPL			;?BUNKER TO RIGHT OF PLAYER?
	LDA #MOV$BR		;THIS IS A RIGHT HAND BUNKER
	ELSE
	LDA #MOV$BL		;ELSE LEFT GUN
	ENDIF
	STA G$MOV(X)
				;
	LDX G$UVP(X)
	LDA 0(U)		;FORCE GROUND SHOTS ALWAYS TO FRONT
	SUBA M$TX+M.S1		;SHOT-ME, IF MINUS THEN FLIP ACTUAL LOC
	ANDA #80		;JUST PLAY WITH SIGN BIT TO FLIP
	EORA 0(U)
	LDB 1(U)
	STD 0(X)

	LDD 2(U)
	STD 2(X)

	LDD #GD$MNT		;START AT MINIMUM PLAYER HITE
	STD 4(X)
				;
	LDD 2(X)		;Y RELATIVE POSITION OF SHOT
	SUBD M$TY+M.S1
	STA 6(X)		;TEMP, +==>BUNKER TO RIGHT OF PLAYER
	IFMI
	NEGD			;ABSD
	ENDIF
	STD M.DVN		;***NUMERATOR
	LDD 0(X)
	SUBD M$TX+M.S1		;X RELATIVE DISTANCE TO TRAVEL
	STD M.DVD		;START DIVIDER
	LDD #200		;RESTORE DIVIDER
	STD M.DVN
	LDA M.QUO
	LSLA			;MOVE 4000(3FFF) AS ONE TO FFFF AS ONE
	LSLA
	IFCS
	CLRA			;NO ANGLE IF BAD DATA
	ENDIF
	STA 7(X)		;ANGLE TO PLAYER
				;---
	LDA SI.RSX		;DETERMINE DIRECTION BASED ON PLAYERS MOTION
	EORA 6(X)		;DIRECTION BUNKER LIES, + TO RIGHT
	IFMI			;?MOVING OPPOSITE OF BUNKER?
	CLR 6(X)		;THEN NORMAL ATTACK
	ELSE			;ELSE CHECK SOME MORE
	LDA SI.RSX
	IFMI
	NEGA
	ENDIF
	LSLA			;CONVERT TO ANGLE
	CMPA 7(X)
	IFLS			;?SITE IS ON NEGATIVE SIDE OF BUNKER?
	CLR 6(X)		;THEN NORMAL ALSO
	ELSE
	LDA #0FF		;ELSE REVERSE ATTACK PREFERENCE
	STA 6(X)
	LDX TMPGRM
	LDA G$MOV(X)		;REVERSE MOVEMENT ALSO
	CMPA #MOV$BR
	IFEQ			;BUNKER ON RIGHT
	LDA #MOV$BL		;REPLACE WITH LEFT
	ELSE
	LDA #MOV$BR		;VICE-VERSA
	ENDIF
	STA G$MOV(X)
	ENDIF
	ENDIF
				;---
	JSR AUDTL		;TOWER LAZARS
				;---
	RTS
				;===

FRWFGN::			;TOWER FIRES A FORWARD GUN
	JSR GNAVAIL
	LDA #MOV$WF
	STA G$MOV(X)
	BRA TOWRIN
				;===

FRWLGN::			;TOWER FIRES A LEFT GUN
	JSR GNAVAIL
	LDA #MOV$WL
	STA G$MOV(X)
	BRA TOWRIN
				;===

FRWRGN::			;TOWER FIRES A RIGHT GUN
	JSR GNAVAIL
	LDA #MOV$WR
	STA G$MOV(X)
	BRA TOWRIN
				;---	
TOWRIN:				;INIT REST OF TOWER GUN
	LDA #70
	STA G$TMR(X)
	LDA #TYP$LV+TYP$UN
	STA G$TYP(X)
				;---
	LDU S2.PRM
	LDX G$UVP(X)
	LDA 0(U)		;FORCE GROUND SHOTS ALWAYS TO FRONT
	SUBA M$TX+M.S1		;SHOT-ME, IF MINUS THEN FLIP ACTUAL LOC
	ANDA #80		;JUST PLAY WITH SIGN BIT TO FLIP
	EORA 0(U)
	LDB 1(U)
	STD 0(X)

	LDD 2(U)
	STD 2(X)

	LDD M$TZ+M.U1		;SHOOT IT ON LEVEL WITH PLAYER
	STD 4(X)
				;---
	JSR AUDTL		;TOWER LAZARS
				;---
	RTS
				;===

FRPLGN::			;LEFT PANEL FIRES A GUN
	LDA BS.PFL
	IFNE			;?EXHAUST PORT IN VIEW?
	JSR GNAVAIL		;THEN FIRE EVERYTHING
	ELSE
	JSR GNBSAVAIL		;ELSE 3 GUNS MAX
	ENDIF
	LDA #MOV$PL
	STA G$MOV(X)
	LDU G$UVP(X)
	BRA PANLIN
				;===

FRPRGN::			;RIGHT PANEL FIRES A GUN
	LDA BS.PFL
	IFNE			;?EXHAUST PORT IN VIEW?
	JSR GNAVAIL		;THEN FIRE EVERYTHING
	ELSE
	JSR GNBSAVAIL		;ELSE 3 GUNS MAX
	ENDIF
	LDA #MOV$PR
	STA G$MOV(X)
	LDU G$UVP(X)
	BRA PANLIN
				;===

PANLIN:				;INIT REST OF PANEL GUN
	LDD M.X0
	STD 0(U)		;X POSITION
	LDD M.Y0
	STD 2(U)		;Y POSITION
	LDD M.Z0
	STD 4(U)		;Z POSITION
				;---
	LDA #40
	STA G$TMR(X)
	LDA #TYP$LV+TYP$UN	;ALIVE WITH UNIVERSE COORDS
	STA G$TYP(X)
				;---
	LDA P.RND1
	LSRA			;45 DEGREES
	LDB M.Z0
	CMPB #-4
	IFGE			;?TOP PANEL?
	LDA #0			;THEN JUST GO LEVEL
	ENDIF
	STA 6(U)		;Z ANGLE
				;---
	JSR AUDTL		;USE TOWER LAZARS FOR NOW
				;---
	RTS
				;===

	.PAGG

	.SBTTLE MOVE GUNS

MVGUN::				;MOVE THE GUNS, SHELLS, ETC.
	LDX #GUN		;X--> GUN PACKETS
	BEGIN
	STX GN.PTR		;---LOOP FOR EACH GUN
				;X--> GUN PACKET
	LDA G$TYP(X)
	IFNE
	LDB G$MOV(X)
	LSLB			;SAFELY FORM WORD POINTER
	CMPB #ZMOVE-TMOVE
	IFLO
	LDU #TMOVE
	JSR @B(U)		;DO THE APPROPRIATE MOVE ROUTINE
	ELSE			;ELSE IS ERROR
	SWI			;TELL THE PROGRAMMER
	ENDIF
	ENDIF
	LDX GN.PTR
	LEAX G$IZE(X)
	CMPX #GUNZ
	HSEND
	RTS
				;===

MOVST:				;STAY IN PLACE
	DEC G$TMR(X)
	IFLE
	CLRB
	STB G$TYP(X)
	STB G$TMR(X)
	ENDIF
	RTS
				;===

MOVAM:				;AIM AT PLAYER
	DEC G$TMR(X)
	IFLE
	CLRB
	STB G$TYP(X)
	STB G$TMR(X)
	ELSE
	LDU G$UVP(X)		;POINT TO MATH INFO
				;---
	CLRD
	SUBD 0(U)		;POS-(POS/4) TO HAVE IT BASHFUL TOWARDS PLAYER
	JSR ASRD3
	ADDD 0(U)		;X
	STD 0(U)
				;---
	CLRD
	SUBD 2(U)		;POS-(POS/4) TO HAVE IT BASHFUL TOWARDS PLAYER
	JSR ASRD3
	ADDD 2(U)		;Y
	STD 2(U)
				;---
	CLRD
	SUBD 4(U)		;POS-(POS/4) TO HAVE IT BASHFUL TOWARDS PLAYER
	JSR ASRD3
	ADDD 4(U)		;Z
	STD 4(U)
	ENDIF
	RTS
				;===

MOVLV:				;LEAVE THE PLAYER
	DEC G$TMR(X)
	IFLE
	CLRB
	STB G$TYP(X)
	STB G$TMR(X)
	ELSE
	LDU G$UVP(X)		;POINT TO MATH INFO
				;---
	LDD 0(U)
	JSR ASRD3
	ADDD 0(U)		;X
	BVS 80$
	STD 0(U)
				;---
	LDD 2(U)
	JSR ASRD3
	ADDD 2(U)		;Y
	BVS 80$
	STD 2(U)
				;---
	LDD 4(U)
	JSR ASRD3
	ADDD 4(U)		;Z
	BVS 80$
	STD 4(U)
	ENDIF

	RTS

80$:				;WENT OUT OF VIEW
	CLRB
	STB G$TYP(X)
	RTS
				;===

MOVWF:
	LDU G$UVP(X)
	LDD #-100		;GOTO PLAYER
	ADDD 0(U)
	STD 0(U)

	JMP TOWRMV
				;===
MOVWL:
	LDU G$UVP(X)
	LDD #-100		;GOTO PLAYER
	ADDD 0(U)
	STD 0(U)
	LDD #-100
	ADDD 2(U)
	STD 2(U)
	JMP TOWRMV
				;===
	
MOVWR:
	LDU G$UVP(X)
	LDD #-100		;GOTO PLAYER
	ADDD 0(U)
	STD 0(U)
	LDD #100
	ADDD 2(U)
	STD 2(U)
	JMP TOWRMV
				;===
SLEWX:
	LDB 0(U)
	SUBB M$TX+M.S1
	IFPL			;MAKE SURE ITS OK
	CLRA
	JSR LSLD2
	NEGD
	ADDD 0(U)
	STD 0(U)
	ENDIF
	RTS
				;===

SLWYL:				;SLEW Y SHOTS TO THE LEFT WITH PLAYER
	LDD #0			;MATCH Y VELOCITY ALSO
	SUBD M$VY+M.S1
	JSR ASRD3
	ADDD M$VY+M.S1
	IFMI			;RIGHT BUNKER MOVES LEFT ONLY
	ADDD 2(U)
	STD 2(U)
	ENDIF
	RTS
				;===

SLWYR:				;SLEW Y SHOTS TO THE RIGHT WITH PLAYER
	LDD #0			;MATCH Y VELOCITY ALSO
	SUBD M$VY+M.S1
	JSR ASRD3
	ADDD M$VY+M.S1
	IFPL			;LEFT BUNKER SHOOTS TOWARDS RIGHT
	ADDD 2(U)
	STD 2(U)
	ENDIF
	RTS
				;===

MOVBL:
	LDU G$UVP(X)
				;
	JSR SLWYR		;NORMAL LEFT BUNKER SLEWS RIGHT
				;
	JSR SLEWX
				;
	LDD 0(U)
	SUBD M$TX+M.S1		;DISTANCE FORWARDS
	LDB 7(U)		;FRACTION FOR DIRECTION
	MUL
	TST 6(U)
	IFEQ			;NORMAL IS TO THE LEFT
	NEGD			;TO PLAYERS LEFT
	ENDIF
	ADDD M$TY+M.S1
	SUBD 2(U)
	ADDD #100		;LEFT BUNKER SHOOTS FOR PLAYERS RIGHT
	IFPL			;?AIMING RIGHT?
	JSR ASRD3		;THIS IS LEFT BUNKERS PREFFERED DIRECTION
	CMPD #180
	IFGT
	LDD #180
	ENDIF
	ADDD 2(U)
	ELSE			;ELSE AIMING LEFT
	JSR ASRD5		;GO SLOWLY
	CMPD #-180
	IFLT
	LDD #-180
	ENDIF
	ADDD 2(U)
	ENDIF
	STD 2(U)
				;
	LDD M$TZ+M.S1
	ADDD #100
	SUBD 4(U)
	IFPL			;?AIMING UPWARD?
	JSR ASRD3
	CMPD #200
	IFGT
	LDD #200
	ENDIF
	ADDD 4(U)
	STD 4(U)		;THEN MOVE THE GUN UP
	ENDIF
				;---
	RTS
				;===
MOVBR:
	LDU G$UVP(X)
				;
	JSR SLWYL
				;
	JSR SLEWX
				;
	LDD 0(U)
	SUBD M$TX+M.S1		;DISTANCE FORWARDS
	LDB 7(U)		;FRACTION FOR DIRECTION
	MUL
	TST 6(U)
	IFNE			;NORMAL IS RIGHT, REVERSED IS TO LEFT
	NEGD
	ENDIF
	ADDD M$TY+M.S1		;TO PLAYERS RIGHT
	ADDD #-100		;RIGHT BUNKER AIMS FOR PLAYERS LEFT
	SUBD 2(U)
	IFPL
	JSR ASRD5		;THEN GO SLOW
	CMPD #180
	IFGT
	LDD #180
	ENDIF
	ADDD 2(U)
	ELSE
	JSR ASRD3		;SLEW FAST IN PREFERRED DIRECTION
	CMPD #-180
	IFLT
	LDD #-180
	ENDIF
	ADDD 2(U)
	ENDIF
	STD 2(U)
				;
	LDD M$TZ+M.S1
	ADDD #100
	SUBD 4(U)
	IFPL			;?AIMING UPWARD?
	JSR ASRD3
	CMPD #200
	IFGT
	LDD #200
	ENDIF
	ADDD 4(U)
	STD 4(U)		;THEN MOVE THE GUN UP
	ENDIF
				;---
	RTS

MOVBF:
	LDU G$UVP(X)
	LDD #-100		;GOTO PLAYER
	ADDD 0(U)
	STD 0(U)
				;
	LDD M$TZ+M.S1
	ADDD #80
	SUBD 4(U)
	IFPL			;?AIMING UPWARD?
	JSR ASRD3
	CMPD #180
	IFGT
	LDD #180
	ENDIF
	ADDD 4(U)
	STD 4(U)		;THEN MOVE THE GUN UP
	ENDIF
				;
	BRA BNKRMV
				;===

MOVBLC:
	LDU G$UVP(X)
	LDD #-100		;GOTO PLAYER
	ADDD 0(U)
	STD 0(U)
	LDD #-100
	ADDD 2(U)
	STD 2(U)
				;
	LDD M$TZ+M.S1
	ADDD #80
	SUBD 4(U)
	IFPL			;?AIMING UPWARD?
	JSR ASRD3
	CMPD #180
	IFGT
	LDD #180
	ENDIF
	ADDD 4(U)
	STD 4(U)		;THEN MOVE THE GUN UP
	ENDIF
	BRA BNKRMV
				;===

MOVBRC:
	LDU G$UVP(X)
	LDD #-100		;GOTO PLAYER
	ADDD 0(U)
	STD 0(U)
	LDD #100
	ADDD 2(U)
	STD 2(U)
				;
	LDD M$TZ+M.S1
	ADDD #80
	SUBD 4(U)
	IFPL			;?AIMING UPWARD?
	JSR ASRD3
	CMPD #180
	IFGT
	LDD #180
	ENDIF
	ADDD 4(U)
	STD 4(U)		;THEN MOVE THE GUN UP
	ENDIF
	BRA BNKRMV
				;===

PANLMV:				;MOVE PANEL GUN
TOWRMV:				;MOVE TOWER GUN
BNKRMV:				;MOVE BUNKER GUN
	LDA G$TYP(X)
	BITA #TYP$PR		;?IS THE SHOT ONLY PRETTY?(NO COLLISION CUZ PASSED PLAYER)
	IFNE
	CLR G$TYP(X)		;THEN KILL IT
	ENDIF
	RTS
				;===

MOVPL:				;MOVE LEFT PANEL GUN
	LDU G$UVP(X)
				;---
	JSR SLEWX
				;---
	LDD M$TZ+M.S1
	SUBD 4(U)
	IFPL			;?NEED TO GO UP TO PLAYER?
	JSR ASRD4		;DO IT SLOWLY
	ADDD 4(U)
	STD 4(U)
	ENDIF
				;---
	LDA WV.HRD
	CMPA #1
	IFHS			;?ON OR ABOVE THE FIRST WAVE?
	LDD M$TY+M.S1		;THEN HEAT SEEK THE PLAYER
	ELSE			;ELSE
	LDD #-180		;MOVE TO INSIDE OF SIDELINE
	ENDIF
	SUBD 2(U)		;GUN Y LOC
	IFPL			;LEFT GUNS ONLY MOVE TO RIGHT
	JSR ASRD4		;REDUCE DOWN TO SMALL FRACTION OF DISTANCE
	ADDD 2(U)
	STD 2(U)
	ENDIF
				;---
	BRA PANLMV	
				;===

MOVPR:				;MOVE RIGHT PANEL GUN
	LDU G$UVP(X)
				;---
	JSR SLEWX
				;---
	LDD M$TZ+M.S1
	SUBD 4(U)
	IFPL			;?NEED TO GO UP TO PLAYER?
	JSR ASRD4		;DO IT SLOWLY
	ADDD 4(U)
	STD 4(U)
	ENDIF
				;---
	LDA WV.HRD
	CMPA #1
	IFHS			;?ON OR ABOVE THE FIRST WAVE?
	LDD M$TY+M.S1		;THEN HEAT SEEK THE PLAYER
	ELSE			;ELSE
	LDD #180		;MOVE TO INSIDE OF SIDELINE
	ENDIF
	SUBD 2(U)		;GUN Y LOC
	IFMI			;RIGHT GUNS ONLY MOVE TO LEFT
	JSR ASRD4		;REDUCE DOWN TO SMALL FRACTION OF DISTANCE
	ADDD 2(U)
	STD 2(U)
	ENDIF
				;---
	BRA PANLMV	
				;===

	.PAGG

	.SBTTL VIEW GUNS

VWGUN::				;
	LDX #GUN		;X--> GUN PACKETS
10$:
	STX GN.PTR
	LDA G$TYP(X)
	LBEQ 95$		;?GUN BEING USED?
	BITA #TYP$GL		;?GLOWING AGAINST OUR SHIELDS?
	IFNE
	JSR GLOWVW		;THEN SHOW GUN AGAINST OUR SCREENS
	JMP 95$			;J
	ENDIF			;ELSE
	BITA #TYP$UN		;?VIEW RELATIVE TO UNIVERSE?
	IFNE
	LDD M$TX+M.S1		;RESTORE DOWNLOADED UNIT VECTOR
	STD M$TX+M.U1
	LDD M$TY+M.S1
	STD M$TY+M.U1
	LDD M$TZ+M.S1
	STD M$TZ+M.U1
	ELSE			;ELSE RELATIVE TO PLAYER
	CLRD
	STD M$TX+M.U1		;GUNS ARE RELATIVE TO PLAYER
	STD M$TY+M.U1
	STD M$TZ+M.U1
	ENDIF
	CLRA
	LDB G$BIC(X)
	STD M.BIC
	LDA #M$PSB2
	JSR MGOWT
				;---
	LDD M.XP		;X 
	CMPD #01
	LBLE 90$
	CMPD #7F00
	LBHI 90$
	STD M.DVD
	STD M.XT
	LDD M.YP
	STD M.YT
	IFMI
	NEGD
	ENDIF
	SUBD M.XP
	LBHS 90$
	LDD M.ZP
	STD M.ZT
	IFMI
	NEGD
	ENDIF
	SUBD M.XP
	LBHS 90$
				;GUN SHOT IS VISIBLE
				;---
	JSR OBJCENT		;PROCESS CENTER OF GUNSHOT
				;---
	TEMP OCT,2,SIZ,2	;LOOK FOR COLLISION FIRST
	LDX GN.PTR
	LDA G$TYP(X)
	BITA #TYP$LV+TYP$PR	;CAN ONLY HIT LIVE OR PRETTY SHOTS
	IFNE			;?ALLOWED TO HIT THIS SHOT?
	LDD #80			;FAT CHANCE OF COMPUTING THIS, TURNOFF GAS AND TEST IT
	STD M.YP
	LDA #M$PERS
	JSR MGOWT
	LDD M.YP
	ADDD #10.		;SIZE OF CURSOR
	STD TMPSIZ
	LDD BJ.CX		;OBJECT CENTER
	SUBD LZ.CX		;LAZAR CENTER
	IFMI
	NEGD			;ABSD
	ENDIF
	STD TMPOCT		;PREPARE FOR OCTAGON COLLISION DETECT
	SUBD TMPSIZ
	IFLE			;LE FOR LIBERALITY
	LDD BJ.CY
	SUBD LZ.CY		;NOW CHECKING Y COORDS
	IFMI
	NEGD
	ENDIF
	CMPD TMPSIZ
	IFLE			;?WITHIN Y ALSO?
	ADDD TMPOCT		;THEN ADD TO OCTAGON TEST
	STD TMPOCT
	LDD TMPSIZ
	LSRD
	ADDD TMPSIZ		;MAKE 1.5 FOR OCTAGON
	SUBD TMPOCT
	IFGE			;?ALSO WITHIN OCTAGON?
	LDD M.XT		;THEN SEE IF WE ARE THE CLOSEST ALIEN
	CMPD CL.GDS		;GUN DISTANCE
	IFLO			;?ALSO THE NEAREST GUN SO FAR?
	STD CL.GDS		;
	LDX GN.PTR		;THEN WE GOT A HIT
	STX CL.GP		;RECORD WHO WE ARE
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	ENDIF
				;---
	LDA G$TYP(X)
	BITA #TYP$LV
	IFNE			;?LIVE SHELL HAS COLLISIONS ALLOWED?
	LDD M.XT
	LSLD			;SCALE BACK UP TO REGULAR COORDS
	BMI 50$
	LDU M$VX+M.S1
	CMPU #200
	IFGE			;?PLAYER SHIP FAST ENUF?
	SUBD M$VX+M.S1		;THEN USE ITS SPEED
	ELSE			;ELSE
	SUBD #200		;MIN DISTANCE LEST SHOTS ARE TOO LARGE
	ENDIF
	BLE 40$			;B COLLISION IF WITHIN FORWARD MOVEMENT
	SUBD #100+10		;MAX GUN SPEED PLUS FUDGE
	IFLE			;?COLLISION DUE TO PLAYER SPEED OR GUN SPEED?
40$:				;---
	LDD BJ.CX		;CENTER OF GUNSHOT ON SCREEN
	IFPL			;?RIGHT HALF OF SCREEN?
	SUBD #VGCURR*4		;+-128*4==>=-512 SCREEN COORDS
	BGE 50$			;B EXIT IF NO CHANCE OF CURSOR HITTING IT
	ELSE			;ELSE CHECK LEFT SITE LIMIT
	SUBD #VGCURL*4
	BLE 50$
	ENDIF
	LDD BJ.CY		;CHECK UP/DOWN LIMITS
	IFPL
	SUBD #VGCURT*4		;TOP LIMIT
	BGE 50$			;B EXIT IF TOO HI TO HIT
	ELSE			;ELSE ON BOTTOM HALF OF SCREEN
	SUBD #VGCURB*4
	BLE 50$			;B NO COLLISION IF OUT OF SITE REACH
	ENDIF
	CMPX CL.GP		;?CAN WE HIT THIS GUN?
	IFEQ
	LDA LZ.ON		;?AND LAZARS ARE ON?
	IFNE
	JSR GNHTSG		;THEN KILL THIS GUN NOW
	LDX GN.PTR		;SAFE RESTORE
	BRA 50$			;AND NO MORE COLLIDE WITH SHIELDS
	ENDIF
	ENDIF
				;ELSE IT SURELY HIT US
	JSR GNAHIT		;RECORD GUNS HIT ON OUR SHIELDS
	LDD #VGCNTR		;CANCEL OUT THE OBJCENT ABOVE
	STD (Y)++
	JSR GLOWVW		;AND GLOW THE SHELL
	JMP 95$			;J DO NEXT SHELL
	ENDIF
	ENDIF
50$:				;---
	JSR GN1DRW		;DRAW GUN TYPE 2
	BRA 95$
				;---
90$:				;SHOT NOT VISIBLE
	LDA G$TYP(X)
	BITA #TYP$LV
	IFNE
;;;	LDA #TYP$PR		;REPLACE LIVE SHOT WITH PRETTY ONE(BUT A DUD)
	LDA #0			;KILL IT OFF FOR NOW
	ELSE
	CLRA			;ELSE TURN SHOT OFF
	ENDIF
	STA G$TYP(X)
95$:				;NEXT GUN SHOT
	LDX GN.PTR
	LEAX G$IZE(X)
	CMPX #GUNZ
	LBLO 10$
				;---
	LDD M$TX+M.S1		;RESTORE DOWNLOADED UNIT VECTOR
	STD M$TX+M.U1
	LDD M$TY+M.S1
	STD M$TY+M.U1
	LDD M$TZ+M.S1
	STD M$TZ+M.U1
				;---
	RTS
				;===

GN1DRW:				;DRAW NORMAL GUN
	TEMP BIN,1,LIN,1

	LDX GN.PTR
				;---DETERMINE SCALE
	LDA #8			;MAX FOR BINARY SCALE
				;CLOSEST IS 100, 
	STA TMPBIN
	LDD M.XT
10$:				;---LOOP FOR BINARY SCALE
	DEC TMPBIN
	BEQ 20$
	LSLB
	ROLA
	BPL 10$
	ANDA #7F		;MAX FOR LINEAR SCALE
20$:
	STA TMPLIN
				;---
				;DO THE FIREBALL
	LDA G$TYP(X)
	ANDA #TYP$HR		;SHELL HURT?
	IFEQ			;NO, DO NORMAL SHELL
	LDA TMPBIN		;USE CALCULATED SCALE FOR NORMAL SHELLS
	ORA #VGSCAL&0F000/100
	LDB TMPLIN
	STD (Y)++
	LDD #VJGNB		;JSR TO THE SPARKLER
	STD (Y)++
	ELSE			;YES, SHELL HURT
				;LIMIT SCALE FOR HURT SHOTS
	LDB TMPLIN
	LDA TMPBIN
	INCA			;2 * SMALLER  ( USING LARGER STAMPS )
	CMPA #03		;DON'T LET IT GET TOO LARGE
	IFLO			;LIMIT IT
	LDA #03			;BINARY OF THREE
	CLRB			;LINEAR OF 0
	ELSE
	CMPA #06		;BUT MAKE SURE ITS VISIBLE FAR AWAY
	IFHS			;LIMIT IT TO A MINIMUM SIZE
	LDA #06			;BINARY OF 6
	CLRB			;LINEAR OF 0
	ENDIF
	ENDIF
	ORA #VGSCAL&0F000/100
	STD (Y)++
				;---
	LDB G$TMR(X)		;FADE USING TIMER
	ASLB			;*16 FOR Z
	ASLB
	ASLB
	ASLB
	ORB #0F			;A LITTLE BRIGHTER
	LDA #<VGCOLR/100>+VGCPRP;MAKE IT PURPLE
	STD (Y)++
	LDD #VJGNX		;EXPLOSION SPARKLER
	STD (Y)++
	ENDIF
				;---
	LDD #VGSCAL
	STD (Y)++		;RESTORE SCALE
	LDD #VGCNTR		;CENTER
	STD (Y)++
90$:
	RTS
				;===

GLOWVW:

	LDX GN.PTR
				;---
	LDU G$UVP(X)		;GET VECTOR TO FACEPLATE POSITION
	LDD 0(U)
	STD (Y)++
	LDD 2(U)
	STD (Y)++
				;---
	LDA G$TMR(X)		;USE TIMER TO SETUP SIZE, USE 70C0 TO 7000
	LDB #0F0/0F		;MAX SCALE(SMALLEST SIZE)/TIMER
	MUL
	LDA #<VGSCAL&0F000>/100	;MAKES IT A SCALE INSTRUCTION
	STD (Y)++
				;---
	LDB G$TMR(X)		;NOW SET UP THE COLOR
	ASLB			;BRIGHTNESS DEPENDS ON TIME
	ASLB
	ASLB
	ASLB
	LDA #<VGCOLR/100>+VGCWHT; ALWAYS WHITE
	STD (Y)++
				;---
	LDD #VJGNX		;JSR TO THE SPARKLER WITHOUT CENTER LINES
	STD (Y)++
				;---
	LDD #VGSCAL
	STD (Y)++		;RESTORE SCALE
	LDD #VGCNTR		;CENTER
	STD (Y)++
90$:
	RTS
				;===

GNAHIT:				;ALIEN GUN HIT PLAYER
				;X-->GUN BLOCK
	LDU G$UVP(X)		;* * *  MUST FOLLOW   OBJCENT    * * *
				;USES PREVIOUS VG INSTRUCTION
	LDD -4(Y)		;GET VECTOR TO FACEPLATE POSITION
	STD 0(U)
	LDD -2(Y)
	STD 2(U)
				;---
	LDA #TYP$GL
	STA G$TYP(X)
	LDA #0F
	STA G$TMR(X)		;SHOW SHELL DISSOLVING
	LDA #MOV$ST		;SHELL STAYS IN PLACE
	STA G$MOV(X)
	JSR BG1GLW
				;
	LDA S.ROL
	IFEQ			;?NO CURRENT DIRECTION?
	LDA P.RND1		;THEN CHOOSE WHICH WAY
	ENDIF
	LDB #20			;AMOUNT TO ROLL
	TSTA			;CHECK CURRENT DIRECTION
	IFMI
	NEGB
	ENDIF
	STB S.ROL		;ROLL US IN RESPONSE
				;
	JSR AUDSH		;SOUND OUR BEING HIT BY A GUN
				;---
	LDA Q.GHIT		;GUN HIT FIRST TIME
	IFEQ			;?FIRST TIME?
	INC Q.GHIT
	LDA S.GAS
	CMPA #3
	IFHI			;ONLY IF GAS WILL BE 3 OR 4 ON UP
	JSR SPKHIT		;IM HIT BUT NOT BAD, R2 SEE WHAT YOU CAN DO
	JSR AUDRS		;R2 SHAVE
	ENDIF
	ENDIF
				;---
	RTS
				;===
PTHTBG:				;PROTON HIT BASE GUN
GNHTSG::			;SPACE LAZAR HIT ALIEN GUN
				;CL.GP-->GUN BLOCK
	LDU CL.GP		;U-->ALIEN GUN
	LDA G$TYP(U)
	IFNE			;?SHOT ALIVE?
	ANDA #TYP$UN		;KEEP IT ON UNIVERSAL COORDS
	ORA #TYP$HR		;MAKE IT HURT
	STA G$TYP(U)
	LDA #0F			;FADE TIMER
	STA G$TMR(U)
	LDA #MOV$ST		;MAKE SHELL 'STAY' IN PLACE
	STA G$MOV(U)
	JSR AUDTCZ		;TIE FIGHTER CANNON STOPPED
	JSR SCRSHT		;SCORE OUR SHOT
	JSR AUDSS		;HIT ALIEN SHOT 
	ENDIF
	RTS
				;===
	.PAGE
	.SBTTLE PTGUN	;PLAYERS PROTON TORPEDO GUN

FRPTGN::
	LDA #1
	STA PT.LIV		;PT IS ALIVE
	LDD M$TX+M.S1
	ADDD #100		;JUST A BIT IN FRONT
	STD PT.X
	LDD M$TY+M.S1
	STD PT.Y
	LDD M$TZ+M.S1
	STD PT.Z
	LDX #GUN
	BEGIN
	STX CL.GP		;GUN POINTER
	JSR PTHTBG		;PROTON HITS BASE GUN
	LDX CL.GP
	LEAX G$IZE(X)
	CMPX #GUNZ		;DONE?
	HSEND
	JSR PMSF2		;SOUND THE DEATH KNELL
	JSR AUDPH		;OTHER POKEY ASSIST TO PROTONING PORTHOLE
	RTS
				;===

MVPTGN::
	LDA PT.LIV
	IFNE			;?PT ALIVE?
				;---
	LDD PT.X
	ADDD #300		;MOVE FORWARD AHEAD OF SHIP
	ADDD M$VX+M.S1
	CMPD BS.PLC
	IFPL			;?BEYOND PORTHOLE LOCATION?(NOTE WRAPAROUND)
	LDD BS.PLC		;THEN STOP ABOVE PORTHOLE
	ENDIF
	STD PT.X
				;---
	LDD BS.PLC
	SUBD PT.X		;FORWARD DISTANCE TO HOLE
	SUBD #1000		;GET UPWARD DISTANCE FROM BOTTOM HOLE
	CMPD PT.Z
	IFLT
	STD PT.Z		;WHEN PROTON TORP IS CLOSE, ANGLE INTO HOLE
	ENDIF
				;---
	LDD BS.PLC
	SUBD PT.X		;FORWARD DISTANCE TO HOLE
	JSR ASRD4		;(BUT ALWAYS A POSITIVE RESULT)
	TST PT.Y
	IFPL			;?Y TO RIGHT OF MIDLINE?
	CMPD PT.Y
	IFLT			;?DOES GLIDE SLOPE SAY GET CLOSER?
	STD PT.Y
	ENDIF
	ELSE			;ELSE Y TO LEFT OF MIDLINE
	NEGD
	CMPD PT.Y
	IFGT			;?IS GLIDE SLOPE CLOSER TO MIDLINE?
	STD PT.Y		;THEN PUT SHOTS THERE
	ENDIF
	ENDIF
				;---
	ENDIF
	RTS
				;===

VWPTGN::			;VIEW PLAYERS PROTON TORPEDO
	LDA PT.LIV
	IFNE			;?PLAYER TORP ALIVE?
	LDD PT.X		;THEN SETUP COORDS
	STD M.X0
	LDD PT.Y
	ADDD #80
	STD M.Y0
	LDD PT.Z
	STD M.Z0
				;---
	JSR PTVW
				;---
	LDD PT.Y
	SUBD #80		;DO LEFT PROTON TORP NOW
	STD M.Y0
				;---
	JSR PTVW
				;---
	ENDIF
	RTS
				;===

PTVW:				;VIEW A SINGLE TORP IN M.X0
	LDD #M$X0BC		;TRANSFORM CENTER POINT
	STD M.BIC
	LDA #M$PSB2
	JSR MGOWT
				;---
	LDD M.XP		;CHECK TO SEE IF HOLE HAS BEEN PASSED
	SUBD #-2000		; CHECK FOR WELL PAST HOLE(AND OUT IN SPACE USUALLY)
	IFLE			;?PLAYER PAST HOLE?
	LDA #0
	STA PT.LIV		;THEN TURN OFF PROTON TORPS
	ENDIF
				;---
	LDD M.XP
	CMPD #01
	IFGE			;?FAR ENUF IN FRONT?
	STD M.DVD
	STD M.XT
	LDD M.YP
	IFMI
	NEGD			;ABSOLUTE VALUE
	ENDIF
	SUBD M.XP
	IFLT			;?Y IN FRONT VIEW?
	LDD M.ZP
	IFMI
	NEGD			;ABSOLUTE VALUE
	ENDIF
	SUBD M.XP
	IFLT			;?Z IN FRONT VIEW?
	LDD M.QUO
	STD M.XP
	LDA #M$PERS		;PERSPECTIVE MULTIPLY
	JSR MGOWT
				;---	
	LDD M.ZP		;GET TO PROPER PLACE ON SCREEN
	ADDD #VGOFFY
	ANDA #1F
	STD (Y)++
	LDD M.YP
	ANDA #1F
	STD (Y)++
				;---
	LDD #VGCTRQ*100+VGCOPC!0FF	;BRITE TURQOISE SHOTS
	STD (Y)++	
				;---
	TEMP BIN,1
				;---DETERMINE SCALE
	LDA #6			;MAX FOR BINARY SCALE
				;MAX 0 IS AT 200
	STA TMPBIN
	LDD M.XT
10$:				;---LOOP FOR BINARY SCALE
	DEC TMPBIN
	BEQ 20$
	LSLB
	ROLA
	BPL 10$
	ANDA #7F		;MAX FOR LINEAR SCALE
20$:				;---
	LDB TMPBIN
	ORB #70			;SCALE INSTRUCTION
	STB (Y)+
	STA (Y)+
				;---
	LDD #VJGNT
	STD (Y)++
	LDD #VGSCAL
	STD (Y)++
	LDD #VGCNTR
	STD (Y)++
				;---
	ENDIF
	ENDIF
	ENDIF
	RTS

	HLL69F
	.END
      