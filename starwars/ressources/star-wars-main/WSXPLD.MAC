	.TITLE	WSXPLD	EXPLODE 
	.INCLUDE	WSCOMN	;<<<<<<<<<<<<<<<<<<<<<<<<<<<<
				;===
				;GLOBAL OFFSETS
A$UVP	==0			;UNIT VECTOR POINTER
A$BIC	==2			;BLOCK INDEX COUNTER, LO BANK
A$TYP	==3			;TYPE (O.DEAD; 3.EXPLODING
A$PIC	==4			;PICTURE #
A$DIE	==5			;PROCESS OF DIEING
A$GLW	==6			;PROCESS OF GLOWING
A$HTA	==7			;HITS AVAILABLE BEFORE DIEING
A$DMC	==8			;CUNENT DAMAGE COUNT
A$ROL	==9			;FORCE ROLL OF SHIP
A$AIM	==10.			;AIMED AT PLAYER
A$TRGT	==11.			;=O.GO FOR HOME BASE; =-1.PLAYER
;A$SPD	==12.			;UPDATE RATE IN DEEP SPACE
A$CHPC	==13.			;PC FOR CURRENT CHOREOG
A$CHOP	==15.			;OP CODE
A$CHTM	==16.			;TIMER
A$CHTW	==17.			;TWIRL FLAGS
A$CHMV	==18.			;TW+1, MOVE FLAGS
A$CHCN	==19.			;CONTROL MASK, UNTIL STRUCTURE
A$CHST	==21.			;STATUS TESTED BY CONTROL
A$CHRT	==23.			;RETURN PC, SUBROUTINE
A$IZE	==25.			;# OF BYTES PER RECORD
A$EQ	==3			;# OF ALIEN RECORDS IN SEQUENCE
				;---
				;---
M$AX	==-10+0
M$AY	==-10+0+2
M$AZ	==-10+0+0+4

M$BX	==-10+0+8
M$BY	==-10+0+8+2
M$BZ	==-10+0+8+4

M$CX	==-10+0+10
M$CY	==-10+0+10+2
M$CZ	==-10+0+10+4

M$TX	==-10+18+0
M$TY	==-10+18+2
M$TZ	==-10+18+4

M$VX	==-10+6
M$VY	==-10+6+8
M$VZ	==-10+6+10

				;---
XP$CX	==0			;EXPLOSION CENTER, X LOC
XP$CY	==2			;EXPLOSION CENTER, Y LOC
XP$CZ	==4			;EXPLOSION CENTER, Z LOC
XP$MX	==6			;MUNGE FOR CENTER,X
XP$MY	==8			;MUNGE FOR CENTER, Y
XP$MZ	==10.			;MUNGE FOR CENTER, Z
XP$TYP	==12.			;ANIMATION TYPE
XP$TMR	==13.			;ANIMATION TIMER
XP$IZE	==14.
XP$EQ	==8.			;MAX NUMBER OF EXPLOSION PIECES
				;===
				;D-PAGE RAM
	.GLOBB BJ.ID
	.GLOBB PHASE,PH$EGM
	.GLOBB S1.PRM,S.ROL,S2.PRM
	.GLOBB XP.CNT,XP.PHS,XP.HDQ
				;---
				;OUTSIDE ROUTINES, TABLES
	.GLOBL ALIEN,ALIENZ
	.GLOBL ADOBJ
	.GLOBL AUDDF
	.GLOBL CPUGON
	.GLOBL IS2UV
	.GLOBL OBJCEN,OBJPNT,OBJDRW
	.GLOBB TD$BK1,TD$BK2,TD$BK3
	.GLOBB TD$TI1,TD$TI2,TD$TI3
	.GLOBB TD$TW1,TD$TW2,TD$TW3
	.GLOBL UNITV
	.GLOBL XPQUE,XPQUEZ
				;---
				;VECTOR GENERATOR
	.GLOBL VGOFFY
	.GLOBL VGCNTR
	.GLOBL VGCOLR,VGCBLU,VGCRED,VGCWHT
	.GLOBL VJFLS
	.GLOBL VGSCAL
	.GLOBL VJBCR2
				;---
				;MATH BOX
	.GLOBL MGOWT
				;
	.GLOBL M.BIC
	.GLOBL M.COS
	.GLOBL M.DVD
	.GLOBL M.MUN,M$MUNBC
	.GLOBL M.SIN
	.GLOBL M.S1
	.GLOBL M.X0,M.Y0,M.Z0,M$X0BC
	.GLOBL M.XP,M.YP,M.ZP
	.GLOBL M.XT,M.YT,M.ZT
				;
	.GLOBL M$CNCT,M$ROLL,M$PTCH
	.GLOBL M$PSB2
				;---
				;HARDWARE
	.GLOBL P.RND1
				;---
				;SHIFT ROUTINES
	.IRP .A,<4,5,6,8>
	.GLOBL ASRD'.A
	.ENDR
				;
	.IRP .A,<2>
	.GLOBL LSLD'.A
	.ENDR
				;===

	.MACRO .PAGG		;GLOBAL PAGE NUMBERS
	.PAGEG X		;EXPLODE
	.ENDM

	.CSECT XPLD

	.PAGG
	.SBTTL	EXPLODE -- IVXPLD,DOXPLD,VWXPLD

BGAXPLD::
	LDA #0			;THE ALIEN IS NOW DEAD
	STA A$TYP(X)
				;---
	JSR CPUGON
				;
	PSHS X,U
	JSR BGAXP
	PULS X,U
				;
	RTS
				;===
	.PAGG
	.SBTTL	MUNGE, FANCY EXPLOSION OF OTHERS

TMV:
	.IRP	.A,<BK1,BK2,BK3,TW1,TW2,TW3,TI1,TI2,TI3>
	TP$'.A=.-TMV/2
	.WORD MV'.A
	.ENDR
ZMV:
				;
TVW:
	.IRP	.A,<BK1,BK2,BK3,TW1,TW2,TW3,TI1,TI2,TI3>
	.IIF	NE,TP$'.A-<.-TVW/2>,.ERROR TP$'.A ;TVW,TMV MISMATCH
	.WORD VW'.A
	.ENDR
ZVW:
				;===

BGAXP::				;BEGIN ALIEN EXPLOSION
				;X-->ALIEN PARMS
	LDU A$UVP(X)		;U-->ALIEN VECTORS
				;
	JSR NXTFRE
				;X-->EXPLOSION PARMS
	LDA #TP$TI1		;TYPE 1, TIE FIGHTER
	STA XP$TYP(X)
				;
	LDA #18
	STA XP$TMR(X)
				;
	LDD #0
	SUBD M$AY(U)		;OFFSET TO CENTER OF LEFT WING
	JSR ASRD6
	STD XP$MX(X)		;INIT MUNGE VALUE
	ADDD M$TX(U)
	STD XP$CX(X)
				;
	LDD #0
	SUBD M$BY(U)		;OFFSET TO CENTER OF LEFT WING
	JSR ASRD6
	STD XP$MY(X)		;INIT MUNGE VELOCITY
	ADDD M$TY(U)
	STD XP$CY(X)
				;
	LDD #0
	SUBD M$CY(U)		;OFFSET TO CENTER OF LEFT WING
	JSR ASRD6
	STD XP$MZ(X)		;INIT Z MUNGE
	ADDD M$TZ(U)
	STD XP$CZ(X)
				;
	JSR BGAM
				;---
	JSR NXTFRE
				;X-->EXPLOSION PARMS
	LDA #TP$TI2		;TYPE 2, TIE FIGHTER RIGHT WING
	STA XP$TYP(X)
				;
	LDA #18
	STA XP$TMR(X)
				;
	LDD M$AY(U)		;OFFSET TO CENTER OF RIGHT WING
	JSR ASRD6
	STD XP$MX(X)		;INIT MUNGE X
	ADDD M$TX(U)
	STD XP$CX(X)
				;
	LDD M$BY(U)		;OFFSET TO CENTER OF RIGHT WING
	JSR ASRD6
	STD XP$MY(X)		;INIT Y MUNGE
	ADDD M$TY(U)
	STD XP$CY(X)
				;
	LDD M$CY(U)		;OFFSET TO CENTER OF RIGHT WING
	JSR ASRD6
	STD XP$MZ(X)		;INIT Z MUNGE
	ADDD M$TZ(U)
	STD XP$CZ(X)
				;
	JSR BGAM
				;---
	JSR NXTFRE
				;X-->EXPLOSION PARMS
	LDA #TP$TI3		;TYPE 3, TIE FIGHTER CENTER GLOBE
	STA XP$TYP(X)
				;
	LDA #10
	STA XP$TMR(X)
				;
	LDD M$TX(U)
	STD XP$CX(X)
	STD XP$MX(X)
				;
	LDD M$TY(U)
	STD XP$CY(X)
	STD XP$MY(X)
				;
	LDD M$TZ(U)
	STD XP$CZ(X)
	STD XP$MZ(X)
				;---
	LDA XP$MX(X)		;D:=X POSITION
	LDB #80			;LIMIT THE VECTORIZING
	BEGIN			;NORMALIZE VECTOR TO SHIP
	LSLB
	ROLA
	IFVS			;?OVER-NORMALIZED?
	RORA
	RORB
	BRA 40$
	ENDIF
	LSL XP$MY+1(X)
	ROL XP$MY(X)
	IFVS			;?Y IS OVER?
	ROR XP$MY(X)
	ROR XP$MY+1(X)		;Y IS CORRECTED
	ASRA
	RORB			;UNDO X
	BRA 40$
	ENDIF
	LSL XP$MZ+1(X)
	ROL XP$MZ(X)
	VSEND			;ALSO END WHEN Z TOO LARGE
	ROR XP$MZ(X)
	ROR XP$MZ+1(X)		;Z IS CORRECTED
	ASR XP$MY(X)
	ASR XP$MY+1(X)		;UNDO ONE Y
	ASRA
	RORB			;UNDO X ALSO
40$:				;---
	SUBD XP$CX(X)		;GET DISTANCE FROM CURRENT TO FRONTIER
	JSR ASRD4		;GO ALL THE WAY TO EDGE IN 16.
	LDB P.RND1
 	STD XP$MX(X)
				;
	LDD XP$MY(X)
	SUBD XP$CY(X)
	JSR ASRD4
	LDB P.RND1
	STD XP$MY(X)
				;
	LDD XP$MZ(X)
	SUBD XP$CZ(X)
	JSR ASRD4
	LDB P.RND1
	STD XP$MZ(X)
				;
	RTS
				;---

BGAM:				;HANDLE XP$M*
	LDD M$VX(U)
	ADDD XP$MX(X)
	STD XP$MX(X)
				;
	LDD M$VY(U)
	ADDD XP$MY(X)
	STD XP$MY(X)
				;
	LDD M$VZ(U)
	ADDD XP$MZ(X)
	STD XP$MZ(X)
				;
	RTS
				;===

BGWGXP::			;BEGIN WALL GUN EXPLOSION
BGBKXP::			;BEGIN BUNKER EXPLOSION

	TEMP TP1,1,TP2,1,TP3,1,VZ,1

	LDD #TP$BK1*100+TP$BK2	;TYPE 1 BUNKER, TYPE 2 BUNKER
	STD TMPTP1
	LDD #TP$BK3*100+03	;TYPE 3 BUNKER, Z VELOCITY OF 0C00(4*300)
	STD TMPTP3	
				;
	BRA BGBKN
				;===

BGTWXP::
	LDD #TP$TW1*100+TP$TW2	;TYPE 1 TOWER,TYPE 2 TOWER
	STD TMPTP1
	LDD #TP$TW3*100+2	;TYPE 3 TOWER, Z VELOCITY OF 800(4*200)
	STD TMPTP3
				;
BGBKN:				;
				;M.XT,YT,ZT HAVE CENTER
	JSR NXTFRE		;X-->EXPLOSION QUEUE ENTRY
				;
	LDA TMPTP1		;BUNKER PIECE 1
	STA XP$TYP(X)
				;
	LDA #20
	STA XP$TMR(X)		;LIFE TIMER
				;
	LDD M.XT		;CENTER OF EXPLOSION
	STD XP$CX(X)
	LDD M.YT
	ADDA #-2
	STD XP$CY(X)
	LDD M.ZT
	STD XP$CZ(X)
				;
	LDD M$TX+M.S1
	ADDA #7F
	SUBD M.XT
	JSR ASRD5
	LDB P.RND1
	STD XP$MX(X)		;SPEED TO DESTINATION
				;
	LDD M$TY+M.S1
	ADDA #-3F		;GO LEFT
	SUBD M.YT
	JSR ASRD5
	LDB P.RND1
	STD XP$MY(X)		;LEFT/RIGHT SPEED TO DESTINATION
				;
	LDA TMPVZ		;728. TO 1024., VARY AROUND 54.*120.*2/16=810.
	LDB P.RND1
	JSR LSLD2		;*4
	STD XP$MZ(X)		;VERTICAL VELOCITY
				;---
				;CENTER PIECE
	JSR NXTFRE		;X-->EXPLOSION QUEUE ENTRY
				;
	LDA TMPTP2		;BUNKER PIECE 2
	STA XP$TYP(X)
				;
	LDA #20
	STA XP$TMR(X)		;LIFE TIMER
				;
	LDD M.XT		;CENTER OF EXPLOSION
	ADDA #2
	STD XP$CX(X)
	LDD M.YT
	STD XP$CY(X)
	LDD M.ZT
	STD XP$CZ(X)
				;
	LDD M$TX+M.S1
	ADDA #7F
	SUBD M.XT
	JSR ASRD5
	LDB P.RND1
	STD XP$MX(X)		;SPEED TO DESTINATION
				;
	LDD M$TY+M.S1
	SUBD M.YT
	JSR ASRD5
	LDB P.RND1
	STD XP$MY(X)		;LEFT/RIGHT SPEED TO DESTINATION
				;
	LDA TMPVZ		;728. TO 1024., VARY AROUND 54.*120.*2/16=810.
	LDB P.RND1
	JSR LSLD2		;*4
	STD XP$MZ(X)		;VERTICAL VELOCITY
				;---
				;RIGHT PIECE
	JSR NXTFRE		;X-->EXPLOSION QUEUE ENTRY
				;
	LDA TMPTP3		;BUNKER PIECE 3
	STA XP$TYP(X)
				;
	LDA #20
	STA XP$TMR(X)		;LIFE TIMER
				;
	LDD M.XT		;CENTER OF EXPLOSION
	STD XP$CX(X)
	LDD M.YT
	ADDA #2
	STD XP$CY(X)
	LDD M.ZT
	STD XP$CZ(X)
				;
	LDD M$TX+M.S1
	ADDA #7F
	SUBD M.XT
	JSR ASRD5
	LDB P.RND1
	STD XP$MX(X)		;SPEED TO DESTINATION
				;
	LDD M$TY+M.S1
	ADDA #3F		;GO RIGHT
	SUBD M.YT
	JSR ASRD5
	LDB P.RND1
	STD XP$MY(X)		;LEFT/RIGHT SPEED TO DESTINATION
				;
	LDA TMPVZ		;728. TO 1024., VARY AROUND 54.*120.*2/16=810.
	LDB P.RND1
	JSR LSLD2		;*4
	STD XP$MZ(X)		;VERTICAL VELOCITY
				;---
	RTS
				;===

IXPLD::				;ONCE PER PHASE TO CLEAR THINGS UP
	LDX #XPQUE
				;
	BEGIN
	LDA #0
	STA XP$TMR(X)
	LEAX XP$IZE(X)
	CMPX #XPQUEZ
	HSEND
				;
	RTS
				;===

NXTFRE:				;GET NEXT FREE EXPLOSION SLOT
	LDB XP.HDQ
	INCB			;BUMP TO NEXT SLOT
	CMPB #XP$EQ
	IFHS			;?WRAPPED?
	LDB #0			;THEN START AT FRONT OF CIRCULAR QUEUE AGAIN
	ENDIF
	STB XP.HDQ
	LDA #XP$IZE
	MUL
	LDX #XPQUE
	LEAX D(X)		;X-->QUEUE ENTRY
				;---
	RTS
				;===

MUNGE:				;CONTORT THE EXPLOSION MATRIX FOR VIEWING
	LDD #5309.		;19.04 DEGREES ROLL
	STD M.SIN
	LDD #15500.
	STD M.COS
	LDD #M$MUNBC
	STD M.BIC
	LDA #M$ROLL
	JSR MGOWT
				;---
	LDD #1424.		;4.99 DEGREES PITCH
	STD M.SIN
	LDD #16322.
	STD M.COS
	LDD #M$MUNBC
	STD M.BIC
	LDA #M$PTCH
	JSR MGOWT
				;---
	RTS
				;===
	
DOXPLD::			;PROCESS EXPLOSIONS IN PROGRESS
	LDX #XPQUE
	BEGIN
	LDA XP$TMR(X)
	IFNE
	DEC XP$TMR(X)		;COUNT DOWN TO ZERO
				;---
	LDB XP$TYP(X)
	CMPB #ZMV-TMV/2
	IFHS
	SWI			;REPLACE WITH LOWEST ONE (OR SET TMR TO ZERO)
	ENDIF
	LDU #TMV
	LSLB			;WORD POINTER
	JSR @B(U)
				;---
	ENDIF
	LEAX XP$IZE(X)
	CMPX #XPQUEZ
	HSEND
				;---
	LDX #XPQUE
	BEGIN
	LDA XP$TMR(X)
	IFNE
	JMP MUNGE		;J A LIVE EXPLOSION KEEPS THE MATRIX ROLLING
				;* EXIT
	ENDIF
	LEAX XP$IZE(X)
	CMPX #XPQUEZ
	HSEND
				;?NONE ARE ACTIVE?
	LDU #M.MUN		;THEN RESTART THE UNIT VECTORS
	JSR UNITV
				;
	RTS
				;===

MVBK1:
MVBK2:
MVBK3:
MVTW1:
MVTW2:
MVTW3:
	LDD XP$MX(X)
	ADDD XP$CX(X)		;MOVE CENTER OF EXPLOSION PIECE
	STD XP$CX(X)
				;
	LDD #0
	SUBD XP$MX(X)
	JSR ASRD5
	ADDD XP$MX(X)
	STD XP$MX(X)		;FRICTION LOSSES
				;---
	LDD XP$MY(X)
	ADDD XP$CY(X)		;MOVE CENTER OF EXPLOSION
	STD XP$CY(X)
				;
	LDD #0
	SUBD XP$MY(X)
	JSR ASRD5
	ADDD XP$MY(X)
	STD XP$MY(X)		;FRICTION LOSSES
				;---
	LDD XP$CZ(X)
	ADDD XP$MZ(X)
	IFVC			;?VALID RESULTS?
	IFLT			;?RAMMING INTO GROUND?
	LDD #0			;THEN FREEZE IT AT GROUND LEVEL
	ENDIF
	STD XP$CZ(X)		;UPDATE VERTICAL POSITION
	ENDIF
				;
	LDD XP$MZ(X)
	SUBD #50.*4		;FORCE OF GRAVITY <54.*120.*2>/16.SQUARED FRAME
	STD XP$MZ(X)
				;---
	RTS
				;===

MVTI1:				;LEFT WING	KEEP ORIGINAL VELOCITY
MVTI2:				;RIGHT WING	KEEP ORIGINAL VELOCITY
MVTI3:				;CENTER GLOBE	MOVE AWAY FROM LAZAR BLAST
	LDD XP$MX(X)
	ADDD XP$CX(X)
	IFVC
	STD XP$CX(X)
	ENDIF
				;
	LDD XP$MY(X)
	ADDD XP$CY(X)
	IFVC
	STD XP$CY(X)
	ENDIF
				;
	LDD XP$MZ(X)
	ADDD XP$CZ(X)
	IFVC
	STD XP$CZ(X)
	ENDIF
				;
	RTS	



VWXPLD::			;VIEW OTHERS EXPLODING

	LDA #M$MUNBC
	JSR IS2UV		;DOWNLOAD DESTINATION MATRIX
	LDA #M$CNCT
	JSR MGOWT		;CONCATENATE WITH VIEWERS MATRIX
				;---	
	LDX #XPQUE
	BEGIN			;CYCLE THRU EXPLOSION LIST, VIEWING IT
	STX S2.PRM
	LDA XP$TMR(X)
	IFNE			;?GOT A LIVE EXPLOSION?
				;
	JSR VWXPL2
				;
	ENDIF
	LDX S2.PRM
	LEAX XP$IZE(X)
	CMPX #XPQUEZ
	HSEND
				;---
	RTS
				;---
				;
VWXPL2:
	LDD XP$CX(X)
	STD M.X0		;CENTER OF THIS PIECE
	LDD XP$CY(X)
	STD M.Y0	
	LDD XP$CZ(X)
	STD M.Z0
				;---
	LDD #M$X0BC
	STD M.BIC
	LDA #M$PSB2
	JSR MGOWT
				;---
	LDD M.XP
	BMI 92$			;B SPECIAL IF NOT VISIBLE
	STD M.XT
	STD M.DVD
	LDD M.YP
	STD M.YT
	IFMI
	NEGD
	ENDIF
	SUBD M.XT
	BGE 92$			;B SPECIAL IF NOT VISIBLE
	LDD M.ZP
	STD M.ZT
	IFMI
	NEGD
	ENDIF
	LSRD			;ALLOW Z TO BE TWICE AS HI FOR LAZAR TOWERS
	SUBD M.XT
	BGE 92$			;B SPECIAL IF NOT VISIBLE
				;---
	LDB XP$TYP(X)
	CMPB #ZVW-TVW/2
	IFHS			;?OUT OF RANGE TYP?
	SWI			;REPLACE WITH TYPE 1
	ENDIF
	LDU #TVW
	LSLB			;WORD POINTER
	JSR @B(U)
				;---
	JSR ADOBJ		;MAKE SURE WE CAN USE IT
	JSR OBJPNT		;THEN GET THE POINTS
	JSR OBJDRW		;AND DRAW IT
	LDD #VGSCAL
	STD (Y)++
	LDD #VGCNTR
	STD (Y)++		
				;---
	BRA 98$
92$:				;---
	CLR XP$TMR(X)		;IF PIECE NOT VISIBLE, THEN TURN IT OFF
98$:				;---
	RTS
				;===

VWBK1:
	LDA #TD$BK1
	BRA VWBKN
VWBK2:
	LDA #TD$BK2
	BRA VWBKN
VWBK3:
	LDA #TD$BK3
	BRA VWBKN
				;---
VWTW1:
	LDA #TD$TW1
	BRA VWTWN
VWTW2:
	LDA #TD$TW2
	BRA VWTWN
VWTW3:
	LDA #TD$TW3
	BRA VWTWN
				;---
VWTWN:
	STA BJ.ID
	LDA #VGCOLR&0FF00/100+VGCWHT
	BRA VWTWN2
VWBKN:				;
	STA BJ.ID
	LDA #VGCOLR&0FF00/100+VGCRED
VWTWN2:				;
	LDB XP$TMR(X)		;A:=COLOR SELECT AND OPCODE
	CMPB #7
	IFLS			;?FADE WHEN DONE?
	LSLB
	LSLB
	LSLB
	LSLB			;UP TO 0-70
	ELSE
	LDB #80
	ENDIF
	STD (Y)++		;COLOR SELECT
				;---
	LDD XP$CX(X)		;GET SHADOW IN CORRECT POSITION
	STD M.X0
	LDD XP$CY(X)
	STD M.Y0
	LDD #0			;POSITION ON GROUND
	STD M.Z0
				;
	LDD #M$X0BC
	STD M.BIC
				;***DO YOU BELIEVE THIS SIDE EFFECT?
	LDD M.ZT
	PSHS D,X,U
	LDU M.YT
	LDX M.XT
				;***
	LDA #M$PSB2
	JSR MGOWT
				;
				;***HERE WE GO BACK AGAIN
	STX M.XT
	STU M.YT
	PULS D,X,U
	STD M.ZT
				;***
	LDD M.XP
	STD M.DVD
	JSR OBJCEN		;POSITION THE SHADOW FIRST, THEN SCALE ALL ELSE
				;---
	LDA #72			;SCALE DOWN TO MATCH GRND
	LDB M.XT
	LSLB
	LSLB
	STD (Y)++
				;---
	RTS
				;===

VWTI3:				;VIEW TIE CENTER
	LDB #TD$TI3
	BRA VWTIN
				;---
VWTI1:				;LEFT TIE WING
	LDB #TD$TI1
	BRA VWTIN
				;---
VWTI2:				;RIGHT TIE WING
	LDB #TD$TI2
	BRA VWTIN
				;---
VWTIN:
	STB BJ.ID
				;
	LDB XP$TMR(X)		;SELECT A COLOR
	CMPB #1F
	IFHI			;?BEYOND THE TABLE?
	LDD #VJFLS		;THEN REALLY FLASH
	ELSE
	LDU #TVWCLE		;ELSE SHOW US BEATING IT
	LSLB
	LDD B(U)
	ENDIF
	STD (Y)++
				;
	JSR OBJCEN
				;
	RTS
				;---

				;TABLES OF SHIP COLORS
				;TVWBYT CONVERTS OLD VALS TO NEW HARDWARE
	.MACRO TVWBYT .A,.B,.C,.D,.E,.F,.G,.H,.I
	.IRP .1,<.A .B .C .D .E .F .G .H .I>
	.WORD VGCOLR&0F000+<.1&0F*100>+<.1&0F0>
	.ENDR
	.ENDM

TVWCLE:				;VIEW EXPLODE
	TVWBYT 32,32,42,42,52,52,62,62
	TVWBYT 72,72,82,82,92,92,0A2,0A2
	TVWBYT 87,0A2,97,0A2,0A7,0A2,0C7,0A2
	TVWBYT 0A6,0A6,0A6,0A6,0A6,0A6,0A6,0A6
				;===
	.PAGG
	.SBTTL DETH STAR VISUALS
BGXPLN::
		;TEMPORARILY START AT LAST SEQUENCE
	LDA #01			;STARTING PHASE, 00 IS FLAG MEANING END
	STA XP.PHS
	LDD #0001		;STARTING COUNT
	STD XP.CNT
				;
	RTS

VWXPLN::
	LDA XP.PHS
	ASLA
	LDX #TXPPHS
	JSR @A(X)
XP.NUL:	RTS

TXPPHS:	.WORD	XP.NUL,XP.PH0,XP.PH1,XP.PH2,XP.PH3

	

;	FROM DIM TO BRIGHT
XP.PH0:
	LDD #VGCOLR+<VGCRED*100>;COLOR COMMAND
	LDU #VGSCAL+400+0F0	;STARTING SCALE COMMAND
	LDX XP.CNT		;NUMBER OF CIRCLES
	JSR DCIRCL		;DRAW CIRCLES
	LDD XP.CNT
	ADDD #0002
	STD XP.CNT
	CMPD #003F
	IFLO			;KEEP GOING
	LDD #0001
	STD XP.CNT
	INC XP.PHS
				;
	JSR AUDDF		;FINAL DETH STAR EXPLOSION
				;
	ENDIF
	RTS
	.PAGG

;	BRIGHT BLUE FROM CENTER,RED EXPANSION
XP.PH1:
	LDX XP.CNT		;DRAW BLUE CIRCLES
	LDD #VGCOLR+<VGCBLU*100>!0FF
	LDU #VGSCAL+400+0F0
	JSR DCIRCL
	
	LDD XP.CNT
 	ADDD #0002
	STD XP.CNT
	CMPD #3F
	IFLO			;DRAW SOME RED
	LDB #3F
	SUBB XP.CNT+1
	CLRA
	TFR D,X
	LDD #VGCOLR+<VGCRED*100>!0FF
	JSR DCIRCL
				;---
	LDD XP.CNT		;RED EXPANSION RINGS
	ASLD
	ASLD
	ASLD
	COMA
	COMB
	IFPL
	DECA
	ORB #80
	ENDIF
	ADDD #VGSCAL+400+70
	TSTB
	IFPL
	DECA
	ANDB #7F
	ENDIF
	TFR D,U
	LDD XP.CNT
	LSRB
	LSRB
	ANDB #07
	EORB #07
	INCB
	TFR D,X
	LDD #VGCOLR+<VGCRED*100>!0FF
	JSR DRING		;DRAW RINGS
	ENDIF
				;---
	LDD XP.CNT
	CMPD #3F
	IFHS			;SETUP FOR NEXT PHASE
	LDD #0001
	STD XP.CNT
	INC XP.PHS
				;
	JSR AUDDF		;
				;
	ENDIF
	RTS
	.PAGG
;	BRIGHT WHITE FROM CENTER,BLUE EXPANSION
XP.PH2:
	LDX XP.CNT		;DRAW WHITE CIRCLES
	LDD #VGCOLR+<VGCWHT*100>!0FF
	LDU #VGSCAL+400+70
	JSR DCIRCL
	
	LDD XP.CNT
	ADDD #0003
	STD XP.CNT
	CMPD #3F
	IFLO			;DRAW SOME BLUE
	LDB #3F
	SUBB XP.CNT+1
	CLRA
	TFR D,X
	LDD #VGCOLR+<VGCBLU*100>!0FF
	JSR DCIRCL
	ENDIF
				;---
	LDD XP.CNT		;BLUE EXPANSION RINGS
	CMPD #3F
	IFLO			;DRAW EM
	ASLD
	ASLD
	ASLD
	COMA
	COMB
	IFPL
	DECA
	ORB #80
	ENDIF
	ADDD #VGSCAL+400+70
	TSTB
	IFPL
	DECA
	ANDB #7F
	ENDIF
	TFR D,U
	LDD XP.CNT
	ANDB #0F
	EORB #0F
	INCB
	TFR D,X
	LDD #VGCOLR+<VGCBLU*100>!0FF
	JSR DRING		;DRAW RINGS
	ENDIF
	LDD XP.CNT
	CMPD #50
	IFHS			;SETUP FOR NEXT PHASE
	LDD #0080
	STD XP.CNT
	INC XP.PHS
				;
	JSR AUDDF
				;
	ENDIF
	RTS
	.PAGG
;CONTINUALLY EXPANDING WHITE RINGS
XP.PH3:
	LDD XP.CNT
	SUBD #0004
	STD XP.CNT
	CMPD #0008
	IFHS			;CONTINUE THIS EXPLOSION PHASE
	ADDD #VGSCAL+300
	TFR D,U
				;
	LDD XP.CNT
	LSRD
	ANDB #3F
	EORB #3F
	TFR D,X
				;FINAL EXPLOSION
	LDD #VGCOLR+<VGCWHT*100>!0FF
	JSR DRING
	ELSE
	LDA #00			;NULL PHASE, ALL DONE
	STA XP.PHS
	ENDIF
	RTS
	.PAGG
	.SBTTL	DCIRCL
	.REPT 0
**********************************
*
*	DCIRCL
*
**********************************

DESCRIPTION:	DRAW A SERIES OF CONCENTRIC CIRCLES

REGISTERS:	
	IN:	D=VG COLOR COMMAND
		U=VG SCALE COMMAND FOR STARTING VALUE
		X=# OF CIRCLES TO BE DRAWN
	OUT:	U=NEXT SCALE VALUE
		X=0
		D CHANGED

STACK USE:	2 BYTES FOR RETURN

RAM USE:	VGRAM

	.ENDR
DCIRCL:
	STD (Y)++
	BEGIN
	LDD #VGOFFY&1FFF	;Y OFFSET FOR GAME'S SCREEN CENTER
	STD (Y)++
	LDD #0000		;NO OFFSET FOR X
	STD (Y)++
	STU (Y)++		;SCALE
	LDD #VJBCR2		;BASE CIRCLE WITHOUT COLOR
	STD (Y)++
	LEAU -2(U)
	LEAX -1(X)
	EQEND
	RTS

	.PAGG
	.SBTTL	DRING
	.REPT 0
**********************************
*
*	DRING
*
**********************************

DESCRIPTION:	DRAW RINGS. SIMILAR TO CIRCLES BUT SCALE SMOOTHLY.

REGISTERS:	
	IN:	D=VG COLOR COMMAND
		U=STARTING VG SCALE COMMAND
		X=NUMBER OF RINGS TO DRAW
	OUT:	U=NEXT SCALE
		X=0
		D ALTERED

STACK USE:	2 BYTES FOR RETURN

RAM USE:	VGRAM

	.ENDR

DRING:
	STD (Y)++
	BEGIN
	LDD #VGOFFY&1FFF	;Y OFFSET FOR GAME'S SCREEN CENTER
	STD (Y)++
	LDD #0000		;NO OFFSET FOR X
	STD (Y)++
	STU (Y)++
	LDD #VJBCR2		;BASE STAR CIRCLE WITHOUT COLOR COMMAND
	STD (Y)++
	TFR U,D
	SUBD #0004
	ANDB #7F
	TFR D,U
	LEAX -1(X)
	EQEND
	RTS
				;===

	HLL69F
	.END
   