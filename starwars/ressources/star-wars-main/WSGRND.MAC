	.TITLE	WSGRND --- GROUND OBJECT STUFF
	.INCLUDE	WSCOMN	;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
				;---
GD$TYP	==0
GD$IZ	==1
GD$EQ	==32.
				;---
				;---
M$AX	==-10+0
M$AY	==-10+0+2
M$AZ	==-10+0+0+4

M$BX	==-10+0+8
M$BY	==-10+0+8+2
M$BZ	==-10+0+8+4

M$CX	==-10+0+10
M$CY	==-10+0+10+2
M$CZ	==-10+0+10+4

M$TX	==-10+18+0
M$TY	==-10+18+2
M$TZ	==-10+18+4

M$VX	==-10+6
M$VY	==-10+6+8
M$VZ	==-10+6+10

				;===
; EXTERNALS
	;ROUTINES
	.GLOBL  AUDCR,AUDPF,AUDSX
	.GLOBL	BG1GLW
	.GLOBL	BJGROT,BJGPNT,BJGDRW,BJGCLP
	.GLOBL	MGOWT
	.GLOBL	TRANU1
	.GLOBL	BGBKXP,BGTWXP
	;VARIABLES
	.GLOBL	M$GDBC
	.GLOBL	GD$MDT
	.GLOBL	GDRAM,GDRAMZ
	.GLOBL	GD.TWL
	.GLOBL	GD.WAV
	.GLOBL	FRBFGN,FRBLGN,FRBRGN
	.GLOBL	FRWFGN,FRWLGN,FRWRGN
	.GLOBL	M.U1,M.S1,M.XT,M.YT,M.ZT
	.GLOBL	M.GD,M.BIC
	.GLOBL	M.XP,M.YP,M.ZP
	.GLOBL	M.X0,M$X0BC
	.GLOBL	M.DVD,M.QUO
	.GLOBL	P.RND1
	.GLOBL	SCRBNK,SCRTWR
	.GLOBL	SP.COL,SP.LOC,SP.TYP
	.GLOBL	TSCTWR
	.GLOBL	TWRMUL

	.GLOBB	BJ.ID
	.GLOBB	CL.BDS,CL.BP,CL.TDS,CL.TP
	.GLOBB  GD.SEQ
	.GLOBB	LZ.CX,LZ.CY,LZ.HIT,LZ.ON
	.GLOBL	M.GDCT,M.GDCB,M.GDSC
	.GLOBB	M$PERS,M$PSUB,M$PSB2
	.GLOBB  S.GAS,S.ROL
	.GLOBB	S2.PRM
	.GLOBB	TD$GND,TD$TWR,TD$BNK,TD$STB
	.GLOBL	VGCOFF,VGCGRN,VGCRED,VGCYLW,VGCWHT,VGCOPC
	.GLOBL	VJFLS
	.GLOBL	Q.KTW

	.MACRO .PAGG
	.PAGEG N	;GROUND
	.ENDM

	.CSECT	TTWRS
TTWRS:				;TABLE OF NUMBER OF TOWERS IN GROUND MAZE
	.CSECT	GRND

	.PAGG
	.SBTTL	GROUND OBJECT STUFF

TYP$LV	=1			;ALIVE
TYP$VW	=2			;SETUP TO VIEW THIS BUILDING
TYP$DM	=4			;DAMAGED -- NO GUNS
TYP$AM	=8			;AIM SAYS TO SHOOT SOON
TYP$BK	=10			;BUNKER (OR HAT ON TOWERS) IS VISIBLE
TGD$X	=0			;X LOC
TGD$Y	=2			;Y LOC
TGD$PC	=4			;PICTURE TYPE
TGD$SQ	=5			;SEQUENCE TO TURN ON
TGD$RM	=6			;RAM OFFSET
TGD$IZ	=7			;FINAL SIZE OF TABLE ENTRY
TGD$EQ	=32.			;MAX NUMBER OF GROUND OBJECTS PER MAZE

PC$TWR	=1			;TOWER PICTURE
PC$BSH	=2			;BISHOP PICTURE TYPE
PC$BNK	=3			;BUNKER

.MAZENUM=0000

.MACRO	MAZESTART
	.RMPTR	=0		;CURRENT POINTER INTO RAM TABLE
	.TWRS	=0		;RESET # OF TOWERS
	.ENDM

	.PAGE
	.SBTTL	TOWER MAZE MACROS
.MACRO	MAZEND	NAME
Z'NAME':
	Y'NAME'	=.TWRS
	.ENDM

.MACRO	TOWER .A,.B,.C		;SHOOTS DIAG AND FORWARDS
	.WORD .B,.A
	.BYTE 1			;TOWER
	.BYTE .C		;AWAKENING SEQUENCE NUMBER
	.BYTE .RMPTR		;RAM OFFSET
	.RMPTR=.RMPTR+GD$IZ
	.TWRS	=.TWRS+1	;ONE MORE TOWER
	.IIF GT,.TWRS&0F-9,.TWRS=.TWRS+6	;KEEP IT IN BCD
	.IIF GT,.RMPTR/GD$IZ-TGD$EQ, .ERROR ;TOO MANY ENTRIES
	.ENDM

.MACRO	BISHOP .A,.B,.C		;SHOOTS DIAG ONLY
	.WORD .B,.A
	.BYTE 2			;BISHOP
	.BYTE .C		;AWAKENING SEQUENCE NUMBER
	.BYTE .RMPTR		;RAM OFFSET
	.RMPTR=.RMPTR+GD$IZ
	.TWRS	=.TWRS+1	;ONE MORE TOWER
	.IIF GT,.TWRS&0F-9,.TWRS=.TWRS+6	;KEEP IT IN BCD
	.IIF GT,.RMPTR/GD$IZ-TGD$EQ, .ERROR ;TOO MANY ENTRIES
	.ENDM

.MACRO	BUNKER .A,.B,.C		;SHORTY
	.WORD .B,.A
	.BYTE 3			;BUNKER
	.BYTE .C		;AWAKENING SEQUENCE NUMBER
	.BYTE .RMPTR		;RAM OFFSET
	.RMPTR=.RMPTR+GD$IZ
	.IIF GT,.RMPTR/GD$IZ-TGD$EQ, .ERROR ;TOO MANY ENTRIES
	.ENDM

	.PAGE
	.SBTTL	TOWER MAZES

T3DIFF:		;24 TOWERS,  9-0, 9-1, 8-2, 6-3		WAVE 16
TDIFF:		;20 TOWERS,  7-0, 9-1, 7-2, 5-3		WAVE 07
	MAZESTART
					;TOP VIEW, X +RIGHT, -LEFT
					;	   Y FORWARD
	BUNKER -5000,1000	1	;A
	BUNKER -2000,1000	1
	BUNKER 2000,1000	1
	BUNKER 5000,1000	1
	TOWER -6000,1800	3	;B
	TOWER 6000,1800		2
	TOWER -4800,2000	2	;C
	TOWER 4800,2000		2
	BUNKER -4000,3000	2	;D
	TOWER 0,3000		0
	BUNKER 4000,3000	2
	TOWER -6800,3800	3	;E
	TOWER -1000,3800	0
	TOWER 1000,3800		0
	TOWER 6800,3800		3
	BUNKER -7000,4000	3	;F
	BUNKER 7000,4000	3
	TOWER -7000,5000	1	;G
	BISHOP 0,5000		1
	TOWER 7000,5000		1
	TOWER -1C00,5400	1	;H
	TOWER 1C00,5400		1
	TOWER -4000,5800	0	;I
	TOWER 4000,5800		0
	TOWER -2800,6800	0	;J
	TOWER 2800,6800		0
	BISHOP -1000,7000	2	;K
	BISHOP 1000,7000	2
	MAZEND DIFF
				;---
	TOWER -7000,8000	3	;L
	TOWER -2800,8000	0
	TOWER 2800,8000		0
	TOWER 7000,8000		2
	MAZEND 3DIFF
				;===

T3CLUSTR:	;20 TOWERS,  8-0, 6-1, 9-2, 9-3		WAVE 13
TCLUSTR:	;16 TOWERS,  8-0, 6-1, 7-2, 7-3		WAVE 04
					;CLUSTER'S LAST STAND
	MAZESTART
					;A
	TOWER	-7800,3000	2
	BUNKER	-6800,3000	2
	BUNKER	-5800,3000	2
	TOWER	-4800,3000	2
	TOWER	-1800,3000	0
	BUNKER	-0800,3000	0
	BUNKER	0800,3000	0
	TOWER	1800,3000	0
	TOWER	4800,3000	3
	BUNKER	5800,3000	3
	BUNKER	6800,3000	3
	TOWER	7800,3000	3
					;B
	TOWER	-7000,4000	2
	BUNKER	-6000,4000	2
	TOWER	-5000,4000	2
	TOWER	-1000,4000	0
	TOWER	1000,4000	0
	TOWER	5000,4000	3
	BUNKER	6000,4000	3
	TOWER	7000,4000	3
					;C
	BUNKER	-3400,5400	1
	BUNKER	3400,5400	1
					;D
	TOWER	-6000,6000	1
	BUNKER	-2000,6000	0
	BUNKER	2000,6000	0
	TOWER	6000,6000	1
					;E
	TOWER	-2000,7400	1
	TOWER	2000,7400	1
	MAZEND CLUSTR
				;---
	TOWER -6800,8000	2	;F
	TOWER -4800,8000	2
	TOWER 4800,8000		3
	TOWER 6800,8000		3
	MAZEND 3CLUSTR
				;===

TBUNK:		;0 TOWERS, 7-0, 7-1, 7-2, 7-3		WAVE 2 ONLY
				;BUNKER WAVE
	MAZESTART

	BUNKER	3000,0400	1	;A
	BUNKER	2000,0C00	0	;B
	BUNKER	-6800,1000	1	;C
	BUNKER 4800,1400	1	;D
	BUNKER	-5000,1800	3	;E
	BUNKER	-3000,1800	0
	BUNKER	-4000,2000	1	;F
	BUNKER	3800,2400	2	;G
	BUNKER	7000,2400	2
	BUNKER	0000,2800	0	;H
	BUNKER	-7800,3000	1	;I
	BUNKER	8000,4000	1	;J
	BUNKER	6000,4400	2	;K
	BUNKER	-7000,4800	1	;L
	BUNKER	-5800,4800	3
	BUNKER	5000,4C00	2	;M
	BUNKER	-2000,5000	3	;N
	BUNKER	0000,5000	2
	BUNKER	2800,5000	0
	BUNKER	-4800,6800	3	;O
	BUNKER	-2800,6800	0
	BUNKER	-6000,7000	3	;P
	BUNKER	-1800,7000	0
	BUNKER	1800,7000	3
	BUNKER	5800,7000	3
	BUNKER	-0800,7800	0	;Q
	BUNKER	4000,7800	2
	BUNKER	6800,7800	2
	MAZEND BUNK
				;===

T3TWRCTY:	;32 TOWERS,  8-0, 8-1, 9-2, 7-3		WAVE 20
TTWRCTY:	;28 TOWERS,  8-0, 8-1, 7-2, 5-3		WAVE 11
					;TOWER CITY
	MAZESTART
					;A
	TOWER	-7000,0000	0
	TOWER	-5000,0000	0
	TOWER	-3000,0000	0
	TOWER	-1000,0000	0
	TOWER	1000,0000	0
	TOWER	3000,0000	0
	TOWER	5000,0000	0
	TOWER	7000,0000	0
					;B
	TOWER	-3800,1000	2
					;C
	TOWER	-4000,2800	2
					;D
	TOWER	-7800,3000	2
	TOWER	-5800,3000	2
	TOWER	4800,3000	2
	TOWER	6800,3000	2
					;E
	TOWER	-6000,4000	3
	TOWER	4000,4000	2
	TOWER	6000,4000	3
	TOWER	8000,4000	3
					;F
	TOWER	0000,6000	3
					;G
	TOWER	-7C00,6800	3
					;H
	TOWER	-6800,7000	1
	TOWER	-4800,7000	1
	TOWER	-2800,7000	1
	TOWER	-0800,7000	1
	TOWER	1800,7000	1
	TOWER	3800,7000	1
	TOWER	5800,7000	1
	TOWER	7800,7000	1
	MAZEND TWRCTY
				;---
	TOWER -1800,3000	2	;D
	TOWER 800,3000		2
	TOWER -800,4000		3	;E
	TOWER 1800,4000		3
	MAZEND 3TWRCTY
				;===

T3SYMTRC:	;25 TOWERS, 11-0, 7-1, 7-2, 7-3		WAVE 18
TSYMTRC:	;21 TOWERS,  9-0, 5-1, 7-2, 7-3		WAVE 09
					;SYMMETRIC
	MAZESTART
					;A
	BUNKER	-5800,0800	2
	BUNKER	5800,0800	2
					;B
	TOWER	-1800,0C00	0
	TOWER	1800,0C00	0
					;C
	TOWER	-3C00,1400	0
	TOWER	3C00,1400	0
					;D
	TOWER	-5800,2800	2
	TOWER	5800,2800	2
					;E
	BUNKER	0000,3000	0
					;F
	TOWER	-2000,3800	0
	TOWER	2000,3800	0
					;G
	TOWER	-4000,4800	3
	TOWER	4000,4800	3
					;H
	TOWER	-7000,5000	3
	BUNKER	-2800,5000	1
	BUNKER	2800,5000	1
	TOWER	7000,5000	2
					;I
	BUNKER	-1000,5800	2
	BUNKER	1000,5800	2
					;J
	TOWER	-4800,6800	0
	TOWER	4800,6800	0
					;K
	TOWER	-7800,7000	3
	TOWER	-6000,7000	1
	TOWER	-3000,7000	3
	TOWER	0000,7000	1
	TOWER	3000,7000	3
	TOWER	6000,7000	1
	TOWER	7800,7000	3
	MAZEND SYMTRC
				;---
	TOWER -5000,8000	0	;L
	TOWER -1800,8000	1
	TOWER 1800,8000		1
	TOWER 5000,8000		0
	MAZEND 3SYMTRC
				;===

T3TRAP:		;25 TOWERS, 11-0, 8-1, 7-2, 6-3		WAVE 17
TTRAP:		;21 TOWERS, 11-0, 8-1, 7-2, 2-3		WAVE 08
					;TRAP
	MAZESTART
					;A
	TOWER	-6800,6000	2
	TOWER	6800,1000	2
					;B
	BUNKER	-3000,2000	1
					;C
	BUNKER	-7000,3000	2
	TOWER	-2000,3000	0
	TOWER	2000,3000	0
	BUNKER	7000,3000	2
					;D
	TOWER	-4800,3800	1
	TOWER	4800,3800	1
					;E
	TOWER	-7000,4000	3
	BUNKER	-1800,4000	0
	BUNKER	1800,4000	0
	TOWER	4800,4000	1
					;F
	BUNKER	-2000,5000	0
	TOWER	-1000,5000	0
	TOWER	1000,5000	0
	BUNKER	2000,5000	0
					;G
	TOWER	-7800,6000	3
	TOWER	-6000,6000	2
	TOWER	-4000,6000	1
	TOWER	-3000,6000	1
	TOWER	-0800,6000	0
	TOWER	0800,6000	0
	TOWER	3000,6000	1
	TOWER	4000,6000	1
	TOWER	6000,6000	2
	TOWER	8000,6000	2
					;H
	TOWER	0000,7000	0
	MAZEND TRAP
				;---
	TOWER -5800,8000	3	;I
	TOWER -2000,8000	3
	TOWER 2000,8000		3
	TOWER 5800,8000		3
	MAZEND 3TRAP
				;===

T3WEDGE:	;24 TOWERS, 8-0, 8-1, 8-2, 8-3		WAVE 15
TWEDGE:		;20 TOWERS, 8-0, 8-1, 4-2, 8-3		WAVE 06
					;WEDGE
	MAZESTART
					;A
	TOWER	-4800,0000	2
	TOWER	4800,0000	2
					;B
	TOWER	-6000,1000	3
	TOWER	-2000,1000	1
	TOWER	-0800,1000	0
	TOWER	0800,1000	0
	TOWER	2000,1000	1
					;C
	TOWER	-3800,2000	1
	TOWER	3800,2000	1
					;D
	TOWER	-1C00,2C00	0
	TOWER	1C00,2C00	0
					;E
	TOWER	-7000,3000	3
					;F
	BUNKER	0000,4000	1
					;G
	TOWER	0000,5000	1
	BUNKER	8000,5000	3
					;H
	BUNKER	-1800,6000	1
	BUNKER	1800,6000	1
	TOWER	8000,6000	3
					;I
	BUNKER	-7800,7000	2
	TOWER	-6000,7000	0
	TOWER	-5000,7000	0
	TOWER	-1000,7000	3
	TOWER	1000,7000	3
	TOWER	5000,7000	0
	TOWER	6000,7000	0
	BUNKER	7800,7000	2
					;J
	BUNKER	-2000,7800	3
	BUNKER	2000,7800	3
	MAZEND WEDGE
				;---
	TOWER -5000,4000	2	;F
	TOWER -4000,4000	2
	TOWER 3000,4000		2
	TOWER 4000,4000		2
	MAZEND 3WEDGE
				;===

T3SQUARE:	;20 TOWERS, 8-0, 12-1, 6-2, 6-3		WAVE 12
TSQUARE:	;16 TOWERS, 8-0, 12-1, 6-2, 2-3		WAVE 03
					;SQUARE
	MAZESTART
					;A
	BUNKER	-8000,2000	2
	BUNKER	-6000,2000	1
	BUNKER	-5000,2000	1
	BUNKER	5000,2000	1
	BUNKER	6000,2000	1
					;B
	TOWER	-8000,3000	2
	TOWER	-6000,3000	1
	TOWER	-5000,3000	1
	BUNKER	-3000,3000	1
	BUNKER	-2000,3000	0
	BUNKER	0000,3000	0
	BUNKER	2000,3000	0
	BUNKER	3000,3000	1
	TOWER	5000,3000	1
	TOWER	6000,3000	1
					;C
	TOWER	-3000,4000	2
	TOWER	-2000,4000	0
	TOWER	0000,4000	0
	TOWER	2000,4000	0
	TOWER	3000,4000	2
					;D
	BUNKER	5800,4800	2
					;E
	BUNKER	7000,5400	2
					;F
	TOWER	-7000,6000	3
	TOWER	7000,6000	3
					;G
	TOWER	-1000,6800	0
	TOWER	1000,6800	0
					;H
	TOWER	-4000,7000	1
	TOWER	4000,7000	1
	MAZEND SQUARE
				;---
	TOWER -6000,8000	3	;I
	TOWER -2000,8000	3
	TOWER 2000,8000		3
	TOWER 6000,8000		3
	MAZEND 3SQUARE
				;===

T3VALLEY:	;31 TOWERS, 10-0, 7-1, 7-2, 8-3		WAVE 19
TVALLEY:	;27 TOWERS, 10-0, 7-1, 5-2, 6-3		WAVE 10
					;VALLEY
	MAZESTART
					;A
	TOWER	0000,0000	1
					;B
	TOWER	-8000,1800	3
					;C
	TOWER	-2800,2000	1
	TOWER	2800,2000	1
					;D
	TOWER	-7000,3000	2
	BUNKER	6000,3000	2
	TOWER	7000,3000	2
					;E
	TOWER	-5000,3800	3
	TOWER	-2000,3800	0
	TOWER	2000,3800	0
	TOWER	5000,3800	3
					;F
	TOWER	-1800,4800	0
	TOWER	1800,4800	0
					;G
	TOWER	-7800,5000	2
	TOWER	-6000,5000	3
	TOWER	-4000,5000	1
	TOWER	4000,5000	1
	TOWER	6000,5000	3
	TOWER	7800,5000	2
					;H
	TOWER	-1C00,5C00	0
	TOWER	1C00,5C00	0
					;I
	TOWER	-1000,6000	0
	TOWER	1000,6000	0
	TOWER	7C00,6000	3
					;J
	TOWER	-3800,7000	1
	TOWER	-0800,7000	0
	TOWER	0800,7000	0
	TOWER	3800,7000	1
	MAZEND VALLEY
				;---
	TOWER -6000,0000	3	;A
	TOWER -4000,0000	2
	TOWER 4000,0000		2
	TOWER 6000,0000		3
	MAZEND 3VALLEY
				;===

T3TURNON:	;24 TOWERS, 12-0, 11-1, 9-2, 0-3	WAVE 14
TTURNON:	;20 TOWERS, 12-0, 11-1, 5-2, 0-3	WAVE 05
					;QUICK TURNON
	MAZESTART
					;A
	TOWER	-2000,1000	1
	TOWER	2000,1000	1
					;B
	BUNKER	-4000,2000	1
	BUNKER	4000,2000	1
					;C
	TOWER	-2000,2800	0
	TOWER	2000,2800	0
					;D
	BUNKER	-7000,3000	2
	BUNKER	-6000,3000	2
	BUNKER	6000,3000	2
					;E
	TOWER	-5000,3800	1
	TOWER	5000,3800	1
					;F
	BUNKER	-3000,4000	0
	BUNKER	0000,4000	0
	BUNKER	3000,4000	0
	TOWER	8000,4000	1
					;G
	TOWER	-7800,5000	2
	TOWER	0000,5000	0
	TOWER	7800,5000	2
					;H
	TOWER	-4000,6000	0
	TOWER	4000,6000	0
					;I
	TOWER	-3000,6800	0
	TOWER	3000,6800	0
					;J
	TOWER	-7000,7000	1
	TOWER	-6000,7000	1
	TOWER	-1000,7000	0
	TOWER	1000,7000	0
	TOWER	6000,7000	1
	TOWER	7000,7000	1
	MAZEND TURNON
				;---
	TOWER -4800,1000	2	;A
	TOWER 5800,1000		2

	TOWER -6800,2000	2	;B
	TOWER 7000,2000		2
	MAZEND 3TURNON
				;===

.MACRO	TMAP	.A
	.CSECT	TTWRS
	.BYTE 	Y'.A'
	.CSECT	GRND
	.WORD	T'.A
	.IF	GT,<Z'.A-T'.A>/TGD$IZ-TGD$EQ
		.ERROR	;TOO MANY GROUND OBJECTS IN THIS MAZE
	.WORD	T'.A+<TGD$IZ*TGD$EQ>	;LIMIT OVER-RANGE TO THE MAX
	.IFF
	.WORD	Z'.A
	.ENDC
	.ENDM
MAP$IZ	=4

TGDPTR:
				;WAVE 1 HAS NO GROUND PHASE
	TMAP	BUNK		;00 TOWERS,  7-0,  7-1,  7-2,  7-3	WAVE 02
	TMAP	SQUARE		;16 TOWERS,  8-0, 12-1,  6-2,  2-3	WAVE 03
	TMAP	CLUSTR		;16 TOWERS,  8-0,  6-1,  7-2,  7-3	WAVE 04
	TMAP	TURNON		;20 TOWERS, 12-0, 11-1,  5-2,  0-3	WAVE 05
	TMAP	WEDGE		;20 TOWERS,  8-0,  8-1,  4-2,  8-3	WAVE 06
	TMAP	DIFF		;20 TOWERS,  7-0,  9-1,  7-2,  5-3	WAVE 07
	TMAP	TRAP		;21 TOWERS, 11-0,  8-1,  7-2,  2-3	WAVE 08
	TMAP	SYMTRC		;21 TOWERS,  9-0,  5-1,  7-2,  7-3	WAVE 09
	TMAP	VALLEY		;27 TOWERS, 10-0,  7-1,  5-2,  6-3	WAVE 10
	TMAP	TWRCTY		;28 TOWERS,  8-0,  8-1,  7-2,  5-3	WAVE 11
	TMAP	3SQUARE		;20 TOWERS,  8-0, 12-1,  6-2,  6-3	WAVE 12
	TMAP	3CLUSTR		;20 TOWERS,  8-0,  6-1,  9-2,  9-3	WAVE 13
	TMAP	3TURNON		;24 TOWERS, 12-0, 11-1,  9-2,  0-3	WAVE 14
MAP$RPT	=.-TGDPTR/MAP$IZ	;REPEAT POINT FOR WRAP AROUND
	TMAP	3WEDGE		;24 TOWERS,  8-0,  8-1,  8-2,  8-3	WAVE 15
	TMAP	3DIFF		;24 TOWERS,  9-0,  9-1,  8-2,  6-3	WAVE 16
	TMAP	3TRAP		;25 TOWERS, 11-0,  8-1,  7-2,  6-3	WAVE 17
	TMAP	3SYMTRC		;25 TOWERS, 11-0,  7-1,  7-2,  7-3	WAVE 18
	TMAP	3VALLEY		;31 TOWERS, 10-0,  7-1,  7-2,  8-3	WAVE 19
	TMAP	3TWRCTY		;32 TOWERS,  8-0,  8-1,  9-2,  7-3	WAVE 20
ZGDPTR:			; >= WAVE 21: CHOOSE RANDOMLY(?) FROM ABOVE 6 MAPS

MAP$EQ	=ZGDPTR-TGDPTR/MAP$IZ	;TOTAL # OF MAPS

	.CSECT TTWRS
TTWRSZ:
	.CSECT GRND
				;===
	.PAGG
	.SBTTL	GROUND ROUTINES
IGRND::				;INIT FOR SEEING GROUND
	LDU #GDRAM
	BEGIN
	LDA #0
	STA GD$TYP(U)		;CLEAR OUT TYP -- NOT YET IN SEQUENCE
	LEAU GD$IZ(U)
	CMPU #GDRAMZ
	HSEND
				;---
	LDA GD.WAV		;LIMIT WAVE #
	CMPA #MAP$EQ
	IFHS			;?REQUESTED WAVE TOO HI?
	LDB #MAP$EQ-MAP$RPT	;# OF REPEAT MAPS TO CHOOSE FROM
	LDA P.RND1
	MUL
	ADDA #MAP$RPT		;ADDED TO BASE REPEAT MAP
	STA GD.WAV		;GIVES RANDOM SELECTION FROM TOP MAPS
	ENDIF
				;---
	LDB GD.WAV		;SETUP NUMBER OF TOWERS FOR THIS WAVE
	LDX #TTWRS
	ABX
	CMPX #TTWRSZ
	IFHS			;PAST END OF TABLE
	LDX #TTWRSZ-1
	ENDIF
	LDA 0(X)
	STA GD.TWL		;# OF TOWERS LEFT, BCD
				;---
	LDD TSCTWR		;SETUP PROGRESSIVE SCORE TO FIRST VALUE
	STD TWRMUL		;PROGRESSIVE SCORE FOR TOWER, BCD
	LDA TSCTWR+2		;
	STA TWRMUL+2
				;---
	LDA #0
	STA GD.SEQ		;SEQUENCE TO START WITH
				;---
	
	RTS
				;===

VWGRND::
	LDB #TD$GND		;THE GROUND SHAPE
	STB BJ.ID		;INTO OBJECT INDENTIFIER
	JSR BJGROT		;ROTATE THE GROUND OBJECT POINTS AND SAVE STARTING AT M.GD
				;---
	LDD #0
	STD M$TX+M.U1		;SET S1 CENTER TO 0,0,0
	STD M$TY+M.U1
	STD M$TZ+M.U1
				;---
	JSR GRLZIN		;INIT LAZAR COLLISION PARMS
				;---
	LDD M$TX+M.S1		;RESTORE PLAYER'S POSITION
	STD M$TX+M.U1
	LDD M$TY+M.S1
	STD M$TY+M.U1
	LDD M$TZ+M.S1
	STD M$TZ+M.U1
				;---
	LDB GD.WAV		;WAVE NUMBER FOR GROUND SEQUENCE
	LSLB			;*4 TO INDEX INTO TABLE
	LSLB
	LDX #TGDPTR		;TABLE OF POINTERS TO GROUND MAZES
	ABX			;POINTS INTO TABLE
	CMPX #ZGDPTR
	IFHS			;PAST THE TABLE'S END
	LDX #ZGDPTR-4		;USE LAST ENTRY IF OUT OF RANGE
	ENDIF
	LDX 0(X)		;START OF MAZE
	BEGIN			;DO EACH OBJECT
	STX S2.PRM
	LDA GD.SEQ		;CURRENT SEQUENCE NUMBER
	CMPA TGD$SQ(X)
	LBLT 90$		;?ALLOWED IN THIS SEQUENCE?
	LDD TGD$X(X)
	STD M.GD		;MAP IS IN TOP VIEW, X LEFT/RIGHT(MBOX Y)
	LDD TGD$Y(X)
	STD M.GD+2
	LDD #GD$MDT*2		;AROUND CENTER OF TOWER(PSUB2 DOES DIV OF 2)
	STD M.GD+4
	LDD #M$GDBC		;SETUP BIC FOR MATH BOX
	STD M.BIC
	LDA #M$PSB2		;OBJECT WITHIN RANGE?
	JSR MGOWT
	LDD M.XP
				;*** IF X SIGN CHANGES, RESTART NEW BUILDING

	IFMI			;?FLIP X OVER FOR TIGHTER PACKING?
	ANDA #3F		;FLIP IT BACK IN FRONT(PSB2 DIVIDES BY 2)
	STD M.XP
	ENDIF
	STD 4+M.X0		;SAVE NEW DISTANCE FOR COLLISION
	CMPD #100
	IFGE			;NOT TOO CLOSE
	CMPD #3C00
	IFLO			;NOT TOO FAR ==> WITIN RANGE
				;CHECK FOR 45 DEGREES
	LDD M.YP		;YP
	IFMI
	NEGD
	ENDIF
	SUBD M.XP
	IFLO			;?OBJECT NOW DEFINATELY VISIBLE?
	LDU #GDRAM
	LDB TGD$RM(X)
	LEAU B(U)
	LDA GD$TYP(U)
	BITA #TYP$VW
	IFNE			;?ALREADY FULLY SETUP TO VIEW NOW?
	JSR GDVIEW		;THEN VIEW THE BUILDING
	JSR GDGUN		;ALLOW BUILDINGS TO FIRE GUNS
	ENDIF
	BRA 90$
	ENDIF
	ENDIF
	ENDIF
80$:				;---
				;NOT CURRENTLY VISIBLE, BUT SEQUENCE OK
	LDX S2.PRM		;MAKE IT VIEWABLE WHILE BACKSTAGE
	LDU #GDRAM
	LDB TGD$RM(X)
	LEAU B(U)		;POINTING TO RAM ENTRY
	LDA Q.KTW		;?TRANSIT GROM GROUND TO BASE?
	IFNE			;YES
	CLR GD$TYP(U)		;KILL ALL GUNS
	ELSE
	LDA #TYP$LV+TYP$AM+TYP$VW	;WHEN BACKSTAGE, MAKE IT ALIVE, READY TO SHOOT
	LDB GD$TYP(U)
	BITB #TYP$DM
	IFNE			;?PREVIOUSLY DAMAGED?
	ORA #TYP$DM		;THEN REMAIN DAMAGED
	LDB TGD$PC(X)
	CMPB #PC$BNK
	IFEQ			;?DAMAGED BUILDING A BUNKER?
	ANDA #-1-TYP$VW		;THEN NO VIEW THIS PREVIOUSLY DAMAGED BUNKER
	ENDIF
	ELSE
	ORA #TYP$BK		;ELSE NOT DAMAGED, SO TURN ON BUNKER PART
	ENDIF
	STA GD$TYP(U)
	ENDIF
90$:				;---
				;NOT IN THIS SEQUENCE
	LDB GD.WAV		;WAVE NUMBER FOR GROUND SEQUENCE
	LSLB			;*4 TO INDEX INTO TABLE
	LSLB
	LDX #TGDPTR		;TABLE OF POINTERS TO GROUND MAZES
	ABX			;POINTS INTO TABLE
	CMPX #ZGDPTR
	IFHS			;PAST THE TABLE'S END
	LDX #ZGDPTR-4		;USE LAST ENTRY IF OUT OF RANGE
	ENDIF
	TFR X,U			;POINTS INTO TABLE OF POINTERS
	LDX S2.PRM
	LEAX TGD$IZ(X)
	CMPX 2(U)		;CMPARE TO END OF CURRENT MAZE
	HSEND
	RTS
				;===

GDVIEW:
	LDX S2.PRM
				;---
	LDB TGD$PC(X)
	CMPB #PC$BNK
	IFEQ			;? A BUNKER PICTURE?
	LDB #TD$BNK
	ELSE			;ELSE A TOWER PIC
	LDB #TD$TWR
	ENDIF
	STB BJ.ID		;UPDATE OBJECT ROUTINES ABOUT IT
				;---
	LDD #VGCYLW*100+VGCOPC	;THEN ASSUME VISIBLE NORMALLY
	STD M.GDCB		;BASE COLOR, INTO MBOX FOR LATER D-PAGE USE
				;---
	LDU #GDRAM
	LDB TGD$RM(X)
	LEAU B(U)
	LDA GD$TYP(U)
				;
	LDB TGD$PC(X)
	CMPB #PC$BNK
	IFNE			;?NOT A LONE BUNKER?
	BITA #TYP$DM		;THEN MUST BE A TOWER OR BISHOP
	BNE 20$			;?DAMAGED?
	BITA #TYP$BK
	IFEQ			;?OR WITH A GONE BUNKER ON TOP?
20$:
	LDB #TD$STB		;THEN DRAW JUST THE STUB
	STB BJ.ID
	LDD #VGCOFF*100+VGCOPC	;NO HAT DRAWN ON TOP
	ELSE			;ELSE TOWER HAS A HAT
	LDD #VGCWHT*100+VGCOPC	;SO DRAW IT SPECIAL WHITE
	ENDIF
	ELSE			;ELSE IS LONE BUNKER
	BITA #TYP$DM
	IFEQ			;?NOT DAMAGED?
	LDD #VGCRED*100+VGCOPC-20
	ELSE			;ELSE DAMAGED
	LDD #VGCOFF*100+VGCOPC	;SHOW IT
	ENDIF
	ENDIF
				;---
	STD M.GDCT		;TOP COLOR OF LASAR TOWERS, BUNKER COLOR
				;---
	LDA #72			;LIN SCALE TO REDUCE SIZE OF FAR OBJECTS
	STA M.GDSC		;SAVE THE SCALE
	LDA M.XP		;3F MAX
	LSLA
	LSLA			;BUMP UP TO UNSIGNED FF
;;;	LDB #0FF		;MULT FOR SMALLEST SIZE
;;;	MUL
	STA M.GDSC+1
	LDB #40			;RANGE OF BRITENESS
	COMA			;FLIP FOR BRITENESS
	MUL			;
	ADDA #40		;DIMMEST BRITENESS
	STA M.GDCB+1		;PUT INTO COLOR INSTRUCTIONS
				;---	
	LDD M$VX+M.S1		;GET PLAYER SPEED
	LSLD
	ADDD #400		;PLUS OFFSET
	SUBD M.XP
;;;	IFHS			;?GETTING CLOSE TO TOWER?
	LBLT 91$
	LDA TGD$PC(X)
	CMPA #PC$BNK
	IFNE			;?A TOWER?
	LDA S.GAS
	IFGE			;?STILL IN NORMAL GAMEPLAY?
	JSR AUDPF		;TOWER PFFFTS
	ENDIF
	LDD M.XP
	SUBD #200
	SUBD M$VX+M.S1
	IFLE			;?CLOSE ENUF FOR COLLISION?
	LDD #VJFLS		;VERY BRITE HIT
	STD M.GDCB		;BASE COLOR, INTO MBOX FOR LATER D-PAGE USE
	LDD #VGCOFF*100+VGCOPC
	STD M.GDCT		;TOP COLOR OF LASAR TOWERS
	LDA S.GAS
	IFGE			;?STILL IN REGULAR GAMEPLAY?
	JSR BG1GLW		;START GLOWING SHIELDS
	JSR AUDCR		;AND CRASH INTO TOWER
	ENDIF
	LDA S.ROL
	IFEQ			;?ANY PREVIOUS DIRECTION PREFERRED?
	LDA M.YP		;IF NOT, THEN SELECT ONE
	NEGA
	ENDIF
	LDB #20			;AMOUNT TO ROLL
	TSTA
	IFMI			;?WHICH DIRECTION TO CHOOSE?
	NEGB
	ENDIF
	STB S.ROL
	ENDIF
	ELSE			;ELSE IS BUNKER
				;---
	LDD M$TZ+M.U1
	SUBD #6*120.*2+200	;HITE*SCALE*PSUB2+SCREEN HITE FOR CLOSE HIT
	IFLE			;?CLOSE OVER TOP OF BUNKER?
	JSR AUDPF		;BUNKER PFFFTS
				;---
	LDX S2.PRM
	LDU #GDRAM
	LDB TGD$RM(X)
	LEAU B(U)
	LDA GD$TYP(U)
	BITA #TYP$DM
	IFEQ			;?CHECK COLLISION SINCE BLOWN AWAY?
	LDD M$TZ+M.U1
	SUBD #6*120.*2		;HITE*SCALE*PSUB2
	IFLT			;?TOO CLOSE OVER TOP OF BUNKER?
	LDD M.XP
	SUBD #400
	SUBD M$VX+M.S1
	IFLE			;?CLOSE ENUF FOR COLLISION?
	LDD #VJFLS		;VERY BRITE HIT
	STD M.GDCT		;TOP COLOR FOR BUNKER, INTO MBOX FOR LATER D-PAGE USE
	LDA S.GAS
	IFGE			;?STILL IN NORMAL GAME?
	JSR BG1GLW		;BEGIN GLOWING SHIELDS
	JSR AUDCR		;AND CRASH INTO BUNKER
	ENDIF
	LDA S.ROL
	IFEQ			;?READY FOR ANOTHER HIT? (BE POLITE)
	LDA #19.		;ROLLING COUNT FOR PARTIAL ROLL
	LDB M.YP
	IFPL			;?WHICH DIRECTION TO ROLL?
	NEGA			;HIT RIGHT SHOULDER ROLLS US LEFT
	ENDIF
	ADDA S.ROL		;ROLLS ACCUMULATE -- LOSE CONTROL
	STA S.ROL
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	ENDIF
;;;	ENDIF
91$:				;---
	LDA M.XP
	SUBA #8			;FIRST 1000 AWAY
	IFLE			;?TOO CLOSE FOR DISPLAY COMFORT?
	JSR BJGCLP		;CLIP CLOSE OBJECTS
	ELSE
	JSR BJGPNT		;TRANSLATE AND PROJECT GROUND OBJECT'S POINTS
	ENDIF
	JSR BJGDRW		;DRAW THE OBJECT, NEEDS ORIGINAL M.XP,YP,ZP
	JSR GRLZCL		;PROCESS LAZAR COLLISION
	RTS
				;===
	.PAGG
	.SBTTL LAZAR COLLISIONS

GRLZIN:				;INIT VALS FOR LATER COLLISION
				;TRANSPOSE U1 TO GET UNROTATED LAZAR VIDEO LOC
	JSR TRANU1
				;---
	LDD #0
	STD 0+M.X0
	LDD LZ.CX
	STD 2+M.X0		;LEFT/RIGHT VID X IS MATH Y
	LDD LZ.CY
	STD 4+M.X0		;UP/DOWN VID Y IS MATH Z
	LDD #M$X0BC
	STD M.BIC
	LDA #M$PSUB
	JSR MGOWT
	LDD M.YP
	STD 0+M.X0		;FOR LATER SAFEKEEPING
	LDD M.ZP
	STD 2+M.X0		;LAZAR VIDEO LOC IF SHIP NOT ROTATED
	IFMI			;?LOWER THAN CENTER OF SCREEN?
	LDA LZ.ON
	IFNE
	LDA #-1
	STA LZ.HIT		;THEN AM SWEEPING DIRT GROUND -- SHOW SPLASH
	LDA #BT0+BT1		;UPPER HALF
	STA SP.TYP
	LDD #VGCGRN*100+VGCOPC
	STD SP.COL
	LDD M.ZP		;HITE BENEATH HORIZON IN VID UNITS
	LSRD			;-256.
	LSRD			;-128. ( 80 )
				;BUT ROTATION MAY MAKE IT 1.4 TIMES BIGGER
	ADDB #0C0		;HORIZON IS FAR AWAY, BOTTOM OF SCREEN IS CLOSE
	STB SP.LOC
	ENDIF
	ENDIF
				;---
	JSR TRANU1		;UN-TRANSPOSE MATRIX BACK TO NORMAL
				;---
	RTS
				;===

GRLZCL:				;CHECK FOR ACTUAL COLLISION
				;CALC 1/X WITH LIN SCALE INCLUDED
	LDX S2.PRM
	LDD 4+M.X0		;PULL VIEWED OBJECT DISTANCE
	LSLD			;PSUB2 DOES DIV BY 2
	STD M.DVD		;GEN 1/X
	LDD 2(X)		;OBJECT Y
	SUBD M$TY+M.U1		;TRANSLATE WITHOUT ROTATION
	STD M.YP		;PREPARE FOR MULTIPLY
	LDD #0			;Z, BOTTOM OF BUNKERS,TOWERS
	SUBD M$TZ+M.U1
	STD M.ZP
	LDD M.QUO
	STD M.XP		;GET X FOR PROPER SCREEN CONVERSION
	LDA #M$PERS
	JSR MGOWT
	LDD M.YP
	STD M.YT		;FOR SAVETY
	LDD M.ZP
	STD M.ZT		;Y,Z CONVERTED TO SCREEN COORDS
				;---
	LDA TGD$PC(X)		;DIFFERENT HITES FOR DIFFERENT TOWERS
	CMPA #PC$BNK
	IFNE			;?TOWER?
	LDD #4*120.*2		;DOUBLE RADIUS OF OBJECT
	STD M.YP
	LDD #58*120.*2		;DOUBLE HITE	
	STD M.ZP		;Z HITE(MAX)
	ELSE
	LDU #GDRAM		;FIRST FIND IF BUNKER IS STILL ALIVE
	LDB TGD$RM(X)
	LEAU B(U)
	LDA GD$TYP(U)
	BITA #TYP$DM
	LBNE 90$			;B EXIT SINCE BUNKER ALREADY DAMAGED
				;
	LDD #7*120.*2		;DOUBLE BUNKER HITE
	STD M.YP
	LDD #6*120.*2		;DOUBLE BUNKER HITE
	STD M.ZP
	ENDIF
	LDD M.XP		;GET 1/X
	SUBD #100		;ADJUST FOR LINEAR SCALE EFFECT
	IFMI
	LDD #0			;BUT DONT GO OVERBOARD
	ENDIF
	STD M.XP
	LDA #M$PERS
	JSR MGOWT		;DO THE MULTIPLYS
				;---
	LDD M.YT		;NOW TEST UNROTATED VIDEO LOC
	ADDD M.YP		;MISNAMED, IS RADIUS OF COLLISION
	ADDD #10.		;SITE RADIUS FOR FUDGE
	SUBD 0+M.X0		;UNROTATED LAZAR SITE LOCATION
;	IFGE			;1?TO ONE SIDE OF TOWER?
	LBLT 91$
	ASRD			;THEN CHANGE DELTA DIAMETER TO RADIUS
	SUBD #10.		;SITE DIAMETER/2 FOR FUDGE
	SUBD M.YP		;AND COMPARE WITH COLLISION RADIUS WIDTH
;	IFLE			;2?WITHIN BOTH BOUNDS? THEN A LEFT/RIGHT HIT!
	LBGT 92$
				;NOW CHECK Z
	LDD 2+M.X0
	SUBD M.ZT		;COMPARE WITH UNROTATED LAZAR SCREEN
	IFPL			;3?SHOOTING ABOVE GROUND LEVEL?
	SUBD M.ZP		;MISNOMER -- TEST AGAINST HITE DIAMETER
	IFLE			;4?WITHIN LIMITS?
	LDA TGD$PC(X)
	CMPA #PC$BNK
	IFEQ			;5?BUNKER?
	LDD 4+M.X0
	CMPD CL.BDS
	IFLO			;?CLOSEST SO FAR?
	STD CL.BDS
	STX CL.BP		;AND SAVE POINTER FOR LATER
	ENDIF
	ELSE			;ELSE IS TOWER
	LDD #52*120.*2		;HITE TO BUNKER ON TOP
	STD M.YP
	LDA #M$PERS		;BLITZES ZP
	JSR MGOWT
	LDD 2+M.X0		;LAZAR HITE
	ADDD #10.		;SITE RADIUS FOR FUDGE
	SUBD M.ZT
	SUBD M.YP
	IFGE			;6?WITHIN BUNKER ON TOP?		
	LDU #GDRAM		;FIRST FIND IF BUNKER IS STILL ALIVE
	LDB TGD$RM(X)
	LEAU B(U)
	LDA GD$TYP(U)
	BITA #TYP$DM
	BNE 90$			;B EXIT SINCE BUNKER ALREADY DAMAGED
				;
	LDD 4+M.X0
	CMPD CL.BDS
	IFLO			;?CLOSEST SO FAR?
	STD CL.BDS
	STX CL.BP		;AND SAVE POINTER FOR LATER
	ENDIF
	ELSE			;ELSE SPLASHED TOWER
	LDD 4+M.X0
	CMPD CL.TDS
	IFLO			;?CLOSEST SO FAR?
	STD CL.TDS
	STX CL.TP		;AND SAVE POINTER FOR LATER
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	ENDIF
;	ENDIF
92$:
;	ENDIF
91$:
90$:	
	RTS
				;===

GDHTGB::			;GROUND BUNKER HIT BY LAZARS
	LDX CL.BP		;GET THE POINTER
				;
	LDD TGD$X(X)
	SUBD M$TX+M.S1		;PLACE IN FRONT OF PLAYER(MAP WRAPS EVERY 8000)
	ANDA #7F		;KEEP IN VIEW
	ADDD M$TX+M.S1
	STD M.XT
				;
	LDD TGD$Y(X)
	STD M.YT
				;
	LDU #GDRAM
	LDB TGD$RM(X)		;AND OFFSET INTO RAM
	LEAU B(U)
	LDA GD$TYP(U)
	ORA #TYP$DM		;SET DAMAGED BIT
	STA GD$TYP(U)
				;---
	LDA TGD$PC(X)
	CMPA #PC$BNK		;GROUND LASER BUNKER?
	IFEQ			;YES
	LDD #3*120.*2
	STD M.ZT
	JSR BGBKXP
	JSR SCRBNK		;SCORE FOR HITTING A BUNKER
	ELSE			;MUST BE TOWER TOP
	LDD #<55+5>*120.*2	;55 IS MID HITE OF TOP, 5 IS FUDGE TO LOOK GOOD
	STD M.ZT
	JSR BGTWXP
	JSR SCRTWR		;SCORE FOR HITTING A TOWER BUNKER
	ENDIF
	JSR AUDSX		;SMALL EXPLOSION FOR HITTING BUNKER
	RTS
				;===

GDHTGT::			;GROUND TOWER HIT BY LAZARS
	RTS
				;===

	.PAGG
	.SBTTL SHOOT GUNS

GDGUN:				;ATTEMPT TO FIRE GUNS FROM LAZAR BUILDINGS
	LDA S.GAS
	IFGE			;?NOT YET IN DEATH SCENE?
	LDX S2.PRM
	LDU #GDRAM
	LDB TGD$RM(X)
	LEAU B(U)
	LDA GD$TYP(U)
	BITA #TYP$DM
	IFEQ			;?GUNS NOT DAMAGED YET?
	LDA TGD$PC(X)		;GET BUILDING TYPE
	CMPA #PC$BSH
	LBEQ GDBSHGN		;2==>BISHOP GUN
	LBHI GDBNKGN		;>2==>BUNKER GUN
	BRA GDTWRGN		;<2==>TOWER GUN
	ENDIF
	ENDIF
	RTS
				;===

GDTWRGN:			;TOWER GUN
	LDD #4000
	SUBD 4+M.X0		;4000-DISTANCE TO TOWER
	LSLD			;/4000 IS UNITY, THEN *2 FOR PRESUB2 EFFECT
	STD M.XP		;GET LINEAR SCALED FRACTIONS OF ORIGINAL HITE
	LDD #58*120.		;VERY TOP OF BUNKER
	STD M.ZP
	LDD #6*120.
	STD M.YP		;HITE OF BUNKER PORTION
	LDA #M$PERS		;MULT THE LIN SCALE BY TOWER SIZE
	JSR MGOWT
				;---
	LDD M.ZP
	SUBD M$TZ+M.U1		;COMPARE AGAINST PLAYERS HITE
	IFLT			;?STILL BENEATH HORIZON?
	LDA GD$TYP(U)
	ORA #TYP$AM
	STA GD$TYP(U)		;WE HAVE PROPER AIM WHENEVER WE POKE ABOVE HORIZON
	RTS
	ENDIF			;---ELSE AM ABOVE HORIZON

	SUBD M.YP		;CHECK AGAINST MAX SIZE OF BUNKER ITSELF
	BLE 30$			;B SHOOT IF WE STRADDLE HORIZON
	LDA GD$TYP(U)		;ELSE TEST IF WE USED TO BE UNDER HORIZON
	BITA #TYP$AM
	IFNE			;?JUMPED PAST HORIZON? THEN SHOOT ANYWAY
30$:				;---
	LDA GD$TYP(U)		;SINCE HAVE PASSED HORIZON, CLEAR OUT AIM
	ANDA #-1-TYP$AM
	STA GD$TYP(U)
	LDA P.RND1
	IFMI			;?50 PERCENT CHANCE OF FIRING?
	JSR FRWFGN		;J THEN SHOOT A FORWARD GUN
	ENDIF
	LDA P.RND1
	IFMI			;?SHOOT ONE WAY DIAG OR THE OTHER?
	JSR FRWRGN		;J SHOOT TO RIGHT DIAGONALLY
	ENDIF
	LDA P.RND1
	IFMI			;?SHOOT ONE WAY DIAG OR THE OTHER?
	JSR FRWLGN		;J ELSE SHOOT LEFT DIAGONALLY		
	ENDIF
	ENDIF
	RTS
				;===
GDBSHGN:			;BISHOP GUN
	LDD #4000
	SUBD 4+M.X0		;4000-DISTANCE TO TOWER
	LSLD			;(4000-DIST)/4000(UNITY)*2(PRESUB2 EFFECT)
	STD M.XP		;GET LINEAR SCALED FRACTIONS OF ORIGINAL HITE
	LDD #58*120.		;VERY TOP OF BUNKER
	STD M.ZP
	LDD #6*120.
	STD M.YP		;HITE OF BUNKER PORTION
	LDA #M$PERS		;MULT THE LIN SCALE BY TOWER SIZE
	JSR MGOWT
				;---
	LDD M.ZP
	SUBD M$TZ+M.U1		;COMPARE AGAINST PLAYERS HITE
	IFLT			;?STILL BENEATH HORIZON?
	LDA GD$TYP(U)
	ORA #TYP$AM
	STA GD$TYP(U)		;WE HAVE PROPER AIM WHENEVER WE POKE ABOVE HORIZON
	RTS
	ENDIF			;---ELSE AM ABOVE HORIZON

	SUBD M.YP		;CHECK AGAINST MAX SIZE OF BUNKER ITSELF
	BLE 30$			;B SHOOT IF WE STRADDLE HORIZON
	LDA GD$TYP(U)		;ELSE TEST IF WE USED TO BE UNDER HORIZON
	BITA #TYP$AM
	IFNE			;?JUMPED PAST HORIZON? THEN SHOOT ANYWAY
30$:				;---
	LDA GD$TYP(U)		;SINCE HAVE PASSED HORIZON, CLEAR OUT AIM
	ANDA #-1-TYP$AM
	STA GD$TYP(U)
	LDA P.RND1
	IFMI			;?50 PERCENT CHANCE OF FIRING?
	JSR FRWRGN		;J SHOOT TO RIGHT DIAGONALLY
	ENDIF
	LDA P.RND1
	IFMI			;?50 PERCENT CHANCE OF FIRING?
	JSR FRWLGN		;J ELSE SHOOT LEFT DIAGONALLY		
	ENDIF
	ENDIF
	RTS
				;===
GDBNKGN:			;BUNKER GUN
	LDA #40			;CLOSE WILL BE 40, FAR IS 0
	SUBA 4+M.X0		;REVERSED DISTANCE TO BUNKER,0 TO 3F
	CMPA P.RND1		
	IFHS			;?LESS CHANCE WHEN FAR AWAY?
	LDA P.RND1
	CMPA #50
	IFLO			;?SHOOT STRAIGHT AHEAD?
	JMP FRBFGN		;J THEN SHOOT A BUNKER FORWARD GUN
	ENDIF
	LDA P.RND1
	IFMI			;?SHOOT ONE WAY DIAG OR THE OTHER?
	JMP FRBRGN		;J SHOOT TO BUNKER RIGHT DIAGONALLY
	ENDIF
	JMP FRBLGN		;J ELSE SHOOT BUNKER LEFT DIAGONALLY
	ENDIF
	RTS
				;===

	.PAGG

	HLL69F
	.END
                                                      