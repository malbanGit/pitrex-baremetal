	.TITLE	WSINT		HARDWARE INTERRUPTS

DEVSYS	==0		;0101010101010101010101 ; 0 FOR ROM GAME, 1 FOR DEVSYS

	.INCLUDE	WSCOMN	;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
				;===
				;GLOBAL EQUATES
				;RHEOSTAT
				;*** IRQ/MAINLINE INTERACTIONS !!!!
RH$LO	==0			;LO VALUE-MINIMUM
RH$LT	==1			;LO VALUE ON TRIAL
RH$SP	==2			;SPREAD MULTIPLIER
RH$ST	==3			;SPREAD CHANGE TIMER

RH$NML	==4			;NORMALZIED POT VALUE
RH$POS	==5			;SITE POSITION
RH$RAT	==7			;RATE OF TURN
RH$RSD	==8			;MAGIC  TIC RESIDUE
RH$IZ	==9			;SIZE OF BLOCK

				;===
				;TC COMPATIBLE
	.GLOBB $$CRDT,BADCRD
	.GLOBL EEINIT
	.GLOBL GTIME
	.GLOBL TESTSW
	.GLOBB TESTBT
	.GLOBL TEST
	.GLOBL TIMER
				;===
				;D-PAGE RAM
	.GLOBB GMSYNC,GMTIMR
	.GLOBB PT.VL1,PT.VL2,PT$IZ,PT.DLY,PT.VL
	.GLOBB R.OPT1,R.OPT2
	.GLOBB RH.DIR
	.GLOBB VGSYNC,VGTIMR
	.GLOBB VF.GNB,VF.GNT
	.GLOBB VG.FLS,VG.GNB,VG.GNT,VG.LZF,VG.LZS
	.GLOBB VG.MFL
	.GLOBB VG.CX,VG.CY,VG.RSX,VG.RSY
	.GLOBB VG.LSE,VG.LSN,VG.LSO
	.GLOBB VG.LON
	.GLOBB $GARBG
	.GLOBB $INTCT 
				;---
				;OUTSIDE ROUTINE
	.GLOBL COINS
	.GLOBL DOWNVG
	.GLOBL INTDIS
	.GLOBL MAIN
	.GLOBL PBX$OK
	.GLOBL RHEOP,RHEOY
	.GLOBL SPLASH
				;---
				;MATH BOX
	.GLOBL M.BASE,M.FIN
				;---
				;VECTOR GENERATOR
	.GLOBL VGCURB,VGCURL,VGCURR,VGCURT
	.GLOBL VGOFFY
	.GLOBL VGRTSL
	.GLOBL VGVARB
	.GLOBL VRFLS,VTFLS,VTFLSZ
	.GLOBL VRGNB,VTGNB,VTGNBZ
	.GLOBL VRGNT,VTGNT,VTGNTZ
	.GLOBL VRGNX,VTGNX
	.GLOBL VRLZF,VRLZFZ,VTLZF,VTLZFZ
	.GLOBL VRLZS,VTLZS,VTLZSZ
	.GLOBL VRMFL,VTMFL,VTMFLZ
	.GLOBL VRSITE
				;---
				;HARDWARE EQUATES/LATCHES/STROBES,ETC
	.GLOBL DPRAM
	.GLOBL FIREBT,THMBT
	.GLOBL IN.NW0
	.GLOBL IRCLR
	.GLOBL PROG
	.GLOBL P.IRND
	.GLOBL R.BYT0,R.BYT1,R.BYT2,R.BYT3
	.GLOBL R.CHN
	.GLOBL R.FIRE,R.THMB
	.GLOBL R.RCVS,R.STAS
	.GLOBL RAM,RAMZ
	.GLOBL STACK
	.GLOBL W.BANK
	.GLOBL W.LED1,W.LED2,W.LED3
	.GLOBL WTCHDG
	.GLOBL VGBFSZ
	.GLOBL VGGO,VGHALT
	.GLOBL VGRAM,VGROM
	.GLOBL VGRROM		;USED BY ROM VERSION
	.GLOBL VGSTOP
	.GLOBL W.CHN0,W.CHN1
	.GLOBL W.RSTS,W.XMTS
				;===

	.CSECT	INT

	.PAGE
	.SBTTL INVALID INTERRUPTS
				;FORCE WATCHDOG RESET
SWI3::
SWI2::
FIRQ::
NMI::
ASWI:
10$:	BRA 10$			;ANYTHING OTHER THAN IRQ OR RESET HANGS IN
				;BRA, WAITING FOR WATCHDOG TO HOPEFULLY CLEAR
				;THE HARDWARE PROBLEM
	.PAGE

	.SBTTL IRQ
IRQ::
				;---
	LDX +10.(S)		;VALIDATE PC
	CMPX #PROG
	IFLO
	SWI
	ENDIF
	CMPX #INTDIS
	IFHS			;SHOULDN'T BE UP THIS HIGH

 .IF EQ,DEVSYS-1
	CMPX #0F000		;ALLOW DEV SYS AND PATCHING IN HIGH MEMORY
	IFLO
	SWI
	ENDIF
.IFF				;ELSE IF ROM
	SWI			;BREAK FOR OUT OF RANGE IRQ
.ENDC

	ENDIF			;---
	LDA #DPRAM/100		;SETUP NORMAL DIRECT PAGE
	TFR A,DPR
				;---
	STA WTCHDG		;KEEP WATCHDOG QUIET HERE SINCE IT IS TOO FAST
				;FOR MAINLINE
				;---
	LDA $GARBG		;VALIDATE RAM TRAP
	CMPA #3F
	IFNE
	SWI
	ENDIF
				;---
	DEC GMTIMR		;?TIME FOR NEXT GAME FRAME UPDATE?
	IFMI			;YES
	LDA #11.		;12.*4.2MS==>50. MS, 20 PER SECOND
	STA GMTIMR
	INC GMSYNC
	IFVS			;?MAINLINE CAUGHT UP IN ITSELF?
	SWI
	ENDIF
	ENDIF
				;---
	INC $INTCT		;INCREMENT THE INTERRUPT COUNTER
				;---
	JSR	COINS
	LDA	$$CRDT
	CMPA	#BADCRD
	IFHS			;?TOO MUCH OF A GOOD THING?
	SWI			;GAMING IS ILLEGAL, BREAK IT UP
	ENDIF
				;---
				;SWITCHES
	LDX #IN.NW0
	LDA R.BYT0
	JSR DEBNCE
	LDA R.BYT1
	JSR DEBNCE
	LDA R.BYT2
	JSR DEBNCE
	LDA R.BYT3
	JSR DEBNCE
				;---
	LDA VG.LSN		;PREVIOUS NEW VALUE
	STA VG.LSO		;IS CURRENT OLD VALUE
	LDA R.THMB		;THUMB VALUES
	ANDA #THMBT		;ISOLATE THUMB VALUES
	STA -1(S)		;ITEMP THUMB VALUE
	LDA R.FIRE		;GET THIS NEWEST VALUE
	ANDA #-1-THMBT		;CLEAR ROOM FOR CHANGING THUMB VALUE
	ORA -1(S)		;MIX IN THUMB VALUE
	STA VG.LSN		;AND SAY SO
	EORA VG.LSO		;CATCH ANY CHANGES
	ANDA VG.LSO		;FROM AN OLD '1'
	STA VG.LSE		;1==>FALLING EDGE (WENT ON)
				;---
	LDA VG.LSE		;SEE IF PLAYER HAS PRESSED FIRE
	ANDA #FIREBT!THMBT
	IFNE			;?SWITCH EDGE?
	ORA VG.LON
	STA VG.LON		;THEN TURN ON LAZARS
	ENDIF
				;---
	JSR DOPOTS
				;===

	LDA $INTCT
	IFEQ			;ONCE A SECOND
				;BRIEF ASIDE: CHECK ON SOUND BOARD EVERY SO OFTEN
	LDA R.STAS
	LSLA
	BPL 112$		;B RESET SOUND PCB IF IT HASN'T HIT WATCHDOG
	LDA R.RCVS		;ELSE SOUND PCB HIT WATCHDOG, VERIFY VALUE
	CMPA #PBX$OK		;CHECK VALUE FINDS 'CATCH FIRE AND BURN' MODE
	IFNE			;?OOPS, WRONG VALUE, SOUND PCB IN TROUBLE
112$:				;---
	STA W.RSTS		;FORCE A RESET TO SOUND BOARD
	LDA #0			;RESET VIA SOFTWARE ALSO
	STA W.XMTS		;ATTEMPT TO RESET SOUND BOARD
	ENDIF
	ENDIF
				;===

	LDA 	$INTCT
	ANDA 	#03		;EVERY 16 MILS
	IFEQ
				;---
				;INC TIMERS
	LDA 	GTIME+2		;CURRENT GAME TIMER - SET TO 0 AT START OF GAME
	ADDA	#01
	CMPA	#250.		;4 SECONDS?  ( 250. * 16 ms  = 4 SECONDS )
	IFHS			;YES
	LDA	#00		;START BACK AT 00
	ENDIF
	STA	GTIME+2
	IFEQ			;4 SECONDS, DO OTHER TIMERS
	LDA	GTIME+1
	ADDA	#01
	DAA
	STA	GTIME+1
	LDA	GTIME
	ADCA	#00
	DAA			;9999 * 16 ms = 666.6 MINS = 11.11 HOURS
	IFCC			;DON'T OVERFLOW TIME, MORE THAN 11 HOURS !!WOW!!
	STA	GTIME
	ENDIF
				;---
				;INC TOTAL TIME ON COUNT
	LDA TIMER+3
	ADDA #01
	DAA
	STA TIMER+3
	LDA TIMER+2
	ADCA #00
	DAA
	STA TIMER+2
	LDA TIMER+1
	ADCA #00
	DAA
	STA TIMER+1
	LDA TIMER
	ADCA #00
	DAA
	STA TIMER
				;---
	ENDIF
	ENDIF
				;===

DOVG:				;HANDLE VG STUFF
	DEC VGTIMR
	IFVS			;?VGEN TIMED OUT?
	STA VGSTOP		;THEN KILL IT
	JSR DOWNVG		;RELOAD PSUEDO ROM ( IE PROGRAM ROM TO VG RAM )
	JMP 90$
	ENDIF
				;---
	LBPL 90$		;?START NEXT VGEN FIELD?
	LDA VGHALT
	LSLA
	LBPL 90$		;?VGEN HALTED (READY TO START)?
				;---
	LDA VGSYNC		;?SWITCH FRAME BUFFERS?
	IFMI			;NON-NEGATIVE VALUE INDICATES BUFFER READY
				;---
	LDA VGRAM
	ANDA #VGBFSZ/200	;HIGH BYTE IN VG WORDS
	IFNE			;BEWARE BAD VGRAM AND GLITCHES
	LDA #VGBFSZ/100		;HIGH BYTE ADDRESS IN BYTES
	ENDIF
	ORA #VGRAM/100&0FF
	STA VGSYNC
				;---
	LDB #VGVARB/2
	LSRA			;ALSO SWITCH FIELD BUFFERS
	ANDA #VGBFSZ/200	;PROG USED BYTES, VG USES WORDS
	EORA #VGBFSZ/200	;HI BYTE IN VG WORDS
	ORA #0E0		;INCLUDE THE JMP
	STD VGRAM
	ENDIF
				;---
	DEC PT.DLY		;ON STARTUP, DONT USE UNSEASONED POT FILTER
	IFMI
	CLR PT.DLY
	JSR RHCTRL		;DO CONTROLS AT IRQ VG TIME
	ENDIF
	JSR GNSITE		;AND DISPLAY ITS COORDS
				;===
				;---LAZAR FIRE
	LDB VG.LZF
	ADDB #2
	CMPB #VRLZFZ-VRLZF
	IFHS			;WRAPPED THE TABLE
	CLRB
	ENDIF			;---
	STB VG.LZF
	LDX #VRLZF+2		;ALLOW FOR PREDEC
	ABX			;NEXT START OF RAM
	LDU #VTLZF		;SOURCE ROM
	BEGIN			;---LOOP TO FRONT OF RAM
	LDD (U)++
	STD --(X)
	CMPX #VRLZF
	LEEND

	LDX #VRLZFZ		;END OF RAM
	BEGIN			;---PUT REST OF ROM AT END
	CMPU #VTLZFZ
	BHS 48$			;DONE LEAVE
	LDD (U)++		;ROM HAS HEAD FIRST, TO TAIL
	STD --(X)		;VIEW RAM HAS HEAD FAR AWAY, TAIL NEAR
	LOOP
48$:				;---
				;===LAZAR SPLASH
	LDB VG.LZS
	ADDB #2
	CMPB #VTLZSZ-VTLZS
	IFHS
	CLRB
	ENDIF			;---
	STB VG.LZS
	LDU #VTLZS
	LDD B(U)
	STD VRLZS		;ONE PICTURE ONLY
				;===
				;ALIEN GUN SHOT, BASE SPARKLE
	DEC VF.GNB
	IFLE
	LDB #4			;EVERY FOURTH SCREEN, CHANGE PICTURE TYPE
	STB VF.GNB	
	LDB VG.GNB
	ADDB #2
	CMPB #VTGNBZ-VTGNB
	IFHS
	CLRB
	ENDIF			;---
	STB VG.GNB
	LDU #VTGNB
	LDD B(U)
	STD VRGNB		;ONE PICTURE ONLY
				;---
	LDB VG.GNB		;ALSO HANDLE GUN EXPLODE SAME TIME
	LDU #VTGNX
	LDD B(U)
	STD VRGNX
	ENDIF
				;===
				;ALIEN GUN SHOT, TIP FUSE
	DEC VF.GNT
	IFLE
	LDB #1			;EVERY SCREEN, CHANGE PICTURE TYPE
	STB VF.GNT	
	LDB VG.GNT
	ADDB #2
	CMPB #VTGNTZ-VTGNT
	IFHS
	CLRB
	ENDIF
				;---
	STB VG.GNT
	LDU #VTGNT
	LDD B(U)
	STD VRGNT		;ONE PICTURE ONLY
	ENDIF
				;===
	LDB VG.FLS		;BRITE FLASH
	ADDB #2
	CMPB #VTFLSZ-VTFLS
	IFHS			;?OVERFLOWED?
	CLRB
	ENDIF
	STB VG.FLS
	LDU #VTFLS
	LDD B(U)
	STD VRFLS		;ONE PICTURE ONLY
	LDD #VGRTSL
	STD VRFLS+2		;AND RETURN VG
				;===
	LDB VG.MFL		;MEDIUM FLASH
	ADDB #2
	CMPB #VTMFLZ-VTMFL
	IFHS			;?OVERFLOWED TABLE?
	CLRB			;THEN START AT BEGINNING
	ENDIF
	STB VG.MFL
	LDU #VTMFL
	LDD B(U)
	STD VRMFL		;ONE PICTURE ONLY
	LDD #VGRTSL
	STD VRMFL+2		;AND RETURN VG
				;===
	JSR SPLASH		;OSCILLATE LAZAR SPLASH PICS
				;===
	STA VGGO		;START VGEN AGAIN
	LDA #5			
	STA VGTIMR
90$:				;===
	STA IRCLR		;ALLOW NEXT IRQ
	RTI
	.PAGE
DEBNCE:				;---
				;A=NEW VAL
				;X-->RAM AREA
	LDB (X)			;NW: PREVIOUS NEW
	STB 1(X)		;OL: -->OLD
	STA (X)			;NW: SAVE NEWEST
	ANDA 1(X)		;OL: SAME BITS ON
	ORA 2(X)		;SW:
	STA 2(X)		;SW: SAVE DEBOUNCED ON BITS
				;---
	ORB (X)++		;NW: SAME BITS OFF
	ANDB (X)		;SW:
	STB (X)+		;SW: SAVE DEBOUNCED OFF BITS,
				;(X)+: PREPARE FOR NEXT SWITCH SET
	RTS
				;===
DOPOTS:				;HANDLE READING POT VALUES
	LDA $INTCT
	LSRA			;?WHICH POT?
	LDY #PT.VL		;ASSUME POT 1
	IFCC			;NOPE, IT'S THE OTHER ONE
	LDY #PT.VL+PT$IZ	;POT 2
	ENDIF
				;POKEY FILTER
				;REQUIRE 2 SAMPLES ALL HIGHER (OR LOWER)
				;THAN CURRENT SAVED VALUE.
				;THEN UPDATE TO CLOSEST HI (LO) VALUE
	LDB 1(Y)		;B:=VNEW    PREVIOUS NEW BECOMES CURRENT OLD
				;
	LDA R.CHN
	STA 1(Y)		;A:=VNEW    UPDATE CURRENT NEW
				;
	CMPA 0(Y)		;VL
	IFHS			;?NEW VALUE HIGHER THAN STANDARD VALUE?
	CMPB 0(Y)		;VL
	IFHI			;?AND OLD VALUE HIGHER ALSO?
	CMPB 1(Y)		;VNEW
	IFHI			;?VNEW IS CLOSER?
	LDB 1(Y)		;VNEW
	ENDIF
	STB 0(Y)		;VL	SAVE CLOSEST OF HIGHER VALUES
	ENDIF
	ELSE			;ELSE NEW VALUE IS LOWER THAN STANDARD VALUE
	CMPB 0(Y)		;VL
	IFLO			;?OLD VALUE ALSO LOWER?
	CMPB 1(Y)		;VNEW
	IFLO			;?VNEW IS CLOSER?
	LDB 1(Y)		;VNEW
	ENDIF
	STB 0(Y)		;VL	SAVE CLOSEST OF LOWER VALUES
	ENDIF
	ENDIF
				;---
	CMPY #PT.VL		;START NEXT A-D CONVERSION
	IFEQ
	STA W.CHN0		;SELECT CHANNEL 0
	STA W.CHN0		;START GOOD CONVERSION
	ELSE
	STA W.CHN1		;SELECT CHANNEL 1
	STA W.CHN1		;AND START IT CLEANLY
	ENDIF
				;---
	RTS
				;===

RHCTRL:				;IRQ VG HANDLES CONTROLS
	LDX #RHEOP		;DO PITCH POT
	LDA PT.VL2		;UP/DOWN VG Y
	NOP
	JSR RHLIM		;LIMIT AND SCALE RHESTAT
	LDA RH$NML(X)		;NOW LIMIT THE POT BY THE VG SCREEN
	CMPA #VGCURT		;HI LIMIT - CURSOR SIZE, SCALED TO +-128
	IFGT
	LDA #VGCURT
	ENDIF
				;---
	CMPA #VGCURB		;TOP CURSOR POSITION, SCALED DOWN +-512 TO +-128
	IFLT
	LDA #VGCURB
	ENDIF
				;---
	STA RH$NML(X)
	JSR RHPOS
				;---
	LDX #RHEOY		;DO YAW POT
	LDA PT.VL1		;LEFT/RIGHT VG X
	NOP
	JSR RHLIM		;LIMIT AND SCALE RHESTAT
	LDA RH$NML(X)		;NOW LIMIT TO CURSOR SCREEN SIZE
	CMPA #VGCURR
	IFGT
	LDA #VGCURR
	ENDIF
				;---
	CMPA #VGCURL
	IFLT
	LDA #VGCURL
	ENDIF
				;---
	STA RH$NML(X)
	JSR RHPOS
	RTS
				;===

RHLIM:				;---LIMIT AND SCALE
	CMPA RH$LO(X)		;A=RHEOSTAT VALUE
				;X==>RAM BLOCK
				;Y==>DATA TABLE
	IFLO			;?LESS THAN LO?
	CMPA RH$LT(X)
	IFHS			;?HIGHER THAN TRIAL LO?
	DEC RH$LO(X)		;APPROACH NEW DEGLITCHED LO
	ENDIF
	ENDIF
				;---
	STA RH$LT(X)		;SAVE OUR NEW TRIAL LO
				;---
	CMPA RH$LO(X)		;?LESS THAN LOWER LIMIT?
	IFLO
	LDA RH$LO(X)		;THEN REPLACE WITH LOWER LIMIT
	ENDIF
				;---
	SUBA RH$LO(X)		;BASE AT ZERO
	STA RH.DIR		;TEMP STORAGE OF POT BASED VALUE
	LDB RH$SP(X)		;SPREAD THE VALUES-SCAL
	MUL
	ADDA RH.DIR		;MULTS BY 1XX SO VALUE GOES ABOVE 7F
	IFEQ			;?UNDERFLOW?
	LDA #1			;RANGE IS -7F TO 7F (ALLOWS PROPER NEGATE)
	ENDIF
				;---
	IFCC			;?OVERFLOW?
	CLR RH$ST(X)		;PREPARE TIMER FOR NEXT TOO-HIGH POT VALUE
	ELSE
	LDA #0FF		;THEN LIMIT VALUE
	INC RH$ST(X)		;TIME THESE EXCESSES
	LDB RH$ST(X)
	CMPB #2
	IFHS			;?TOO LARGE FOR TOO LONG?
	DEC RH$SP(X)		;THEN DECREASE SPREAD
	ENDIF
	ENDIF
				;---
	CLRB
	SUBA #80		;CHANGE TO SIGNED VALUE
	STA RH$NML(X)
	RTS
				;===

RHPOS:				;CONVERT NML VALUE TO SCREEN POSITION
				;SLEWED POSITIONAL
	CLR RH.DIR		;START WITH POSITIVE DIRECTION TO TRAVEL
	LDA RH$NML(X)		;CURRENT -7F TO 7F POT
	LDB #80			;HALF WAY INTO POTS STAMP
	SUBD RH$POS(X)		;CURRENT SCREEN POSITION
	IFLT			;?WANT TO GO IN NEGATIVE DIRECTION?
	NEGA			;THEN CHANGE DELTA TO POSITIVE 8-BIT
	DEC RH.DIR		; AND SAVE NEGATIVE INDICATOR
	ENDIF
				;---
	IFGT			;?SLIGHTLY POSITIVE?
	ADDD #0FF		;TRUNCATE UPWARD -- ALWAYS SLEW SOME
	ENDIF
				;---
	CMPA #0F8
	IFHI
	LDA #0F8		;PREVENT OVERFLOWS DURING LATER TRUNCATIONS
	ENDIF
				;---
	LDB #60			;HOW QUICKLY TO SKEW TO DESIRED LOCATION
	CMPA #40		;ONE-QUARTER SCREEN
	IFLO			;?CLOSE ENUF?
	LDB #30			;SLOWER WHEN CLOSER
	ENDIF
	MUL
	TST RH.DIR		;RESTORE ORIGINAL DIRECTION
	IFMI
	NEGD
	ENDIF
				;---
	ADDD RH$POS(X)		;NOW UPDATE OUR CURSOR POSITION
	STD RH$POS(X)		;RH$POS IS EQUATED TO VG.RSX,VG.RSY
	RTS
				;===

GNSITE:
				;---
				;IRQ,VG GENERATE SITE COORDS ON SCREEN
	LDB VG.RSY
	LDA VG.RSY+1		;REVERSE LDD
	ANDA #0C0		;ONLY NEED TOP TWO BITS
	LSLA			;SHIFT UP LO VALUES
	ROLB			;FROM +-128 TO +-256
	IFCS			;?NEGATIVE?
	ORA #3F			;AFTER TWO SHIFTS IS SEX'D
	ENDIF			;---
	ROLA
	ROLB			;UP TO +-512
	ROLA			;NOW OF FORM 1FFF, VECTOR OPCODE
	STD VG.CY		;CURRENT SITE Y POS
	ADDD #VGOFFY		;OFFSET TO CENTER
	ANDA #01F		;VECTOR OPCODE
	STD VRSITE+0
				;---YAW CURSOR IN X POSITION
	LDB VG.RSX
	LDA VG.RSX+1		;REVERSE LDD
	ANDA #0C0		;ONLY SHIFT IN TOP TWO BITS
	LSLA			;SHIFT UP LO VALUES
	ROLB			;FROM +-128 TO +-256
	IFCS			;?NEGATIVE?
	ORA #03F		;BECOMES SEX'D AFTER TWO SHIFTS
	ENDIF			;---
	ROLA
	ROLB			;UP TO +-512
	ROLA			;
	STD VG.CX		;CURRENT SITE LEFT/RIGHT
	ANDA #01F		;KEEP BRITENESS ZERO
	STD VRSITE+2
				;---
	LDD #0C000		;RTSL
	STD VRSITE+4
				;---
	RTS
				;===

	.PAGE
	.SBTTL RESET
RESET::
	SEI			;DISABLE INTERRUPTS UNTIL MAINLINE INIT
				;---
	CLR W.BANK		;SELECT NORMAL ROOT ROM
				;---
	LDA #0			;TURN ON DIAG LEDS FOR TESTING
	STA W.LED1
	STA W.LED2
	STA W.LED3
				;---
	LDA #0
	STA P.IRND		;INIT RANDOM # SEQUENCE
	LDA #80			;GET IT GOING BEFORE TEST/DIAGNOSTICS
	STA P.IRND		;THEN START UP THE RANDOM # GENERATOR
				;---
	STA VGSTOP		;GATE ARRAY ONLY LISTENS TO STOP, NOT RESET LINE
				;---
	LDU #0000		;JUST SIT HERE AND SPIN FOR AWHILE TO LET THE NOVRAM COME TO LIFE
	BEGIN			;ABOUT 3/4 OF A SECOND
	STA WTCHDG		;GOT TO KEEP IT HAPPY
	LEAU -1(U)
	CMPU #0000		;NOT NEEDED BUT IT MAKES THE LOOP A LITTLE LONGER
	EQEND
				;---
	LDS #STACK		;SYSTEM STACK
				;---
	LDA #DPRAM/100		;INIT DPAGE POINTER
	TFR A,DPR
				;---
	STA W.RSTS		;HARDWARE RESET SOUND BOARD
	LDA #0
	STA W.XMTS		;ALSO TRY SOFTWARE RESET
				;---
	LDX #RAM		;CLEAR RAM
	LDD #0
	BEGIN
	STD 0(X)++
	CMPX #RAMZ
	HSEND
				;---AFTER 2K FAST LOOP
	STA WTCHDG
				;---
	LDX #M.BASE		;CLEAR MATH RAM
	LDD #0
	BEGIN
	STD 0(X)++
	STA WTCHDG		;KEEP THE DOG HAPPY
	CMPX #M.FIN
	HSEND
				;---
	LDX #VGRAM		;CLEAR VECTOR RAM
	LDD #0
	BEGIN
	STD 0(X)++
				;---MORE THAN 2K, SO DO ALL THE TIME
	STA WTCHDG		;KEEP THE DOG HAPPY
				;---
;;;	.IF NE,DEVSYS
;;;	CMPX #VGROM		;DON'T DESTROY DOWNLOADED VG PSUEDO ROM STUFF
;;;	.IFF
	CMPX #VGRROM		;CLEAR ALL THE WAY TO REAL ROM
;;;	.ENDC

	HSEND
				;---
				;WITH ALL OF MEMORY EMPTY, PREPARED FOR TEST
	LDA	TESTSW
	ANDA	#TESTBT		;SELF-TEST?
	IFEQ			;YES
	JMP	TEST
	ENDIF
;NOT SELF TEST ******************************************************************
				;===
			;SETUP FOR THE FIRST DEBOUNCE OF THE OPTION SWITCHES
	LDA R.BYT2		;GET FIRST SET OF DATA
	LDB R.BYT3
	BEGIN
	BEGIN
	STA R.OPT2		;SAVE THE DATA
	STB R.OPT1
	LDX #0800		;WAIT A WHILE
	BEGIN
	LEAX -1(X)
	EQEND
	LDA R.BYT2		;SECOND READING FOR DEBOUNCING THE OPTION SWITCHES
	LDB R.BYT3		
	CMPA R.OPT2
	EQEND			;NOT THE SAME, GO BACK AND TRY AGAIN
	CMPB R.OPT1
	EQEND			;NOT THE SAME, TRY AGAIN
				;---
				;SETUP VG WITH ALL HALT INSTRUCTIONS ( JUST IN CASE ... )
	LDD #2020		;HALT VG
	LDX #VGRAM
	BEGIN
	STD 0(X)++
				;---MORE THAN 2K FAST LOOP, SO DO ALL THE TIME
	STA WTCHDG		;KEEP THE DOG HAPPY
				;---
	CMPX #VGROM
	HSEND
				;---
	LDD #<VGVARB/2>+0E000	;JUMP TO DOUBLE BUFFER
	STD VGRAM
	LDA #0FF		;SWITCH BUFFERS IMMEDIATELY
	STA VGSYNC
				;---
	LDA #3F			;TRAP OUT FIRST BYTE RAM
	STA $GARBG
				;---
	LDA #040		;POSITIVE VALUE FOR DELAY
	STA PT.DLY		;DELAY RHEOSTATS UNTIL FILTER IS STABLE
				;---
	JSR EEINIT		;INIT EEROM ( VERIFY/SET NOVRAM AREAS TO VALID STATES )
				;---
	STA WTCHDG		;FINAL SHADDUP
				;---
	LDA #0FF		;TURN OFF DIAG LEDS FOR MAINLINE
	STA W.LED1
	STA W.LED2
	STA W.LED3
				;---
	STA IRCLR		;ENABLE HARDWARE INTS (BUT STILL DISABLED BY SOFTWARE)
				;---
	JMP MAIN		;START THE MAINLINE
				;===
.IF EQ,DEVSYS-1
.IFF				;ROM
	.VCTRS <0FFF2>,SWI3,SWI2,FIRQ,IRQ
.IFTF				;ROM AND DEVSYS
	.VCTRS <0FFF8>,IRQ
.IFF				;ROM ONLY
	.VCTRS <0FFFA>,ASWI	;ACTUAL SOFTWARE BRK ADDRESS
	.VCTRS <0FFFC>,NMI
.IFTF				;ROM AND DEVSYS
	.VCTRS <0FFFE>,RESET
.ENDC

	HLL69F
	.END
                                                                                                                                                                                                                 