	.TITLE	SNDPM ;REMOTE SOUND BOARD VERSION
	.SBTTL (RUSTY'S POKEY MUSIC) DRIVER, 6809 VERSION(gregr)
	.INCLUDE SNDCMN
	.SBTTL	RPM CONFIGURATION
			;---
VC1	=1		;VOICE MASK BITS
VC2	=2
VC3	=4
VC4	=8
VC5	=10
VC6	=20
VC7	=40
VC8	=80
			;===
			;GLOBALS
	.GLOBB	$INTCT
	.GLOBL	TUNTAB
			;===
	.SBTTL *** USER OPTIONS/ADDRESSES
;***		MODIFY THE FOLLOWING PER YOUR REQUIREMENTS	***
;ASSEMBLY OPTIONS:
..SV3 = 0		;NO SPLIT VOICE 3 (INTO TWO 8 BIT VOICES)
..SV4 = 0		;NO SPLIT VOICE 4 INTO DUAL 8 BIT FREQ (0=16 BIT FREQ)
..PRI = 5		;NUMBER OF PRIORITY CHANNELS FOR V4 (0-5) OR V4B (0-4)
..DRE = 1		;DYNAMIC RECONFIGURATION ENABLE (0=DISABLE)
..SYM = 1		;SYNTHISIZER MODE ENABLE (0=DISABLE)
..FRE = 1		;FREQ. ENVELOPES ENABLE (0=DISABLE)
..AME = 1		;AMPLITUDE ENVELOPE ENABLE (0=DISABLE)
..SCK = 0		;SYNC. CHECK ENABLE (0=DISABLE)
..CNT = 0		;NOTE COUNTER ENABLE (0=DISABLE)
;
;			POKEY HARDWARE ADDRESSES
;
;				;4 POKEYS, INTERLEAVED ON 8 BYTES,USE SECOND PAIR
POKEY	==	1810		;3.5KHZ LOW PASS FILTER 
PKI1	=	POKEY+15.+18
PKC1	=	POKEY+8.+18
PKR1	==	POKEY+10.+18
POTGO1	==	POKEY+11.+18
PKFL3	=	POKEY
PKVX3	=	POKEY+1
PKFH3	=	POKEY+2
PKV3	=	POKEY+3
PKFL4	=	POKEY+4
PKVX4	=	POKEY+5
PKFH4	=	POKEY+6
PKV4	=	POKEY+7
;
POKEY2	==	POKEY+8		;3.5KHZ LOW PASS FILTER 
PKI2	=	POKEY2+15.+18
PKC2	=	POKEY2+8.+18
PKR2	==	POKEY2+10.+18
POTGO2	==	POKEY2+11.+18
PKFL1	=	POKEY2
PKVX1	=	POKEY2+1
PKFH1	=	POKEY2+2
PKV1	=	POKEY2+3
PKFL2	=	POKEY2+4
PKVX2	=	POKEY2+5
PKFH2	=	POKEY2+6
PKV2	=	POKEY2+7
;
	.PAGE
	.SBTTL	POKEY ZERO PAGE VARIABLES
	.SBTTL *** D-PAGE STARTING ADDRESS
	.DPAGE DPRAM/100			;DPAGE IS IN BLOCK RAM
;
;
;MISC. COMMON POKEY VARIABLES
;
;	.BSECT
;FASV::	.BLKB	1	;FREQUENCY ADJUST MSB SAVE (COMMON POKEY TEMP)
	.GLOBB FASV
;VIU::	.BLKB	1	;FLAGS TO TELL WHICH VOICES ARE IN USE
	.GLOBB VIU
			;---
..SVV = 0		;?ANY VOICE SPLIT AT ALL?
		.IF	NE,..SV4!..SV3!..DRE
..SVV = 1		;0==>16 BIT, 1==>SPLIT 8 BIT
		.ENDC
			;---
		.IF	NE,..DRE
;DREF::	.BLKB	1
	.GLOBB DREF
..PRI	=5		;DYNAMIC RECONFIG NEEDS ALL 8 VOICES
		.ENDC	;NE,..DRE
			;===
	.PAGE
	.SBTTL	POKEY VOICE VARIABLES
	.ASECT
	.SBTTL *** RAM STARTING ADDRESS
	.=PMRAM
;
..NBPV	=0		;FIGURE OUT # OF BYTES PER VOICE
	.MACRO .BPV	.A1,.A2
'.A1	=..NBPV		;ASSIGN THE SYMBOL
..NBPV	=..NBPV+1	;BUMP BY AT LEAST ONE BYTE
.IIF	NB,'.A2,..NBPV=..NBPV-1+'.A2	;ELSE BUMP BY SPECIFIED SIZE
	.ENDM
			;===
			;POKEY (EVERY VOICE)
.BPV	OPTR,2		;POINTER TO START OF CURRENT TUNE
			;VOICE IN USE IF HI BYTE NON-ZERO
		.IF	NE,..AME
.BPV	APTR,2		;POINTER TO START OF CURRENT AMP. ENVELOPE
		.ENDC
		.IF	NE,..FRE
.BPV	FPTR,2		;POINTER TO START OF CURRENT FREQ. ENVELOPE
		.ENDC
.BPV	ONOTE,2		;CURRENT OUTPUT NOTE COUNT
.BPV	ODUR,2		;CURRENT OUTPUT DURATION REMAINING
.BPV	VVOL		;MEDIAN VOICE VOLUME
.BPV	VSEQ		;VOICE DURATION SEQUENCE #
.BPV	ORATE		;NEG OF CURRENT OUTPUT RATE (BIGGER # = SHORTER DUR.)
.BPV	OKEY		;CURRENT KEY OFFSET
		.IF	NE,..SCK
.BPV	OCHK		;CHECK MASK FOR ALIGNMENT OF DIFFERENT VOICES
		.ENDC
.BPV	VAC		;VOICE AMPLITUDE CONTROL BITS
		.IF	NE,..SYM
.BPV	VSF		;VOICE SYNTH. MODE FLAG
.BPV	VSA,2		;VOICE SYNTH. MODE FREQ. ADJUST
		.ENDC
.BPV	OPTSV,2		;OUTPUT POINTER SUB-PHRASE SAVE
.BPV	OPTLL,2		;OUTPUT POINTER LOOP SAVE
.BPV	VLC		;LOOP COUNTER
		.IF	NE,..CNT
.BPV	VCNT		;NOTE COUNTER
		.ENDC
.BPV	OPTRET,2	;RETURN ADDRESS FROM GOSUB

			;===
VOICE::			;RAM VOICE BLOCKS
			;
VOICE1:	.BLKB ..NBPV	;POKEY (VOICE 1)
			;
VOICE2:	.BLKB ..NBPV	;POKEY (VOICE 2)
			;
VOICE3:	.BLKB ..NBPV	;POKEY (VOICE 3 OR 3A)
			;
VOICE4:	.BLKB ..NBPV	;POKEY (4 OR VOICE 4A)
			;
		.IF	EQ,..SV4	;IF VOICE 4 NOT SPLIT..
					;
					;*** NON-SPLIT 16 BIT VOICE 4
					;
		.IF	GE,..PRI-2	;?NON-SPLIT 16 BIT PRIORITY 2 VOICE 5?
VOICE5:	.BLKB ..NBPV
		.ENDC
		.IF	GE,..PRI-3	;?NON-SPLIT 16 BIT PRIORITY 3 VOICE 6?
VOICE6:	.BLKB ..NBPV
		.ENDC
		.IF	GE,..PRI-4	;?NON-SPLIT 16 BIT PRIORITY 4 VOICE 7?
VOICE7:	.BLKB ..NBPV
		.ENDC
		.IF	GE,..PRI-5	;?NON-SPLIT 16 BIT PRIORITY 5 VOICE 8?
VOICE8:	.BLKB ..NBPV
		.ENDC
					;---
		.IFF			;*** SPLIT 8 BIT VOICE 4	
					;
VOICE5:	.BLKB ..NBPV			;SPLIT 8 BIT PRIORITY 1 VOICE 5
					;
		.IF	GE,..PRI-2	;?SPLIT 8 BIT PRIORITY 2 VOICE 6?
VOICE6:	.BLKB ..NBPV
		.ENDC
		.IF	GE,..PRI-3	;?SPLIT 8 BIT PRIORITY 3 VOICE 7?
VOICE7:	.BLKB ..NBPV
		.ENDC
		.IF	GE,..PRI-4	;?SPLIT 8 BIT PRIORITY 4 VOICE 8?
VOICE8:	.BLKB ..NBPV
		.ENDC
		.ENDC	;EQ,..SV4
					;---
					;VOICE 3B STORAGE
					;
		.IF	NE,..SV3	;IF VOICE 3B (VOICE 8) ENABLED..
VOICE8:	.BLKB	..NBPV
		.ENDC
					;---
VOICEZ::				;END OF RAM VOICE BLOCKS
					;===
					;---
VSIZE==	..NBPV				;RAM SIZE PER VOICE
					;---
	.IRPC	VNUM,<12345678>		;ASSIGN SPECIAL GLOBALS
			.IF	DF,VC'VNUM
OPTR'VNUM==	OPTR+VOICE'VNUM		;POINTER TO THE START OF THE CURRENT TUNE/SOUND
VIU'VNUM==	OPTR+VOICE'VNUM		;NON-ZERO SAYS THE VOICE IS IN USE
			.IF	NE,..CNT
VCNT'VNUM==	VCNT+VOICE'VNUM		;NOTE COUNTER
			.ENDC		;NE,..CNT
			.ENDC		;DF,VC'VNUM
	.ENDR
					;===
	.PAGE
	.SBTTL	VOICE PARAMETERS

					;---
					;MACRO TO GENERATE TABLED PARAMETERS
;
;	VNUM	VOICE NUMBER FROM 1 THRU 8
;	POKOUT	HARDWARE POKEY FREQ ADDRESS TO USE (e.g. PKFL1,PKFH3,PKFH4)
;		DURING NORMAL USE
;	SIZE	WHAT BIT SIZE THE VOICE IS. (8 OR 16)
;		8 IMPLIES SPLIT VOICE, 16 IMPLIES FULL MUSIC VOICE
;	DROUT	WHEN DYNAMICALLY RECONFIGURED, USE THIS HARDWARE POKEY
;		ADDRESS INSTEAD OF POKOUT.
;	MPRI	PRIORITY MASK. USE VC* IF OTHER BETTER PRIORITY VOICES.
;		IF BEST PRIORITY, USE 0.
; 
	.MACRO .TVC	VNUM,POKOUT,SIZE,DROUT,MPRI
VC$IZE	=0				;TABLE STARTS WITH NO ENTRIES
					;---
TVC'VNUM:				;LABEL THIS DESCRIPTOR BLOCK
VC$'VNUM=TVC'VNUM-TVC			;	AND ITS OFFSET INTO TABLE
					;---
VC$RAM	=VC$IZE				;POINTER TO VOICE'S RAM
	VC$IZE	=2+VC$IZE
.WORD	VOICE'VNUM
					;---
VC$BIT	=VC$IZE				;BIT MASK FOR THIS VOICE
	VC$IZE	=1+VC$IZE
.BYTE	VC'VNUM				;VOICE1=1 THRU VOICE8=80
					;---
VC$PKF	=VC$IZE				;BASE POINTER INTO HARDWARE POKEY
	VC$IZE	=2+VC$IZE
.WORD	'POKOUT
					;---
		.IF	NE,..SV4!..SV3	;?VOICES NORMALLY SPLIT?
VC$SVF	=VC$IZE				;1 FOR SPLIT VOICE, 0 FOR FULL 16 BIT 
	VC$IZE	=1+VC$IZE
		.IIF NE,<SIZE-8>*<SIZE-16>,.ERROR ONLY 8 OR 16 BIT CHANNELS ALLOWED
		.IF	EQ,SIZE-8
.BYTE 	1				;SPLIT VOICE (ONLY 8 BITS)
		.IFF			;ELSE SIZE IS 16
.BYTE	0				;FULL UNSPLIT 16 BIT VOICE
		.ENDC			;EQ,SIZE-8
		.ENDC			;NE,..SVV
					;---
		.IF	GE,..PRI-2	;?PRIORITIES IN USE?
VC$PRI	=VC$IZE				;PRIORITY MASK
	VC$IZE	=1+VC$IZE
.BYTE	'MPRI
		.ENDC			;GE,..PRI-2
					;---
		.IF	NE,..DRE	;?DYNAMICALLY RECONFIGURED?
VC$PKD	=VC$IZE				;THEN USE THIS POKEY ADDRESS INSTEAD
	VC$IZE	=2+VC$IZE
.WORD 	'DROUT
		.ENDC			;NE,..DRE
					;---
	.ENDM
					;===
	.CSECT	TVC			;TABLE OF VOICE PARAMETERS
TVC:					;
					;POKEY (VOICE 1)
.TVC	1,PKFL1,16	PKFL1	0
					;
					;POKEY (VOICE 2)
.TVC	2,PKFL2,16	PKFL2	0
					;
					;POKEY (VOICE 3 OR 3A)
.TVC	3,PKFL3,16	PKFL3	0
					;
		.IF	EQ,..SV4	;IF VOICE 4 NOT SPLIT..
					;
					;*** NON-SPLIT 16 BIT VOICE 4
.TVC	4,PKFL4,16	PKFL4	0
					;
		.IF	GE,..PRI-2	;?NON-SPLIT 16 BIT PRIORITY 2 VOICE 5?
.TVC	5,PKFL4,16	PKFH4	VC4
		.ENDC
		.IF	GE,..PRI-3	;?NON-SPLIT 16 BIT PRIORITY 3 VOICE 6?
.TVC	6,PKFL4,16	PKFH1	VC4!VC5
		.ENDC
		.IF	GE,..PRI-4	;?NON-SPLIT 16 BIT PRIORITY 4 VOICE 7?
.TVC	7,PKFL4,16	PKFH2	VC4!VC5!VC6
		.ENDC
		.IF	GE,..PRI-5	;?NON-SPLIT 16 BIT PRIORITY 5 VOICE 8?
.TVC	8,PKFL4,16	PKFH3	VC4!VC5!VC6!VC7
		.ENDC
					;---
		.IFF			;SPLIT VOICE 4
					;
					;*** SPLIT 8 BIT VOICE 4
.TVC	4,PKFL4,8	PKFL4	0
					;
.TVC	5,PKFH4,8	PKFH4	0
					;
		.IF	GE,..PRI-2	;?SPLIT 8 BIT PRIORITY 2 VOICE 6?
.TVC	6,PKFH4,8	PKFH1	VC5
		.ENDC
		.IF	GE,..PRI-3	;?SPLIT 8 BIT PRIORITY 3 VOICE 7?
.TVC	7,PKFH4,8	PKFH2	VC5!VC6
		.ENDC
		.IF	GE,..PRI-4	;?SPLIT 8 BIT PRIORITY 4 VOICE 8?
.TVC	8,PKFH4,8	PKFH3	VC5!VC6!VC7
		.ENDC
		.ENDC	;EQ,..SV4
					;---
					;VOICE 3B STORAGE
					;
		.IF	NE,..SV3	;IF VOICE 3B (VOICE 8) ENABLED..
.TVC	8,PKFH3,8	PKFH3	0
		.ENDC
					;---
TVCZ:					;END OF VOICE RAM BLOCKS
					;===
	.PAGE
	.SBTTL	MACRO DEFINITIONS
;
;.TUNE
;	SET UP ADDR. OF TUNE AND SET FLAG TO START PLAYING
;	1)	CALL APPROPRIATE PKCUT TO INIT VOICE, SETUP Y DESCRIPTOR
;	2)	B:= WORD OFFSET INTO TUNE TABLE DIRECTORY
;	3)	CALL NWTUNE TO SETUP NEW STARTING VALS
				;---
.MACRO	.TUNE	VNUM,TNUM	;POKEY VOICE (1-8), TUNE #
	.TUNE.	\VNUM,TNUM	;SLASH USED FOR GENERATING LABELS
.ENDM
				;---
.MACRO	.TUNE.	VNUM,TNUM	;POKEY VOICE (1-8), TUNE #
	JSR PKCUT'VNUM		;CLEAR OUT AND INIT THIS VOICE
	LDB #<2*'TNUM'.>
	JSR NWTUNE
.ENDM
				;===

PMSF2::				;SPECIAL EFFECT(PROTON TORPEDO)
	.TUNE 1,1
	.TUNE 2,2
	.TUNE 3,3
	.TUNE 4,4
	RTS
				;---
PMBEN::				;BENS THEME (START OF TOWER)
	.TUNE 1,7
	.TUNE 2,8
	.TUNE 3,9
	.TUNE 4,10
	RTS
				;---
PMCNT::				;CANTENA (HI SCORE)
	.TUNE 1,11
	.TUNE 2,12
	.TUNE 3,13
	.TUNE 4,14
	RTS
				;---
PMEND::				;(AFTER DETH STAR EXPLOSION)
	.TUNE 1,15
	.TUNE 2,16
	.TUNE 3,17
	.TUNE 4,18
	RTS
				;---
PMREB::				;REBEL THEME (TRANSITION INTO TRENCH)
	.TUNE 1,19
	.TUNE 2,20
	.TUNE 3,21
	.TUNE 4,22
	RTS
				;---
PMRRP::				;REBEL THEME WITH REPEATS(TRENCH WITH REPEATS)
	.TUNE 1,23
	.TUNE 2,24
	.TUNE 3,25
	.TUNE 4,26
	RTS
				;---
PMTH5::				;MAIN THEME (START OF GAME)
	.TUNE 1,27
	.TUNE 2,28
	.TUNE 3,29
	.TUNE 4,30
	RTS
				;---
PM4TH::				;BATTLE MUSIC IN FOURTHS
	.TUNE 1,31
	.TUNE 2,32
	.TUNE 3,33
	.TUNE 4,34
	RTS
				;---
PMTHB::				;THEME TYPE B
	.TUNE 1,35
	.TUNE 2,36
	.TUNE 3,37
	.TUNE 4,38
	RTS
				;---
PMDES::				;DESCENT TO DETH STAR
	.TUNE 1,39
	.TUNE 2,40
	.TUNE 3,41
	.TUNE 4,42
	RTS
				;===
PMDAR::				;LORD VADER'S THEME
	.TUNE 1,43
	.TUNE 2,44
	.TUNE 3,45
	.TUNE 4,46
	RTS
				;===
PMTST::				;MUSIC CHANNEL TEST TONES
	.TUNE 3,47		;CHANNEL #S CHANGED TO BE IN ORDER OF
				;POKEYS ON BOARD (WAS 1,2,3,4, NOW 3,4,1,2)
	.TUNE 4,48
	.TUNE 1,49
	.TUNE 2,50
	RTS
				;===

	.PAGE
	.SBTTL *** YOUR OWN RPM SOUND TEST ROUTINE
;
;START OF RPM DRIVER TEST PROGRAM
;
;
..TST = 0		;SELF-TEST MODE.. (0 = OPERATIONAL MODE)
;
	.CSECT RPM
	.PAGE
	.SBTTL	RPM POKEY INITIALIZATION
;
;ISND
;	SUB. TO INITIALIZE POKEY FOR USE
;
ISND::	LDA #0			;SET UP FOR POKEY VOICE 1
	STA PKI1		;ALSO, INIT POKEY DEVICES
	STA PKI2
			.IF	NE,..DRE
	STA	DREF		;CLEAR DYN. RECON. FLAG
			.ENDC	;NE,..DRE
				;---
				;INIT ALL DEFINED VOICES
	.IRPC	VNUM,<12345678>
			.IF	DF,VC$'VNUM
	JSR PKCUT'VNUM		;CUTOFF THIS VOICE AND INIT IT
			.ENDC
	.ENDR
				;---
	LDA	#3
	STA	PKI1		;OUTPUT SECOND BYTE TO POKEY INIT.
	STA	PKI2
			.IF	EQ,..SV3
			.IF	EQ,..SV4
	LDA	#78		;VOICES 3 AND 4 ARE 16 BIT EACH
			.IFF
	LDA	#50		;VOICE 3 IS 16 BIT, VOICE 4 SPLIT INTO 2 8 BIT
			.ENDC
			.ENDC
				;---
			.IF	NE,..SV3
			.IF	EQ,..SV4
	LDA	#28		;VOICE 3 IS 2 8 BIT CHANNELS, VOICE 4 IS 16 BIT
			.IFF
	LDA	#0		;4 CHANNELS SEPERATE (3 AND 4 ARE DUAL 8 BIT)
			.ENDC
			.ENDC
				;---
	STA	PKC1
	LDA	#78
	STA	PKC2		;TIE CHANNEL 2 TO 1, 4 TO 3
				;---
	RTS
	.PAGE
			.IF	NE,..DRE
;
;RCS,RCN
;	SET OR RESET DYNAMIC RECONFIGURATION FLAG AND INIT ALL VOICES
;
RCS::
	LDA	#0		;ALL CHANNELS SEPERATE
	STA	PKC1
	STA	PKC2
	LDA	#1		;SET FLAG THAT ARE ALL 8-BIT VOICES NOW
	BNE	RECON
;
;RESET POKEYS BACK TO DEFAULT CONFIG..
RCN::				;---
			.IF	EQ,..SV3
			.IF	EQ,..SV4
	LDA	#78		;VOICES 3 AND 4 ARE 16 BIT EACH
			.IFF
	LDA	#50		;VOICE 3 IS 16 BIT, VOICE 4 SPLIT INTO 2 8 BIT
			.ENDC
			.ENDC
				;---
			.IF	NE,..SV3
			.IF	EQ,..SV4
	LDA	#28		;VOICE 3 IS 2 8 BIT CHANNELS, VOICE 4 IS 16 BIT
			.IFF
	LDA	#0		;4 CHANNELS SEPERATE (3 AND 4 ARE DUAL 8 BIT)
			.ENDC
			.ENDC
	STA	PKC1
				;---
	LDA	#78
	STA	PKC2		;TIE CHANNEL 2 TO 1, 4 TO 3
				;---
	CLRA			;CLEAR FLAG (NORMAL CONFIGURATION)
				;===
RECON:
	STA	DREF		;INDICATE CURRENT CONFIGURATION
				;---
				;RESET/INIT ALL VALID VOICES (PARANOID)
	.IRPC	VNUM,<12345678>
			.IF	DF,VC$'VNUM
	BSR PKCUT'VNUM
			.ENDC	;DF,VC$'VNUM
	.ENDR
				;---
	RTS
			.ENDC	;NE,..DRE
				;===
	.IRPC	VNUM,<12345678>
			.IF	DF,VC$'VNUM
PKCUT'VNUM::
	LDA #VC$'VNUM
	BRA POKVI		;INIT THIS VOICE
			.ENDC	;DF,VC$'VNUM
	.ENDR
				;===
;
;POKVI,Y
;	SUB. TO INIT A POKEY VOICE
;	POKVI:
;		A:=OFFSET INTO VOICE DESCRIPTOR TABLE
;	POKVIY:
;		Y:=POINTER TO THIS VOICE'S DESCRIPTOR TABLE
;
POKVI:
	LDX #TVC		;BASE OF VOICE
	LEAY A(X)		;Y-->VOICE DESCRIPTOR TABLE
POKVIY:				;Y SETUP BY NOW
	LDU VC$RAM(Y)		;U-->VOICE RAM BLOCK
;;;				;NOW IS MAINLINE ROUTINE
;;;				;AVOIDING IRQ INTERACTIONS
;;;
	LDA VC$BIT(Y)		;BIT FOR THIS VOICE
	COMA			;PREPARE TURNOFF MASK
	ANDA VIU
	STA VIU			;TURN OFF VIU BIT
				;---
	LDA #7
	STA VVOL(U)		;SET UP TO MEDIAN VOLUME
	LDA #-64.		;REMEMBER TO PRE-NEGATE 
	STA ORATE(U)		;SET UP TO MED. RATE
	LDA #0A0		;DEFAULT TO PURE TONES
	STA VAC(U)		;STORE AS VOICE CONTROL BITS
				;---
	LDD #0			;  CLEARING OUT VARIABLES
	STD OPTR(U)		;CLEAR VOICE IN USE FLAG(HI BYTE POINTER)
	STA OKEY(U)		;SET BACK TO UNUSED KEY
	STA VSEQ(U)		;CLEAR ENV. SEQ. COUNT
	STD ODUR(U)
	STA VLC(U)		;CLEAR LOOP COUNT
	STD OPTSV(U)		;CLEAR SUB-PHRASE POINTER (FLAG)
				;---
			.IF	NE,..SYM
	STA VSF(U)		;CLEAR SYNTH. MODE
	STD VSA(U)		;CLEAR SYNTH. MODE ADJUSTMENT
			.ENDC	;NE,..SYM
				;---
			.IF	NE,..CNT	;IF NOTE COUNTER ENABLED..
	STA VCNT(U)		;CLEAR NOTE COUNT
			.ENDC	;NE,..CNT
				;---
				;  END OF CLEARING OUT VARIABLES
			.IF	NE,..AME!..FRE
	LDD FETAB
			.IF	NE,..AME
	STD APTR(U)
			.ENDC	;NE,..AME
			.IF	NE,..FRE
	STD FPTR(U)
			.ENDC	;NE,..FRE
			.ENDC	;NE,..AME!..FRE
				;---
			.IF	NE,..SCK	;IF SYNC. CHECK ENABLED..
	LDA #0FF
	STA OCHK(U)		;CLEAR CURRENT CHECK MASK
			.ENDC	;NE,..SCK
				;===
				;TURN OFF POKEY AMPLITUDE
	LDX VC$PKF(Y)		;SELECT THE POKEY OUTPUT PORT
			.IF	NE,..DRE
	LDB DREF
	BEQ 62$			;?DYNAMICALLY RECONFIG'D?
	LDX VC$PKD(Y)		;THEN USE DRE PORT INSTEAD
	CLR 1(X)		;ONLY DO LO 8 BITS
	RTS
			.ENDC	;NE,..DRE
62$:				;---
			.IF	NE,..SV4!..SV3
	LDB VC$SVF(Y)
	BEQ 67$			;B IF REGULAR VOICE IS SPLIT
	CLR 1(X)		;OUTPUT 8 BIT CHANNEL
	RTS
			.ENDC	;NE,..SV4!..SV3
67$:				;---
	CLR 3(X)		;AMPLITUDE GOES IN SECOND CHANNEL FOR 16 BIT
	RTS
				;===
;
;	NWTUNE
;			SETS UP NEW TUNE INTO GIVEN VOICE
;
;			MUST BE PRECEEDED BY PKCUT TO CLEAR OUT 
;			ANY OLD VOICE AND SETUP Y-->DESCRIPTOR TABLE
;
;		B:=	TUNE # WORD OFFSET INTO TUNE TABLE
;	
NWTUNE:
	LDX #TUNTAB		;BASE OF TUNE DIRECTORY
	ABX			;ALLOW 128 WORD ENTRIES
	LDD 0(X)		;POINTER TO TUNE
	LDX VC$RAM(Y)		;X-->VOICE RAM BLOCK
	STD OPTR(X)
	LDA VIU			;SET VOICE IN USE BIT
	ORA VC$BIT(Y)		;THATS OUR BIT
	STA VIU
	RTS
				;===
	.PAGE
	.SBTTL	INTERRUPT ROUTINES, PKDR, POKOUT
;
;PKDR
;	POKEY 4MS INTERRUPT DRIVER
;
PKDR::
	LDA $INTCT		;WHICH POKEY TO UPDATE THIS FRAME
	LSRA
	BCC 10$ 		;IF VOICE 2 THIS FRAME
	LDA #VC$1
	BSR POKOUT		;OUTPUT TO POKEY (VOICE 1)
	LDA #VC$3
	BSR POKOUT		;OUTPUT TO POKEY (VOICE 3)
				;---
			.IF	DF,VC$5
	LDA #VC$5		;OUTPUT VOICE 5 IF IT EXISTS
	BSR POKOUT
			.ENDC	;DV,VC$5
			.IF	DF,VC$7
	LDA #VC$7		;OUTPUT VOICE 7 IF IT EXISTS
	BSR POKOUT
			.ENDC	;DF,VC$7
				;---
	RTS
				;===
10$:				;IF HERE, TIME TO OUTPUT VOICE 2
	LDA #VC$2
	BSR POKOUT		;OUTPUT TO POKEY (VOICE 2)
	LDA #VC$4
	BSR POKOUT		;OUTPUT TO POKEY (VOICE 4 OR 4A)
				;---
			.IF	DF,VC$6
	LDA #VC$6		;OUTPUT VOICE 6 IF DEFINED
	BSR POKOUT
			.ENDC	;DF,VC$6
				;---
			.IF	DF,VC$8
	LDA #VC$8		;OUTPUT VOICE 8 IF IT EXISTS
	BSR POKOUT
			.ENDC	;DF,VC$8
				;---
	RTS
				;===
;
;POKOUT
;	COMMON OUTPUT ROUTINE FOR ALL POKEY VOICES
;	A:= OFFSET INTO CURRENT VOICE DESCRIPTOR TABLE
;
POKOUT:				;---
	LDX #TVC		;BASE OF VOICE DESCRIPTOR TABLE
	LEAY A(X)		;Y--> THIS VOICE'S DESCRIPTOR TABLE
	LDU VC$RAM(Y)		;U--> RAM BLOCK FOR THIS VOICE
				;---
	LDA OPTR(U)		;?VOICE IN USE? (INUSE IF HI POINTER SET)
	BNE 3$			;B THEN PROCESS IT
	RTS			;ELSE, RETURN
3$:				;---
				;SEE IF TIME TO UPDATE CURRENT NOTE
	INC VSEQ(U)		;INC. ENVELOPE SEQ. COUNT
	BNE 5$			;IF NOT AT END OF ENV. YET
	DEC VSEQ(U)		;ELSE, KEEP AT FINAL ENV. COUNT
5$:				;---
	LDB ORATE(U)		;PRE-NEGATED RATE (8 BITS, SIGN IMPLIED)
	LDA #0FF		;EXTEND IMPLIED SIGN
	ADDD ODUR(U)		;BY ADDING NEGATIVE OF CURRENT RATE,
	STD ODUR(U)		;UPDATE CURRENT NOTE DURATION
	LBPL POKSN		;B IF STILL SAME NOTE
				;---
POKNL:				;IF HERE, HAVE A NEW NOTE TO PLAY
	LDX OPTR(U)		;GET THIS NOTE IN TUNE
	LDB (X)++		;BUMP TO NEXT INSTRUCTION
	STX OPTR(U)
	TSTB			;CHECK THE OPCODE(FIRST BYTE)
	LBMI PKFUN		;B IF A FUNCTION
				;---
	BEQ 9$			;?SOUNDFUL NOTE?(NOT A REST)
	ADDB OKEY(U)		;THEN POSITION NOTE TO CURRENT KEY
9$:				;---
			.IF	NE,..SVV	;ANY 8 BIT PORTS EVER EXIST
			.IF	NE,..SV3!..SV4	;8 BIT DUE TO SPLIT VOICE
			.IF	NE,..DRE	;OR DUE TO DYNAMIC RECONFIG
	LDA VC$SVF(Y)		;SPLIT VOICE OR DYN RECONF
	ORA DREF
			.IFF	;NE,..DRE
	LDA VC$SVF(Y)		;SPLIT VOICE ONLY, NO DYNAM RECONF
			.ENDC	;NE,..DRE
			.IFF	;NE,..SV3!..SV4
	LDA DREF		;ELSE NO SPLIT VOICE, BUT HAVE DYN RECONF
			.ENDC	;NE,..SV3!..SV4
	BEQ 68$			;B IF FULL 16 BIT PORT
	CLRA			;ELSE USE 8 BIT VALUE DIRECTLY
	BRA 69$
			.ENDC	;NE,..SVV
68$:				;---ELSE IS 16 BIT -- CALC MUSIC NOTE
	LSLB			;WORD OFFSET
	LDX #NOTTAB		;BASE OF NOTE CONVERSION TABLE
	ABX			;UNSIGNED, FULL RANGE
				;---
			.IF	NE,..SYM		;IF SYNTH. MODE ENABLED
	LDD ONOTE(U)		;COMPUTE DELTA BETWEEN NEW AND OLD
	SUBD 0(X)		;SUB NEW NOTE VALUE
	STD VSA(U)		;SAVE DELTA FOR SYNTH MODE
			.ENDC	;NE,..SYM
				;---
	LDD 0(X)		;GET NOTE VALUE
69$:				;---
	STD ONOTE(U)		;STORE AS OUTPUT NOTE
				;---
	LDX OPTR(U)		;GET DURATION OF CURRENT NOTE
	LDA -1(X)		;(WE PREVIOUSLY BUMPED POINTER TO NEXT NOTE)
	BNE 30$ 		;?AT FINAL NOTE?
	LDD OPTSV(U)		;CHECK FOR ENDING SUB-PHRASE OR MAIN TUNE
	LBEQ POKVIY		;B END OF MAIN TUNE, INIT THIS VOICE
	STD OPTR(U)		;IF HERE, RETURNING FROM SUB-PHRASE
	LDD #0
	STD OPTSV(U)		;RESET SUB-PHRASE FLAG
	JMP POKNL		;J GET A NOTE GOING
				;---
				
30$:				;---STILL HAVE A NEW NOTE, GET AND STORE DURATION
				;A:=DURATION (SECOND BYTE)
				;X-->FOLLOWING INSTR
	CLRB			;PREPARE LSB
	LSRA			;SHIFT AND REMOVE LSB (TIED NOTE FLAG)
	LSRA			;MULT. DUR * 128 (CARRY IS MSB OF LSB BYTE)
	RORB			;ROTATE INTO LSB'S
	ADDD ODUR(U)		;SUBTRACT ANY OVERRUN FROM PREV. NOTE
;	SUBD #0FFFF		;(?6502 VERSION)ADD 1 TO COMPENSATE FOR SUBTRACT TEST
	STD ODUR(U)
				;---
			.IF	NE,..CNT	;IF NOTE COUNTER ENABLED..
	INC VCNT(U)		;INC. NOTE COUNT
			.ENDC	;NE,..CNT
				;---
	LDA -1(X)		;GET BACK DURATION
	ANDA #01		;TEST IF NOTE IS TIED
	BNE 50$			;?NOTE NOT TIED?
	STA VSEQ(U)		;CLEAR SEQ. COUNTER FOR NOT TIED NOTE
				;---
			.IF	NE,..SYM
	CLRB			;AND NO SYNTH ADJUST FOR NOT TIED
	STD VSA(U)
			.ENDC	;NE,..SYM
				;---
			.IF	NE,..PRI
	LDA VIU			;TEST IF THIS IS NOT HIGH PRIORITY
	ANDA VC$PRI(Y)		;IN USE BITS VS PRIORITY MASK
;	BEQ PKNOFF		;IF THIS IS HIGH PRIORITY FOR THIS VOICE
	BEQ POKSN			;LET AMPLITUDE ENVELOPE DO PRE-GAP
			.IF	NE,..DRE
	LDA DREF
;	BNE PKNOFF
	BNE POKSN		;LET AMPLITUDE ENVELOPE DO PRE-GAP
			.ENDC	;NE,..DRE
	RTS			;ELSE, DON'T UPDATE POKEY WITH THIS VOICE
			.IFF
;	JMP PKNOFF		;J TURN OFF POKEY BETWEEN NOTES (NOT TIED)
	JMP POKSN		;LET AMPLITUDE ENVELOPE DO PRE-GAP
			.ENDC	;NE,..PRI
50$:				;===
				;NOTE IS TIED, TEST FOR SYNTH MODE ON
			.IF	NE,..SYM
	LDA VSF(U)		;TEST SYNTH MODE FLAG
	BNE POKSN		;B IF SYNTH MODE ON
				;NOTE IS TIED AND SYNTH MODE NOT ON, CLEAR FREQ. ADJUSTMENT
	CLRB
	STD VSA(U)		;CLEAR SYNTH. ADJUST
			.ENDC	;NE,..SYM
				;===
POKSN:				;HAVE SAME NOTE AS LAST TIME, PLAY IT WITH ENVELOPES
			.IF	NE,..PRI	;IF PRIORITY OF CHANNEL 4 ENABLED..
	LDA VIU
	ANDA VC$PRI(Y)		;IN USE FLAGS VS PRIORITY MASK
	BEQ 61$			;IF AT HIGHEST PRIORITY, PLAY NOTE
			.IF	NE,..DRE
	LDA DREF
	BNE 61$			;ELSE IF RECONFIGURED, THEN ALL ARE AT BEST PRIORITY
			.ENDC	;NE,..DRE
	RTS			;ELSE, RETURN WITHOUT POKEY UPDATE
			.ENDC	;NE,..PRI
61$:				;---
			.IF	NE,..SYM
	LDA $INTCT
	ANDA #06		;?TIME TO CHANGE ADJUST?
	BNE 3$
	ASR VSA(U)		;DIVIDE SYNTH ADJUST BY 2
	ROR VSA+1(U)		;   SO ADD 1/2 AS MUCH EACH TIME
			.ENDC	;NE,..SYM
3$:				;---FIRST ADD FREQ. ENV. TO NOTE FREQ.
			.IF	NE,..FRE	;IF FREQ. ENV. ENABLED..
	LDB VSEQ(U)		;GET FREQ. ENV. SEQ. #
	LSRB			;FOR 128 BYTE TABLE
	LDX FPTR(U)		;BASE OF FREQUENCY TABLE
	ABX
	LDB 0(X)		;GET CURRENT FREQ. ENV. SETTING
	SEX			;CONVERT TO 16 BIT
				;---
			.IF	NE,..DRE	;IF DRE'D TO 8 BITS
	TST DREF		;MUSIC FREQ IS *8, SOUNDS ARE AS IS.
	BNE 78$			;B IF RECONFIG'D TO 8 BITS
			.ENDC	;NE,..DRE
				;---
			.IF	NE,..SV4!..SV3	;IF SPLIT VOICE ENABLED..
	TST VC$SVF(Y)		;?16 BIT MUSIC VOICE?
	BNE 78$			;B IF A SPLIT VOICE
			.ENDC	;NE,..SVV
				;---
	LSLB			;MULT FREQ ENV *8 FOR MUSIC
	ROLA
	LSLB
	ROLA
	LSLB
	ROLA
78$:				;---
	ADDD ONOTE(U)		;ADD IN THE NOTES FREQUENCY
			.IFF	;NO FREQ ADJUSTMENT
	LDD ONOTE(U)		;GET OUR FREQUENCY
			.ENDC	;NE,..FRE
				;---
			.IF	NE,..SYM	;IF SYNTH. MODE ENABLED..
	ADDD VSA(U)		;ADD SYNTH ADJUST TO SUM OF NOTE FREQ. AND ENV.
			.ENDC	;NE,..SYM
				;===
	LDX VC$PKF(Y)		;SELECT THE POKEY OUTPUT PORT
			.IF	NE,..DRE
	TST DREF
	BEQ 62$			;?DYNAMICALLY RECONFIG'D?
	LDX VC$PKD(Y)		;THEN USE DRE PORT INSTEAD
	BRA 63$			;AND ONLY DO LO 8 BITS
			.ENDC	;NE,..DRE
62$:				;---
			.IF	NE,..SV4!..SV3
	TST VC$SVF(Y)
	BNE 63$			;B IF REGULAR VOICE IS SPLIT
			.ENDC	;NE,..SV4!..SV3
				;---
	STA 2(X)		;OUTPUT MSB OF 16 BIT 
63$:				;---
	STB 0(X)		;OUTPUT LO 8 BIT
				;===
	LDD ONOTE(U)		;CHECK FOR A REST(NO OUTPUT)
	BNE PKNON		;IF NOT A REST
				;---
PKNOFF:				;HAVE A REST OR NOTE IS OFF, SET UP TO FORCE OUTPUT TO OFF
	LDA #0F0
	STA FASV		;STORE MASK TO ZERO OUT AMPLITUDE
	BRA PKNC
				;---
PKNON:				;NOW OUTPUT AMPLITUDE, THIS VOICE
	LDA #0FF		;SET UP MASK TO PERMIT CURRENT VOLUME
	STA FASV
PKNC:				;---
			.IF	NE,..AME	;IF AMP. ENVELOPE ENABLED..
	LDB VSEQ(U)		;;DIVIDE ENV. SEQ # BY 8 (32 BYTE ENV. TABLE)
				;USE STRAIGHT, LIMIT AT 31(QUARTER SECOND)
	CMPB #31.
	IFHS
	LDB #31.
	ENDIF
	LDX APTR(U)
	LDA B(X)		;GET CURRENT VOLUME ENV. ADJ.
	ADDA VVOL(U)
	BPL 5$			;IF NUM NOT .LT. 0
	CLRA			;ELSE, SET VOLUME TO OFF
5$:				;---
	CMPA #10		;CHECK FOR VOLUME TOO LARGE
	BLT 6$			;IF VOLUME OK
	LDA #0F			;ELSE, SET TO MAX.
6$:
			.IFF	;IF AMP. ENV. DISABLED, JUST GET VOLUME
	LDA VVOL(U)
			.ENDC	;NE,..AME
				;---
	ORA VAC(U)		;SET UP CURRENT VOICE CONTROL
	ANDA	FASV		;MASK WITH NOTE ON/OFF SETTING
	LDX VC$PKF(Y)		;SELECT THE POKEY OUTPUT PORT
			.IF	NE,..DRE
	LDB DREF
	BEQ 62$			;?DYNAMICALLY RECONFIG'D?
	LDX VC$PKD(Y)		;THEN USE DRE PORT INSTEAD
	STA 1(X)		;ONLY DO LO 8 BITS
	RTS			;EXIT  ALL DONE
			.ENDC	;NE,..DRE
62$:				;---
			.IF	NE,..SV4!..SV3
	LDB VC$SVF(Y)
	BEQ 67$			;B IF REGULAR VOICE IS SPLIT
	STA 1(X)		;OUTPUT 8 BIT CHANNEL
	RTS			;EXIT  ALL DONE
			.ENDC	;NE,..SV4!..SV3
67$:				;---
	STA 3(X)		;AMPLITUDE GOES IN SECOND CHANNEL FOR 16 BIT
	RTS			;EXIT  ALL DONE 
				;===
PKFUN:				;HAVE A FUNCTION, NOT A NOTE..
				;B:= OPCODE
	LDX OPTR(U)
	LDA -1(X)		;A:= DATA VALUE
	LSLB
	CMPB #PKDTZ-PKDT
	LBHS POKNL		;NULL OUT IF NOT IN RANGE
	LDX #PKDT		;DISPATCH BASE
	JMP @B(X)		;GOTO ROUTINE
				;===

PKDT:				;DISPATCH TABLE
	.WORD	PKARAT,PKCRAT
	.WORD	PKAAMP,PKCAMP
	.WORD	PKAKEY,PKCKEY
			.IF	NE,..FRE
	.WORD	PKFRQE
			.IFF
	.WORD	POKNL		;IF FREQ. ENV. DISABLED..
			.ENDC
			.IF	NE,..AME
	.WORD	PKAMPE
 			.IFF
	.WORD	POKNL		;AMPLITUDE DISABLED
			.ENDC
			.IF	NE,..SCK
	.WORD	PKCHK,PKRCHK
			.IFF
	.WORD	POKNL,POKNL
			.ENDC
	.WORD	PKCON,PKPKC
			.IF	NE,..SYM
	.WORD	PKSYN
			.IFF
	.WORD	POKNL
			.ENDC
	.WORD	PKCPH
	.WORD	PKSL,PKEL
	.WORD	PKGOSB,PKRET
PKDTZ:
	.PAGE
			.IF	NE,..SCK	;IF SYNC. CHECK ENABLED
PKCHK:				;HAVE A TIMING CHECK FUNCTION, WAIT FOR OTHER VOICES TO CATCH UP
	LDB VC$BIT(Y)		;GET OUR BIT MASK
	COMB
	STB OCHK(U)		;SET UP FOR OTHERS TO SYNC ON
	.IRPC	VNUM,<12345678>
			.IF	DF,TVC'VNUM
	ANDA OCHK+TVC'VNUM	;TEST IF OTHERS SYNCED UP AGAIN
			.ENDC	;DF,TVC'VNUM
	.ENDR
	LBEQ POKNL		;B IF ALL CHECK POINTS REACHED ALREADY
				;---
				;THIS VOICE AHEAD OF REST, WAIT FOR OTHERS
	LDD OPTR(U)		;BACK UP THE RPM PC
	SUBD #2
	STD OPTR(U)		;KEEP DOING THIS TILL WE GET IT RIGHT
	LDD #0
	STD ODUR(U)		;CLEAR CURRENT DURATION(SO WILL BE NEW AGAIN)
	RTS			;RETURN FROM POKEY DRIVER, THIS VOICE
				;===
PKRCHK:				;RESET CHECK FLAG, THIS CHANNEL
	LDA	#0FF		;RESET MASK, THIS VOICE REACHED CHECK
	STA	OCHK(U)
	JMP	POKNL
			.ENDC	;.NE,..SCK
				;===
			.IF	NE,..AME	;IF AMP. ENV. ENABLED..
PKAMPE:				;HAVE AN AMPLITUDE ENV. FUNCTION
	LSLA			;WORD POINTER
	TFR A,B			;PREPARE FOR UNSIGNED 256 LENGTH ADD
	LDX #AETAB		;BASE OF AMPLITUDE DIRECTORY
	ABX
	LDD 0(X)		;GET AMP POINTER
	STD APTR(U)
	JMP POKNL
			.ENDC	;NE,..AME
				;===
			.IF	NE,..FRE	;IF FREQ. ENV. ENABLED..
PKFRQE:				;HAVE A FREQ. FUNCITON
	LSLA			;WORD POINTER
	TFR A,B			;PREPARE FOR 256 LENGTH UNSIGNED ADD
	LDX #FETAB		;BASE OF FREQUENCY TABLE
	ABX
	LDD 0(X)		;GET FREQ POINTER
	STD FPTR(U)
	JMP POKNL		;NEXT INSTRUCTION PLEASE
			.ENDC	;NE,..FRE
				;===
PKCRAT:				;HAVE A RATE FUNCTION
	SUBA ORATE(U)		;IF CHANGE RATE, ADD NEW(POSITIVE) TO OLD(NEGATIVE
PKARAT:				;---
	NEGA			;FORM NEGATIVE, 8 BIT VALUE, 9 BIT IMPLIED NEGATIVE
	STA ORATE(U)		;IF NEW RATE, STORE DESIRED VALUE
	JMP POKNL
				;===
PKCAMP:				;HAVE A NEW MEDIAN AMPLITUDE
	ADDA VVOL(U)		;IF CHANGE AMPLITUDE, ADD NEW TO OLD
PKAAMP:				;---
	STA VVOL(U)		;IF NEW AMPLITUDE, STORE DESIRED VALUE
	JMP POKNL
				;===
PKCKEY:				;HAVE A NEW KEY OFFSET
	ADDA OKEY(U)		;IF CHANGE KEY, ADD NEW TO OLD
PKAKEY:				;---
	STA OKEY(U)		;IF NEW KEY, SET DESIRED VALUE
	JMP POKNL
				;===
PKCON:				;HAVE NEW VOICE CONTROL BITS
	STA VAC(U)		;STORE INTO VOICE CONTROL BITS
	JMP POKNL
				;===
PKPKC:				;WANT TO SET UP NEW POKEY CONTROL BITS (FOR POKEY 1)
	STA PKC1		;STORE INTO POKEY 1
	JMP POKNL
				;===
			.IF	NE,..SYM	;IF SYNTH. MODE ENABLED..
PKSYN:				;WANT TO SET OR RESET SYNTH MODE
	STA VSF(U)		;STORE INTO SYNTH. FLAG
	JMP POKNL
			.ENDC	;NE,..SYM
				;===
PKCPH:				;WANT TO CALL A SUB-PHRASE
	LSLA			;WORD POINTER
	TFR A,B			;PREPARE FOR 256 BYTE TABLE
	LDX #TUNTAB		;BASE OF DIRECTORY
	ABX
	LDD OPTR(U)
	STD OPTSV(U)		;SAVE CURRENT PC
	LDD 0(X)		;GET NEW SUBTUNE
	STD OPTR(U)
	JMP POKNL
				;===
PKSL:				;WANT TO START A PHRASE LOOP
	STA VLC(U)		;SAVE LOOP COUNT FOR THIS PHRASE
	LDD OPTR(U)		;GET CURRENT PC
	STD OPTLL(U)		;AND SAVE IT
	JMP POKNL
				;===
PKEL:				;WANT TO END A PHRASE LOOP
	DEC VLC(U)		;CHECK FOR DONE WITH LOOP
	LBEQ POKNL		;B IF DONE WITH LOOP, CONTINUE FROM HERE
				;---
				;ARE NOT DONE YET WITH LOOP, REINSTATE ADDRESSES OF LOOP START
	LDD OPTLL(U)
	STD OPTR(U)
	JMP POKNL
				;===
PKGOSB:	LDX OPTR(U)		;LOAD CURRENT PC
	LEAX 1(X)		;BUMP PAST THE 3 BYTE INSTRUCTION
	STX OPTRET(U)		;SAVE IT IN RETURN POINTER
	LDD -2(X)		;GET CURRENT ADDRESS TO JUMP TO (SUBPHRASE)
	STD OPTR(U)		;PUT IN OLD POINTER
	JMP POKNL
				;===
PKRET:	LDD OPTRET(U)
	STD OPTR(U)
	JMP POKNL
				;===
	.PAGE
        .SBTTL RPM NOTE TABLE (FOR 1.512 MHZ CLOCK)
;
NOTTAB: .WORD 0         ;REST
        .WORD 0B493     ; 46227   --OCTAVE 0 ;C  16.3516 HZ
        .WORD 0AA70     ; 43632.1 --         ;C# 17.3239 HZ
        .WORD 0A0DF     ; 41182.8 --         ;D  18.354 HZ
        .WORD 097D7     ; 38871   --         ;D# 19.4454 HZ
        .WORD 08F51     ; 36689   --         ;E  20.6017 HZ
        .WORD 08745     ; 34629.4 --         ;F  21.8268 HZ
        .WORD 07FAD     ; 32685.4 --         ;F# 23.1246 HZ
        .WORD 07882     ; 30850.5 --         ;G  24.4997 HZ
        .WORD 071BF     ; 29118.6 --         ;G# 25.9565 HZ
        .WORD 06B5C     ; 27483.9 --         ;A  27.5 HZ
        .WORD 06555     ; 25941   --         ;A# 29.1352 HZ
        .WORD 05FA5     ; 24484.6 --         ;B  30.8677 HZ
        .WORD 05A46     ; 23110   --OCTAVE 1 ;C  32.7032 HZ
        .WORD 05535     ; 21812.6 --         ;C# 34.6478 HZ
        .WORD 0506C     ; 20587.9 --         ;D  36.7081 HZ
        .WORD 04BE8     ; 19432   --         ;D# 38.8909 HZ
        .WORD 047A5     ; 18341   --         ;E  41.2034 HZ
        .WORD 0439F     ; 17311.2 --         ;F  43.6535 HZ
        .WORD 03FD3     ; 16339.2 --         ;F# 46.2493 HZ
        .WORD 03C3E     ; 15421.8 --         ;G  48.9994 HZ
        .WORD 038DC     ; 14555.8 --         ;G# 51.9131 HZ
        .WORD 035AA     ; 13738.5 --         ;A  55 HZ
        .WORD 032A7     ; 12967   --         ;A# 58.2705 HZ
        .WORD 02FCF     ; 12238.8 --         ;B  61.7354 HZ
        .WORD 02D20     ; 11551.5 --OCTAVE 2 ;C  65.4064 HZ
        .WORD 02A97     ; 10902.8 --         ;C# 69.2956 HZ
        .WORD 02832     ; 10290.5 --         ;D  73.4162 HZ
        .WORD 025F1     ; 9712.5  --         ;D# 77.7817 HZ
        .WORD 023CF     ; 9166.99 --         ;E  82.4069 HZ
        .WORD 021CC     ; 8652.09 --         ;F  87.3071 HZ
        .WORD 01FE6     ; 8166.1  --         ;F# 92.4986 HZ
        .WORD 01E1B     ; 7707.38 --         ;G  97.9989 HZ
        .WORD 01C6A     ; 7274.4  --         ;G# 103.826 HZ
        .WORD 01AD2     ; 6865.73 --         ;A  110 HZ
        .WORD 01950     ; 6479.99 --         ;A# 116.541 HZ
        .WORD 017E4     ; 6115.9  --         ;B  123.471 HZ
        .WORD 0168C     ; 5772.25 --OCTAVE 3 ;C  130.813 HZ
        .WORD 01548     ; 5447.89 --         ;C# 138.591 HZ
        .WORD 01416     ; 5141.73 --         ;D  146.832 HZ
        .WORD 012F5     ; 4852.75 --         ;D# 155.563 HZ
        .WORD 011E4     ; 4580    --         ;E  164.814 HZ
        .WORD 010E3     ; 4322.55 --         ;F  174.614 HZ
        .WORD 00FF0     ; 4079.55 --         ;F# 184.997 HZ
        .WORD 00F0A     ; 3850.19 --         ;G  195.998 HZ
        .WORD 00E32     ; 3633.7  --         ;G# 207.652 HZ
        .WORD 00D65     ; 3429.36 --         ;A  220 HZ
        .WORD 00CA4     ; 3236.5  --         ;A# 233.082 HZ
        .WORD 00BEE     ; 3054.45 --         ;B  246.942 HZ
        .WORD 00B43     ; 2882.63 --OCTAVE 4 ;C  261.626 HZ
        .WORD 00AA0     ; 2720.44 --         ;C# 277.183 HZ
        .WORD 00A07     ; 2567.36 --         ;D  293.665 HZ
        .WORD 00977     ; 2422.88 --         ;D# 311.127 HZ
        .WORD 008EE     ; 2286.5  --         ;E  329.628 HZ
        .WORD 0086E     ; 2157.77 --         ;F  349.228 HZ
        .WORD 007F4     ; 2036.27 --         ;F# 369.994 HZ
        .WORD 00782     ; 1921.59 --         ;G  391.995 HZ
        .WORD 00715     ; 1813.35 --         ;G# 415.305 HZ
        .WORD 006AF     ; 1711.18 --         ;A  440 HZ
        .WORD 0064F     ; 1614.75 --         ;A# 466.164 HZ
        .WORD 005F4     ; 1523.73 --         ;B  493.883 HZ
        .WORD 0059E     ; 1437.81 --OCTAVE 5 ;C (MIDDLE C) 523.251 HZ
        .WORD 0054D     ; 1356.72 --         ;C# 554.365 HZ
        .WORD 00500     ; 1280.18 --         ;D  587.33 HZ
        .WORD 004B8     ; 1207.94 --         ;D# 622.254 HZ
        .WORD 00474     ; 1139.75 --         ;E  659.255 HZ
        .WORD 00433     ; 1075.39 --         ;F  698.457 HZ
        .WORD 003F7     ; 1014.64 --         ;F# 739.989 HZ
        .WORD 003BD     ; 957.297 --         ;G  783.991 HZ
        .WORD 00387     ; 903.175 --         ;G# 830.609 HZ
        .WORD 00354     ; 852.091 --         ;A  880 HZ
        .WORD 00324     ; 803.874 --         ;A# 932.328 HZ
        .WORD 002F6     ; 758.363 --         ;B  987.766 HZ
        .WORD 002CB     ; 715.406 --OCTAVE 6 ;C  1046.5 HZ
        .WORD 002A3     ; 674.861 --         ;C# 1108.73 HZ
        .WORD 0027D     ; 636.591 --         ;D  1174.66 HZ
        .WORD 00258     ; 600.469 --         ;D# 1244.51 HZ
        .WORD 00236     ; 566.374 --         ;E  1318.51 HZ
        .WORD 00216     ; 534.193 --         ;F  1396.91 HZ
        .WORD 001F8     ; 503.818 --         ;F# 1479.98 HZ
        .WORD 001DB     ; 475.148 --         ;G  1567.98 HZ
        .WORD 001C0     ; 448.088 --         ;G# 1661.22 HZ
        .WORD 001A7     ; 422.545 --         ;A  1760 HZ
        .WORD 0018E     ; 398.437 --         ;A# 1864.65 HZ
        .WORD 00178     ; 375.681 --         ;B  1975.53 HZ
        .WORD 00162     ; 354.203 --OCTAVE 7 ;C  2093 HZ
        .WORD 0014E     ; 333.931 --         ;C# 2217.46 HZ
        .WORD 0013B     ; 314.796 --         ;D  2349.32 HZ
        .WORD 00129     ; 296.735 --         ;D# 2489.02 HZ
        .WORD 00118     ; 279.687 --         ;E  2637.02 HZ
        .WORD 00108     ; 263.597 --         ;F  2793.83 HZ
        .WORD 000F8     ; 248.409 --         ;F# 2959.96 HZ
        .WORD 000EA     ; 234.074 --         ;G  3135.96 HZ
        .WORD 000DD     ; 220.544 --         ;G# 3322.44 HZ
        .WORD 000D0     ; 207.773 --         ;A  3520 HZ
        .WORD 000C4     ; 195.719 --         ;A# 3729.31 HZ
        .WORD 000B8     ; 184.341 --         ;B  3951.07 HZ
        .WORD 000AE     ; 173.602 --OCTAVE 8 ;C  4186.01 HZ
	.PAGE
	.SBTTL	RPM ENVELOPE TABLES
;
.IF	NE,..FRE		;IF REQ. ENV. ENABLED..
;FREQ. ENV. TABLE
;
FETAB:	.WORD	NULENV		;NULL ENVELOPE
	.WORD	GLOCK		;GLOCK (ACTUALLY OFFSET BY 1)
;	.WORD 	HRN		;HORN (ACTUALLY BIGGER OFFSET)
.ENDC
.IF	NE,..AME		;IF AMP. ENV. ENABLED..
;
;AMPLITUDE ENV. TABLE
;
AETAB:	.WORD	NULENV		;NULL ENVELOPE
	.WORD	SDRUM		;STEEL DRUM
	.WORD	EHARD		;HARD EMPHASIS
	.WORD	QKRIZE
	.WORD	TIES		;STEEL DRUM TIED/SYNTHED NOTES
;
.ENDC
.IF	NE,..FRE
;FREQUENCY ENVELOPES
;
;
GLOCK:	;.BYTE	1,1,1,1,0FF,0FF,0FF,0FF
	;.BYTE	1,1,1,1,0FF,0FF,0FF,0FF
	;.BYTE	1,1,1,1,0FF,0FF,0FF,0FF
	;.BYTE	1,1,1,1,0FF,0FF,0FF,0FF
	;.BYTE	1,1,1,1,0FF,0FF,0FF,0FF
	;.BYTE	1,1,1,1,0FF,0FF,0FF,0FF
	;.BYTE	1,1,1,1,0FF,0FF,0FF,0FF
	;.BYTE	1,1,1,1,0FF,0FF,0FF,0FF
	.BYTE	0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF
	.BYTE	0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF
	.BYTE	0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF
	.BYTE	0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF
	.BYTE	0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF
	.BYTE	0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF
	.BYTE	0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF
	.BYTE	0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF

;HRN:	.BYTE	0FA,0FA,0FA,0FA,0FA,0FA,0FA,0FA
;	.BYTE	0FA,0FA,0FA,0FA,0FA,0FA,0FA,0FA
;	.BYTE	0FA,0FA,0FA,0FA,0FA,0FA,0FA,0FA
;	.BYTE	0FA,0FA,0FA,0FA,0FA,0FA,0FA,0FA
;	.BYTE	0FA,0FA,0FA,0FA,0FA,0FA,0FA,0FA
;	.BYTE	0FA,0FA,0FA,0FA,0FA,0FA,0FA,0FA
;	.BYTE	0FA,0FA,0FA,0FA,0FA,0FA,0FA,0FA
;	.BYTE	0FA,0FA,0FA,0FA,0FA,0FA,0FA,0FA
.ENDC

NULENV:	.WORD	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	.WORD	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	.WORD	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	.WORD	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
;
.IF	NE,..FRE
;
;
.ENDC
;
.IF	NE,..AME
;
;AMPLITUDE ENVELOPES
;
SDRUM:	;.BYTE	4,0,-2,-4,-8,-12.,-16.,-16.
	;.BYTE	-16.,-16.,-16.,-16.,-16.,-16.,-16.,-16.
	;.BYTE	-16.,-16.,-16.,-16.,-16.,-16.,-16.,-16.
	;.BYTE	-16.,-16.,-16.,-16.,-16.,-16.,-16.,-16.
	;.BYTE 	-2.,3,7,7,7,7,6,6
	;.BYTE	6,6,5,5,5,5,5,5
	;.BYTE	5,5,5,4,4,4,4,4
	;.BYTE	4,2,2,2,2,2,2,0
	.BYTE	10.,9,8,7,6,5,4,3
	.BYTE 	2,2,1,1,1,1,1,1
	.BYTE	0,0,0,0,0,0,0,-1
	.BYTE 	-1,-1,-1,-1,-1,-1,-1,-2

EHARD:	;.BYTE	10.,9.,8.,7,6,5,4,3,2,1,0,0,0,0,0,0
	;.BYTE	0,0,0,0,0,0,0,0
	;.BYTE	0,0,0,0,0,0,0,0
	.BYTE	3,7,7,6,5,5,4,4
	.BYTE	4,4,3,3,3,3,3,3
	.BYTE	2,2,2,2,2,2,1,1
	.BYTE	1,1,1,1,0,0,0,-1
;
QKRIZE:	;.BYTE	7,7,7,7,7,7,6,6
	;.BYTE	5,5,4,4,3,3,3,3
	;.BYTE	2,2,2,2,2,2,1,1
	;.BYTE	1,1,1,1,0,0,0,0
	.BYTE	7,6,5,4,4,3,3,2
	.BYTE	2,2,1,1,1,1,0,0
	.BYTE	0,0,0,0,0,0,-1,-1
	.BYTE	-1,-1,-1,-1,-1,-1,-1,-1
	
TIES:	;.BYTE	3,-3,2,-2,3,-3,2,-2,3,-3,2,-2,3,-3,2,-2
	;.BYTE	3,-3,2,-2,3,-3,2,-2,3,-3,2,-2,3,-3,2,-2
	.BYTE	10.,9,8,7,6,5,4,4
	.BYTE	3,3,3,3,3,3,3,3
	.BYTE	2,2,2,2,2,2,2,2
	.BYTE	2,2,2,2,2,2,2,2
.ENDC
	HLL69F		;VERIFY CHECK ON STRUCTURE
	.END
                                                                                                                                                                                                                                                                                                        