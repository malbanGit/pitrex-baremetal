	.TITLE	WSCPU	CPU ALIEN CONTROL AND CHOREOGRAPHY
	.INCLUDE	WSCOMN	;<<<<<<<<<<<<<<<<<<<<<<<<<<<<
				;===
A$UVP	==0			;UNIT VECTOR POINTER
A$BIC	==2			;BLOCK INDEX COUNTER, LO BANK
A$TYP	==3			;TYPE (O.DEAD; 3.EXPLODING
A$PIC	==4			;PICTURE #
A$DIE	==5			;PROCESS OF DIEING
A$GLW	==6			;PROCESS OF GLOWING
A$HTA	==7			;HITS AVAILABLE BEFORE DIEING
A$DMC	==8			;CUNENT DAMAGE COUNT
A$ROL	==9			;FORCE ROLL OF SHIP
A$AIM	==10.			;AIMED AT PLAYER
A$TRGT	==11.			;=O.GO FOR HOME BASE; =-1.PLAYER
;A$SPD	==12.			;UPDATE RATE IN DEEP SPACE
A$CHPC	==13.			;PC FOR CURRENT CHOREOG
A$CHOP	==15.			;OP CODE
A$CHTM	==16.			;TIMER
A$CHTW	==17.			;TWIRL FLAGS
A$CHMV	==18.			;TW+1, MOVE FLAGS
A$CHCN	==19.			;CONTROL MASK, UNTIL STRUCTURE
A$CHST	==21.			;STATUS TESTED BY CONTROL
A$CHRT	==23.			;RETURN PC, SUBROUTINE
A$IZE	==25.			;# OF BYTES PER RECORD
A$EQ	==3			;# OF ALIEN RECORDS IN SEQUENCE
				;---
C$AH	==1			;NEARBY ALIEN HAS BEEN HIT
C$AD	==2			;/PLEASE DELETE/NEARBY ALIEN HAS DIED
C$AS	==4			;ALIEN HAS PLAYER IN SITES
C$AV	==8			;ALIEN HAS PLAYER IN FRONT VIEW
C$R1	==10			;
C$R2	==20			;
C$AG	==40			;ALIEN HAS FIRED A GUN
				;
C$PN	==400			;PLAYER IS NEAR THE ALIEN
C$PS	==800			;PLAYER HAS ALIEN IN SITES
C$PV	==1000			;PLAYER HAS ALIEN IN VIEW
C$PM	==2000			;PLAYER IS MIDDLIN NEAR TO ALIEN
				;---
G$UVP	==0			;MATH BOX POINTER
G$BIC	==2			;MATH BOX BIC, LO BANK
G$TYP	==3			;DESCRIPTOR OF GUN TYPE
G$MOV	==4			;MOVE ROUTINE
G$TMR	==5			;TIMER
G$IZE	==6
G$EQ	==6
				;---
				;---
M$AX	==-10+0
M$AY	==-10+0+2
M$AZ	==-10+0+0+4

M$BX	==-10+0+8
M$BY	==-10+0+8+2
M$BZ	==-10+0+8+4

M$CX	==-10+0+10
M$CY	==-10+0+10+2
M$CZ	==-10+0+10+4

M$TX	==-10+18+0
M$TY	==-10+18+2
M$TZ	==-10+18+4

M$VX	==-10+6
M$VY	==-10+6+8
M$VZ	==-10+6+10

				;===
				;D-PAGE RAM
	.GLOBB CL.AP
	.GLOBB CL.ADS
	.GLOBB CP.AC,CP.PT,CP.RL,CP.SHF,CP.YW
	.GLOBB FRAME
	.GLOBB RND.S1,RND.S2
	.GLOBB S1.PRM
	.GLOBB WV.BGP,WV.CHP,WV.LP,WV.LIV,WV.LVL,WV.SHP
				;---
				;RAM
	.GLOBL ALIEN,ALIENZ
	.GLOBL GUN,GUNZ
	.GLOBL Q.PBB
	.GLOBL SP.WAV
	.GLOBL WV.HRD
				;---
				;OUTSIDE ROUTINES
	.GLOBL ADBOBJ
	.GLOBL SCRTIE,SCRDARTH
	.GLOBL AUDPBZ,AUDSX
	.GLOBL BGAXPL
	.GLOBL FRAGUN
	.GLOBL INOBJ
	.GLOBL IS1UV
	.GLOBL MGOWT
	.GLOBL RND8
	.GLOBL UNITV
				;---
				;MATH BOX
	.GLOBL M$PSB2
	.GLOBL M$PTCH
	.GLOBL M$ROLL
	.GLOBL M$S1BC
	.GLOBL M$YAW
	.GLOBL M.BIC
	.GLOBL M.COS
	.GLOBL M.SIN
	.GLOBL M.S1
	.GLOBL M.XP,M.YP,M.YPS,M.ZP,M.ZPS
				;---
				;VECTOR GENERATOR
				;---
				;HARDWARE
	.GLOBL P.RND1
				;---
				;SHIFT ROUTINES
	.IRP .A,<5,6>
	.GLOBL ASRD'.A'
	.ENDR
				;===

	.MACRO .PAGG		;GLOBAL PAGE NUMBERS
	.PAGEG C		;CPU AND CHOREOGRAPHY
	.ENDM

	.CSECT

	.PAGG
				;===
				;ALIEN USAGE ONLY
SNPTU:				;PITCH UP
	JSR SNPOS
	INC CP.PT
	JMP SNPT
				;---
SNPTD:				;PITCH DOWN
	JSR SNNEG
	DEC CP.PT
	JMP SNPT
				;---
SNRLL:				;ROLL LEFT
	JSR SNNEG
	DEC CP.RL
	JMP SNRL
				;---
SNRLR:				;ROLL RIGHT
	JSR SNPOS
	INC CP.RL
	JMP SNRL
				;---
SNYWL:				;YAW LEFT
	JSR SNPOS
	DEC CP.YW
	JMP SNYW
				;---
SNYWR:				;YAW RIGHT
	JSR SNNEG
	INC CP.YW
	JMP SNYW
SNPOS:				;POSITIVE ANGLES FOR CPU
	LDA #5*4
	LDU #TSNGLE
	LEAU A(U)
	LDD 0(U)
	STD M.SIN
	LDD 2(U)
	STD M.COS
	RTS
				;---
SNNEG:
	LDA #5*4
	LDU #TSNGLE		;8 ENTRIES, DOUBLEWORD EACH
	LEAU A(U)
	LDD #0
	SUBD 0(U)
	STD M.SIN
	LDD 2(U)
	STD M.COS
	RTS
				;---
TSNGLE:				;CPU ANGLES
	.WORD 0B5,3FFF		;.63
	.WORD 100,3FFE		;.90
	.WORD 16A,3FFC		;1.27
	.WORD 21F,3FF7		;1.90
	.WORD 3DF,3FE2		;3.47
	.WORD 4FF,3FCE		;4.48
	.WORD 590,3FC2		;4.99
	.WORD 590,3FC2		;4.99
				;---
SNRL:				;ROLL ALIEN SHIP
	CLRA
	LDB A$BIC(X)
	STD M.BIC
	LDA #M$ROLL
	JMP MGOWT
SNPT:				;PITCH ALIEN SHIP
	CLRA
	LDB A$BIC(X)
	STD M.BIC
	LDA #M$PTCH
	JMP MGOWT
SNYW:				;YAW ALIEN SHIP
	CLRA
	LDB A$BIC(X)
	STD M.BIC
	LDA #M$YAW
	JMP MGOWT
				;---
SNMVF2:				;MOVE FORWARD TWICE AS FAST
	LDD M$AX(U)		;X VECTOR
	JSR ASRD5
	ADDD M$VX(U)
	STD M$VX(U)
	LDD M$BX(U)
	JSR ASRD5
	ADDD M$VY(U)
	STD M$VY(U)
	LDD M$CX(U)
	JSR ASRD5
	ADDD M$VZ(U)
	STD M$VZ(U)
	RTS
				;---
SNMVF:				;MOVE FORWARD
	LDD M$AX(U)		;X VECTOR
	JSR ASRD6
	ADDD M$VX(U)
	STD M$VX(U)
	LDD M$BX(U)
	JSR ASRD6
	ADDD M$VY(U)
	STD M$VY(U)
	LDD M$CX(U)
	JSR ASRD6
	ADDD M$VZ(U)
	STD M$VZ(U)
	RTS
				;---
SNMVU:				;MOVE UP
	LDD M$AZ(U)		;Z VECTOR
	JSR ASRD6
	ADDD M$VX(U)
	STD M$VX(U)
	LDD M$BZ(U)
	JSR ASRD6
	ADDD M$VY(U)
	STD M$VY(U)
	LDD M$CZ(U)
	JSR ASRD6
	ADDD M$VZ(U)
	STD M$VZ(U)
	RTS
				;---
SNMVU2:				;MOVE UP TWICE AS FAST
	LDD M$AZ(U)		;Z VECTOR
	JSR ASRD5
	ADDD M$VX(U)
	STD M$VX(U)
	LDD M$BZ(U)
	JSR ASRD5
	ADDD M$VY(U)
	STD M$VY(U)
	LDD M$CZ(U)
	JSR ASRD5
	ADDD M$VZ(U)
	STD M$VZ(U)
	RTS
				;---
SNMVD:				;MOVE DOWN
	LDD #0			;NEGATE Z VECTOR
	SUBD M$AZ(U)
	JSR ASRD6
	ADDD M$VX(U)
	STD M$VX(U)
	LDD #0
	SUBD M$BZ(U)
	JSR ASRD6
	ADDD M$VY(U)
	STD M$VY(U)
	LDD #0
	SUBD M$CZ(U)
	JSR ASRD6
	ADDD M$VZ(U)
	STD M$VZ(U)
	RTS
				;---
SNMVD2:				;MOVE DOWN TWICE AS FAST
	LDD #0			;NEGATE Z VECTOR
	SUBD M$AZ(U)
	JSR ASRD5
	ADDD M$VX(U)
	STD M$VX(U)
	LDD #0
	SUBD M$BZ(U)
	JSR ASRD5
	ADDD M$VY(U)
	STD M$VY(U)
	LDD #0
	SUBD M$CZ(U)
	JSR ASRD5
	ADDD M$VZ(U)
	STD M$VZ(U)
	RTS
				;===
$CPY1::
	.B=13
	.IRPC .A,<GREGR did THIS also>
	.BYTE .B*''.A&0FF0/10
	.B=.B+''.A&03FFF
	.ENDR


				;PLAYER SHIP
				;---
DOAMOV:				;MOVE ALIEN
				;X--> A. PARAMETER
				;U--> UVP
				;VELOCITIES ALREADY SET
	LDD M$VX(U)
	ADDD M$TX(U)
	IFVC
	STD M$TX(U)		;NEW LOCAL POSITION
	ENDIF
50$:				;---HANDLE Y TRANSLATION
	LDD M$VY(U)
	ADDD M$TY(U)
	IFVC
	STD M$TY(U)		;NEW TRANSLATION LOCATION
	ENDIF
60$:				;--- TRANSLATE Y
	LDD M$TZ(U)
	ADDD M$VZ(U)		;COMPUTE NEW Z
	IFVC
	STD M$TZ(U)
	ENDIF
68$:				;---
	RTS
	.PAGG
	.SBTTL COLLISION

CPHTSA::			;SPACE LAZAR HIT ALIEN SHIP
	LDX CL.AP		;X-->ALIEN PARMS
	LDA A$TYP(X)
	CMPA #1
	BNE 5$			;NO DOUBLE JEOPARDY IF NOT ALIVE
	LDA A$GLW(X)
	IFNE			;?OR IS IT GLOWING FROM A HIT?
5$:	RTS			;LEAVE ALONE FOR A WHILE
	ENDIF
				;ELSE PROCESS THE HIT
	JSR RND8
				;---
	LDA A$TYP(X)
	CMPA #1
	BNE 30$			;?A LIVE ALIEN?
	LDD A$CHST(X)
	CHSET C$AH		;STATUS: THIS ALIEN DAMAGED
	STD A$CHST(X)
30$:				;---
	LDX CL.AP		;X--> HIT ALIEN PARM
	INC A$DMC(X)		;RECORD SOME MORE DAMAGE
	DEC A$HTA(X)		;DECREASE HITS LEFT
	LBLE XPSA		;NO HITS LEFT - EXPLODE SPACE ALIEN
				;INDICATE DAMAGE
				;IMPART GUN VELOCITY TO SHIP

	LDA #05
	STA A$HTA(X)		;KEEP DARTH ALIVE
	JSR SCRDARTH		;ADD SCORE FOR HITTING DARTH
				;FORCE GLOW
	LDA #01F		;TWO OR SO SECONDS
	STA A$ROL(X)
	STA A$GLW(X)
				;---
	LDX #M.S1
	LDU CL.AP
	LDU A$UVP(U)		;ALIEN UVP
				;=== THROW SHIP FOR A LOOP
	CLRD
	STD M$VX(U)		;THRO SHIP INDEPENDENT OF PREVIOUS MOTION
	STD M$VY(U)
	STD M$VZ(U)
				;---
	TEMP LP,1

	LDA #2
	STA TMPLP
40$:				;---
	LDD #4000
	SUBD CL.ADS
	LDB M$AX(X)
	MUL
	TFR A,B
	LSLD
	SEX
	ADDD M$VX(U)
	STD M$VX(U)		;PORTION OF FORWARD VELOCITY
				;---
	LDA RND.S1
	ORA #80			;AT LEAST SOME ANGLE
	LDB M$BX(X)
	MUL
	BCS 43$			;RANDOM BIT
	NEGA
43$:				;---
	TFR A,B
	NOP
	SEX
	ADDD M$VY(U)
	STD M$VY(U)		;PORTION OF Y VELOCITY
				;---
	LDA RND.S2
	ORA #80
	LDB M$CX(X)
	MUL
	BCS 53$			;RANDOM BIT
	NEGA
53$:				;---
	TFR A,B
	NOP
	SEX			;FULL WORD
	ADDD M$VZ(U)
	STD M$VZ(U)
				;---
	LEAX 2(X)
	DEC TMPLP
	BPL 40$
				;---
	JSR AUDSX
	RTS			;---

XPSA:				;EXPLODE SPACE ALIEN
	LDX CL.AP		;X-->HIT ALIEN
				;
	JSR AUDSX		;SMALL EXPLOSION
	LDA A$BIC(X)
	CMPA Q.PBB
	IFEQ			;?SAME GUY DOING CURRENT PASSBY?
	JSR AUDPBZ		;THEN KILL ANY PASSBY SOUND
	ENDIF
				;---
	JSR BGAXPL
				;---
	JSR SCRTIE		;ADD SCORE FOR KILLING TIE FIGHTER
				;---
	RTS
				;===

	.PAGG
	.SBTTL CPU-COMPUTER DRONES
CPU::				;COMPUTER
	LDX #ALIEN
20$:				;---
	STX S1.PRM
	LDU A$UVP(X)
	LDA A$TYP(X)		;IGNORE DEAD ONES
	BEQ 40$
	JSR CPUAL		;ALIEN CPU, LOCAL
40$:				;---
	LDX S1.PRM
	LEAX A$IZE(X)
	CMPX #ALIENZ
	BLO 20$
90$:				;---
	RTS
				;===

CPURET::
	LDX #ALIEN
	BEGIN
	STX S1.PRM
	LDU A$UVP(X)
	LDA A$TYP(X)
	CMPA #1
	IFEQ			;?ALIVE?
				;MOVE Y AND Z TO CENTER
	LDA M$TY(U)
	CMPA #7+2
	IFGE
	SUBA #2
	ENDIF
	CMPA #-7-2
	IFLE
	ADDA #2
	ENDIF
	STA M$TY(U)		;SAVE RESULT
				;---
	LDA M$TZ(U)
	CMPA #6+3
	IFGE
	SUBA #3
	ENDIF
	CMPA #-6-3
	IFLE
	ADDA #3
	ENDIF
	STA M$TZ(U)		;SAVE RESULT
				;---
	LDD M$TX(U)
	ADDD #400		;RACE BACK TO DETH STAR
	IFVC
	STD M$TX(U)
	ELSE			;ELSE OVERFLOWED TO DETH STAR, SO TURN OFF
	LDA M$TY(U)
	ABSA
	CMPA #08
	IFLE
	LDA M$TZ(U)
	ABSA
	CMPA #08
	IFLE			;?BOTH Y AND Z CLOSE TO DETH STAR ALSO?
	LDA #0			;THEN TURN OFF ALIEN
	STA A$TYP(X)
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	LDX S1.PRM		;LOOP WITH NEXT ALIEN
	LEAX A$IZE(X)
	CMPX #ALIENZ
	HSEND
	RTS
				;===

CPUAL:					;
	JSR CHOPDO
	LDD #0				;CLEAR ACTIONS REQUESTED
	STA CP.AC
	STA CP.RL
	STA CP.PT
	STA CP.YW
	LDA A$CHST(X)
	ANDA #C$PV/100		;SAVE IF IN VIEW FOR GUNS 
	LDB P.RND1
	ANDB #C$R1+C$R2
	STD A$CHST(X)		;PREPARE NEW CHOREG STATUS
	LDA A$ROL(X)
	DECA
	BMI 18$
	STA A$ROL(X)
	LDD #5696.		;20.34 DEGREES
	STD M.SIN
	LDD #15362.
	STD M.COS
	JSR SNRL
	JMP 30$			;SKIP OVER AIM AND SHOOT
18$:				;---
	LDB A$CHTW(X)			;TWIRL INFO
	STB CP.SHF
20$:	C$RL=1
	LSR CP.SHF
	BCC 21$
	JSR SNRLL
21$:	C$RR=2					;---
	LSR CP.SHF
	BCC 22$
	JSR SNRLR
22$:	C$PU=4				;---
	LSR CP.SHF
	BCC 23$
	JSR SNPTU
23$:	C$PD=8				;---
	LSR CP.SHF
	BCC 24$
	JSR SNPTD
24$:	C$YR=10				;---
	LSR CP.SHF
	BCC 25$
	JSR SNYWR
25$:	C$YL=20				;---
	LSR CP.SHF
	BCC 26$
	JSR SNYWL
26$:					;---
28$:					;---
30$:				;---
	JSR CPUMVL			;MOVE LOCALLY
	JSR CPCHKL
	LDA A$TYP(X)
	CMPA #1				;?NOT LIVE SHIP?
	LBNE 90$			;B THEN NO SHOTS
	LDA A$BIC(X)
	JSR IS1UV			;DOWNLOAD VECTORS
	LDX S1.PRM
	CLR A$AIM(X)
	CLRA
	LDB #M$S1BC+3			;CHASE PLAYER'S ONE SHIP
	STD M.BIC
	
C$T9	=40

	LDA A$CHTW(X)			;AIM IN FRONT OF PLAYER
	BITA #C$T9
	IFNE
	LDD M$TX+M.S1
	ADDD #1000			;GO IN FRONT OF PLAYER
	STD M$TX+M.S1
	LDA #M$PSB2			;NOW VIEW PLAYER'S SHIP
	JSR MGOWT
	LDD M$TX+M.S1
	SUBD #1000			;RESTORE M$TX
	STD M$TX+M.S1
	ELSE
	LDA #M$PSB2			;VIEW PLAYERS SHIP
	JSR MGOWT
	ENDIF
	LDD M.XP			;?PLAYER IN FRONT?
	BMI 140$			;B IGNORE GUNS IF IN BACK
	INC A$AIM(X)
	SUBD #4000
	BGE 140$				;IGNORE GUN IF TOO FAR AWAY
	LDD A$CHST(X)		;SET PLAYER IN ALIENS VIEW
	CHSET C$AV
	STD A$CHST(X)
	LDD M.YPS
	ADDD M.ZPS
	CMPD #20			;?AIMING NEAR SHIP?
	BHI 140$
	LDD A$CHST(X)		;PLAYER IN ALIENS SITES
	CHSET C$AS
	STD A$CHST(X)
140$:
	LDD A$CHST(X)
	BITA #C$PV/100
	BEQ 40$			;NO SHOOTING GUNS IF PLAYER CANT SEE US
	LDD A$CHTW(X)
	BITA #C$T9
	BNE 40$			;B NO SHOOT IF AIMMING IN FRONT
	LDD M.XP
	SUBD #800
	BLE 40$			;B TOO CLOSE
	LDA A$GLW(X)			;IF ALIEN BEING HIT
	BNE 40$				;B THEN DELAY SHOOTING
					;WAIT FOR SHIELDS TO STOP
	LDB WV.HRD
	CMPB #TGPROZ-TGPROB/4	;# OF WAVES DEFINED IN PROBABILITY TABLE
	IFHS
	LDU #TGPROZ-4
	ELSE
	LSLB
	LSLB
	LDU #TGPROB
	LEAU B(U)			;ACCESS INTO PROBABILITY TABLE
	ENDIF
				;---
	LDA FRAME+1			;FIRE SHELL
	ANDA 0(U)			;SPACE THEM OUT
	BNE 40$
	LDA P.RND1
	CMPA 1(U)
	BLS 40$			;MATCHES FRAME, LOWER VAL IS MORE OFTEN
	LDU 2(U)		;# OF GUNS ALLOWED, TABLE HAS POINTER INTO GUN AREA 
32$:					;---
	LDA G$TYP(U)		;GUN FREE TO START?
	BNE 36$			;NO, THEN GO TO NEXT GUN
	LDX S1.PRM		;YES, GUN READY TO START
	LDD A$CHST(X)		;TELL ALIEN HE FIRED A GUN
	CHSET C$AG
	STD A$CHST(X)
	JSR FRAGUN
	BRA 38$
36$:					;---
	LEAU G$IZE(U)			;NEXT POTENTIAL GUN
	CMPU #GUNZ
	BLO 32$
38$:					;---
40$:					;---
				;AIM AT PLAYER
	LDX S1.PRM
	C$T0=80
	LDA A$CHTW(X)
	BITA #C$T0
	BEQ 60$
41$:
	LDA CP.YW
	BNE 50$
	LDA M.YP
	BMI 42$
	JSR SNYWR
	BRA 45$
42$:					;---
	JSR SNYWL
45$:					;---
	LDA CP.RL
	BNE 50$				;?HELP YAW BY ROLLING?
	LDB M.ZP
	SEX
	ADDB #1
	CMPB #1
	BLS 50$				;?FAR ENOUGH AWAY? AVOID JITTER
	EORA M.YP			;INVOLVE GUADRANT
	BMI 48$
	JSR SNRLL			;+Z UP, +Y RIGHT QUAD
	BRA 50$
48$:					;---
	JSR SNRLR
50$:					;---
	LDA CP.PT
	BNE 60$
	LDA M.ZP
	BMI 52$
	JSR SNPTU
	BRA 55$
52$:					;---
	JSR SNPTD
55$:					;---
	LDA CP.RL
	BNE 60$				;?ROLL AVAILABLE TO HELP PITCH?
	LDB M.YP
	SEX
	ADDB #1
	CMPB #1
	BLS 60$				;AVOID JITTER
	EORA M.ZP			;INVOLVE QUADRANTS
	BMI 58$
	JSR SNRLR			;+Z UP, +Y RIGHT QUAD
	BRA 60$
58$:					;---
	JSR SNRLL
60$:					;---
80$:
90$:
	LDX S1.PRM
	LDD A$CHST(X)
	ANDA #-1-<C$PV/100>
	STD A$CHST(X)
					;---
	RTS
					;===

.MACRO	.PROB	...A,...B,...C
	.BYTE	...A,...B		;PROBABILITY FACTORS
	.WORD	...C*-1*G$IZE+GUNZ	;HOW MANY GUNS ALLOWED TO SHOOT
	.ENDM

TGPROB:				;GUN SHOOTING PROB, TIMER MASK(0F=1 SECOND)
				;		PROB COMPARE (C0=25%)
	.PROB 0F,080,1		;0
	.PROB 0F,080,1		;1
	.PROB 0F,080,2		;2
	.PROB 0F,040,3		;3
	.PROB 07,080,4		;4
	.PROB 07,020,5		;5
	.PROB 07,020,6		;6
	.PROB 03,080,6		;7
	.PROB 03,060,6		;8
	.PROB 03,040,6		;9
	.PROB 03,030,6		;10
TGPROZ:
				;===


CPUMVL:				;
	LDX S1.PRM
	LDU A$UVP(X)
	LDA A$GLW(X)
	BNE 40$			;B NO NEW VELOCITY IF HIT
	LDB A$CHMV(X)		;MOVE INFO
	STB CP.SHF
				;---
	LDU A$UVP(X)
	LDD #0			;SET VELOCITY TO ZERO
	STD M$VX(U)
	STD M$VY(U)
	STD M$VZ(U)		;NOW LET US SLIP
20$:	C$MD=1			;DOWN
	LSR CP.SHF
	BCC 22$
	JSR SNMVD
22$:	C$MD2=2			;DOWN TWICE
	LSR CP.SHF
	BCC 24$
	JSR SNMVD2
24$:	C$MU=4			;UP
	LSR CP.SHF
	BCC 26$
	JSR SNMVU
26$:	C$MU2=8			;UP TWICE
	LSR CP.SHF
	BCC 28$
	JSR SNMVU2
28$:	C$MF=10			;FORWARD
	LSR CP.SHF
	BCC 30$
	JSR SNMVF
30$:	C$MF2=20		;FORWARD TWICE
	LSR CP.SHF
	BCC 32$
	JSR SNMVF2
32$:
40$:				;---
	JSR DOAMOV		;AN ALIEN MOVE
	RTS
				;---
	C$MF3=C$MF+C$MF2
	C$MU3=C$MU+C$MU2
	C$MD3=C$MD+C$MD2

CPCHKL:
	LDU A$UVP(X)		;ALIEN UNIT VECTORS
	.IRPC .1,<XYZ>		;DO FOR 3 AXIS
	LDD M$T'.1'(U)		;ALIEN LOC
	CMPA #7D		;CHECK FOR DISTANCE AWAY
	BLT .+2+3
	LDD #7CFF		;KEEP POSITIVE DISTANCE IN RANGE
	CMPA #82
	BGT .+2+3
	LDD #8300		;KEEP NEGATIVE DISTANCE IN RANGE
	STD M$T'.1'(U)		;CONVERTED BACK TO ACTUAL LOC
	.ENDR
	RTS
				;---
CPUGON::
	DEC WV.LIV
	IFLE			;NO LIVES LEFT IN CURRENT SET
	CLR WV.LIV		;MR. PERRY NOID SUGGESTS THIS PROCEDURE
	ENDIF
	RTS
				;===

	.PAGG
	.SBTTL	CHOREOGRAPHY ROUTINES
NWCHOR:				;NEW CHOREOG
	LDD #0
	STD A$CHTW(X)		;NO TWIST OR MOVE
	STA A$CHTM(X)		;TIME LEFT PER ROUTINE
	STD A$CHCN(X)		;UNTIL CONTROL MASK
	STD A$CHST(X)		;STATUS FLAGS
CHNXT:
	LDU A$CHPC(X)
	LDA 0(U)
	STA A$CHOP(X)
	BEQ CHCN.D		;DECODE CONTROL IMMEDIATELY
				;---
CHOPDO:				;DO THE OP-CODE
	LDD A$CHST(X)		;CHECK CONTROL FLAGS FIRST
	ANDA A$CHCN(X)
	BNE CHCN.E		;DO CONTROL
	ANDB A$CHCN+1(X)
	BNE CHCN.E		;DO CONTROL
	LDA A$CHOP(X)
	ANDA #7
	LSLA
	LDU #TCHOP
	JMP @A(U)
				;---
CHCN.D:				;DECODE CONTROL
	LDD 1(U)		;U--> CHINST
	STD A$CHCN(X)
	LEAU 3(U)
	STU A$CHPC(X)
	BRA CHNXT
				;---
CHCN.E:	LDU A$CHPC(X)
10$:				;---
	LDA 0(U)		;U--> CHINST
	BEQ CHNXT
	LEAU 3(U)		;CONTROL STATUS CHECK
	STU A$CHPC(X)		;SKIP UNTIL PROPER ROUTINE FOUND
	BRA 10$
				;---
TCHOP:
	.WORD CHIF.D		;0:IF
	.WORD CHGO.D		;1: GOTO
	.WORD CHGS.D		;2: GOSUB
	.WORD CHRT.D		;3: RETURN
	.WORD CHTW.D,CHTW.E	;4,5: TWIRL
	.WORD CHERR, CHERR	;6,7: UNASSIGNED
				;---
CHERR:	SWI			;ERROR
				;---
CHIF.D:				;IF MASK IS TRUE
	LDU A$CHPC(X)
10$:				;---
	LDD 1(U)
	BEQ 50$			;B DEFAULT IF, ALWAYS TRUE
	ANDA A$CHST(X)
	BNE 50$			;B HI MASK IS TRUE
	ANDB A$CHST+1(X)
	BNE 50$			;B LO MASK IS TRUE
20$:				;SKIP TO NEXT IF
	LEAU 3(U)
	LDA 0(U)
	LSLA
	BNE 20$			;NON-ZERO OP==>TRY AGAIN
	BCC 20$			;ALL ZERO==>UNTIL OP
	BRA 10$			;J OP=80==>'IF' FOUND
50$:				;---
	LEAU 3(U)
	STU A$CHPC(X)
	JMP CHNXT
				;---
CHGO.D:				;GOTO
	LDU A$CHPC(X)
	LDU 1(U)		;SET NEW PC
	STU A$CHPC(X)
	JMP CHNXT
				;---
CHGS.D:				;GOSUB
	LDU A$CHPC(X)		;SAVE RETURN ADDRESS
	LEAU 3(U)		;RETURN ADDRESS
	STU A$CHRT(X)		;
	LDU 1-3(U)		;PREVIOUS PARM IS GOSUB ADDRESS
	STU A$CHPC(X)
	JMP CHNXT
				;---
CHRT.D:				;RETURN
	LDU A$CHRT(X)		;RESTORE PC
	STU A$CHPC(X)
	JMP CHNXT
CHTW.D:				;TWIRL, DECODE
	LDU A$CHPC(X)
	LDB 0(U)		;PULL IN TIMER IN QUARTER SECONDS

	LSRB
	STB A$CHTM(X)
	LDD 1(U)		;TWIRL AND MOVE
	STD A$CHTW(X)
	LEAU 3(U)
	STU A$CHPC(X)
	INC A$CHOP(X)		;BUMP TO EXECUTE PHASE
	RTS
				;---
CHTW.E:				;TWIRL, EXECUTE
	DEC A$CHTM(X)		;TRICK OFF TIMER
	LBMI CHNXT		;B IF DONE, GET NEXT OP
	RTS			;ELSE WAIT FOR NEXT FRAME
				;---
	.PAGG
	.SBTTLE	CHOREOG MACROS
				;---
				;UNTIL :=DO UNTIL EVENT OCCURRS
	.MACRO .CUNTIL A1
	.BYTE 0			;OP CODE ALL ZEROS
	.WORD A1		;EVENT MASK
	.ENDM
				;---
				;IF := DO ONLY IF EVENT IS TRUE
	.MACRO .CIF A1
	.BYTE 80		;OP CODE ZERO
	.WORD A1		;EVENT MASK
	.ENDM
				;---
	.MACRO .CGOTO A1	;GOTO := JUMP TO NEW ADDRESS
	.BYTE 1
	.WORD A1
	.ENDM
				;---
				;GOSUB :=SUBROUTINE CALL
	.MACRO .CGOSUB A1
	.BYTE 2			;OPCODE
	.WORD A1		;SUBROUTINE ADDRESS
	.ENDM
				;---
				;RETURN :=END OF SUBROUTINE
	.MACRO .CRETURN
	.BYTE 3			;OP CODE
	.WORD 0			;BEWARE OF UNTIL AND IF CRUISING BY
	.ENDM

	.MACRO .CT A1,A2,A3
	...1=<'A1'>		;QUARTER SECONDS
	.IIF GT,...1-73,...1=73	;7 AND 3/4 SECONDS MAX
	...1=<...1&070*2>+<...1&03*8>
	.BYTE 4+...1
	.BYTE 'A2','A3'		;TWIST, MOVE
	.ENDM
				;---
NWNSHP::
	JSR INOBJ		;INITIALIZE OBJECTS
	LDB SP.WAV		;CURRENT SPACE WAVE
	LSLB
	LDX #TSPWAV		;TABLE OF SPACE WAVE GROUPS
	ABX
	CMPX #ZSPWAV		;PAST END OF TABLE?
	IFHS			;YEP
	LDA SP.WAV
	LSRA
	IFCC			;EVEN ==> ODD SELECTED WAVE
	LDX #ZSPWAV-4		;DARTH COMES SECOND ON SELECTED ODD WAVES
	ELSE
	LDX #ZSPWAV-2		;USE LAST ENTRY IN TABLE, DARTH FIRST WITH MUSIC
	ENDIF
	ENDIF

	LDX 0(X)		;POINTS TO CURRENT SET OF WAVES

	LDB WV.LVL		;INDEX INTO SET OF WAVES
	CMPB 0(X)+		;GET SIZE OF THIS SET
	IFHI			;KEEP IT WITHIN RANGE
	LDB -1(X)
	ENDIF
	LSLB			;INDEX INTO WORD TABLE
	LDD B(X)
	STD WV.LP		;LOOP TABLE POINTER
	CLR WV.LIV		;NO ALIENS CURRENTLY ALIVE
	LDX #ALIEN
20$:
	STX S1.PRM
	CLR A$TYP(X)		;KILL ALL ALIENS FIRST
	LDU WV.LP
	BEQ 90$			;IGNORE ALIEN IF NO CHOREOG SET
	LDA 0(U)
	BEQ 90$			;?CONSTRUCT THIS SHIP?
	INC WV.LIV		;ONE MORE LIFE IN THIS WAVE
	LDD 0(U)
	STD WV.SHP		;SHIP SHAPE AND PARMS
	LDD 2(U)
	STD WV.CHP		;CHOREOGRAPHY
	LDD 4(U)
	STD WV.BGP		;BEGIN LOCATION
	LEAU 6(U)
	STU WV.LP
	JSR NWASHP
90$:				;---NEXT ALIEN
	LDX S1.PRM
	LEAX A$IZE(X)
	CMPX #ALIENZ
	BLO 20$
				;---
	RTS
NWASHP:
	LDA #1
	STA A$TYP(X)		;LIVE ALIEN
	LDU A$UVP(X)
	JSR UNITV
	LDU A$UVP(X)
	LDA #0C0		;FACE ALIEN TOWARDS PLAYER
	STA M$AX(U)
	STA M$BY(U)
	CLRA
	STA A$ROL(X)
	STA A$DMC(X)
	STA A$GLW(X)
	STA A$DIE(X)
	STA A$TRGT(X)
	LDU WV.SHP
	LDA 1(U)		;DRONES DIE ON N HITS
	STA A$HTA(X)
	LDU A$UVP(X)
	LDX WV.BGP		;BEGINNING LOCATION
	LDD 0(X)
	STD M$TX(U)
	LDD 2(X)
	STD M$TY(U)
	LDD 4(X)
	STD M$TZ(U)
	LDX S1.PRM
	LDD WV.CHP
	STD A$CHPC(X)
	JSR NWCHOR
	LDX S1.PRM
	LDB @WV.SHP
	STB A$PIC(X)		;CURRENT SHIP PICTURE
	JSR ADBOBJ
	RTS
				;===
ADASHP::
	LDU WV.LP
	BEQ 20$			;RESTART IF INVALID WITHIN WAVES
	LDA 0(U)
	IFEQ			;?END OF CURRENT LEVEL IN WAVE?
20$:				;---
	INC WV.LVL		;GET NEXT LEVEL WITHIN WAVE
	LDB SP.WAV		;CURRENT SPACE WAVE
	LSLB
	LDX #TSPWAV		;TABLE OF SPACE WAVE GROUPS
	ABX
	CMPX #ZSPWAV		;PAST END OF TABLE?
	IFHS			;YEP
	LDA SP.WAV
	LSRA
	IFCC			;EVEN ==> ODD SELECTED WAVE
	LDX #ZSPWAV-4		;DARTH COMES SECOND ON SELECTED ODD WAVES
	ELSE
	LDX #ZSPWAV-2		;USE LAST ENTRY IN TABLE, DARTH FIRST WITH MUSIC
	ENDIF
	ENDIF

	LDX 0(X)		;POINTS TO CURRENT SET OF WAVES

	LDB WV.LVL		;INDEX INTO SET OF WAVES
	CMPB 0(X)+		;GET SIZE OF THIS SET
	IFHI			;KEEP IT WITHIN RANGE
	LDB -1(X)
	ENDIF
	STB WV.LVL		;KEEP IT CORRECT
	LSLB			;INDEX INTO WORD TABLE
	LDD B(X)
	STD WV.LP		;LOOP TABLE POINTER
	ENDIF
				;---
	LDX #ALIEN
	BEGIN
	STX S1.PRM
	LDA A$TYP(X)
	BEQ 50$			;DO IT IF AN EMPTY SLOT
	LDX S1.PRM
	LEAX A$IZE(X)
	CMPX #ALIENZ
	HSEND
	BRA 90$			;IF NO SLOTS AVAILABLE, EXIT NOW
50$:				;---
	LDU WV.LP
	BEQ 90$			;IGNORE ALIEN IF NO CHOREOG SET
	LDA 0(U)
	BEQ 90$			;?CONSTRUCT THIS SHIP?
	INC WV.LIV		;ONE MORE LIFE IN THIS WAVE
	LDD 0(U)
	STD WV.SHP		;SHIP SHAPE AND PARMS
	LDD 2(U)
	STD WV.CHP		;CHOREOGRAPHY
	LDD 4(U)
	STD WV.BGP		;BEGIN LOCATION
	LEAU 6(U)
	STU WV.LP
				;---
	LDA #1
	STA A$TYP(X)		;LIVE ALIEN
	LDU A$UVP(X)
	JSR UNITV
	LDU A$UVP(X)
	LDA #0C0		;FACE ALIEN TOWARDS PLAYER
	STA M$AX(U)
	STA M$BY(U)
	CLRA
	STA A$ROL(X)
	STA A$DMC(X)
	STA A$GLW(X)
	STA A$DIE(X)
	STA A$TRGT(X)
	LDU WV.SHP
	LDA 1(U)		;DRONES DIE ON N HITS
	STA A$HTA(X)
	LDU A$UVP(X)
	LDX WV.BGP		;BEGINNING LOCATION
	LDD 0(X)
	STD M$TX(U)
	LDD 2(X)
	STD M$TY(U)
	LDD 4(X)
	STD M$TZ(U)
	LDX S1.PRM
	LDD WV.CHP
	STD A$CHPC(X)
	JSR NWCHOR
	LDX S1.PRM
	LDB @WV.SHP
	STB A$PIC(X)		;CURRENT SHIP PICTURE
90$:				;---
	RTS
				;===

	.PAGG
	.SBTTL	SHAPE TABLE

				;---
.MACRO	.WS A1,A2		;SHAPE TABLE
TS.'A1':			;NAME OF SHAPE TABLE
	.GLOBB TD$'A1'
	.BYTE TD$'A1'		;NAME OF SHAPE
	.BYTE 'A2'		;# OF LIVES
	.ENDM
				;---
	.WS TIE,1
	.WS RTH,4
				;===
	.PAGG
	.SBTTL	STARTING LOCATIONS

				;===
				;TBG***
				;BEGINNING LOCATIONS FOR ALIENS
				;X FORWARD, Y?, ZUP
				;ON SHIP SIZE CENTERS
				;0,0,0 IS PLAYER MOVING FORWARD FROM DETH STAR
				;POS X IS CLOSER TO PLAYER
				
	.MACRO .WB .1,.2,.3,.4
TBG'.1':
	.WORD 7C00
	.WORD '.3'*400
	.WORD '.4'*400
	.ENDM
				;FRONT TO BACK, LEFT TO RIGHT, TOP TO BOTTOM
	.WB 1A1,0,0,1
	.WB 1A2,0,-1,0
	.WB 1A3,0,1,0
				;---
	.WB 1B1,0,0,1
	.WB 1B2,0,-1,0
	.WB 1B3,0,1,0
				;---
	.WB 1C1,0,0,1
	.WB 1C2,0,-1,0
	.WB 1C3,0,1,0
				;---
	.WB 1D1,0,-2,0
	.WB 1D2,0,2,0
	.WB 1D3,0,0,2
				;---

				;===

	.PAGG
	.SBTTL	WAVE DATA

.MACRO	SET NAME,.1,.2,.3,.4,.5,.6,.7,.8,.9,.Z
	.IIF NB,.Z,.ERROR   .Z ;TOO MANY ARGUMENTS
SET'NAME':
	.BYTE	<SEZ'NAME'-SET'NAME'-1>/2-1	;HIGHEST ENTRY NUMBER
	.IRP	.A,<.1 .2 .3 .4 .5 .6 .7 .8 .9>
	.WORD	.A
	.ENDR
SEZ'NAME':
	.ENDM

TSPWAV::				;TABLE OF SPACE WAVE SETS
	.WORD	SETA1
	.WORD	SETA2
	.WORD	SETA3
	.WORD	SETA4
	.WORD	SETA5
	.WORD	SETA6
				;LAST ENTRY MUST HAVE DARTH FIRST
				;NEXT TO LAST HAS DARTH SECOND
ZSPWAV::
				;===

	SET A1	TWV1A,TWV2B,TWV2C,TWV2Z
	SET A2	TWV1B,TRTH1D,TWV2D,TWV2C,TWV2Z
	SET A3	TWV1C,TRTH1D,TWV2D,TWV2A,TWV2B,TWV2C,TWV2Z
	SET A4	TRTH1D,TWV2D,TWV2A,TWV2B,TWV2C,TWV2Z
	SET A5	TWV1D,TRTH1D,TWV2C,TWV2D,TWV2B,TWV2Z
	SET A6	TRTH1D,TWV2D,TWV2B,TWV2D,TWV2C,TWV2Z
				;===


				;WAVE DEFN POINTERS. DESCRIBE ALIENS
				;SHAPE, CHOREGRAPHY, BEGIN LOC
	.MACRO .WV A1,A2,A3
	.WORD TS.'A1'		;SHAPE
	.WORD TCH'A2'		;CHOREOGRAPHY
	.WORD TBG'A3'		;BEGIN LOCATION
	.ENDM			;---

	.MACRO .WVZ		;END
	.BYTE 0
	.ENDM			;---

				;===

TWV1A:	.WV TIE,1A1,1A1
	.WV TIE,1A2,1A2
	.WV TIE,1A3,1A3
	.WVZ
				;---
TWV1B:	.WV TIE,1B1,1B1
	.WV TIE,1B2,1B2
	.WV TIE,1B3,1B3
	.WVZ
				;---
TWV1C:	.WV TIE,1C1,1C1
	.WV TIE,1C2,1C2
	.WV TIE,1C3,1C3
	.WVZ
				;---
TWV1D:	.WV TIE,1D1,1D1
	.WV TIE,1D2,1D2
	.WV TIE,1D3,1D3
	.WVZ

TRTH1D: .WV TIE,1D1,1D1
	.WV TIE,1D2,1D2
	.WV RTH,1D3,1D3
	.WVZ

				;===
TWV2A:	.WV TIE,2A1,1A1
	.WV TIE,2A2,1A2
	.WV TIE,2A3,1A3
	.WVZ
				;---
TWV2B:	.WV TIE,2B1,1B1
	.WV TIE,2B2,1B2
	.WV TIE,2B3,1B3
	.WVZ
				;---
TWV2C:	.WV TIE,2C1,1C1
	.WV TIE,2C2,1C2
	.WV TIE,2C3,1C3
	.WVZ
				;---
TWV2D:	.WV TIE,2D1,1D1
	.WV TIE,2D2,1D2
	.WV TIE,2D3,1D3
	.WVZ
				;---
TWV2Z:
	.WV TIE,2A1,1A1
	.WV TIE,2A2,1A2
	.WV TIE,2A3,1A3
	.WV TIE,2D1,1D1
	.WV TIE,2D2,1D2
	.WV TIE,2D3,1D3
				;---
	.WV TIE,2B1,1B1
	.WV TIE,2B2,1B2
	.WV TIE,2B3,1B3
	.WV TIE,2D1,1D1
	.WV TIE,2D2,1D2
	.WV TIE,2D3,1D3
				;---
	.WV TIE,2C1,1C1
	.WV TIE,2C2,1C2
	.WV TIE,2C3,1C3
	.WV TIE,2D1,1D1
	.WV TIE,2D2,1D2
	.WV TIE,2D3,1D3
	.WVZ

				;===

	.PAGG
	.SBTTL	CHOREOGRAPHY TABLES

				;===
TCH2A1:
	.CGOSUB SPLIT
TCH1A1:
	.CT 40,0,C$MF		;TAKES ME HALFWAY TO PLAYER
	.CT 40,0,C$MF2
	.CT 20,C$PU,C$MF	;PREPARE FOR TURNOVER
	.CUNTIL C$AS
	.CT 20,C$T0,0
	.CUNTIL C$PN
	.CT 40,C$RL+C$T0,C$MF
	.CUNTIL C$AS
	.CT 20,C$T0,0
	.CUNTIL 0
	.CGOTO TCH1AZ
				;---
TCH2A2:
	.CGOSUB SPLIT
TCH1A2:

	.CT 40,C$RR,C$MF2	;GO FAST TO OTHER WALL
	.CT 20,C$YR,C$MF
	.CUNTIL C$AS
	.CT 20,C$YR+C$T0,C$MF
	.CUNTIL 0
	.CT 40,C$RR,C$MF
	.CUNTIL C$AS
	.CT 20,C$YR+C$T0,C$MF
	.CUNTIL 0
	.CT 20,C$RR,C$MF2
	.CUNTIL C$AS
	.CT 20,C$YR+C$T0,C$MF
	.CUNTIL 0
	.CGOTO TCH1AZ
				;---
TCH2A3:
	.CGOSUB SPLIT
TCH1A3:
	.CT 40,C$RL,C$MF2	;GO FAST TO OTHER WALL
	.CT 20,C$YL,C$MF
	.CUNTIL C$AS
	.CT 20,C$YL+C$T0,C$MF
	.CUNTIL 0
	.CT 40,C$RL,C$MF
	.CUNTIL C$AS
	.CT 20,C$YL+C$T0,C$MF
	.CUNTIL 0
	.CT 20,C$RL,C$MF2
	.CUNTIL C$AS
	.CT 20,C$YL+C$T0,C$MF
	.CUNTIL 0
	.CGOTO TCH1AZ
				;---

TCH1AZ:				;BE MEAN  TO PLAYER
10$:
	.CUNTIL C$AS+C$AG
	.CT 20,C$RR+C$T0,C$MF2
	.CUNTIL C$AG
	.CT 20,C$RL,C$MF2
	.CGOTO 10$
	.CUNTIL 0
	.CT 10,0,C$MU2
	.CGOTO 10$
				;===
TCH2B1:
	.CGOSUB SPLIT
TCH1B1:
	.CT 20,0,C$MF+C$MU
	.CT 20,0,C$MF+C$MD	;PARTNERS PASS PLAYER
	.CT 20,0,C$MF+C$MU
	.CT 20,0,C$MF+C$MD	;PARTNERS PASS PLAYER

	.CT 20,C$PU,C$MF	;PREPARE FOR TURNOVER

	.CUNTIL C$AS
	.CT 20,C$T0,0
	.CUNTIL 0

	.CT 20,0,C$MF+C$MU	;GOTO EDGE
	.CT 20,0,C$MF+C$MD

	.CT 40,C$T0,C$MF+C$MU
	.CT 20,0,C$MF+C$MU	
	.CT 20,0,C$MF+C$MD

	.CUNTIL C$AS
	.CT 20,C$T0,C$MU
	.CUNTIL 0

	.CGOTO TCH1BZ
				;---
TCH2B2:
	.CGOSUB SPLIT
TCH1B2:

	.CT 10,0,C$MF+C$MU2	;GOTO OTHER WALL
	.CT 10,0,C$MF+C$MD2
	.CT 10,0,C$MF2+C$MU2
	.CT 10,0,C$MF2+C$MD2

	.CUNTIL C$AS
	.CT 20,C$T0,C$MF+C$MD
	.CUNTIL 0

	.CUNTIL C$AS
	.CT 20,C$T0,C$MF+C$MU
	.CUNTIL 0
	.CGOTO TCH1BZ
				;---
TCH2B3:
	.CGOSUB SPLIT
TCH1B3:

	.CT 10,0,C$MF+C$MU2	;GOTO OTHER WALL
	.CT 10,0,C$MF+C$MD2
	.CT 10,0,C$MF2+C$MU2
	.CT 10,0,C$MF2+C$MD2

	.CUNTIL C$AS
	.CT 20,C$T0,C$MF+C$MD
	.CUNTIL 0
	.CGOTO TCH1BZ
				;---

TCH1BZ:				;BE MEAN  TO PLAYER
10$:
	.CUNTIL C$AS+C$AG
	.CT 20,C$RR+C$T0,C$MF2
	.CUNTIL C$AG
	.CT 20,C$RR,C$MF2
	.CGOTO 10$
	.CUNTIL 0
	.CT 10,0,C$MU2

	.CUNTIL C$PN
	.CT 80,C$RR+C$T0,C$MF
	.CUNTIL 0

	.CT 20,C$RR+C$T0,C$MU2
	.CT 20,C$RL+C$T0,C$MD2
	.CT 20,C$RL+C$T0,C$MU2
	.CT 20,C$RR+C$T0,C$MD2

	.CGOTO 10$
				;===
TCH2C1:
	.CGOSUB SPLIT
TCH1C1:

	.CT 10,0,C$MF+C$MU
	.CT 10,0,C$MF+C$MD	;PARTNERS PASS PLAYER

	.CT 10,0,C$MF+C$MU	
	.CT 10,0,C$MF+C$MD

	.CT 20,C$PU,C$MF	;PREPARE FOR TURNOVER

	.CUNTIL C$AS
	.CT 20,C$T0,0
	.CUNTIL 0

	.CUNTIL C$AS
	.CT 20,C$T0,C$MU
	.CUNTIL 0

				;---
TCH2C2:
	.CGOSUB SPLIT
TCH1C2:

	.CT 20,C$RR+C$T0,C$MF+C$MU	;GO FAST TO OTHER WALL
	.CT 20,C$RR+C$T0,C$MF2+C$MU	;GO FAST TO OTHER WALL
	.CT 20,C$YR,C$MF+C$MU
	.CUNTIL C$AS
	.CT 20,C$YR+C$T0,C$MF+C$MU
	.CUNTIL 0
	.CGOTO TCH1CZ
				;---
TCH2C3:
	.CGOSUB SPLIT
TCH1C3:

	.CT 20,C$RL+C$T0,C$MF+C$MU	;GO FAST TO OTHER WALL
	.CT 20,C$RL+C$T0,C$MF2+C$MU	;GO FAST TO OTHER WALL
	.CT 20,C$YL,C$MF+C$MU

	.CUNTIL C$AS
	.CT 20,C$YL+C$T0,C$MF+C$MU
	.CUNTIL 0
	.CGOTO TCH1CZ
				;---

TCH1CZ:				;BE MEAN  TO PLAYER
10$:
	.CUNTIL C$AS+C$AG
	.CT 20,C$RR+C$T0,C$MF2+C$MU
	.CUNTIL C$AG
	.CT 20,C$RL,C$MF2
	.CGOTO 10$
	.CUNTIL 0
	.CT 10,0,C$MD2
	.CGOTO 10$
				;===
TCH2D1:
	.CGOSUB SPLIT
TCH1D1:
;	.CT 10,C$RL+C$T0,C$MD2+C$MD
;	.CUNTIL C$AS
;	.CT 20,C$RL+C$T0,C$MD
;	.CUNTIL 0

	.CUNTIL C$PN
	.CT 80,C$RR+C$T0,C$MF+C$MU2
	.CUNTIL 0

	.CT 80,C$RR+C$T0,C$MU2
	.CT 80,C$RR+C$T0,C$MU2
	.CT 80,C$RR+C$T0,C$MU2
	.CT 80,C$RR+C$T0,C$MU2
	.CUNTIL C$AS
	.CT 20,C$RL+C$T0,C$MU2
	.CUNTIL 0
	.CGOTO TCH1DZ
				;---
TCH2D2:
	.CGOSUB SPLIT
TCH1D2:

	.CUNTIL C$PN
	.CT 80,C$RR+C$T0,C$MF+C$MU2
	.CUNTIL 0

	.CT 40,C$RL+C$T0,C$MU2
	.CIF C$R1
	.CT 20,C$RR+C$T0,C$MU2
	.CIF 0
	.CT 40,C$RL+C$T0,C$MU2
	.CIF C$R1
	.CT 20,C$RL+C$T0,C$MU2
	.CIF 0
	.CT 40,C$RL+C$T0,C$MU2
	.CUNTIL C$AS
	.CT 20,C$RR+C$T0,C$MU2
	.CUNTIL 0
	.CGOTO TCH1DZ
				;---

TCH2D3:
	.CGOSUB SPLIT
TCH1D3:

	.CUNTIL C$PN
	.CT 02,C$T0,C$MF+C$MU2
	.CT 02,C$T0,C$MF+C$MD2
	.CT 02,C$T0,C$MF+C$MU2
	.CT 02,C$T0,C$MF+C$MD2
	.CT 02,C$T0,C$MF+C$MU2
	.CT 02,C$T0,C$MF+C$MD2
	.CT 02,C$T0,C$MF+C$MU2
	.CT 02,C$T0,C$MF+C$MD2
	.CUNTIL 0

	.CUNTIL C$AH
	.CT 20,C$T0+C$YL+C$YR,C$MU2
	.CT 20,C$T0+C$PU+C$PD,C$MU2
	.CT 20,C$T0+C$YL+C$YR,C$MD2
	.CT 20,C$T0+C$PU+C$PD,C$MD2
	.CT 20,C$T0+C$YL+C$YR,C$MU2
	.CT 20,C$T0+C$PU+C$PD,C$MU2
	.CT 20,C$T0+C$YL+C$YR,C$MD2
	.CT 20,C$T0+C$PU+C$PD,C$MD2

	.CUNTIL C$AS
	.CT 20,C$RL+C$T0,C$MF
	.CUNTIL 0
	.CGOTO TCH1DZ
				;---
SPLIT:
	.CT 01,C$T0,C$MF	;ALLOW RANDOM TO GET SET
	.CIF C$R1
	.CGOTO 20$
	.CIF C$R2
	.CT 20,C$T0,C$MF3+C$MU3
	.CGOTO 40$
	.CIF 0
	.CT 20,C$T0,C$MF3+C$MD3
	.CGOTO 40$
20$:				;
	.CIF C$R2
	.CT 20,C$T0+C$RR,C$MF3+C$MU3
	.CGOTO 40$
	.CIF 0
	.CT 20,C$T0+C$RR,C$MF3+C$MD3
	.CGOTO 40$
40$:
	.CIF C$R2
	.CT 20,C$T9+C$RL,C$MF2
	.CIF 0
	.CRETURN

TCH1DZ:				;BE MEAN  TO PLAYER
10$:
	.CT 10,0,C$MU2
	.CUNTIL C$PN
	.CT 40,C$RL+C$T0,C$MF2
	.CUNTIL C$AS+C$AG
	.CT 20,C$RR+C$T0,C$MF2
	.CUNTIL C$AG
	.CT 20,C$RL,C$MF
	.CUNTIL 0
;;;	.CGOTO 10$
	.CUNTIL C$PN+C$PS
	.CT 40,C$RL+C$T0,C$MF2
	.CUNTIL C$AS+C$AG+C$PS
	.CT 20,C$RR+C$T0,C$MF2
	.CUNTIL C$AG+C$PS
	.CT 20,C$RL,C$MF
	.CUNTIL 0
	.CIF C$PS
	.CGOTO 20$
	.CIF 0
	.CGOTO 10$
20$:
	.CIF C$R1
	.CT 20,C$RR,C$MU2
	.CGOTO 10$
	.CIF 0
	.CT 20,C$RL,C$MF2
	.CGOTO 10$	

				;===

	HLL69F
	.END
                         