	.TITLE	TCHSCR       TOMCAT HI SCORE
	.INCLUDE WSCOMN ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
					;===
;INTERNAL ROUTINES
	.GLOBL	VWHSCR,UPDATE,PUTHI,GETINT,SETINT
;INTERNAL LOCATIONS
	.GLOBL	INTINT,INTSCR

;EXTERNAL ROUTINES
	.GLOBL	AUDPH,AUDSS,AUDXL
	.GLOBL	MESSON,VW8DIG,VWBYTE,EETMP3,SUMMIT
	.GLOBL	VWCURC

;EXTERNAL LOCATIONS
	.GLOBL	INITLS,HSCORS,SAVINT,SAVSCR
	.GLOBL	SI.CX,SI.CY
	.GLOBL	VGMSGA,VGSCAL,VGCNTR,VGCOLR,VJPERD,VGOFFY

	.GLOBL	FRAME
	.GLOBB	BT.SUP
	.GLOBB	FIREBT,GN.SWE,THMBT
	.GLOBB	MS.RF1,MS.RF2
	.GLOBL	NHSCRS
	.GLOBL	HS.DIR
	.GLOBL	PH.COL
	.GLOBB	S.SC87,S.SC43
	.GLOBL	HSCNT,UPDFLG,UPDINT,INITL,HSYPOS
	.GLOBB	VGCWHT,VGCRED,VGCYLW
					;===	
	.CSECT TCHSCR
	.PAGE
	.SBTTL	VWHSCR
	.REPT 0
**********************************
*
*	VWHSCR
*
**********************************

DESCRIPTION:	DISPLAY THE HIGH SCORE TABLE

REGISTERS:	
	IN:	Y POINTER FOR VGRAM
	OUT:	A,B,X,U   ALTERED
		Y         UPDATED

STACK USE:	2 BYTES FOR SUBROUTINE CALL
		2 BYTES FOR RETURN

RAM USE:	HSYPOS,VGRAM

	.ENDR

	TEMP	COL,2

VWHSCR:
	TST UPDFLG		;ENTERING INITIALS?
	IFPL			;YES
	LDA #MS.RF1		;"REBEL FORCE" MIDDLE OF SCREEN
	JSR MESSON
	LDD #VGSCAL
	STD (Y)++
	LDD #THSY1		;TABLE OF HI SCORE Y POSITIONS FOR HALF SCREEN
	ELSE
	LDA #MS.RF2		;"REBEL FORCE" TOP OF SCREEN
	JSR MESSON
	LDD #VGSCAL-100+40	;MAKE LIST LARGER,BUT NOT TOO LARGE
	STD (Y)++
	LDD #THSY2		;TABLE OF HI SCORE Y POSITIONS FOR WHOLE SCREEN
	ENDIF
	STD HSYPOS

	LDA #0			;START AT THE FIRST ONE
	STA HSCNT

	BEGIN

	LDU HSYPOS		;DO THE INITIALS FIRST
	LDD (U)			;GET Y POS
	STD (Y)++
	LDD #1FFF&-128.		;X POS
	STD (Y)++

	LDB HSCNT
	ASLB			;*3
	ADDB HSCNT
	LDX #INITLS
	ABX			;POINT TO THIS SET OF INITIALS
	
	CMPX UPDFLG		;PLAYER'S INITIALS? ( ONLY FOR ENTERING INITIALS )
	IFEQ			;YES
	LDD #VGCOLR+<VGCWHT*100>;MAKE THEM STAND OUT
	ELSE
	LDD PH.COL		;COLOR DEPENDING ON THE PHASE
	ENDIF
	STD (Y)++
	STD TMPCOL		;USED FOR FLASHING INITIAL IN ENTERING STATE
				;
	LDU #VGMSGA+14		;POINTS TO LETTER "A"
				;---
				;1ST INITIAL
	TST UPDFLG		;ENTERING INITIALS?
	IFPL			;YES, HAVE TO FLASH CURRENT INITIAL
	LDA UPDINT
	CMPA #0			;THIS INITIAL??
	IFEQ			;YES, THEN MAKE IT FLASH
	LDA FRAME+1		;LSD OF FRAME
	ANDA #01		;ON OR OFF
	IFEQ			;OFF THIS FRAME
	LDD PH.COL		;USE NORMAL COLOR FOR OFF
	ELSE			;ON AS PER THIS LINES COLOR
	LDD TMPCOL		;WILL BE WHITE IF CURRENT INITIAL BEING ENTERED
	ENDIF
	ELSE			;NOT THIS INITIAL, MAKE SURE IT IS THIS LINES COLOR
	LDD TMPCOL
	ENDIF
	STD (Y)++
	ENDIF
	LDA (X)+
	IFEQ			;BLANK
	TST UPDFLG
	IFPL			;ENTERING INITIALS, SHOW UNDERLINE INSTEAD OF BLANK
	LDD VGMSGA+82.
	ELSE			;NOT ENTERING INITIALS, SHOW A BLANK
	LDD VGMSGA
	ENDIF
	ELSE			;THEN A-Z
	ASLA			;WORD TABLE
	LDD A(U)		;JSRL TO LETTER
	ENDIF
	STD (Y)++
				;2ND INITIAL
	TST UPDFLG		;ENTERING INITIALS?
	IFPL			;YES, HAVE TO FLASH CURRENT INITIAL
	LDA UPDINT
	CMPA #01		;THIS INITIAL??
	IFEQ			;YES, THEN MAKE IT FLASH
	LDA FRAME+1		;LSD OF FRAME
	ANDA #01		;ON OR OFF
	IFEQ			;OFF THIS FRAME
	LDD PH.COL		;USE NORMAL COLOR FOR OFF
	ELSE			;ON AS PER THIS LINES COLOR
	LDD TMPCOL		;WILL BE WHITE IF CURRENT INITIAL BEING ENTERED
	ENDIF
	ELSE			;NOT THIS INITIAL, MAKE SURE IT IS THIS LINES COLOR
	LDD TMPCOL
	ENDIF
	STD (Y)++
	ENDIF
	LDA (X)+
	IFEQ			;BLANK
	TST UPDFLG
	IFPL			;ENTERING INITIALS, SHOW UNDERLINE INSTEAD OF BLANK
	LDD VGMSGA+82.
	ELSE			;NOT ENTERING INITIALS, SHOW A BLANK
	LDD VGMSGA
	ENDIF
	ELSE			;THEN A-Z
	ASLA			;WORD TABLE
	LDD A(U)		;JSRL TO LETTER
	ENDIF
	STD (Y)++
				;---
				;3RD INITIAL
	TST UPDFLG		;ENTERING INITIALS?
	IFPL			;YES, HAVE TO FLASH CURRENT INITIAL
	LDA UPDINT
	CMPA #02		;THIS INITIAL??
	IFEQ			;YES, THEN MAKE IT FLASH
	LDA FRAME+1		;LSD OF FRAME
	ANDA #01		;ON OR OFF
	IFEQ			;OFF THIS FRAME
	LDD PH.COL		;USE NORMAL COLOR FOR OFF
	ELSE			;ON AS PER THIS LINES COLOR
	LDD TMPCOL		;WILL BE WHITE IF CURRENT INITIAL BEING ENTERED
	ENDIF
	ELSE			;NOT THIS INITIAL, MAKE SURE IT IS THIS LINES COLOR
	LDD TMPCOL
	ENDIF
	STD (Y)++
	ENDIF
	LDA (X)+
	IFEQ			;BLANK
	TST UPDFLG
	IFPL			;ENTERING INITIALS, SHOW UNDERLINE INSTEAD OF BLANK
	LDD VGMSGA+82.
	ELSE			;NOT ENTERING INITIALS, SHOW A BLANK
	LDD VGMSGA
	ENDIF
	ELSE			;THEN A-Z
	ASLA			;WORD TABLE
	LDD A(U)		;JSRL TO LETTER
	ENDIF
	STD (Y)++
				;===
	LDD TMPCOL		;RESTORE COLOR TO THIS LINE'S COLOR
	STD (Y)++
	LDD #VGCNTR
	STD (Y)++
				;---
				;NOW THE NUMBER
	LDU HSYPOS
	LDD (U)			;Y POS
	STD (Y)++
	LDD #1FFF&-0200.	;X POS
	STD (Y)++

	LDA HSCNT
	INCA
	CMPA #0A		;MAKE IT 10
	IFHS
	LDA #10
	ENDIF
	LDB #1			;SUPPRESS THIS MANY ZEROS
	STB BT.SUP
	JSR VWBYTE		;THE NUMBER
	LDD #VJPERD		;PERIOD
	STD (Y)++
	LDD #VGCNTR
	STD (Y)++
				;===
				;NOW FOR THE SCORE
	LDB HSCNT
	ASLB
	ASLB
	LDX #HSCORS
	ABX			;POINT AT APPROPRIATE HIGH SCORE

	LDU HSYPOS
	LDD (U)++		;Y POS
	STD (Y)++
	LDD #1FFF&-0016.	;X POS
	STD (Y)++
	STU HSYPOS
	LDB #6			;SUPPRESS THIS MANY LEADING ZEROS
	STB BT.SUP
				;---
				;X-->8 BCD FIELD
	JSR VW8DIG		;VIEW 8 DIGITS WITH COMMAS
	LEAX 4(X)		;BUMP X BY 8 BCD
				;
	LDD #VGCNTR
	STD (Y)++
	INC HSCNT
	LDA HSCNT
	CMPA #0A		;DONE?
	HSEND
				;---
	LDD #VGSCAL		;RESTORE SCALE TO NORMAL
	STD (Y)++
				;===
	LDD UPDFLG		;ENTERING INITIALS?
	IFMI			;NOPE, THEN LEAVE
	RTS
	ENDIF			;ELSE THEN SHOW ALPHABET
	LDD #VGCOLR+<VGCRED*100>
	STD (Y)++
	LDX #TINTXY+4		;TABLE OF XY POSITIONS FOR ALPHABET
	LDU #VGMSGA+22.		;START WITH "A"
	BEGIN
	LDD 2(X)		;Y POS
	ANDA #1F
	STD (Y)++
	LDD 0(X)		;X POS
	ANDA #1F
	STD (Y)++
	LDD (U)++		;JSRL TO LETTER
	STD (Y)++
	LDD #VGCNTR
	STD (Y)++
	LEAX 4(X)
	CMPX #TINTXY+<27.*4>	;STOP AFTER "Z"
	HSEND
				;===
				;THE UNDERLINE
	LDD TINTXY+2		;Y POS
	ANDA #1F
	STD (Y)++
	LDD TINTXY+0		;X POS
	ANDA #1F
	STD (Y)++
	LDD VGMSGA+82.		;"_"  OR UNDERLINE
	STD (Y)++
	LDD #VGSCAL		;RESTORE NORMAL SCALE
	STD (Y)++
	LDD #VGCNTR
	STD (Y)++
				;---
				;NEXT COMES "RUB"
	LDB INITL
	CMPB #27.		;"RUB"???
	IFEQ			;YES, THEN HIGHLIGHT IT
	LDD #VGCOLR+<VGCWHT*100>-30
	ELSE			;NORMAL COLOR
	LDD #VGCOLR+<VGCRED*100>-30
	ENDIF
	STD (Y)++
	LDD 2(X)
	ANDA #1F
	STD (Y)++
	LDD 0(X)
	SUBD #0008.
	ANDA #1F
	STD (Y)++
	LDD #VGSCAL-40		;MAKE LETTERS SMALLER
	STD (Y)++
	LDD VGMSGA+56.		;"R"
	STD (Y)++
	LDD VGMSGA+62.		;"U"
	STD (Y)++
	LDD VGMSGA+24.		;"B"
	STD (Y)++
	LDD #VGSCAL		;RESTORE NORMAL SCALE
	STD (Y)++
	LDD #VGCNTR
	STD (Y)++
				;NOW THE WORD "END"
	LDB INITL
	CMPB #28.		;"END"???
	IFEQ			;YES, THEN HIGHLIGHT IT
	LDD #VGCOLR+<VGCWHT*100>-30
	ELSE			;NORMAL COLOR
	LDD #VGCOLR+<VGCRED*100>-30
	ENDIF
	STD (Y)++
	LDD 6(X)
	ANDA #1F
	STD (Y)++
	LDD 4(X)
	SUBD #0008.
	ANDA #1F
	STD (Y)++
	LDD #VGSCAL-40		;MAKE LETTERS SMALLER
	STD (Y)++
	LDD VGMSGA+30.		;"E"
	STD (Y)++
	LDD VGMSGA+48.		;"N"
	STD (Y)++
	LDD VGMSGA+28.		;"D"
	STD (Y)++
	LDD #VGSCAL		;RESTORE NORMAL SCALE
	STD (Y)++
	LDD #VGCNTR
	STD (Y)++
				;===
				;HILITE SELECTED LETTER
	LDD #VGCOLR+<VGCWHT*100>
	STD (Y)++
	LDB INITL		;CURRENT LETTER
	CMPB #27.		;NORMAL ALPHAS
	IFLO			;YES, THEN HIGHLIGHT  ( END, RUB DONE ELSEWHERE )
	ASLB
	ASLB
	LDX #TINTXY
	ABX			;POINTS TO POSITION
	LDD 2(X)		;Y POS
	ANDA #1F
	STD (Y)++
	LDD 0(X)		;X POS
	ANDA #1F
	STD (Y)++
	LDB INITL
	IFEQ			;BLANK?? USE UNDERLINE INSTEAD
	LDD VGMSGA+82.
	ELSE
	ASLB
	LDX #VGMSGA+20.		;"A"
	LDD B(X)
	ENDIF
	STD (Y)++
	LDD #VGCNTR
	STD (Y)++
	ENDIF
				;===
	LDD #VGCOLR+<VGCYLW*100>;YELLOW FOR THE SITE
	STD (Y)++
	JSR VWCURC		;DISPLAY THE CURSOR
				;===
	RTS

.MACRO	.POS	.A,.B,.C,.D
	.IRP	X,<.A .B .C .D>
	.IF	NB,X
	.WORD	X&1FFF
	.ENDM
	.ENDM

THSY1:				;LOW ON SCREEN POSITIONS
	.POS	-72.,-108.,-142.,-190.
	.POS	-226.,-260.,-296.,-330.
	.POS	-366.,-402.

THSY2:				;WHOLE SCREEN
	.POS	140.,100.,60.,20.
	.POS	-20.,-60.,-100.,-140.
	.POS	-180.,-220.

	.PAGE
	.SBTTL	UPDATE    CHECK FOR HIGH SCORE
	.REPT 0
**********************************
*
*	UPDATE
*
**********************************

DESCRIPTION:	CHECK FOR HIGH SCORE. SET UPDFLG TO INDEX OR -1 IF NOT.

REGISTERS:	
	IN:	SCORE IN S.SC87,S.SC65,S.SC43,S.SC21
		HIGH SCORES IN TABLE AT HSCORS
	OUT:	UPDFLG SET TO POINT AT ENTRY IN HSCORS

STACK USE:	2 BYTES FOR SUBROUTINE CALL
		2 BYTES FOR RETURN

RAM USE:	HSCORS,INITLS,UPDFLG,UPDINT,INITL

	.ENDR

UPDATE:
	LDX #HSCORS
	BEGIN			;CHECK FOR HIGH SCORE
	LDD S.SC87		;4 MSDs
	SUBD 0(X)
	BHI UPDAT2		;MSD'S TELL US IT IS A HIGH SCORE
				;ELSE CHECK FURTHER
	IFEQ			;MSDs ARE EQUAL---STILL HAS A CHANCE
	LDD S.SC43		;4 LSDs
	SUBD 2(X)
	BHS UPDAT2		;THIS IS A HIGH SCORE
	ENDIF
	LEAX 4(X)		;NEXT HI SCORE
	CMPX #HSCORS+<4*NHSCRS>
	HSEND
	RTS


UPDAT2:	JSR PUTHI		;MAKE ROOM
	LDA #0			;WORK ON FIRST INITIAL
	STA UPDINT
	LDD #0000		;BLANK
	STD INITL		;CURRENT VALUE OF INITIAL BEING WORKED ON
	LDX #HSCORS+<4*NHSCRS>	;LEAVE
	RTS

	.PAGE
	.SBTTL	PUTHI
	.REPT 0
**********************************
*
*	PUTHI
*
**********************************

DESCRIPTION:	MAKE ROOM IN HIGH SCORE TABLES FOR NEW HI SCORE.

REGISTERS:	
	IN:	X=INDEX FOR NEW HI
	OUT:	

STACK USE:	2 BYTES FOR RETURN

RAM USE:	UPDFLG,HSCORS,INITLS

	.ENDR

PUTHI:
	STX UPDFLG			;HERE'S WHERE TO STOP
	LDU #INITLS+<3*NHSCRS>-3	;END OF INITIALS
	LDX #HSCORS+<4*NHSCRS>-4	;END OF HIGH SCORE TABLE
	CMPX UPDFLG		;REPLACING LAST ENTRY??
	IFNE			;NO, OK SHIFT TABLE APPROPRIATELY
	BEGIN			;MOVE DISPLACED SCORES AND INITIALS
	LDD -4(X)		;MOVE 4 BYTES OF SCORE DOWN
	STD (X)
	LDD -2(X)
	STD 2(X)
	LDD -3(U)		;MOVE 3 BYTES OF INITIALS
	STD (U)
	LDA -1(U)
	STA 2(U)
	LEAU -3(U)
	LEAX -4(X)
	CMPX UPDFLG
	LSEND
	ENDIF
	STU UPDFLG		;U POINTS TO THE INITIALS

	LDA #00			;SETUP 1ST INITIAL AS A BLANK
	STA (U)
	LDD #0			;BLANKS FOR 2ND, AND 3RD
	STD 1(U)
	LDD S.SC87		;MOVE PLAYER'S SCORE INTO TABLE
	STD (X)
	LDD S.SC43
	STD 2(X)

	RTS
	.PAGE
	.SBTTL	GETINT
	.REPT 0
**********************************
*
*	GETINT
*
**********************************

DESCRIPTION:	GET PLAYER'S INITIALS FOR HI SCORE

REGISTERS:	
	IN:	UPDFLG HAS INDEX INTO TABLE
	OUT:	

STACK USE:	2 BYTES FOR SUBROUTINE CALL

RAM USE:	UPDFLG,INITL,UPDINT,INITLS
		TEMPS 2

	.ENDR
	TEMP	ABS,2

GETINT:
	LDX UPDFLG		;INDEX INTO TABLE
	LDB UPDINT		;WHICH INITIAL ARE WE GETTING
	ABX
	TFR X,U			;GET IT OUT OF THE WAY
	LDA UPDINT
	CMPA #03		;DONE WITH APLHA'S ??
	IFHS			;YES, THEN ONLY CHECK FOR RUB OR END
	LDX #TINTXY+<4*27.>
	ELSE			;CHECK FOR ALL CHARACTERS
	LDX #TINTXY		;TABLE OF POSITIONS FOR INITIALS ( CENTER OF LETTER )
	ENDIF
	BEGIN
	LDD SI.CX		;CHECK X POS OF CURSOR
	SUBD #0008.
	SUBD (X)
	ABSD
	STD TMPABS
	CMPD #0024.
	IFLO			;WITHIN X LIMIT
	LDD SI.CY		;CHECK Y POS
	ADDD #VGOFFY-0012.	;ADD IN SCREEN OFFSET
	SUBD 2(X)
	ABSD
	CMPD #0024.
	IFLO			;ALSO WITHIN Y LIMIT
	ADDD TMPABS		;OCTAGON CHECK
	CMPD #0032.
	IFLO			;HIT
	TFR X,D			;MAKE INDEXED NUMBER USEFUL
	SUBD #TINTXY
	LSRB			;/4
	LSRB
	STB INITL		;CURRENT VALUE OF INITIAL
	ENDIF
	ENDIF
	ENDIF
	LEAX 4(X)		;NEXT TABLE ENTRY
	CMPX #TINTZ		;DONE?
	HSEND
 				;---
	LDA INITL		;PUT IT IN TABLE
	CMPA #27.		;NORMAL ALPHA?
	IFLO			;YES, THEN INSERT IT INTO TABLE
	STA (U)
	ENDIF

	LDA GN.SWE		;FALLING EDGE OF FIRE BUTTON ( SEE IFRAME IN MAIN )
	ANDA #FIREBT!THMBT
	IFNE			;TRANSITION FROM OFF TO ON
	LDA INITL
	CMPA #27.		;"RUB"?
	IFEQ			;BACK UP ONE INITIAL
	LDA UPDINT
	CMPA #02		;ON AN INITIAL?
	IFLS			;YES, RUB IT OUT
	LDA #00			;MAKE IT A BLANK  ( UNDERLINE IN THIS MODE )
	STA 0(U)
	ENDIF
	LDA UPDINT		;MOVE POINTER BACK ONE
	IFNE			;DON'T WRAP
	DEC UPDINT
	LDA #00			;BLANK FOR THE INITIAL WE JUST MOVED BACK TO
	STA -1(U)
	ENDIF
	JSR AUDSS		;SHOOTING ENEMY SHOT SOUND, RUBBING IT OUT
	ELSE			;NOT "RUB"
	CMPA #28.		;"END"?
	IFEQ			;ALL DONE, LEAVE
	LDD #0FFFF		;NO MORE HI SCORE
	STD UPDFLG
	JSR AUDPH		;PORTHOLE SHOT WHEN ENDING INITIALS
	ELSE			;NORMAL ALPHA CHARACTER
				;---
	INC UPDINT		;NEXT INITIAL
				;---
	LDA UPDINT
	CMPA #03		;ALL INITIALS SELECTED?
	IFHS			;YES
	LDA #28.		;INITL TO "END"
	STA INITL
	ENDIF
	JSR AUDXL		;LAZAR SOUND WHEN SHOOTING INITIALS
	ENDIF
				;---
	ENDIF
	ENDIF
	RTS
				;---

TINTXY:				;TABLE OF XY POSITIONS FOR INITIALS
	.WORD	284.,-188.	;UNDERLINE
	.WORD	-292.,-092.	;A
	.WORD	-292.,-140.	;B
	.WORD	-292.,-188.	;C
	.WORD	-292.,-236.	;D
	.WORD	-292.,-284.	;E
	.WORD	-292.,-332.	;F
	.WORD	-292.,-380.	;G
	.WORD	-292.,-428.	;H
	.WORD	-292.,-476.	;I
	.WORD	-244.,-476.	;J
	.WORD	-196.,-476.	;K
	.WORD	-148.,-476.	;L
	.WORD	-100.,-476.	;M
	.WORD	-052.,-476.	;N
	.WORD	-004.,-476.	;O
	.WORD	044.,-476.	;P
	.WORD	092.,-476.	;Q
	.WORD	140.,-476.	;R
	.WORD	188.,-476.	;S
	.WORD	236.,-476.	;T
	.WORD	284.,-476.	;U
	.WORD	284.,-428.	;V
	.WORD	284.,-380.	;W
	.WORD	284.,-332.	;X
	.WORD	284.,-284.	;Y
	.WORD	284.,-236.	;Z
	.WORD	284.,-140.	;RUB
	.WORD	284.,-092.	;END
TINTZ:				;END OF TABLE
	.PAGE
	.SBTTL	SETINT
	.REPT 0
**********************************
*
*	SETINT
*
**********************************

DESCRIPTION:	PUT OUR INITIALS IN FROM RESET

REGISTERS:	
	IN:	
	OUT:	A,B,X,U   ALTERED

STACK USE:	

RAM USE:	HSCORS,INITLS

	.ENDR
	
SETINT:
	JSR DOINTS		;COPY DEFAULTS TO HIGH SCORE TABLE
	LDA #01			;CHECK EEROM HIGH SCORE TABLE
	JSR SUMMIT		;RETURNS EQ IF CHECSUM OK
	IFEQ			;GOOD, USE EEROM FOR THE TOP 3 SCORES
	LDU #INITLS		;DO INITIALS FIRST
	LDX #SAVINT
	LDA #08
	JSR EETMP3
	LDU #HSCORS		;NOW DO THE SCORES
	LDX #SAVSCR
	LDA #11.
	JSR EETMP3
	ENDIF
CHKHIS::			;MAKE SURE EACH ENTRY IS IN VALID RANGE
	LDX #INITLS		;INITIALS CAN RANGE FROM 0 TO 26.
	BEGIN
	LDA (X)+
	CMPA #27.		;BLANK TO Z
	BHS DOINTS		;ERROR SOMEWHERE, PUT IN DEFAULTS ( SUPPOSED TO BE OK )
	CMPX #INITLS+30.
	HSEND
				;
	LDX #HSCORS		;MAKE SURE EACH NUMBER IS DECIMAL ( BCD )
	BEGIN
	LDA (X)+
	CMPA #0A0		;HIGH NIBBLE <= 9 ?
	BHS DOINTS		;NO, ERROR -- PUT IN DEFAULTS
	ANDA #0F
	CMPA #0A		;LO NIBBLE <= 9 ?
	BHS DOINTS		;NOPE, ERROR -- USE DEFAULTS
	CMPX #HSCORS+40.
	HSEND
	RTS
				;===

DOINTS:
	LDX #INITLS
	LDU #INTINT		;INITIAL INITIALS
	BEGIN
	LDD (U)++
	STD (X)++
	CMPX #INITLS+30.
	HSEND
	LDX #HSCORS
	LDU #INTSCR		;INITIAL HIGH SCORES
	BEGIN
	LDD (U)++
	STD (X)++
	CMPX #HSCORS+40.
	HSEND
	RTS

INTINT:	.BYTE 0F,02,09		;OBI
	.BYTE 17,01,0E		;WAN
	.BYTE 08,01,0E		;HAN
	.BYTE 07,0A,12		;GJR
	.BYTE 0D,0C,08		;MLH
	.BYTE 0A,05,04		;JED
	.BYTE 0E,0C,01		;NLA
	.BYTE 05,0A,04		;EJD
	.BYTE 05,01,12		;EAR
	.BYTE 12,0C,0D		;RLM

INTSCR:	.WORD 0128,5353
	.WORD 0111,0936
	.WORD 0102,4650
	.WORD 0087,2551
	.WORD 0081,3553
	.WORD 0070,4899
	.WORD 0051,8000
	.WORD 0049,2159
	.WORD 0038,4766
	.WORD 0038,0655


	HLL69F
	.END	
                                                                                                                                                                                                                                                                                                                                                                                                                   