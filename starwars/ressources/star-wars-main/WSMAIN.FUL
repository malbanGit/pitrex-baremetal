	.TITLE	WSMAIN GAME PLAY
	.INCLUDE	WSCOMN	;<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	.MACRO .PAGG	;GLOBAL PAGE NUMBERS
	.PAGEG M	;MAINLINE
	.ENDM

	.100==	.100
	.400==	.400
	.700==	.700		;PUTS RAM USAGE ONTO LINK MAP
	.ASECT
	.PAGG
	.SBTTL MAINLINE
	.=PROG
				;---
BEGIN:	JMP RESET		;BEGIN POWER ON SEQUENCE
				;---
	.WORD SWI3		;VECTORS FOR DEV SYS
	.WORD SWI2
	.WORD FIRQ
	.WORD IRQ
	.WORD 0FFFF		;DO NOT TOUCH SWI
	.WORD NMI
	.WORD RESET
				;---
				;
				;---
				;ASRD
	.IRP .A <16.,15.,14.,13.,12.,11.,10.,9,8,7,6,5,4,3,2,1>
ASRD'.A':
	ASRA
	RORB
	.ENDR
ASRD0:	RTS
	.IRP .A <16.,15.,14.,13.,12.,11.,10.,9,8,7,6,5,4,3,2,1>
LSLD'.A':
	LSLB
	ROLA
	.ENDR
LSLD0:	RTS
	.PAGG
WAITFRAME:			;---
				;---
	LDX #0			;TALK TO DEV SYS
	LDD #0F800		;PATCH TO 0BD TO TURN ON
	LDA #0
	TFR A,DPR
				;---
	LSR GMSYNC		;PROCESS GAME FRAMES IN TIMELY FASHION
	BCC WAITFRAME
	STA WTCHDG		;CALM DOWN THE WATCHDOG
	CMPS #STACK
	BEQ 10$
	RTS			;RETURN TO WAITFRAM CALLER
10$:				;---
	JSR IFRAME		;INIT GAME FRAME
20$:				;WAIT FOR VG BUFFER
	LDA VGSYNC
	BEQ 20$
				;---
MAIN:				;---
	LDA PHASE		;EXECUTE PHASE
	CMPA #PH$EQ
30$:	BHS 30$			;DIE ON BAD PHASE
	LSLA
	LDX #TPHASE
	JSR @A(X)
				;---
	BRA WAITFRAME		;NEXT MAIN FRAME

				;---
	.MACRO P. .1,.2		;PHASES
	PH$'.1'=PH$EQ
	.IF NB,'.2'
	.WORD PHI'.1'
	PH$EQ=PH$EQ+1
	.ENDC
	.WORD PHE'.1'
	PH$EQ=PH$EQ+1
	.ENDM

	PH$EQ=0
				;---
TPHASE:				;GAME PHASE TABLE
	P. RES			;RESET
	P. CN1,I		;FIRST COIN
	P. SGA,I		;START GAME
	P. BGN,I		;BEGIN ACT
	P. DOG,I		;DO GAME
	P. HPA,I		;FROM GAME TO HYPER
	P. HYP,I		;HYPER OUT OF ACT
	P. WRM,I		;INTO WORM HOLE
	P. NXT,I		;NEXT ACT
	P. EGM,I		;END GAME
	P. BSA,I		;BASE STAR, DEMO A
	P. BSB,I
	P. BSC,I
	P. BSD,I
	.PAGG
IFRAME:
	INC FRAME+1
	BNE 20$			;?OVER FLOW?
	INC FRAME		;KEEP TRACK
	BNE 10$
	LDA #80			;?WORD OVERFLOW?
	STA FRAME		;THEN STICK
10$:				;---
	INC WV.TIM		;WAVE TIMER
	BNE 20$
	LDA #80			;?TIMER OVERFLOW?
	STA WV.TIM		;THEN STICK
20$:				;---
	LDA GN.SWN
	STA GN.SWO
	LDA R.FIRE
	STA GN.SWN
	EORA GN.SWO		;CATCH CHANGES
	ANDA GN.SWO		;FROM A ONE
	STA GN.SWE		;1==>FALLING EDGE (WENT ON)
	RTS
				;---
IVGEN1:
	LDA VGSYNC
	LDB #VGRAM&0FF+VGVARB
	TFR D,Y			;Y-->VG BUFFER
IVGEN:				;---
	LDD VGINIT		;INIT VECTOR GENERATOR
	STD (Y)++
	LDD VGTITLE		;TITLE BLOCK
	STD (Y)++
				;---
	RTS
				;---
PHERES:
	ANDCC #0EF		;ENABLE IRQ
	LDA #PH$CN1
	STA PHASE
	STA RND.S1
	JSR IMATH
	JSR IPARM
	JSR WAITFRAME
	JSR ISTAR
	LDA #0
	STA S.SC87
	STA S.SC65
	STA S.SC43
	STA S.SC21
	LDA #07F
	STA RHEOY+RH$LO
	STA RHEOP+RH$LO
	LDA #0FE		;255. AFTER PHESGA PERTURB
	STA RHEOP+RH$SP
	STA RHEOY+RH$SP
	RTS
VGDONE:
	LDD #8040		;CENTER
	STD (Y)++
	LDD #2020
	STD (Y)++		;ASK FOR HALT
	STD (Y)+		;FORCE HALT, POINT TO LAST ADDRESS USED
	TFR Y,D			;CHECK FOR OVERFLOW
	SUBA VGSYNC		;END-BEGIN
	SUBA #VGBFSZ/100	;CMP WITH MAX SIZE
	BLO 20$			;?OVERFLOW?
	SWI			;DIE--OVER RUN VG RAM
20$:				;---
	CLR VGSYNC		;FINISHED WITH BUFFER
	RTS
IPARM:
	LDX #ALIEN
	LDU #M.AL
	LDB #M.AL-M.BASE/8
30$:				;---
	STU A$UVP(X)
	STB A$BIC(X)
	LEAU 20(U)
	ADDB #4
	LEAX A$IZE(X)
	CMPX #ALIENZ
	BLO 30$
	LDX #GUN
	LDU #M.G1
	LDB #M.G1-M.BASE/8
40$:				;---
	STU G$UVP(X)
	STB G$BIC(X)
	CLR G$TYP(X)
	LEAU 20(U)
	ADDB #4
	LEAX G$IZE(X)
	CMPX #GUNZ
	BLO 40$
	JSR NW1SHP
	JSR NWNSHP
	LDB #TD$DSM		;PLAYER GUN SHOTS
	JSR ADOBJ
				;---
	LDA BJ.BIC		;SAME FOR BIC
	CMPA #M$STBC
	BHS 54$			;?TOO MANY STARS?
	LDD #M.STAD
	STD BJ.RAM		;THEN MOVE RAM UP
	LDA #M$STBC		;AND SET NEW BIC
	STA BJ.BIC
54$:				;---
	STA BS.IBC		;STAR BASE
	STA ST.IBC
	LDD BJ.RAM		;STARS USE REST OF MATH RAM
	STD ST.IRM
	STD BS.IRM		;STAR BASE ALSO
				;---
	JSR ISTAR		;PREPARE NEW STARS
				;---
	RTS
IMATH:
				;---
	LDD #0
	STD M.ZRO
				;---
	LDD #4000
	STD M.ONE		;CONSTANT '1'
	LDD #0E000		;CONSTANT DIVIDE BY 2
	STD M.HLF
	LDD #0080		;ROUNDING CONSTANTS
	STD M.C80		;0080
	LDD #0040
	STD M.C40		;0040
				;---
	LDD #21F		;SIN,COS ANGLES
	STD M.SINH		;FOR .895 DEGREES
	LDD #3FF7
	STD M.COS
	LDD #4000		;SCALE
	STD M.SCL
	STA ZM.SCL
				;---
	LDD #200
	STD M.DVN		;RECIPROCAL PERSPECTIVE
				;---
	RTS
ISTAR:
	LDX ST.IRM
	LDD #0			;PLACE ALL AT INVALID ZERO
10$:				;---
	STD 0(X)++
	CMPX #M.FIN
	BLO 10$
	RTS
	.PAGG
.MACRO	.W$ A1,A2,A3		;TYPE, SUBSCRIPT, EXPRESSION
	.IF NB,<'A3'>
	TD'A2''A1'=<'A3'>	;ASSIGN THE VALUE
	.ENDC
	.W0=TD'A2''A1		;RETURN THE VALUE ALSO
	.ENDM
				;---
.MACRO	.WS A1,A2		;SHAPE TABLE
TS.'A1':			;NAME OF SHAPE TABLE
	.BYTE TD$'A1'		;NAME OF SHAPE
	.BYTE 'A2'		;# OF LIVES
	.ENDM
				;---
TD$EQ	=-1			;FIRST IS AT 0
				;---
.MACRO	.WP A1			;START POINT TABLE ENTRY
TD$EQ	=TD$EQ+1		;ONE MORE OBJECT ENTRY
	.IIF GE,TD$EQ-BJ$EQ,.ERROR ENLARGE BJBIC TABLE
TD$'A1'	=TD$EQ			;ASSINE SHAPE NAME
	.W$ PC,\TD$EQ,.		;ASSIGN PC
	.ENDM
				;---
.MACRO	.WPZ			;END OF OBJECT ENTRY
	.W$ PC,\TD$EQ		;GET START PC
	.W$ NM,\TD$EQ,.-.W0/6	;CALC # OF POINTS
	.ENDM
				;---
.MACRO	.WPZ2 A1
	.W$ PC,\TD$EQ		;GET START PC
TD$EQ	=TD$EQ+1		;ONE MORE OBJECT
	.IIF GT,TD$EQ-BJ$EQ,.ERROR ENLARGE BJBIC TABLE
TD$'A1'	=TD$EQ			;ASSIGN SHAPE NAME
	.W$ PC,\TD$EQ,.W0	;PREVIOUS PC
	.W$ NM,\TD$EQ,.-.W0/6
	.ENDM			;---
TPNT:
	.MACRO .P .1,.2,.3
	.WORD .1'.*.S,.2'.*.S,.3'.*.S
	.ENDM
				;---
				;TANK
	.S=1
	.WS TNK,5
	.WP TNK
	.P -184,-128,-80
	.P -184,128,-80
	.P 242,128,-80
	.P 242,-128,-80
	.P -256,-142,-52
	.P -256,142,-52
	.P 312,142,-52
	.P 312,-142,-52
	.P -170,-86,-30
	.P -170,86,-30
	.P 170,86,-30
	.P 170,-86,-30
	.P -128,-42,12
	.P -128,42,12
	.P -32,-10,-2
	.P -32,10,-2
	.P 32,10,-12
	.P 32,-10,-12
	.P 280,10,-2
	.P 280,10,-12
	.P 280,-10,-2
	.P 280,-10,-12
	.P -128,0,12
	.P -128,0,20
	.WPZ
				;---
				;CUBE
	.S=1
	.WS CUB,1
	.WP CUB
	.P -255,-127,-127
	.P -255,127,-127
	.P 255,127,-127
	.P 255,-127,-127
	.P -255,-127,127
	.P -255,127,127
	.P 255,127,127
	.P 255,-127,127
	.P 0,0,0
				;HEX IN, Y,X,Z
	.WPZ
	.WPZ2 FRK
	.MACRO	.PH .1,.2,.3
	.WORD 0'.2*.S,0'.1*.S,0'.3*.S
	.ENDM
				;---
				;ROCKET SHIP
	.S=5
	.WS RCK,2
	.WP RCK
	.PH 0,90,0
	.PH -0C,48,0
	.PH -5,50,9
	.PH 5,50,9
	.PH C,48,0
	.PH -10,30,0
	.PH -8,28,10
	.PH 8,28,10
	.PH 10,30,0
	.PH -8,28,-10
	.PH 8,28,-10
	.PH -50,0,-8
	.PH 50,0,-8
	.PH 0,18,10
	.PH 0,-18,20
	.PH 0,-30,20
	.PH 0,-40,10
	.PH -50,-30,-8
	.PH 50,-30,-8
	.PH -10,-48,0
	.PH 10,-48,0
	.PH -8,-40,10
	.PH -8,-40,-10
	.PH 8,-40,10
	.PH 8,-40,-10
	.WPZ
				;---
				;STUBBY
	.S=2*2
	.WS STB,1
	.WP STB
	.PH 8,70,0
	.PH -8,70,0
	.PH 4,6C,-8
	.PH -4,6C,-8
	.PH 10,10,0
	.PH -10,10,0
	.PH -8,8,10
	.PH -8,8,-10
	.PH 8,8,10
	.PH 8,8,-10
	.PH E,28,0
	.PH 8,30,A
	.PH -8,30,A
	.PH -0E,28,0
	.PH -10,-28,0
	.PH -70,-20,0
	.PH -70,0,0
	.PH 8,-20,10
	.PH 8,-20,-10
	.PH -8,-20,10
	.PH -8,-20,-10
	.PH 70,0,0
	.PH 70,-20,0
	.PH 10,-28,0
	.WPZ
				;---
	.S=1			;SAUCER
	.WS SAU,5
	.WP SAU
.P -60,0,-10
.P -40,40,-10
.P 0,60,-10
.P 40,40,-10
.P 60,0,-10
.P 40,-40,-10
.P 0,-60,-10
.P -40,-40,-10
.P -240,0,20
.P -170,170,20
.P 0,240,20
.P 170,170,20
.P 240,0,20
.P 170,-170,20
.P 0,-240,20
.P -170,-170,20
.P 0,0,70
	.WPZ
				;---
				;BUZZ BOMB
	.S=1
	.WS BZZ,3
	.WP BZZ
.P -96,36,0
.P -96,18,12
.P -96,-18,12
.P -96,-36,0
.P -96,-18,-12
.P -96,18,-12
.P -24,72,0
.P -24,48,24
.P -24,-48,24
.P -24,-72,0
.P -24,-48,-24
.P -24,48,-24
.P 288,0,0
.P 348,0,0
.P -36,-36,-42
.P -36,36,-42
.P 36,36,-42
.P 36,-36,-42
.P -12,-12,-23
.P -12,12,-23
.P 12,12,-21
.P 12,-12,-21
.P -24,0,24
.P 132,18,12
.P 132,-18,12
.P 12,0,36
.WPZ
				;---
				;PLAYER ZIG ZAG SHOT

	.S=2
	.WS ZIG,1
	.WP ZIG
	.PH 0,0,70
	.PH 70,70,70
	.PH -70,E0,70
	.PH 70,150,70
	.PH 0,1C0,70
	.PH 0,0,-70
	.PH 70,70,-70
	.PH -70,E0,-70
	.PH 70,150,-70
	.PH 0,1C0,-70
	.WPZ
				;---
	.S=10.			;FLYING M
	.WS FLM,1
	.WP FLM
	.P -5,-10,0
	.P -5,-20,-6
	.P -5,-10,6
	.P -5,-2,2
	.P -5,2,2
	.P -5,10,6
	.P -5,20,-6
	.P -5,10,0
	.P 5,-10,0
	.P 5,-20,-6
	.P 5,-10,6
	.P 5,-2,2
	.P 5,2,2
	.P 5,10,6
	.P 5,20,-6
	.P 5,10,0
	.WPZ
				;---
	.S=1.			;PLANES OF DISSIMILATION
	.WP DSM
	.P 0,-255,-255
	.P 1000,-255,-255
	.P 1000,255,-255
	.P 0,255,-255
	.P 0,-255,255
	.P 1000,-255,255
	.P 1000,255,255
	.P 0,255,255
	.WPZ
				;---
	.S=20.			;TIE FIGHTER
	.WS TIE,1
	.WP TIE
	.P 0,0,0
	.P -10,-16,18
	.P 8,-16,18
	.P 14,-16,0
	.P 8,-16,-18
	.P -10,-16,-18
	.P -16,-16,0
	.P -2,-16,2
	.P 0,-16,2
	.P 1,-16,0
	.P 0,-16,-2
	.P -2,-16,-2
	.P -3,-16,0

	.P -10,16,18
	.P 8,16,18
	.P 14,16,0
	.P 8,16,-18
	.P -10,16,-18
	.P -16,16,0
	.P -2,16,2
	.P 0,16,2
	.P 1,16,0
	.P 0,16,-2
	.P -2,16,-2
	.P -3,16,0

	.P -2,-6,2
	.P 0,-6,2
	.P 1,-6,0
	.P 0,-6,-2
	.P -2,-6,-2
	.P -3,-6,0

	.P -2,6,2
	.P 0,6,2
	.P 1,6,0
	.P 0,6,-2
	.P -2,6,-2
	.P -3,6,0

	.P -4,-2,6
	.P 2,-2,6
	.P 6,-2,3
	.P 6,-4,0
	.P 6,-2,-3
	.P 2,-2,-6
	.P -4,-2,-6
	.P -8,-2,0

	.P -4,2,6
	.P 2,2,6
	.P 6,2,3
	.P 6,4,0
	.P 6,2,-3
	.P 2,2,-6
	.P -4,2,-6
	.P -8,2,0

	.WPZ


TPNTZ:
T$EQ	=TPNTZ-TPNT/6		;# OF POINTS
	.PAGG

	.SBTTL PHASES
	.SBTTL	COIN1
PHICN1:
	INC PHASE
	JSR PHECN1
	RTS
PHECN1:
	JSR IVGEN1
	JSR VWMES
	JSR VGDONE
	LDA R.CTRL
	BITA #BT7
	BNE 30$
	LDA #PH$SGA
	STA PHASE
30$:				;---
	RTS

	.SBTTL	START GAME A
PHISGA:
	INC PHASE
	RTS
PHESGA:
	LDA #PH$BGN
	STA PHASE
	STA RND.S1
	JSR IMATH
	JSR IPARM
	JSR WAITFRAME
	LDD #0
	STD FRAME
	STA WV.LVL		;START AT LEVEL 0
	LDA #60			;FULL TANK
	STA S.GAS
	LDA #0
	STA S.SC87
	STA S.SC65
	STA S.SC43
	STA S.SC21
	INC RHEOY+RH$LO			;PERTURB RKEOSTAT LIMITS
	INC RHEOP+RH$LO
	INC RHEOY+RH$SP
	INC RHEOP+RH$SP
	LDD #0
	STD RHEOY+RH$POS		;CURSOR POSITION STARTS IN MIDDLE
	STD RHEOP+RH$POS
	RTS

	.SBTTL	BEGIN ACT
PHIBGN:
	INC PHASE
	JSR SPKA		;***SPEAK TRIAL A
	RTS
PHEBGN:
	LDA #PH$DOG
	STA PHASE
	LDA #0
	STA WV.TIM		;START WAVE TIMER
	STA RND.S1
	JSR IMATH
	JSR IPARM
	RTS
	.SBTTL	DOGAME
PHIDOG:
	LDA #20
	STA RH.SPD
	INC PHASE
	RTS
PHEDOG:
	JSR VIEW
	JSR CL1GUN		;CHECK COLLISION WITH PLAYER GUN
	JSR CLAGUN		;CHECK COLLISION WITH ALIEN GUN
	JSR MVGUN		;MOVE GUN SHOTS
	JSR MISC		;HYPER, EXPLODE, GLOW
	JSR CPU			;COMPUTER DRONES
	JSR TWIRL
				;---
	RTS
				;===
	.SBTTL	FROM GAME TO HYPER
PHIHPA:
	INC PHASE
PHEHPA:
	JSR IVGEN1
	LDA #M$S1BC
	JSR IS1UV		;MATH BOX, PRIMARY INIT
	JSR RESIDU
	JSR VWMES
	JSR VWGAS
	JSR INRDR		;INIT RADAR PARMS
	JSR SNVW
	JSR VWGUN
	JSR VWRDR		;VIEW RESULTING RADAR
	JSR VWSTAR		;FUTZES WITH VIEWER POSITION
	JSR VWGLW
	JSR VGDONE
				;---
	JSR MVGUN
				;---
	JSR DONGLW
	JSR DONXPLD		;PARTIAL MISC:
	JSR DO1GLW
	JSR DN1ZOOM		;TURN OFF ZOOM
				;---
	JSR CPU
	LDX #ALIEN
30$:				;---
	LDA A$TYP(X)
	CMPA #3
	BEQ 40$			;B STILL ONE EXPLODING
	LEAX A$IZE(X)		;TEST NEXT ALIEN
	CMPX #ALIENZ
	BLO 30$
	LDA #PH$HYP		;READY TO DO HYPER
	STA PHASE
40$:				;---
	RTS
				;===

	.SBTTL	HYPER TO WORMHOLE
PHIHYP:
	INC PHASE
	JSR BGHYP		;INIT HYPER
PHEHYP:
	JSR IVGEN1
	LDA #M$S1BC
	JSR IS1UV
	JSR RESIDU
	JSR VWMES
	JSR VWGAS
	JSR VWHYP
	JSR VGDONE
	JSR DOHYP
	LDA HP.TIM
	BPL 30$
	INC WV.LVL
	LDA WV.LVL
	CMPA #3
	BHS 24$
	LDA #PH$BGN		;START DOGAME AGAIN
	BRA 26$
24$:				;---
	LDA #PH$BSA		;DO TRENCH DEMO
26$:				;---
	STA PHASE
30$:				;---
	RTS
	.SBTTLE	WORMHOLE
PHIWRM:
	LDA #10.		;TIMER FOR WORMHOLE
	STA WM.TIM
	INC WV.LVL
	JSR IPARM		;INIT SHIP AND ALIEN PARMS
	LDD #120		;INITIAL PLAYER SPEED
	STD M$SNVX+M.S1
	LDD #0
	STD BS.SSP		;STAR SPEED
	LDD #80
	STD BS.SPD		;STAR SPEED
	LDA #20
	STA RH.SPD
				;---
	INC PHASE
	RTS
				;===

PHEWRM:
	JSR VIEWWM		;VIEW WHOLE WORMHOLE
	JSR CL1LAZ		;COLLISION WITH LASAR
	JSR MVLAZ		;MOVE LASARS
	JSR MSCWRM		;MISC WORMHOLE DO ROUTINES
	JSR CPU			;CHOREOG AND DRONES
	JSR TWRLWM		;TWIRL WORMHOLE
				;---
	LDA FRAME+1
	ANDA #0F		;ONCE A SECOND
	BNE 50$
	DEC WM.TIM
	BPL 50$
	LDA #PH$NXT
	STA PHASE
50$:				;---
	RTS
				;===
	.SBTTLE	BASE DEMO A
PHIBSA:
	LDA #10.		;TIMER FOR BASE DEMO A
	STA WM.TIM
	INC WV.LVL
	JSR IPARM		;INIT SHIP AND ALIEN PARMS
	LDD #120		;INITIAL PLAYER SPEED
	STD M$SNVX+M.S1
	LDA #30
	STA RH.SPD
	LDD #100
	STD BS.SPD
	LDD #0
	STD BS.SSP		;STAR SPEED
	JSR NWBASE
				;---
	INC PHASE
	RTS
				;===

PHEBSA:
	JSR VIEWWM		;VIEW WHOLE BASE DEMO A
	JSR CL1LAZ		;COLLISION WITH LASAR
	JSR MVLAZ		;MOVE LASARS
	JSR MSCWRM		;MISC BASE DEMO A DO ROUTINES
	JSR CPU			;CHOREOG AND DRONES
	JSR TWRLWM		;TWIRL BASE DEMO A
				;---
	LDA FRAME+1
	ANDA #0F		;ONCE A SECOND
	BNE 50$
	DEC WM.TIM
	BPL 50$
	LDA #PH$BSB
	STA PHASE
50$:				;---
	RTS
				;===
	.SBTTLE	BASE DEMO B
PHIBSB:
	JSR VIEWWM
	LDA WM.TIM
	SUBA #4
	STA WM.TIM
	BPL 5$
	RTS
5$:				;---
	LDA #10.		;TIMER FOR WORMHOLE
	STA WM.TIM
	INC WV.LVL
	JSR IPARM		;INIT SHIP AND ALIEN PARMS
	LDD #300		;INITIAL PLAYER SPEED
	STD M$SNVX+M.S1
	LDA #30
	STA RH.SPD
	LDD #200
	STD BS.SPD
	LDD #0
	STD BS.SSP		;STAR SPEED
				;---
	INC PHASE
	RTS
				;===

PHEBSB:
	JSR VIEWWM		;VIEW WHOLE WORMHOLE
	JSR CL1LAZ		;COLLISION WITH LASAR
	JSR MVLAZ		;MOVE LASARS
	JSR MSCWRM		;MISC WORMHOLE DO ROUTINES
	JSR CPU			;CHOREOG AND DRONES
	JSR TWRLWM		;TWIRL WORMHOLE
				;---
	LDA FRAME+1
	ANDA #0F		;ONCE A SECOND
	BNE 50$
	DEC WM.TIM
	BPL 50$
	LDA #PH$BSC
	STA PHASE
50$:				;---
	RTS
				;===
	.SBTTLE	WORMHOLE
PHIBSC:
	JSR VIEWWM
	LDA WM.TIM
	SUBA #4
	STA WM.TIM
	BPL 5$
	RTS
5$:				;---
	LDA #10.		;TIMER FOR WORMHOLE
	STA WM.TIM
	INC WV.LVL
	JSR IPARM		;INIT SHIP AND ALIEN PARMS
	LDD #500		;INITIAL PLAYER SPEED
	STD M$SNVX+M.S1
	LDA #40
	STA RH.SPD
	LDD #400
	STD BS.SPD
	LDD #0
	STD BS.SSP		;STAR SPEED
				;---
	INC PHASE
	RTS
				;===

PHEBSC:
	JSR VIEWWM		;VIEW WHOLE WORMHOLE
	JSR CL1LAZ		;COLLISION WITH LASAR
	JSR MVLAZ		;MOVE LASARS
	JSR MSCWRM		;MISC WORMHOLE DO ROUTINES
	JSR CPU			;CHOREOG AND DRONES
	JSR TWRLWM		;TWIRL WORMHOLE
				;---
	LDA FRAME+1
	ANDA #0F		;ONCE A SECOND
	BNE 50$
	DEC WM.TIM
	BPL 50$
	LDA #PH$BSD
	STA PHASE
50$:				;---
	RTS
				;===
	.SBTTLE	WORMHOLE
PHIBSD:
	JSR VIEWWM
	LDA WM.TIM
	SUBA #4
	STA WM.TIM
	BPL 5$
	RTS
5$:				;---
	LDA #10.		;TIMER FOR WORMHOLE
	STA WM.TIM
	INC WV.LVL
	JSR IPARM		;INIT SHIP AND ALIEN PARMS
	LDD #7F0		;INITIAL PLAYER SPEED
	STD M$SNVX+M.S1
	LDA #80
	STA RH.SPD
	LDD #800
	STD BS.SPD
	LDD #0
	STD BS.SSP		;STAR SPEED
				;---
	INC PHASE
	RTS
				;===

PHEBSD:
	JSR VIEWWM		;VIEW WHOLE WORMHOLE
	JSR CL1LAZ		;COLLISION WITH LASAR
	JSR MVLAZ		;MOVE LASARS
	JSR MSCWRM		;MISC WORMHOLE DO ROUTINES
	JSR CPU			;CHOREOG AND DRONES
	JSR TWRLWM		;TWIRL WORMHOLE
				;---
	LDA FRAME+1
	ANDA #0F		;ONCE A SECOND
	BNE 50$
	DEC WM.TIM
	BPL 50$
	LDA #PH$NXT
	STA PHASE
50$:				;---
	RTS
				;===
	.SBTTL	NEXT ACT
PHINXT:
	JSR VIEWWM
	LDA WM.TIM
	SUBA #4
	STA WM.TIM
	BPL 5$
	RTS
5$:				;---
	INC PHASE
	JSR PHENXT
	RTS
				;===
PHENXT:
	LDA WV.LVL
	INCA
	ANDA #0FE
	BNE 20$
	LDA #80			;STICK WAVE AT HIGH LEVEL
20$:				;---
	STA WV.LVL
	LDA #PH$CN1		;END OF DEMO
	STA PHASE
30$:
	RTS

	.SBTTL	END OF GAME
				;---
PHIEGM:				;INIT END OF GAME
	INC PHASE		;TRANSFER TO END OF GAME
	RTS
				;---
PHEEGM:				;END OF GAME
	JSR VIEW
	JSR MVGUN
	JSR MSCEGM
	JSR S1TW
	JSR AUDTSF		;HELP EXPLODE SOUND
	LDA S.ROL
	BGT 90$
	LDA #PH$CN1
	STA PHASE
90$:				;---
	RTS
	.PAGG
MISC:
	JSR DONGLW
	JSR DONXPLD
	JSR DO1GLW
	JSR DO1ZOOM
	JSR DO1GAS
	RTS
				;===
MSCWRM:				;WORMHOLE MISC
	JSR DOBASE
	JSR DO1GAS
	RTS
				;===
MSCEGM:				;ENDGAME MISC
	JSR DONGLW
	JSR DONXPLD
	JSR DO1GLW
	JSR DO1ZOOM
	RTS
	.PAGG
TWIRL:
	JSR S1TW
	JSR S1SITE		;HANDLE SITE, PREPARE MBOX
	JSR S1MV		;MOVE PLAYER
	JSR S1FR		;ALLOW PLAYER TO FIRE
	RTS
				;===
TWRLWM:				;TWIRL THE SHIP THRU THE WORMHOLE
	JSR SIRH		;RHEOSTAT DOES SITE ONLY
	LDA #M$S1BC
	JSR IS1UV
	JSR S1MVWM		;WORMHOLE CONTROLS MOTION
	JSR S1LAZ		;PLAYER DOES LASARS
	RTS
				;===
S1TW:
				;ROLL IF HIT
	LDA S.ROL
	BEQ 8$
	DEC S.ROL
				;TWIST POSITIVE
	LDD #04FF		;SIN FOR 4.48 DEGREES
	STD M.SIN		;
	LDD #03FCE
	STD M.COS
	JSR S1RL
8$:
	JSR S1RHPT
	JSR S1RHYW
	RTS			;---

S1SITE:				;DO SITE CALCS BASED ON RHEO,TW
	LDA #M$S1BC
	JSR IS1UV		;DOWNLOAD THE PLAYER UV
	LDA SI.NUV		;?NEW MAGIC UNIT VECTORS?
	LBEQ 50$		;B	IF USE OLD UV
	CLR SI.NUV		;CLEAR INDICATOR FLAG
	LDA #M$X0BC		;SCRATCH VECTOR LOC
	STA M.BIC
	LDD SI.UX
	STD M.X0		;SITE COORDS IN UNIVERSE
	LDD SI.UY
	STD M.Y0
	LDD SI.UZ
	STD M.Z0
	LDA #M$PSB2		;CONVERT OLD SITE TO NEW SCREEN POSITION
	JSR MGOWT
	LDD M.YP		;LEFT/RIGHT
	BPL 22$
	NEGD
22$:				;---
	STD M.DVN		;** NEW NUMERATOR
	LDD M.XP
	STD M.DVD
	ORCC #0			;7.5 CYCLE DIVIDE (3 HERE)
	LDD M.QUO
	TST M.YP
	BMI 26$			;REVERSE DIRECTION OF LEFT/RIGHT
	NEGD
26$:				;---
	SUBD SI.OSX		;FIND CHANGE FROM OLD SCREEN POSITIONI
	JSR LSLD1
	ADDD RH$POS+RHEOY	;UPDATE SCREEN POS BY AMOUNT THAT SCREEN ROTATED
	STD RH$POS+RHEOY
	JSR ASRD1
	STD SI.OSX
	LDD M.ZP		;UP/DOWN
	BPL 42$
	NEGD
42$:				;---
	STD M.DVN		;** NEW NUMERATOR
	LDD M.XP
	STD M.DVD
	ORCC #0			;7.5 CYCLE DIVIDE (3 HERE)
	LDD M.QUO
	TST M.ZP
	BPL 46$
	NEGD
46$:				;---
	SUBD SI.OSY		;FIND CHANGE FROM OLD SCREEN POSITION
	JSR LSLD1
	ADDD RH$POS+RHEOP	;ROTATE SITE ALONG WITH STARS
	STD RH$POS+RHEOP
	JSR ASRD1
	STD SI.OSY
				;---
	LDD #4000
	STD M.X0		;CONVERT NEW SCREEN BACK TO UNIVERSE
	LDD #0
	SUBD SI.OSX
	STD M.Y0
	LDD SI.OSY
	STD M.Z0
	LDA #M$X0BC
	STA M.BIC
	LDA #M$S1UN
	JSR MGOWT
	LDD M.XP
	STD SI.UX
	LDD M.YP
	STD SI.UY
	LDD M.ZP
	STD SI.UZ
50$:				;---
	JSR RESIDU		;KEEP FRACTIONAL ROTATIONS
				;---
	LDA #M$X0BC		;NOW USE RESIDU TO CONVERT UNIVERSE MAGIC UV SITE
				; TO REAL SCREEN COORDS(+-32K)
	STA M.BIC
	LDD SI.UX
	STD M.X0		;SITE COORDS IN UNIVERSE
	LDD SI.UY
	STD M.Y0
	LDD SI.UZ
	STD M.Z0
	LDA #M$PSB2		;CONVERT OLD SITE TO NEW SCREEN POSITION
	JSR MGOWT
	LDD M.YP		;LEFT/RIGHT
	BPL 62$
	NEGD
62$:				;---
	STD M.DVN		;** NEW NUMERATOR
	LDD M.XP
	STD M.DVD
	ORCC #0			;7.5 CYCLE DIVIDE (3 HERE)
	LDD M.QUO
	TST M.YP
	BMI 66$			;REVERSE DIRECTION OF LEFT/RIGHT
	NEGD
66$:				;---
	SUBD SI.OSX		;FIND CHANGE FROM OLD SCREEN POSITIONI
	JSR LSLD1
	ADDD RH$POS+RHEOY	;UPDATE SCREEN POS BY AMOUNT THAT SCREEN ROTATED
	STD SI.RSX		;RESULTING SCREEN X
				;---
	LDD M.ZP		;UP/DOWN
	BPL 82$
	NEGD
82$:				;---
	STD M.DVN		;** NEW NUMERATOR
	LDD M.XP
	STD M.DVD
	ORCC #0			;7.5 CYCLE DIVIDE (3 HERE)
	LDD M.QUO
	TST M.ZP
	BPL 86$
	NEGD
86$:				;---
	SUBD SI.OSY		;FIND CHANGE FROM OLD SCREEN POSITION
	JSR LSLD1
	ADDD RH$POS+RHEOP	;ROTATE SITE ALONG WITH STARS
	STD SI.RSY		;RESIDUE SCREEN Y
				;---
	LDD #200
	STD M.DVN		;***RESTORE FOR RECIPROCAL
	RTS
				;---
S1MV:				;PLAYER 1 MOVE
	LDD FRAME
	JSR LSLD7
	STD ST.UX		;STARS RELATIVE MOVEMENT
	RTS
				;****************
	LDA MV.FST
	CMPA #26
	BHS 12$
	LDA #6
12$:				;---
	SUBA #6
	STA MV.FST		;SLOW THE SHIP DOWN
	CLR S.ACC
	LDA R.CTRL		;ABZ CONTROL
	BITA #BT6		;LEFT THUMB
	BNE 32$			;?WANT TO FAST FORWARD?
	INC S.ACC		;ACCELERATE FORWARD
	LDA S.GAS
	BNE 24$
	LDA FRAME+1
	ANDA #6
	BNE 32$
24$:				;---
	LDA MV.FST
	BNE 26$
	LDA #20
26$:				;---
	ADDA #12.
	BCC 28$
	LDA #0FF		;STICK ON OVERFLOW
28$:				;---
	STA MV.FST
	JSR AUDTSF
32$:				;---
	JSR DO1MOV
	RTS			;---
				;===
S1MVWM:				;WORMHOLE PLAYER MOVEMENT
	LDD M$VX+M.S1		;PLAYERS FORWARD MOVEMENT
	ADDD M$TX+M.S1
	STD M$TX+M.S1
	STD M$TX+M.U1
				;---
	LDD #0FFFF		;CONVERT 8000 CORRECTLY
	SUBA RH$NML+RHEOY
	BMI 32$
	LDD #-40
	BRA 34$
32$:				;---
	LDD #40
34$:				;---
	JSR ASRD0
	ADDD M$TY+M.S1
	BMI 35$
	CMPD #300
	BLE 38$
	LDD #300
	BRA 38$
35$:				;---
	CMPD #-300
	BGE 38$
	LDD #-300
38$:				;---
	STD M$TY+M.S1
	STD M$TY+M.U1
				;===
	LDD #0FFFF
	LDA RH$NML+RHEOP
	BMI 42$
	LDD #-40
	BRA 44$
42$:				;---
	LDD #40
44$:				;---
	JSR ASRD0
	ADDD M$TZ+M.S1
	BMI 45$
	CMPD #0
	BLE 48$
	LDD #0
	BRA 48$
45$:				;---
	CMPD #-0F00
	BGE 48$
	LDD #-0F00
48$:				;---
	STD M$TZ+M.S1
	STD M$TZ+M.U1
				;===
	RTS
				;===

S1FR:				;PLAYER 1 FIRES GUN
	LDA GN.SWE		;CATCH PRESSING EDGES
	BITA #BT7
	BEQ 48$
	LDX S1.RNG		;?ALIEN IN BOMBING RANGE?
	BEQ 40$
	LDA A$TYP(X)		;?STILL ALIVE?
	CMPA #1
	BNE 40$
	JSR FR1BMB		;THEN BOMBS AWAY
	LDA #0FF
	STA GN.SWN		;FORCE CONTINIOUS FIRE
40$:				;---
	LDU #GUNS
42$:				;---FIND FREE GUN
	LDA G$TYP(U)
	BNE 46$
	JSR FR1GUN
	JSR AUDGN		;AUDIO-GUN FIRE
	LDX #ALIEN
44$:	LDA A$TYP(X)
	CMPA #1
	BNE 45$
	LDD A$CHST(X)
	CHSET C$GF		;STATUS GUN FIRED
	STD A$CHST(X)
45$:
	LEAX A$IZE(X)
	CMPX #ALIENZ
	BLO 44$
	BRA 48$			;THEN LEAVE
46$:				;NEXT GUN
	LEAU G$IZE(U)
	CMPU #GUNSZ
	BLO 42$
	JSR AUDGNE		;AUDIO-GUN EMPTY
48$:				;---
60$:
	RTS
	.PAGG
S1RHPT:				;---SHIP 1 RHEOSTAT PITCH
	LDA PT.VL2
	NOP
	LDX #RHEOP
	JSR RHLIM		;LIMIT AND SCALE RHESTAT
	JSR RHTRIG		;CONVERT TO TRIG VALUES
25$:				;---
	JSR RHRSDU
	BEQ 30$			;?ROTATE?
	JSR S1PT		;PITCH APPROPRIATELY
30$:
	RTS
S1RHYW:				;---SHIP 1 RHEOSTAT YAW
	LDA PT.VL1
	NOP
	LDX #RHEOY
	JSR RHLIM		;HANDLE RHEOSTAT LIMITS
	JSR RHTRIG		;PROCESS INTO TRIG VALUES
25$:				;---
	JSR RHRSDU		;PROCESS MAJOR RHEOSTAT RESIDU
	BEQ 30$			;?ROTATE?
	JSR S1YW		;YAW (N) APPROPRIATELY
30$:
	RTS
				;===
SIRH:				;RHEO DOES SITE ONLY
	LDA PT.VL2
	NOP
	LDX #RHEOP
	JSR RHLIM
	LDD RH$POS(X)
	STD SI.RSY
				;---
	LDA PT.VL1
	NOP
	LDX #RHEOY		;YAW
	JSR RHLIM
	LDD RH$POS(X)
	STD SI.RSX		;LEFT/RIGHT
	RTS
				;===
RHLIM:				;---LIMIT AND SCALE
	CMPA RH$LO(X)		;A=RHEOSTAT VALUE
				;X==>RAM BLOCK
				;Y==>DATA TABLE
	BHS 28$			;?LESS THAN LO?
	CMPA RH$LT(X)
	BLO 28$			;?HIGHER THAN TRIAL LO?
	STA RH$LO(X)		;APPROACH NEW DEGLITCHED LO
28$:				;---
	STA RH$LT(X)		;SAVE OUR NEW TRIAL LO
				;---
	CMPA RH$LO(X)		;?LESS THAN LOWER LIMIT?
	BHS 38$
	LDA RH$LO(X)		;THEN REPLACE WITH LOWER LIMIT
38$:				;---
	SUBA RH$LO(X)		;BASE AT ZERO
	STA RH.DIR		;TEMP STORAGE OF POT BASED VALUE
	LDB RH$SP(X)		;SPREAD THE VALUES-SCAL
	MUL
	ADDA RH.DIR		;MULTS BY 1XX SO VALUE GOES ABOVE 7F
	BCC 45$			;?OVERFLOW?
	LDA #0FF		;THEN LIMIT VALUE
	INC RH$ST(X)		;TIME THESE EXCESSES
	LDB RH$ST(X)
	CMPB #2
	BLO 48$			;?TOO LARGE FOR TOO LONG?
	DEC RH$SP(X)		;THEN DECREASE SPREAD
	BRA 48$			;J
45$:				;---
	CLR RH$ST(X)		;PREPARE TIMER FOR NEXT TOO-HIGH POT VALUE
48$:				;---
	CLRB
	SUBA #80		;CHANGE TO SIGNED VALUE
	STA RH$NML(X)
	BRA 50$			;J DEFAULT IS RATE
RATE==.				;	FOR LINKMAP
				;---SETUP SITE POSITION
	STD RH$POS(X)		;POSITIONAL JOYSTICK
	RTS			;---(EXIT)
50$:
	BPL 52$			; FOR RATE JOYSTICK
	COMA			;ALLOW -80
52$:				;---
	TFR A,B			;SQUARED FOR FAST RAMPING
	MUL			;MAX NOW OF 40
	LDB RH.SPD		;RATE FOR FASTEST SLEW
	MUL
	TST RH$NML(X)
	BMI 56$
	ADDD RH$POS(X)		;POSITIVE SLEW
	BVC 58$			;?OVERFLOW?
	LDD #7FFF		; THEN SET TO MAX
	BRA 58$
56$:				;---
	NEGD			;NEGATIVE SLEW
	ADDD RH$POS(X)
	BVC 58$
	LDD #8000		;?OVERFLOW? THEN MAX NEG
58$:				;---
	STD RH$POS(X)		;NEW POSITION	
	RTS
RHTRIG:				;X-->RAM BLOCK
				;OUTPUT
				;SETUP M.SIN, M.COS
	LDA RH$POS(X)
	BPL 20$
	COMA			;WIDER BALANCED ZERO, ALLOW -80
20$:				;---
	LDB #40			;FROM +-128. TO ?
	MUL
	NOP
	NOP
	NOP
40$:				;---
	CMPA #32.
	BLS 42$			;SET MAXIMUM RATE OF TURN
	LDA #32.
42$:
	LDB RH$POS(X)
	BPL 44$
	NEGA
44$:				;---
	ADDA RH$RSD(X)
	STA RH$RSD(X)		;SIGNED VALUE
	RTS
RHRSDU:				;---
	LDA RH$RSD(X)
	BPL 48$
	NEGA			;ABSOLUTE VALUE
48$:				;---
	CMPA #78.		;?PASSED THE LARGE MAGIC ANGLE?
	BLO 60$
	INC SI.NUV		;TELL SITE WE HAVE NEW MAGIC UNIT VECTORS
	LDD #3FC2		;HS. 78., ROTATE 4.99 LARGE MAGIC ANGLE DEGREES
	STD M.COS
	LDA RH$RSD(X)
	BPL 54$
	ADDA #78.		;NEGATIVE ROTATE
	STA RH$RSD(X)
	LDD #-590
	STD M.SIN
	RTS
54$:				;---
	SUBA #78.		;POSITIVE ROTATE
	STA RH$RSD(X)		;CORRECT THE RESIDUE
	LDD #+590
	STD M.SIN
	RTS
60$:				;---CHECK FOR SMALLER MAGIC ANGLE
	CMPA #14.		;.895 MARK
	BLO 70$			;?BEYOND .895 MAGIC ANGLE?
	INC SI.NUV		;TELL SITE WE HAVE NEW MAGIC UNIT VECTORS
	LDD #3FFE
	STD M.COS
	LDA RH$RSD(X)		;THEN STEP TOWARDS IT
	BPL 64$			;?NEGATIVE ROTATE?
	ADDA #14.
	STA RH$RSD(X)
	LDD #-100
	STD M.SIN
	RTS
64$:				;---POSITIVE,ROTATE
	SUBA #14.		;CORRECT THE RESIDUE
	STA RH$RSD(X)
	LDD #100
	STD M.SIN
	RTS
70$:				;---
	CLRB			;NO ROTATE
	RTS
RESIDU:				;HANDLE RESIDUE ROTATIONS UPON DOWNLOADED UNIT VECTORS
	LDA RH$RSD+RHEOP	;PITCH TICS LEFT
	BEQ 40$			;RESIDUE LEFT?
	JSR RESCNV		;CONVERT RESIDUE TO SIN/COS
	LDA RH$RSD+RHEOP
	BPL 35$			;?TURNING BACKWARDS?
	LDD #0			;THEN INVERT SINE
	SUBD M.SIN
	STD M.SIN
35$:				;---
	LDA #M$U1BC		;PITCH DOWNLOADED UNIT VECTORS
	STA M.BIC
	LDA #M$PTCH
	JSR MGOWT
40$:				;HANDLE YAW RESIDUE
	LDA RH$RSD+RHEOY
	BEQ 60$
	JSR RESCNV		;CONVERT RESIDUE
	LDA RH$RSD+RHEOY
	BPL 45$			;?TURNING BACKWARDS?
	LDD #0			;THEN INVERT SINE
	SUBD M.SIN
	STD M.SIN
45$:				;---
	LDA #M$U1BC		;YAW DOWNLOADED UNIT VECTORS
	STA M.BIC
	LDA #M$YAW
	JSR MGOWT
60$:
	RTS
RESCNV:				;CONVERT A=RESIDUE TO SIN,COS
	BPL 22$
	NEGA			;ABSOLUTE VALUE
22$:
	LDB #3
	MUL
	LDX #TRHTIC		;TABLE OF TIC SIN AND COS
	ABX			;X-->ENTRY
	LDD 0(X)		;SIN AS WORD ENTRY
	STD M.SIN		;
	LDB 2(X)		;ONE BYTE COS OFFSET FROM 1
	SEX
	ADDD #4000		;GET WORD COSISNE
	STD M.COS
	RTS
	.MACRO TIC A1,A2
	.WORD A1'.		;SIN
	.BYTE A2'.-4000		;COS, ENCODED AS NEGATIVE OFFSET
	.ENDM
	.=.-3
	TRHTIC:
	.=.+3


;    SINE COSINE FOR MAGIC TICS, 4000(16384.) IS UNITY
                                ;#    DEGREES SINE    COSINE
        TIC  18      16384      ;# 1   .064    18      16384 
        TIC  37      16384      ;# 2   .128    37      16384 
        TIC  55      16384      ;# 3   .192    55      16384 
        TIC  73      16384      ;# 4   .256    73      16384 
        TIC  91      16384      ;# 5   .32     91      16384 
        TIC  110     16384      ;# 6   .384    110     16384 
        TIC  128     16384      ;# 7   .447    128     16384 
        TIC  146     16383      ;# 8   .511    146     16383 
        TIC  165     16383      ;# 9   .575    165     16383 
        TIC  183     16383      ;# 10  .639    183     16383 
        TIC  201     16383      ;# 11  .703    201     16383 
        TIC  219     16383      ;# 12  .767    219     16383 
        TIC  238     16382      ;# 13  .831    238     16382 
        TIC  256     16382      ;# 14  .895    256     16382 
        TIC  274     16382      ;# 15  .959    274     16382 
        TIC  292     16381      ;# 16  1.023   292     16381 
        TIC  311     16381      ;# 17  1.087   311     16381 
        TIC  329     16381      ;# 18  1.151   329     16381 
        TIC  347     16380      ;# 19  1.215   347     16380 
        TIC  366     16380      ;# 20  1.278   366     16380 
        TIC  384     16380      ;# 21  1.342   384     16380 
        TIC  402     16379      ;# 22  1.406   402     16379 
        TIC  420     16379      ;# 23  1.47    420     16379 
        TIC  439     16378      ;# 24  1.534   439     16378 
        TIC  457     16378      ;# 25  1.598   457     16378 
        TIC  475     16377      ;# 26  1.662   475     16377 
        TIC  493     16377      ;# 27  1.726   493     16377 
        TIC  512     16376      ;# 28  1.79    512     16376 
        TIC  530     16375      ;# 29  1.854   530     16375 
        TIC  548     16375      ;# 30  1.918   548     16375 
        TIC  567     16374      ;# 31  1.982   567     16374 
        TIC  585     16374      ;# 32  2.046   585     16374 
        TIC  603     16373      ;# 33  2.109   603     16373 
        TIC  621     16372      ;# 34  2.173   621     16372 
        TIC  640     16372      ;# 35  2.237   640     16372 
        TIC  658     16371      ;# 36  2.301   658     16371 
        TIC  676     16370      ;# 37  2.365   676     16370 
        TIC  694     16369      ;# 38  2.429   694     16369 
        TIC  713     16368      ;# 39  2.493   713     16368 
        TIC  731     16368      ;# 40  2.557   731     16368 
        TIC  749     16367      ;# 41  2.621   749     16367 
        TIC  767     16366      ;# 42  2.685   767     16366 
        TIC  786     16365      ;# 43  2.749   786     16365 
        TIC  804     16364      ;# 44  2.813   804     16364 
        TIC  822     16363      ;# 45  2.877   822     16363 
        TIC  840     16362      ;# 46  2.94    840     16362 
        TIC  859     16361      ;# 47  3.004   859     16361 
        TIC  877     16361      ;# 48  3.068   877     16361 
        TIC  895     16360      ;# 49  3.132   895     16360 
        TIC  913     16359      ;# 50  3.196   913     16359 
        TIC  932     16357      ;# 51  3.26    932     16357 
        TIC  950     16356      ;# 52  3.324   950     16356 
        TIC  968     16355      ;# 53  3.388   968     16355 
        TIC  986     16354      ;# 54  3.452   986     16354 
        TIC  1005    16353      ;# 55  3.516   1005    16353 
        TIC  1023    16352      ;# 56  3.58    1023    16352 
        TIC  1041    16351      ;# 57  3.644   1041    16351 
        TIC  1059    16350      ;# 58  3.708   1059    16350 
        TIC  1078    16349      ;# 59  3.771   1078    16349 
        TIC  1096    16347      ;# 60  3.835   1096    16347 
        TIC  1114    16346      ;# 61  3.899   1114    16346 
        TIC  1132    16345      ;# 62  3.963   1132    16345 
        TIC  1151    16344      ;# 63  4.027   1151    16344 
        TIC  1169    16342      ;# 64  4.091   1169    16342 
        TIC  1187    16341      ;# 65  4.155   1187    16341 
        TIC  1205    16340      ;# 66  4.219   1205    16340 
        TIC  1224    16338      ;# 67  4.283   1224    16338 
        TIC  1242    16337      ;# 68  4.347   1242    16337 
        TIC  1260    16335      ;# 69  4.411   1260    16335 
        TIC  1278    16334      ;# 70  4.475   1278    16334 
        TIC  1296    16333      ;# 71  4.539   1296    16333 
        TIC  1315    16331      ;# 72  4.602   1315    16331 
        TIC  1333    16330      ;# 73  4.666   1333    16330 
        TIC  1351    16328      ;# 74  4.73    1351    16328 
        TIC  1369    16327      ;# 75  4.794   1369    16327 
        TIC  1388    16325      ;# 76  4.858   1388    16325 
        TIC  1406    16324      ;# 77  4.922   1406    16324 
        TIC  1424    16322      ;# 78  4.986   1424    16322 
	.PAGG
UNITV:				;SETUP UNIT VECTORS
	LDD #0
				;---
	STD M$VX(U)		;VELOCITY VECTORS
	STD M$VY(U)
	STD M$VZ(U)
				;---
	STD M$TX(U)		;TRANSLATION COORDS
	STD M$TY(U)
	STD M$TZ(U)
				;---
	;STD M$AX(U)		;IDENTITY MATRIX
	STD M$AY(U)
	STD M$AZ(U)
	STD M$BX(U)
	;STD M$BY(U)
	STD M$BZ(U)
	STD M$CX(U)
	STD M$CY(U)
	;STD M$CZ(U)
	LDA #40			;IDENTITY VALUE FOR 1.
	STD M$AX(U)
	STD M$BY(U)
	STD M$CZ(U)
	RTS
IS1UV:
	STA M.BIC
	LDA #M$DLD1
	JSR MGOWT
	RTS
IS2UV:
	STA M.BIC
	LDA #M$DLD2
	JSR MGOWT
	RTS
				;---
				;---
				;ALIEN USAGE ONLY
SNPTU:				;PITCH UP
	JSR SNPOS
	INC CP.PT
	JMP SNPT
				;---
SNPTD:				;PITCH DOWN
	JSR SNNEG
	DEC CP.PT
	JMP SNPT
				;---
SNRLL:				;ROLL LEFT
	JSR SNNEG
	DEC CP.RL
	JMP SNRL
				;---
SNRLR:				;ROLL RIGHT
	JSR SNPOS
	INC CP.RL
	JMP SNRL
				;---
SNYWL:				;YAW LEFT
	JSR SNPOS
	DEC CP.YW
	JMP SNYW
				;---
SNYWR:				;YAW RIGHT
	JSR SNNEG
	INC CP.YW
	JMP SNYW
SNPOS:				;POSITIVE ANGLES FOR CPU
	LDA #3*7
	JMP 20$
	LDA WV.LVL
	LSLA			;*2
	LSLA			;*4 DOUBLEWORD ENTRIES
	CMPA #7*4
	BLS 20$			;B WITHIN TABLE LIMITS
	LDA #7*4
20$:				;---
	ANDA #7*4
	LDU #TSNGLE
	LEAU A(U)
	LDD 0(U)
	STD M.SIN
	LDD 2(U)
	STD M.COS
	RTS
				;---
SNNEG:
	LDA #3*7
	JMP 20$
	LDA WV.LVL		;NEGATIVE ANGLES FOR CPU
	CMPA #7*4		;NEGATIVE SIDE IS WEAK
	BLS 20$			;B WITHIN TABLE LIMITS
	LDA #7*4
20$:				;---
	ANDA #7*4
	LDU #TSNGLE		;8 ENTRIES, DOUBLEWORD EACH
	LEAU A(U)
	LDD #0
	SUBD 0(U)
	STD M.SIN
	LDD 2(U)
	STD M.COS
	RTS
				;---
TSNGLE:				;CPU ANGLES
	.WORD 0B5,3FFF		;.63
	.WORD 100,3FFE		;.90
	.WORD 16A,3FFC		;1.27
	.WORD 21F,3FF7		;1.90
	.WORD 3DF,3FE2		;3.47
	.WORD 4FF,3FCE		;4.48
	.WORD 590,3FC2		;4.99
	.WORD 590,3FC2		;4.99
				;---
SNRL:				;ROLL ALIEN SHIP
	LDA A$BIC(X)
	STA M.BIC
	LDA #M$ROLL
	JMP MGOWT
SNPT:				;PITCH ALIEN SHIP
	LDA A$BIC(X)
	STA M.BIC
	LDA #M$PTCH
	JMP MGOWT
SNYW:				;YAW ALIEN SHIP
	LDA A$BIC(X)
	STA M.BIC
	LDA #M$YAW
	JMP MGOWT
				;---
SNMVF:				;MOVE FORWARD
	LDD M$AX(U)		;X VECTOR
	JSR ASRD7
	ADDD M$VX(U)
	STD M$VX(U)
	LDD M$BX(U)
	JSR ASRD7
	ADDD M$VY(U)
	STD M$VY(U)
	LDD M$CX(U)
	JSR ASRD7
	ADDD M$VZ(U)
	STD M$VZ(U)
	RTS
				;---
SNMVB:				;MOVE BACKWARD
	LDD #0			;NEGATE Z VECTOR
	SUBD M$AX(U)
	JSR ASRD8
	ADDD M$VX(U)
	STD M$VX(U)
	LDD #0
	SUBD M$BX(U)
	JSR ASRD8
	ADDD M$VY(U)
	STD M$VY(U)
	LDD #0
	SUBD M$CX(U)
	JSR ASRD8
	ADDD M$VZ(U)
	STD M$VZ(U)
	RTS
				;---
SNMVU:				;MOVE UP
	LDD M$AZ(U)		;Z VECTOR
	JSR ASRD7
	ADDD M$VX(U)
	STD M$VX(U)
	LDD M$BZ(U)
	JSR ASRD7
	ADDD M$VY(U)
	STD M$VY(U)
	LDD M$CZ(U)
	JSR ASRD7
	ADDD M$VZ(U)
	STD M$VZ(U)
	RTS
				;---
SNMVD:				;MOVE DOWN
	LDD #0			;NEGATE Z VECTOR
	SUBD M$AZ(U)
	JSR ASRD7
	ADDD M$VX(U)
	STD M$VX(U)
	LDD #0
	SUBD M$BZ(U)
	JSR ASRD7
	ADDD M$VY(U)
	STD M$VY(U)
	LDD #0
	SUBD M$CZ(U)
	JSR ASRD7
	ADDD M$VZ(U)
	STD M$VZ(U)
	RTS
				;---
				;U--> UVP OF ALIEN
SNMVR:				;MOVE RIGHT
	LDD M$AY(U)		;Y VECTOR
	JSR ASRD7
	ADDD M$VX(U)
	STD M$VX(U)
	LDD M$BY(U)
	JSR ASRD7
	ADDD M$VY(U)
	STD M$VY(U)
	LDD M$CY(U)
	JSR ASRD7
	ADDD M$VZ(U)
	STD M$VZ(U)
	RTS
				;---
SNMVL:				;MOVE LEFT
	LDD #0			;NEGATE Y VECTOR
	SUBD M$AY(U)
	JSR ASRD7
	ADDD M$VX(U)
	STD M$VX(U)
	LDD #0
	SUBD M$BY(U)
	JSR ASRD7
	ADDD M$VY(U)
	STD M$VY(U)
	LDD #0
	SUBD M$CY(U)
	JSR ASRD7
	ADDD M$VZ(U)
	STD M$VZ(U)
	RTS
				;===
				;PLAYER SHIP
				;---
S1RL:				;ROLL PLAYER SHIP
	LDA #M$S1BC
	STA M.BIC
	LDA #M$ROLL
	JMP MGOWT		;RTS
				;---
S1PT:				;PITCH PLAYER SHIP
	LDA #M$S1BC
	STA M.BIC
	LDA #M$PTCH
	JMP MGOWT		;RTS
				;---
S1YW:				;YAW PLAYER SHIP
	LDA #M$S1BC
	STA M.BIC
	LDA #M$YAW
	JMP MGOWT		;RTS
				;===
MGOWT:				;START THE MATH BOX, AND WAIT
	STA M.PCGO
				;---
MWAIT:
10$:				;---
	TST M.BUSY		;SLOW BUT SAFE
	BMI 10$
				;---
	RTS
				;---
				;---
DO1MOV:				;MOVE PLAYER 1
	LDA S.ACC
	BEQ 30$			;?ACCELERATE?
				;---
	LDA #M$X0BC		;SCRATCH BLOCK
	STA M.BIC
	LDD #4000
	STD M.X0
	LDD #0
	SUBD SI.RSX		;SITE, REAL X SCREEN POSITION
	JSR ASRD1
	STD M.Y0
	LDD SI.RSY		;SITE, REAL Y SCREEN POSITION
	JSR ASRD1
	STD M.Z0
	LDA #M$S1UN		;CONVERT FROM PLAYERS SCREEN VIEW TO UNIVERSE COORDS
	JSR MGOWT		;AIMING DIRECTION PUT IN XP...
				;vvvvv
	LDD M.XP
	SUBD M$TX+M.U1		;CONVERT BACK TO VECTOR
	JSR ASRD1
	STD M$VX+M.S1
	LDD M.YP
	SUBD M$TY+M.U1		;DELETE THIS WHEN NEW MATH ROUTINE IS IN
	JSR ASRD1
	STD M$VY+M.S1
	LDD M.ZP
	SUBD M$TZ+M.U1		;DITTO , NEED VECTOR S1UN
	JSR ASRD1
	STD M$VZ+M.S1
				;^^^^^
30$:				;---
	LDD M$VX+M.S1
	JSR MV1FUTZ		;ADJUST VELOCITIES
	ADDD M$TX+M.S1
	STD M$TX+M.S1
	STD M$TX+M.U1
50$:				;---HANDLE Y TRANSLATION
	LDD M$VY+M.S1
	JSR MV1FUTZ		;ADJUST VELOCITIES
	ADDD M$TY+M.S1
	STD M$TY+M.S1
	STD M$TY+M.U1
60$:				;---
	LDU M$TZ+M.S1
	LDD M$VZ+M.S1		;MOVE IN Z
	JSR MV1FUTZ		;ADJUST VELOCITIES
	ADDD M$TZ+M.S1
	STD M$TZ+M.S1
	STD M$TZ+M.U1
	RTS
				;===
MV1FUTZ:			;ADJUST VELOCITIES
	TST MV.FST		;START WITH FAST SPEED
	BNE 12$
	JSR ASRD3		;SLOW DOWN IF REGULAR THRUST
	BRA 20$
12$:				;---
	LDB MV.FST
	TSTA
	BMI 16$
	MUL
	BRA 20$
16$:				;---
	NEGA
	MUL
	NEGD
20$:				;---
	TST S.GAS
	BNE 30$			;?OUT OF FUEL?
	JSR ASRD1		;THEN SLOW PLAYER DOWN
30$:				;---
40$:				;---
	JSR ASRD2		;STANDARD REDUCTION (1040A)
	RTS
				;===
				;---
DOAMOV:				;MOVE ALIEN
				;X--> A. PARAMETER
				;U--> UVP
				;VELOCITIES ALREADY SET
	LDD M$VX(U)
	ADDD M$TX(U)
	STD M$TX(U)		;NEW LOCAL POSITION
50$:				;---HANDLE Y TRANSLATION
	LDD M$VY(U)
	ADDD M$TY(U)
	STD M$TY(U)		;NEW TRANSLATION LOCATION
60$:				;--- TRANSLATE Y
	LDD M$TZ(U)
	ADDD M$VZ(U)		;COMPUTE NEW Z
	STD M$TZ(U)
68$:				;---
	RTS
	.PAGG
	.SBTTL CPU-COMPUTER DRONES
CPU:				;COMPUTER
	LDA WV.TIM
	CMPA #3
	BNE 18$
	LDX #ALIEN
15$:				;---
	LDA A$TYP(X)
	CMPA #1
	BNE 16$
	LDA #0FF
	STA A$TRGT(X)
16$:				;---
	LEAX A$IZE(X)
	CMPX #ALIENZ
	BLO 15$
18$:				;===
	LDA S.GLW
	BNE 90$			;ALIENS DONT MOVE DURING SHIELDS
	LDX #ALIEN
20$:				;---
	STX S1.PRM
	LDU A$UVP(X)
	LDA A$TYP(X)		;IGNORE DEAD ONES
	BEQ 40$
	JSR CPUAL		;ALIEN CPU, LOCAL
40$:				;---
	LDX S1.PRM
	LEAX A$IZE(X)
	CMPX #ALIENZ
	BLO 20$
90$:				;---
	RTS
CPUAL:					;
	JSR CHOPDO
	LDD #0				;CLEAR ACTIONS REQUESTED
	STA CP.AC
	STA CP.RL
	STA CP.PT
	STA CP.YW
	TST A$TRGT(X)
	BEQ 12$			;?TARGET THE PLAYER?
	CHSET C$AT		;THEN TELL STATUS
12$:				;---
	STD A$CHST(X)		;PREPARE NEW CHOREG STATUS
	LDA A$ROL(X)
	DECA
	BMI 18$
	STA A$ROL(X)
	LDD 6*4+0+TSNGLE
	STD M.SIN
	LDD 6*4+2+TSNGLE
	STD M.COS
	JSR SNRL
	JSR SNRL
	JMP 30$			;SKIP OVER AIM AND SHOOT
18$:				;---
	LDB A$CHTW(X)			;TWIRL INFO
	STB CP.SHF
20$:	C$RL=1
	LSR CP.SHF
	BCC 21$
	JSR SNRLL
21$:	C$RR=2					;---
	LSR CP.SHF
	BCC 22$
	JSR SNRLR
22$:	C$PU=4				;---
	LSR CP.SHF
	BCC 23$
	JSR SNPTU
23$:	C$PD=8				;---
	LSR CP.SHF
	BCC 24$
	JSR SNPTD
24$:	C$YR=10				;---
	LSR CP.SHF
	BCC 25$
	JSR SNYWR
25$:	C$YL=20				;---
	LSR CP.SHF
	BCC 26$
	JSR SNYWL
26$:					;---
28$:					;---
30$:				;---
	JSR CPUMVL			;MOVE LOCALLY
	JSR CPCHKL
	LDA A$TYP(X)
	CMPA #1				;?NOT LIVE SHIP?
	LBNE 90$			;B THEN NO SHOTS
	LDA A$BIC(X)
	JSR IS1UV			;DOWNLOAD VECTORS
	LDX S1.PRM
	CLR A$AIM(X)
	LDA #M$S1BC+3			;CHASE PLAYER'S ONE SHIP
	STA M.BIC
	LDA #M$PSB2			;VIEW PLAYERS SHIP
	JSR MGOWT
	LDD M.XP			;?PLAYER IN FRONT?
	BMI 40$			;B IGNORE GUNS IF IN BACK
	INC A$AIM(X)
	SUBD #2000
	BGE 40$				;IGNORE GUN IF TOO FAR AWAY
	LDD A$CHST(X)		;SET PLAYER IN ALIENS VIEW
	CHSET C$AV
	STD A$CHST(X)
	LDD M.YPS
	ADDD M.ZPS
	CMPD #20			;?AIMING NEAR SHIP?
	BHI 40$
	LDD A$CHST(X)		;PLAYER IN ALIENS SITES
	CHSET C$AS
	STD A$CHST(X)
	LDD M.XP
	SUBD #200
	BLE 40$			;B TOO CLOSE
	LDA S.GLW
	ORA A$GLW(X)			;IF ALIEN BEING HIT, OR
	BNE 40$				;B SHIP RECENTLY HIT-
					;WAIT FOR SHIELDS TO STOP
	LDA FRAME+1			;FIRE SHELL
	ANDA #0F			;SPACE THEM OUT
	BNE 40$
	LDU #GUNA
32$:					;---
	LDA G$TYP(U)
	BNE 36$
	LDX S1.PRM
	LDD A$CHST(X)		;TELL ALIEN HE FIRED A GUN
	CHSET C$AG
	STD A$CHST(X)
	JSR FRAGUN
	JSR AUDCGN
	BRA 38$
36$:					;---
	LEAU G$IZE(U)			;NEXT POTENTIAL GUN
	CMPU #GUNAZ
	BLO 32$
38$:					;---
40$:					;---
				;AIM AT PLAYER
	LDX S1.PRM
	C$T0=80
	LDA A$CHTW(X)
	BITA #C$T0
	BEQ 60$
41$:
	LDA CP.YW
	BNE 50$
	LDA M.YP
	BMI 42$
	JSR SNYWR
	BRA 45$
42$:					;---
	JSR SNYWL
45$:					;---
	LDA CP.RL
	BNE 50$				;?HELP YAW BY ROLLING?
	LDB M.ZP
	SEX
	ADDB #1
	CMPB #1
	BLS 50$				;?FAR ENOUGH AWAY? AVOID JITTER
	EORA M.YP			;INVOLVE GUADRANT
	BMI 48$
	JSR SNRLL			;+Z UP, +Y RIGHT QUAD
	BRA 50$
48$:					;---
	JSR SNRLR
50$:					;---
	LDA CP.PT
	BNE 60$
	LDA M.ZP
	BMI 52$
	JSR SNPTU
	BRA 55$
52$:					;---
	JSR SNPTD
55$:					;---
	LDA CP.RL
	BNE 60$				;?ROLL AVAILABLE TO HELP PITCH?
	LDB M.YP
	SEX
	ADDB #1
	CMPB #1
	BLS 60$				;AVOID JITTER
	EORA M.ZP			;INVOLVE QUADRANTS
	BMI 58$
	JSR SNRLR			;+Z UP, +Y RIGHT QUAD
	BRA 60$
58$:					;---
	JSR SNRLL
60$:					;---
	C$T9=40				;AVOID SHOTS, 90 DEGREES TO PLAYER
	LDB M.XP
	ADDB #1
	CMPB #1
	BHI 61$			;?FINALLY AT 90 DEGREES?
	LDD A$CHST(X)
	CHSET C$A9		;THEN STATE SO
	STD A$CHST(X)
61$:				;---
	LDA A$CHTW(X)
	BITA #C$T9
	BEQ 80$				;?TURN TO 90 DEGREES?
	LDA CP.YW
	BNE 70$				;?YAW AVAILABLE?
	LDB M.XP
	SEX
	ADDB #1
	CMPB #1
	BLS 65$
	EORA M.YP			;INVOLVE QUADS
	BMI 62$
	JSR SNYWL			;+X UP, +Y RIGHT, YAW RIGHT TO INTERCEPT
	BRA 65$
62$:					;---
	JSR SNYWR
65$:					;---
	LDA CP.RL
	BNE 70$				;?HELP BY ROLLING?
	LDB M.ZP
	SEX
	ADDB #1
	CMPB #1
	BLS 70$				;AVOID JITTER
	EORA M.YP			;INVOLVE QUADRANTS
	BMI 68$
	JSR SNRLL			;+Z UP, +Y RIGHT QUAD
	BRA 70$
68$:					;---
	JSR SNRLR
70$:					;---
	LDA CP.PT
	BNE 80$
	LDB M.XP
	SEX
	ADDB #1
	CMPB #1
	BLS 80$
	EORA M.ZP			;INVOLVE QUADRANTS
	BMI 72$
	JSR SNPTD			;+Z UP, +X RIGHT QUAD
	BRA 75$
72$:					;---
	JSR SNPTU
75$:					;---
	LDA CP.RL
	BNE 80$				;?ROLL AVAILABLE TO HELP?
	LDB M.YP			;?HOW FAR AWAY FROM PITCH ARE WE?
	SEX
	ADDB #1
	CMPB #1
	BLS 80$				;AVOID DITHER
	EORA M.ZP			;SHORTEST DIRECTION PER QUAD
	BMI 78$
	JSR SNRLR			;+Z UP, +Y RIGHT QUAD
	BRA 80$
78$:					;---
	JSR SNRLL
80$:
90$:
	RTS
CPUMVL:				;
	LDX S1.PRM
	LDU A$UVP(X)
	LDA A$GLW(X)
	BNE 40$			;B NO NEW VELOCITY IF HIT
	LDA A$TYP(X)
	CMPA #3
	BEQ 40$			;B LEAVE VELOCITY ALONE IF EXPLODING
	LDB A$CHMV(X)		;MOVE INFO
	STB CP.SHF
				;---
	LDU A$UVP(X)
	LDD #0			;SET VELOCITY TO ZERO
	STD M$VX(U)
	STD M$VY(U)
	STD M$VZ(U)		;NOW LET US SLIP
20$:	C$ML=1			;LEFT
	LSR CP.SHF
	BCC 22$
	JSR SNMVL
22$:	C$MR=2			;RIGHT
	LSR CP.SHF
	BCC 24$
	JSR SNMVR
24$:	C$MU=4			;UP
	LSR CP.SHF
	BCC 26$
	JSR SNMVU
26$:	C$MD=8			;DOWN
	LSR CP.SHF
	BCC 28$
	JSR SNMVD
28$:	C$MF=10			;FORWARD
	LSR CP.SHF
	BCC 30$
	JSR SNMVF
30$:	C$MB=20			;BACKWARD
	LSR CP.SHF
	BCC 32$
	JSR SNMVB
32$:
40$:				;---
	JSR DOAMOV		;AN ALIEN MOVE
	RTS
				;---
CPCHKL:
	LDU A$UVP(X)		;ALIEN UNIT VECTORS
	.IRPC .1,<XYZ>		;DO FOR 3 AXIS
	LDD M$T'.1'(U)		;ALIEN LOC
	SUBD M$T'.1'+M.S1	;ALIEN LOC - PLAYER LOC=DISTANCE
	CMPA #7D		;CHECK FOR DISTANCE AWAY
	BLT .+2+3
	LDD #7CFF		;KEEP POSITIVE DISTANCE IN RANGE
	CMPA #82
	BGT .+2+3
	LDD #8300		;KEEP NEGATIVE DISTANCE IN RANGE
	ADDD M$T'.1'+M.S1	;ADD PLAYER LOC BACK IN
	STD M$T'.1'(U)		;CONVERTED BACK TO ACTUAL LOC
	.ENDR
	RTS
				;---
CPUGON:
	DEC WV.LIV
	BGT 30$
	LDA #PH$HPA
	STA PHASE
30$:
	RTS
	.PAGG
	.SBTTL	CHOREOGRAPHY ROUTINES
NWCHOR:				;NEW CHOREOG
	LDD #0
	STD A$CHTW(X)		;NO TWIST OR MOVE
	STA A$CHTM(X)		;TIME LEFT PER ROUTINE
	STD A$CHCN(X)		;UNTIL CONTROL MASK
	STD A$CHST(X)		;STATUS FLAGS
CHNXT:
	LDU A$CHPC(X)
	LDA 0(U)
	STA A$CHOP(X)
	BEQ CHCN.D		;DECODE CONTROL IMMEDIATELY
				;---
CHOPDO:				;DO THE OP-CODE
	LDD A$CHST(X)		;CHECK CONTROL FLAGS FIRST
	ANDA A$CHCN(X)
	BNE CHCN.E		;DO CONTROL
	ANDB A$CHCN+1(X)
	BNE CHCN.E		;DO CONTROL
	LDA A$CHOP(X)
	ANDA #7
	LSLA
	LDU #TCHOP
	JMP @A(U)
				;---
CHCN.D:				;DECODE CONTROL
	LDD 1(U)		;U--> CHINST
	STD A$CHCN(X)
	LEAU 3(U)
	STU A$CHPC(X)
	BRA CHNXT
				;---
CHCN.E:	LDU A$CHPC(X)
10$:				;---
	LDA 0(U)		;U--> CHINST
	BEQ CHNXT
	LEAU 3(U)		;CONTROL STATUS CHECK
	STU A$CHPC(X)		;SKIP UNTIL PROPER ROUTINE FOUND
	BRA 10$
				;---
TCHOP:
	.WORD CHIF.D		;0:IF
	.WORD CHGO.D		;1: GOTO
	.WORD CHGS.D		;2: GOSUB
	.WORD CHRT.D		;3: RETURN
	.WORD CHTW.D,CHTW.E	;4,5: TWIRL
	.WORD CHERR, CHERR	;6,7: UNASSIGNED
				;---
CHERR:	SWI			;ERROR
				;---
CHIF.D:				;IF MASK IS TRUE
	LDU A$CHPC(X)
10$:				;---
	LDD 1(U)
	BEQ 50$			;B DEFAULT IF, ALWAYS TRUE
	ANDA A$CHST(X)
	BNE 50$			;B HI MASK IS TRUE
	ANDB A$CHST+1(X)
	BNE 50$			;B LO MASK IS TRUE
20$:				;SKIP TO NEXT IF
	LEAU 3(U)
	LDA 0(U)
	LSLA
	BNE 20$			;NON-ZERO OP==>TRY AGAIN
	BCC 20$			;ALL ZERO==>UNTIL OP
	BRA 10$			;J OP=80==>'IF' FOUND
50$:				;---
	LEAU 3(U)
	STU A$CHPC(X)
	JMP CHNXT
				;---
CHGO.D:				;GOTO
	LDU A$CHPC(X)
	LDU 1(U)		;SET NEW PC
	STU A$CHPC(X)
	JMP CHNXT
				;---
CHGS.D:				;GOSUB
	LDU A$CHPC(X)		;SAVE RETURN ADDRESS
	LEAU 3(U)		;RETURN ADDRESS
	STU A$CHRT(X)		;
	LDU 1-3(U)		;PREVIOUS PARM IS GOSUB ADDRESS
	STU A$CHPC(X)
	JMP CHNXT
				;---
CHRT.D:				;RETURN
	LDU A$CHRT(X)		;RESTORE PC
	STU A$CHPC(X)
	JMP CHNXT
CHTW.D:				;TWIRL, DECODE
	LDU A$CHPC(X)
	LDB 0(U)		;PULL IN TIMER IN QUARTER SECONDS

	LSRB
	STB A$CHTM(X)
	LDD 1(U)		;TWIRL AND MOVE
	STD A$CHTW(X)
	LEAU 3(U)
	STU A$CHPC(X)
	INC A$CHOP(X)		;BUMP TO EXECUTE PHASE
	RTS
				;---
CHTW.E:				;TWIRL, EXECUTE
	DEC A$CHTM(X)		;TRICK OFF TIMER
	LBMI CHNXT		;B IF DONE, GET NEXT OP
	RTS			;ELSE WAIT FOR NEXT FRAME
				;---
	.PAGG
	.SBTTLE	CHOREOG MACROS
				;---
				;UNTIL :=DO UNTIL EVENT OCCURRS
	.MACRO .CUNTIL A1
	.BYTE 0			;OP CODE ALL ZEROS
	.WORD A1		;EVENT MASK
	.ENDM
				;---
				;IF := DO ONLY IF EVENT IS TRUE
	.MACRO .CIF A1
	.BYTE 80		;OP CODE ZERO
	.WORD A1		;EVENT MASK
	.ENDM
				;---
	.MACRO .CGOTO A1	;GOTO := JUMP TO NEW ADDRESS
	.BYTE 1
	.WORD A1
	.ENDM
				;---
				;GOSUB :=SUBROUTINE CALL
	.MACRO .CGOSUB A1
	.BYTE 2			;OPCODE
	.WORD A1		;SUBROUTINE ADDRESS
	.ENDM
				;---
				;RETURN :=END OF SUBROUTINE
	.MACRO .CRETURN
	.BYTE 3			;OP CODE
	.WORD 0			;BEWARE OF UNTIL AND IF CRUISING BY
	.ENDM

	.MACRO .CT A1,A2,A3
	...1=<'A1'>		;QUARTER SECONDS
	.IIF GT,...1-73,...1=73	;7 AND 3/4 SECONDS MAX
	...1=<...1&070*2>+<...1&03*8>
	.BYTE 4+...1
	.BYTE 'A2','A3'		;TWIST, MOVE
	.ENDM

	.PAGG
	.SBTTLE	VIEW	-- VIEW,VWMES,VWBYTE
	.SBTTLE 	-- SNVW,S2VW,BUMP
VIEW:
	LDA ZM.SCL		;SETUP ZOOM
	STA M.SCL
	LDA #0FF
	STA ZM.CLS
	JSR IVGEN1
	LDA #M$S1BC
	JSR IS1UV		;MATH BOX, PRIMARY INIT
	JSR RESIDU
	JSR VWMES
	JSR VWGAS
	JSR VWZOOM
	JSR INRDR		;INIT RADAR PARMS
	JSR SNVW
	JSR VWSITE
	JSR VWGUN
	JSR VWRDR		;VIEW RESULTING RADAR
	JSR VWSTAR		;FUTZES WITH VIEWER POSITION
	JSR VWGLW
90$:				;---
	JSR VGDONE
	LDA #40			;RESTORE MATH BOX SCALE
	STA M.SCL
	RTS
				;===
VIEWWM:				;VIEW WORMHOLE
	LDA ZM.SCL		;SETUP ZOOM
	STA M.SCL
	LDA #0FF
	STA ZM.CLS
	JSR IVGEN1
	LDA #M$S1BC
	JSR IS1UV		;MATH BOX, PRIMARY INIT
	JSR RESIDU
	JSR VWMES
	JSR VWGAS
	JSR VWZOOM
	JSR VWBASE		;VIEW STAR BASE
	JSR INRDR		;INIT RADAR PARMS
;
;	JSR SNVW
;
	JSR VWLAZ
	JSR VWRDR		;VIEW RESULTING RADAR
	JSR VWGLW
90$:				;---
	JSR VGDONE
	LDA #40			;RESTORE MATH BOX SCALE
	STA M.SCL
	RTS
VWMES:
	LDD #8040		;CENTER
	STD (Y)++
	LDD #7100		;SCALE
	STD (Y)++
	LDD #6480+VGCWHT	;BRITE
	STD (Y)++
	LDD #1C2		;HI UP
	STD (Y)++
	LDD #1D88		;LEFT
	STD (Y)++
	LDA S.SC87
	JSR VWBYTE
	LDA S.SC65
	JSR VWBYTE
	LDA S.SC43
	JSR VWBYTE
	LDA S.SC21
	JSR VWBYTE
	LDD #1FC4		;Y DOWN
	STD (Y)++
	LDD #1FB8		;X LEFT
	STD (Y)++
	LDA WV.LVL		;LEVEL NUMBER
	JSR VWBYTE
	LDD #8040
	STD (Y)++
	RTS
VWBYTE:
	TFR A,B
	LSRB
	LSRB
	LSRB
	ANDB #1E
	LDU #VGMSGA+2
	LDU B(U)
	STU (Y)++
	LSLA
	ANDA #1E
	LDU #VGMSGA+2
	LDU A(U)
	STU (Y)++
	RTS
SNVW:
	LDA S.GLW
	BNE 96$			;NO SHIPS DURING SHIELDS
	LDD #0FFFF
	STD VW.MND		;CLOSEST DISTANCE TO ANY ALIEN
	LDD #0
	STD S1.RNG		;NO ALIEN IN RANGE
	LDX #ALIEN		;SHIP PARAMS
10$:				;---LOOP THRU SHIPS
	STX S2.PRM
	LDA A$TYP(X)
	BEQ 90$			;?SOMEWHAT ALIVE?
	JSR S2VW		;VIEW THE SHIP
90$:				;---
	LDX S2.PRM		;NEXT SHIP
	LEAX A$IZE(X)
	CMPX #ALIENZ
	BLO 10$
96$:				;---
RTS1:	RTS
S2VW:
	LDX S2.PRM
	LDA A$BIC(X)
	ADDA #3
	STA M.BIC
	LDA #M$PSB2
	JSR MGOWT
	LDB A$TYP(X)
	CMPB #4
	BEQ 110$		;?NOT GAS CAN?
	LDA #RD$AS		;ASSUME ALIEN SHIP
	LDB A$GLW(X)
	BNE 109$		;B SHOW EXPLODE IF GLOW
	LDB A$TYP(X)
	CMPB #3
	BNE 11$			;B NORMAL SHIP IF NO EXPLODE
	LDB A$DIE(X)
	BEQ 111$		;B NO RADAR IF DONE EXPLODING
109$:				;---
	LDB FRAME+1
	ANDB #2
	BNE 11$			;FLASH ALIEN BLIP
	LDA #RD$AE		;ALIEN HIT(EXPLODING)
	BRA 11$
110$:				;---
	LDA #RD$GS
11$:				;---
	JSR ADRDR
111$:				;---
	LDD #0FFFF
	STD VW.DST		;DISTANCE TO THIS ALIEN
	LDA M.XP
	LSLA			;-4000<X<4000 FOR VALID SQUARING
	BVS 12$
	LDA M.YP
	LSLA
	BVS 12$
	LDA M.ZP
	BVS 12$
	LDD M.XPS		;CHECK FOR COLLISION
	ADDD M.YPS
	ADDD M.ZPS
	TFR D,U
	STU VW.DST		;DISTANCE TO THIS OBJECT
	CMPU VW.MND		;?NEW MIN DISTANCE?
	BHS 114$
	STU VW.MND
114$:				;---
	CMPU #8
	BHI 12$			;?PLAYER NEARBY?
	LDD A$CHST(X)
	CHSET C$PN		;THEN SET PLAYER NEAR
	STD A$CHST(X)
	CMPU #01
	BHI 12$			;?PLAYER COLLIDE?
	JMP BUMP		;TOO NEAR ALSO, SKIP OUT
12$:
	LDD M.XCL		;SCALED X--FOR ZOOM
	CMPD #10
	BLE RTS1
	CMPD #7F00
	LBHI RTS1
19$:				;----SAVE NEW X
	STD M.DVD
	LDD M.XP
	STD M.XT
	LDD M.YP
	STD M.YT
	LDD M.YPS
	SUBD M.XCS		;X SCALED SQUARED
	LBHS RTS1		;B OUT OF VIEW
28$:				;---
	LDD M.ZP
	STD M.ZT
	LDD M.ZPS
	SUBD M.XCS		;X SCALED SQUARED
	LBHS RTS1
31$:				;---
	LDD A$CHST(X)
	CHSET C$PV		;WITHIN PLAYERS VIEW SCREEN
	STD A$CHST(X)
	LDX S2.PRM
	LDA A$DMC(X)
	STA BJ.DMC
	LDA A$BIC(X)
	JSR IS2UV		;DOWNLOAD SHIP 2 UNIT VECTORS
				;SHIP 2 VISIBLE
	JSR OBJCEN		;PROCESS CENTER OF SHIP
				;---
				;ZOOM--RECORD CLOSEST SHIP TO CENTER
	LDD BJ.CX		;
	ASRA			;+-512.
	RORB
	TSTA
	BPL 52$			;FOLD INTO 0..255
	COMB			;AVOID OVERFLOW
52$:				;---
	STB ZM.MXT		;KEEP FOR TESTING
	LDD BJ.CY		;
	ASRA			;FROM +-512.
	RORB
	TSTA
	BPL 54$			;DOWN TO 0..255
	COMB			;AVOID OVERFLOW
54$:				;---
	CMPB ZM.MXT		;GET MAX COORD
	BHS 56$
	LDB ZM.MXT
56$:				;---
	CMPB ZM.CLS		;NOW DETERMINE CLOSEST SHIP
	BHS 58$
	STB ZM.CLS
58$:				;---
	LDD BJ.CX		;?WITHIN X.SITES?
	SUBD SI.CX		;SITE POSITION
	ADDD #40
	SUBD #80
	BHS 86$			;B NOPE
	LDD BJ.CY		;?WITHIN Y.SITES?
	SUBD SI.CY		;SITE UP/DOWN POSITION
	ADDD #40
	SUBD #80
	BHS 86$
	LDX S2.PRM
	LDA A$TYP(X)
	CMPA #1
	BNE 86$			;?ALIVE?
	LDD A$CHST(X)
	CHSET C$PS		;STATUS: ALIEN IN PLAYER SITES
	STD A$CHST(X)
84$:				;---
	LDD BJ.CX		;?WITHIN X.MIDDLE OF SCREEN?
	ADDD #40
	SUBD #80
	BHS 86$			;B NOPE
	LDD BJ.CY		;?WITHIN Y.MIDSCREEN?
	ADDD #40
	SUBD #80
	BHS 86$
	LDX S2.PRM
	STX S1.RNG		;THIS ALIEN IN RANGE FOR BOMB
86$:				;---
				;SET BRITENESS
				;ELSE HANDLE GLOW
				;---
	LDX S2.PRM
	LDA A$TYP(X)
	CMPA #4
	BNE 48$			;?FUEL CELL?
	LDD #6480+VGCTRQ	;TURQOISE TIMER
	STD (Y)++
	LDA #5			;THEN SHOW TIMER
	PSHS A			;*S*
	LDD M.XCL		;SET UP FOR LINEAR SCALE
	ADDD #0			;TWEAK
42$:				;---
	DEC (S)			;BINARY SCALE
	BEQ 46$			;B STOP AT BIGGEST
	LSLB			;NORMALIZE LINEAR FRACTION
	ROLA
	BPL 42$			;B NOT YET NORMALIZED
46$:				;---
	ANDA #7F		;MASK FOR LIN SCALE
	PULS B			;*S*
	ORB #70			;OP CODE
	STB (Y)+
	STA (Y)+
	LDA A$SPD(X)
	JSR VWBYTE		;SHOW TIMER
	LDD #0
	STD (Y)++
	LDD #1FD0
	STD (Y)++		;GET BACK TO CENTER
	LDD #7100
	STD (Y)++		;RESTORE NORMAL SCALE
	LDD #6480+VGCWHT	;WHITE GASOLINE (UNLEADED)
	STD (Y)++
	BRA 55$			;B SKIP OVER ALIEN COLOR
48$:				;---
	LDB A$DIE(X)
	BEQ 34$
	ANDB #1F
	LDU #TVWCLE
	LDB B(U)
	BRA 38$
34$:
	LDB A$GLW(X)
	LDU #TVWCL		;GET GLOW COLORS
	LDB B(U)
38$:				;---
	LDA #64
	STD (Y)++
55$:				;---
	LDA #M$CNCT
	JSR MGOWT
				;
	LDB A$PIC(X)
	JSR OBJPNT		;PROCESS OBJECT POINTS
	LDD #7100
	STD (Y)++
	JSR OBJDRW		;DRAW THE OBJECT LINES
	LDD #8040		;CENTER
	STD (Y)++
90$:
	RTS
TVWCL:				;VIEW SHIP COLOR BRITE IF HIT
	.BYTE 0C2,0D2,0E2,0F2
	.BYTE 0F2,0F2,0F3,0F3
	.BYTE 0F2,0F2,0F6,0F6
	.BYTE 0F2,0F2,0F7,0F7
TVWCLE:				;VIEW EXPLODE
	.BYTE 0,94,0A4,0B4,0C4,0D4,0E4,0F4
	.BYTE 87,0F4,0A7,0F4,0C7,0F4,0E7,0F4
	.BYTE 0F7,0F4,0F7,0F4,0F7,0F4,0F7,0F4
	.BYTE 0F2,0F1,0F2,0F1,0F2,0F1,0F2,0F1
				;---
				;---
BUMP:				;BUMP INTO FUEL CELL
				;X==>ALIEN PARMS
	LDA #0			;ADD FUEL TO GAS CAN
	JSR ADCGAS
	LDA A$TYP(X)
	CLR A$TYP(X)
	CMPA #1
	BEQ 14$			;?BUMPED SAFE (DEAD) ALIEN OR GAS CAN?
	LDU TSCGSB
	JSR ADUSCR
	BRA 40$
14$:				;---
	JSR BG1GLW		;START THE SHIELDS GLOWING
	JSR CPUGON
	LDU #TSCA1B		;SCORE -- BUMPED OFF ALIEN
	JSR ADUSCR
	LDX #ALIEN		;SEND ALIEN DISTRESS SIGNAL
20$:				;---
	LDA A$TYP(X)
	CMPA #1
	BNE 30$			;?A LIVE ALIEN?
	LDA #0FF
	STA A$TRGT(X)		;THEN AIM AT PLAYER
	LDD A$CHST(X)
	CHSET C$AH+C$AD		;STATUS: SOME ALIEN HIT AND DIED
	STD A$CHST(X)
30$:				;---
	LEAX A$IZE(X)
	CMPX #ALIENZ
	BLO 20$
40$:				;---
	RTS
	.PAGG
	.SBTTL	SITE
VWSITE:				;---
	LDA S.GLW
	BEQ 5$
	RTS
5$:				;---
	LDD S1.RNG
	BNE 20$
	LDD #6480+VGCWHT	;NORMAL SITE
	BRA 24$
20$:				;---
	LDD #64F0+VGCYLW	;IN RANGE
24$:				;---
	STD (Y)++		;COLOR BRITE
				;---JOY MOVES CURSOR
	LDB SI.RSY
	LDA SI.RSY+1		;REVERSE LDD
	NOP			;NOP FOR NORMAL, COMB FOR FLIP
	NOP			;COMA FOR FLIP
	ANDA #0C0		;ONLY NEED TOP TWO BITS
	LSLA			;SHIFT UP LO VALUES
	ROLB			;FROM +-128 TO +-256
	BCC 34$			;?NEGATIVE?
	ORA #3F			;AFTER TWO SHIFTS IS SEX'D
34$:				;---
	ROLA
	ROLB			;UP TO +-512
	ROLA			;NOW OF FORM 1FFF, VECTOR OPCODE
	STD SI.CX		;CURRENT SITE X POS
	ANDA #01F		;VECTOR OPCODE
	STD (Y)++		;Y
				;---YAW CURSOR IN X POSITION
	LDB SI.RSX
	LDA SI.RSX+1		;REVERSE LDD
	COMB			;NOP FOR NORMAL, COMB FOR FLIP
	COMA			;COMA FOR FLIP
	ANDA #0C0		;ONLY SHIFT IN TOP TWO BITS
	LSLA			;SHIFT UP LO VALUES
	ROLB			;FROM +-128 TO +-256
	BCC 44$			;?NEGATIVE?
	ORA #03F		;BECOMES SEX'D AFTER TWO SHIFTS
44$:				;---
	ROLA
	ROLB			;UP TO +-512
	ROLA			;
	STD SI.CY		;CURRENT SITE UP/DOWN
	ADDD #00AA		;OFFSET TO CENTER
	ANDA #01F		;KEEP BRITENESS ZERO
	STD (Y)++
	LDD #7100
	STD (Y)++
	LDD VGSITE
	STD (Y)++
	RTS


	.PAGG
	.SBTTL	STARS--VWSTAR,STGLIT,STARGN,STARNW
VWSTAR:
	LDD ST.UX		;STARS RELATIVE MOVEMENT
	STD M$TX+M.U1

	LDX #ST.QU
	LDD #0
4$:				;---
	STD 0(X)++		;CLEAR OUT STAR QUE
	CMPX #ST.QUZ
	BLO 4$
				;---
	STA ST.GNB		;NO STAR TO GEN YET
	LDA S.GLW
	LDX #TSTDIM
	LDA A(X)
	STA ST.DIM
	LDD #6480+VGCWHT
	SUBB ST.DIM
	STD 0(Y)++
	LDA ST.IBC
	STA M.BIC
	STA ST.BIC
	NEGA			;ALL STARS TO END OF BIC
	STA ST.CNT
	LDU #ST.PNT		;BEGIN OF CONVERTED STAR POINTS
	LDX ST.IRM		;STAR ADDRESS
10$:				;---
	STX ST.RAM		;MATH RAM POINTER
				;---
	.IF NE,0		;QU IS FAST, BUT DISORDERS STAR COLORS
	LDB ST.CNT		;VARY STAR INTENSITY
	CMPB #0F		;1/2 DIM, 3/8 MED, 1/8 VERY BRITE
	BNE 12$
	LDD #64C0+VGCYLW	;MEDIUM
	BRA 13$
12$:				;---
	CMPB #3
	BNE 14$
	LDD #64F0+VGCRED	;BRITE
13$:				;---
	SUBB ST.DIM
	STD (Y)++		;NEW BRITE
	.ENDC
14$:				;---
	LDA #M$PSB2
	JSR MGOWT
	LDD M.XCL		;SCALED X--FOR ZOOM
	CMPD #100
	LBLE 90$			;B ?TOO CLOSE OR IN BACK? THEN NEW STAR
	CMPD #0FFF
	LBHI 90$		;B ?TOO FAR IN FRONT OR IN BACK?
	STD M.DVD
	LDD M.YPS		;?WIDTH IN VIEW OF ZOOM?
	CMPD M.XCS		;X SCALED SQUARED
	BLO 40$			;B THEN CHECK Z HITE
	SUBD M.XPS		;ELSE BEYOND ZOOM VIEW
	BHS 90$			;B ?BEYOND NORMAL VIEW ALSO? THEN GEN NEW STAR
	LDD M.ZPS		;ELSE TRANSFORM TO DISTANT STAR
	BRA 45$			;J BUT FIRST CHECK Z HITE FEASIBILITY
40$:				;---
	LDD M.ZPS		;?HITE IN VIEW OF ZOOM?
	CMPD M.XCS		;X SCALED SQUARED
	BLO 60$			;B THEN VIEW IT AS IS
45$:				;---
	SUBD M.XPS		;ELSE OUT OF ZOOMED VIEW
	BHS 90$			;B IF OUT OF NORMAL VIEW ALSO, GEN NEW STAR
	LDD M.XCL		;TRANSFORM TO DISTANT STAR
	LSLB			;GET SCALED DEPTH * FOUR
	ROLA
	LSLB
	ROLA
	STD M.DVD
	ORCC #0			;7.5 CYCLES FOR DIVIDE (3 HERE)
60$:				;---
				;CENTER
	LDD M.QUO		;  (PLUS 4.5 CYCLES BEFORE READ)
	STD M.XP
	LDA #M$PERS
	JSR MGOWT
	CLRB			;NO SECTOR YET
	LDA M.ZP
	LSRA
	ROLB			;EVERY 256 Y
	LSRA
	ROLB			;SIDE FOR +-512.
	LDA M.YP
	LSRA
	ROLB			;EVERY 256 X
	LSRA
	ROLB			;SIDE FOR +-512.
	LDA #ST$IZQ
	MUL
	LDX #ST.QU
	ABX			;X-->QUE BLOCK
	LDD ST$QHD(X)
	BNE 72$			;?FIRST IN THIS QU?
	STU ST$QHD(X)		;POINT TO FIRST STAR
	BRA 73$			;B NO PREVIOUS STAR
72$:				;---
	.IIF NE,ST$PP,.ERROR POINTER OFFSET MUST BE ZERO FOR @ TO WORK
	STU @ST$QTL(X)		;INITS FORWARD POINTER IN LAST (OR ONLY) ENTRY
73$:				;---
 	STU ST$QTL(X)		;TAIL POINTS TO LAST (OR ONLY)ENTRY
	LDD #0
	STD ST$PP(U)		;LAST ENTRY HAS ZERO POINTER
				;---
	LDD M.ZP
	SUBD ST$QCY(X)		;GET RELATIVE OFFSET
	ANDA #1F
	STD ST$PY(U)		;Y LONG VECTOR
	LDD M.YP
	SUBD ST$QCX(X)		;ANOTHER RELATIVE OFFSET
	ANDA #1F		;X LONG VECTOR
	ORA #00			;BRITENESS
	CMPU ST$QHD(X)		;?AFTER FIRST STAR PER SECTOR?
	BEQ 74$
	ORA #00			;SHOW INTERCONNECT GRAPH
74$:				;---
	STD ST$PX(U)
	LDD M.ZP
	STD ST$QCY(X)		;NEW Y ABSOLUTE
	LDD M.YP
	STD ST$QCX(X)		;NEXT X ABSOLUTE
				;---
	LEAU ST$IZP(U)		;NEXT STAR ENTRY
	BRA 95$
90$:				;---
	LDX ST.RAM
	JSR STARNW
	JMP 95$			;***
	LDA ST.BIC
	STA ST.GNB		;GEN NEW STAR AT THIS BIC
	LDD ST.RAM
	STD ST.GNR		;NEW STARS MATH RAM ADDRESS
95$:
	INC ST.BIC
	LDX ST.RAM
	LEAX 8(X)
	DEC ST.CNT
	LBNE 10$
				;===
				;DISPLAY QUEUED STARS BY SECTOR LOCATION
	LDX #ST.QU
110$:				;LOOP THRU QUEUES
	LDU ST$QHD(X)
	BEQ 160$		;?STARS IN THIS SECTOR?
	LDD #0
	STD (Y)++
	LDD #0AA		;OFFSET X
	STD (Y)++
120$:				;---LOOP THRU STARS
	LDD ST$PY(U)		;Y PORTION
	STD (Y)++
	LDD ST$PX(U)		;X PORTION
	STD (Y)++
	LDD VGSTAR
	STD (Y)++		;DRAW STAR SHAPE
	LDU ST$PP(U)		;POINTER TO NEXT STAR
	BNE 120$		;B LOOP IF MORE STARS
				;---
	LDD #8040
	STD (Y)++		;CENTER AFTER SECTOR OF STARS
160$:				;---
	LEAX ST$IZQ(X)		;NEXT SECTOR'S QUEUE
	CMPX #ST.QUZ
	BLO 110$
				;---
	JMP 170$		;***NO GEN
	LDA ST.GNB
	BEQ 170$		;?SLOT AVAILABLE FOR NEW STAR?
	JSR STARGN
170$:				;---	
	RTS
				;---
TSTDIM:				;DIM STARS
	.BYTE 0,0
	.BYTE 93,23,43,63,83,80,80,80
	.BYTE 80,80,80,86,66,46,40,20,0
	.BYTE 0,0,0,0
				;===

STGLIT:			;STAR GLITTER
	RTS
			;********************
	LDA ST.IBC
	STA M.BIC
	STA ST.BIC
	NEGA			;REST OF BIC IS ALL STARS
	STA ST.CNT
	LDX ST.IRM
10$:				;---
	LDA #M$PSB2
	JSR MGOWT
	LDD M.XP
	CMPD #100
	BLT 90$			;B TOO CLOSE
	CMPD #6000
	BHI 90$
	STD M.DVD
	LDD M.YPS
	SUBD M.XCS
	BHS 90$			;KEEP Y WITHIN BOUNDS
	LDD M.ZPS
	SUBD M.XCS
	BHS 90$			;B KEEP Z WITHIN VIEW
	LDD M.QUO		;REMEMBER, 7.5 CYCLES
	STD M.XP
	LDA #M$PERS
	JSR MGOWT
	LDD M.ZP		;(0,1,2,3)MOVE FROM CENTER TO STAR
	ANDA #1F
	STD 0(Y)
	LDD M.YP		;(2,3)X DIRECTION
	ADDD #0AA
	ANDA #1F
	ORA #0			;TEST--PATCH TO 80 TO SEE VECTOR
	STD 2(Y)
				;---
	LDD ST.SCL		;(4,5)VARIABLE SCALE
	STD 4(Y)
				;---
	LDD VGHPST		;(6,7)HYPER STAR SHAPE
	STD 6(Y)
				;---
	LDD #0			;(8,9,10,11)STREAK TO MIDDLE
	SUBD M.ZP		;(8,9) Y DIRECTION
	ANDA #1F
	STD 8(Y)
	LDD #0			;(10.,11.) X DIRECTION
	SUBD M.YP
	ANDA #1F
	ORA #20			;DEFAULT BRITE
	STD 10.(Y)
				;---
	LDD VGHPCN		;(12.,13.)CENTER AND RESET SCALE
	STD 12.(Y)
				;---
	LEAY 14.(Y)		;BUMP PAST THIS STAR
	BRA 95$
90$:				;---
	JSR STARNW
95$:				;---
	INC ST.BIC
	LEAX 8(X)
	DEC ST.CNT
	LBNE 10$
	RTS
STARGN:			;---
	LDX ST.GNR		;OLD STAR'S MATH RAM SLOT
	LDA ST.GNB
	STA M.BIC		;SETUP BIC
	LDA #M$PSB2		;GET BAD POINTS
	JSR MGOWT
	JSR RND8		;SET UP VISUAL X,Y,Z
	LDA RND.S1
	ANDA #01F
	LDB RND.S2
	STD 0(X)
	MUL
	TST M.YPH		;B SELECT SIGN OPPOSITE OF CURRENT
	BMI 20$
	NEGA
20$:				;---
	STD 2(X)
	LDA RND.S1
	ANDA #01F
	LDB RND.S3
	MUL
	TST M.ZPH
	BMI 30$
	NEGA
30$:
	STD 4(X)
	LDA ST.GNB		;REDO CURRENT STAR
	STA M.BIC
	LDA #M$S1UN		;DO POST ADD
	JSR MGOWT
	LDD M.XP		;STORE UNIVERSE COORDINATES
	STD 0(X)
	LDD M.YP
	STD 2(X)
	LDD M.ZP
	ANDA #0FF
	ANDB #0FF
	STD 4(X)
	RTS
STARNW:			;---
	JSR RND8		;SET UP VISUAL X,Y,Z
	LDA RND.S1
	ANDA #01F
	LDB RND.S2
	STD 0(X)
	MUL
	TST M.YPH		;B SELECT SIGN OPPOSITE OF CURRENT
	BMI 20$
	NEGA
20$:				;---
	STD 2(X)
	LDA RND.S1
	ANDA #01F
	LDB RND.S3
	MUL
	TST M.ZPH
	BMI 30$
	NEGA
30$:
	STD 4(X)
	LDA ST.BIC		;REDO CURRENT STAR
	STA M.BIC
	LDA #M$S1UN		;DO POST ADD
	JSR MGOWT
	LDD M.XP		;STORE UNIVERSE COORDINATES
	STD 0(X)
	LDD M.YP
	STD 2(X)
	LDD M.ZP
	ANDA #0FF
	ANDB #0FF
	STD 4(X)
				;RESTORE MATH BOX
				;BIC ALREADY UPDATED BY PREVIOUS OP
	RTS
	.PAGG
	.SBTTLE	VIEW STARBASE--VWBASE,BSGNDT,BSVBOT,BSVSID,BSVSDS,BSVFAR

NWBASE:
	LDX #PANEL
	LDA #33
10$:				;---
	STA (X)+
	CMPX #PANELZ
	BLO 10$
				;---
	RTS
DOBASE:				;
	LDD BS.SSP
	ADDD BS.SPD 
	STD BS.SSP
	RTS

VWBASE:
	JSR VWPANEL
	JSR BSVBOT		;VIEW BOTTOM LINES
	JSR BSVSID		;VIEW SIDES
	JSR BSVFAR
	RTS			;*** NEED NEW STAR VIEW VIA TOP SLOT IN TRENCH
				;***
	LDD BS.SSP		;SET STAR SPEED VIA FAKE X
	STD M$TX+M.U1
	LDD #6440+VGCWHT
	STD 0(Y)++
	LDA BS.IBC
	STA M.BIC
	STA BS.BIC
	NEGA			;ALL STARS TO END OF BIC
	STA BS.CNT
	LDX BS.IRM		;STAR ADDRESS
10$:				;---
				;---
	LDB BS.CNT		;VARY STAR INTENSITY
	CMPB #0F		;1/2 DIM, 3/8 MED, 1/8 VERY BRITE
	BNE 12$
	LDD #6460+VGCYLW	;MEDIUM
	BRA 13$
12$:				;---
	CMPB #3
	BNE 14$
	LDD #6480+VGCRED	;BRITE
13$:				;---
	STD (Y)++		;NEW BRITE
14$:				;---
	LDA #M$PSB2
	JSR MGOWT
	LDD M.XP
	CMPD #100
	BLE 90$			;B ?TOO CLOSE OR IN BACK? THEN NEW STAR
	CMPD #07FFF
	BGT 95$			;B ?TOO FAR?
	STD M.DVD
	LDD M.XPS		;FASTER THAN ABSOLUTE VALUES
	CMPD M.YPS
	BLS 90$
	CMPD M.ZPS		;?Z WITHIN VIEW?
	BLS 90$
				;---
	LDD M.QUO		;  (PLUS 4.5 CYCLES BEFORE READ)
	STD M.XP
	LDA #M$PERS
	JSR MGOWT
	LDD M.ZP
	ANDA #1F
	STD (Y)++		;Y LONG VECTOR
	LDD M.YP
	ADDD #0AA		;ADJUST FOR CENTER OF VIEW
	ANDA #1F		;X LONG VECTOR
	ORA #00			;BRITENESS
	STD (Y)++
	LDD VGBSST		;PLACE A DOT
	STD (Y)++		;AUTOMATICALLY FOLLOWED BY CENTER
	BRA 95$
90$:				;---
	JSR BSGNDT		;GEN NEW DOT FOR BASE
95$:
	INC BS.BIC
	LEAX 8(X)
	DEC BS.CNT
	LBNE 10$
				;---
	LDD M$TX+M.S1		;RESTORE ORIGINAL X POSITION
	STD M$TX+M.U1
				;---
	RTS
				;===
BSGNDT:			
	JSR RND8		;SET UP VISUAL X,Y,Z
	LDD RND.S1
	LSRA			;KEEP POSITIVE
	STD 0(X)		;OUR NEW X
	LDB RND.S4		;Z RANDOM
	MUL
	ADDA #2			;KEEP STARS ABOVE TRENCH
	STD 4(X)		;Z:
	LSLA
	LDB RND.S3		;Y RANDOM WITHIN TWICE Z
	MUL
	BCS 40$			;RANDOM BIT
	NEGA			;FLIP Y TO LEFT SIDE
40$:				;---
	STD 2(X)
				;---
	LDD 0(X)		;TRANSLATE TO UNIVERSE
	ADDD M$TX+M.U1
	STD 0(X)
				;---
	RTS
				;===

BSVBOT:				;VIEW BOTTOM OF BASE TRENCH
	LDD #0
	STD M$TX+M.U1		;KEEP VIEWER AT START OF TRENCH
	LDD #6480+VGCGRN
	STD (Y)++
	LDU #TBSBL		;BOTTOM LINE TABLE
10$:				;---
	LDD #7F00		;DISTANT EDGE
	STD M.X0
	LDD 0(U)		;Y OFFSET
	STD M.Y0
	LDD 2(U)		;Z OFFSET
	STD M.Z0
	LDA #M$X0BC
	STA M.BIC
	LDA #M$PSB2
	JSR MGOWT		;PRESUB 2
	LDD M.XP
	STD M.DVD		;FORCED POSITIVE BY TABLE
	JSR BJCNTR		;START FROM CENTER SCREEN
	LDA #M$X0BC
	STA M.BIC
	LDA #M$PSB2
	JSR MGOWT
	LDD M.YP
	BPL 44$
	NEGD
44$:				;---
	STD M.XP
	LDD M.ZP
	BPL 46$
	NEGD
46$:				;---
	CMPD M.XP		;CLIPPING X
	BLE 48$
	STD M.XP
48$:				;---
	LDD M.XP
	STD M.DVD
	JSR BJLINV		;DRAW VISIBLE LINE
	LDD #8040		;RECENTER
	STD (Y)++
				;---
	LEAU 4(U)		;NEXT TABLE ENTRY
	CMPU #TBSBLZ
	BLO 10$			;LOOP
				;---
	LDD M$TX+M.S1		;RESTORE X
	STD M$TX+M.U1
	RTS
				;===
TBSBL:				;BASE BOTTOM LINES
	.WORD -400,0		;TOP LEFT PANEL
	.WORD 400,0		;TOP OF RIGHT PANEL

	.WORD -400,-1000	;FAR LEFT BOTTOM
	.WORD -200,-1000	;LEFT THIRD
	.WORD 200,-1000		;RIGHT THIRD
	.WORD 400,-1000		;FAR RIGHT BOTTOM

TBSBLZ:
				;===

BSVFAR:				;VIEW FAR END OF BASE TRENCH
	LDD #0
	STD M$TX+M.U1		;KEEP VIEWER AT START OF TRENCH
	LDD #6480+VGCGRN
	STD (Y)++
	LDU #TBSBF		;FAR END LINE TABLE
10$:				;---
	LDD 0(U) 
	STD M.X0
	LDD 2(U)		;Y OFFSET
	STD M.Y0
	LDD 4(U)		;Z OFFSET
	STD M.Z0
	LDA #M$X0BC
	STA M.BIC
	LDA #M$PSB2
	JSR MGOWT		;PRESUB 2
	LDD M.XP
	STD M.DVD		;FORCED POSITIVE BY TABLE
	JSR BJCNTR		;START FROM CENTER SCREEN
	BRA 60$
20$:				;---
	LDD 0(U)		;X OFFSET
	STD M.X0		;NEAR END OF LINE
	LDD 2(U)
	STD M.Y0
	LDD 4(U)
	STD M.Z0
	LDA #M$X0BC
	STA M.BIC
	LDA #M$PSB2
	JSR MGOWT
	LDD M.XP
	STD M.DVD
	JSR BJLINV		;DRAW VISIBLE LINE
60$:				;---
	LEAU 6(U)		;NEXT TABLE ENTRY
	CMPU #TBSBFZ
	BLO 20$			;LOOP
				;---
	LDD #8040		;RECENTER
	STD (Y)++
	LDD M$TX+M.S1		;RESTORE X
	STD M$TX+M.U1
	RTS
				;===

TBSBF:				;FAR END LINE POINTS
	.WORD 7F00,-400,0	;TOP LEFT PANEL
	.WORD 7F00,-400,-1000	;FAR LEFT BOTTOM
	.WORD 7F00,400,-1000	;FAR RIGHT BOTTOM
	.WORD 7F00,400,0	;TOP OF RIGHT PANEL
TBSBFZ:
				;===

BSVSID:				;VIEW SIDE OF BASE TRENCH
	LDD M$TX+M.U1
	ANDA #0F
	ANDB #0FF		;KEEP LOW DIGITS
	STD M$TX+M.U1		;KEEP VIEWER AT START OF TRENCH
	LDD #6480+VGCGRN
	STD (Y)++
	LDD #1000
	STD M.X0
	LDD #-400		;LEFT SIDE
	STD M.Y0
	JSR BSVSDW		;VIEW WHOLE LEFT SIDE
	LDD #1000
	STD M.X0
	LDD #400		;RIGHT SIDE
	STD M.Y0
	JSR BSVSDW
	LDD M$TX+M.S1
	STD M$TX+M.U1		;RESTORE VIEWER X POS
				;---
	RTS
				;===

BSVSDW:				;VIEW WHOLE OF ONE SIDE
	LDD M.X0
	SUBD M$TX+M.U1		;DISTANCE TO FIRST PANEL
	SUBD #400		;KEEP WITHIN 45 DEGREE VIEW
	BGT 10$
	LDA M.X0
	ADDA #10		;THEN START WITH PANEL #2
	STA M.X0
10$:				;---
	LDD #-1000		;BOTTOM EDGE
	STD M.Z0
	LDA #M$X0BC
	STA M.BIC
	LDA #M$PSB2
	JSR MGOWT		;PRESUB 2
	LDD M.YP		;CLIP THE LINE OUT
	BPL 34$
	NEGD
34$:				;---
	SUBD M.XP
	BGE 80$			;B SKIP LINE IF NOT IN VIEW
				;---
	LDD M.ZP		;CLIP Z ALONG X AXIS
	BPL 42$
	NEGD
42$:				;---
	CMPD M.XP
	BLE 48$			;B IF WITHIN VIEW
	LDD M.XP		;ELSE CLIP
	TST M.ZP
	BPL 46$
	NEGD
46$:				;---
	STD M.ZP
48$:				;---
	LDD M.XP
	STD M.DVD		;FORCED POSITIVE BY TABLE
	LDD #-0AA
	STD BJ.CX		;INIT VECTOR POS TO ZERO
	LDD #0
	STD BJ.CY
	JSR BJLINB		;START FROM CENTER SCREEN
	LDD #0
	STD M.Z0		;TOP OF SIDE PANELS
	LDA #M$X0BC
	STA M.BIC
	LDA #M$PSB2
	JSR MGOWT
	LDD M.ZP		;CLIP Z ALONG X AXIS
	BPL 62$
	NEGD
62$:				;---
	CMPD M.XP
	BLE 68$			;B IF WITHIN VIEW
	LDD M.XP		;ELSE CLIP
	TST M.ZP
	BPL 66$
	NEGD
66$:				;---
	STD M.ZP
68$:				;---
	LDD M.XP
	STD M.DVD
	JSR BJLINV		;DRAW VISIBLE LINE
	LDD #8040		;RECENTER
	STD (Y)++
80$:				;---
	LDA M.X0
	ADDA #10
	STA M.X0
	CMPA #7F
	LBLO 10$
				;---
	LDD #8040		;CENTER
	STD (Y)++
				;---
	RTS
				;===
	.PAGG
	.SBTTL BASESTAR PANELS -- VWPANEL,PNVLW

VWPANEL:			;VIEW THE PANELS
	JSR PNVLW		;VIEW LEFT WALL PANELS
	JSR PNVLB		;VIEW LEFT BOTTOM PANELS
	JSR PNVRB		;VIEW RIGHT BOTTOM PANELS
	JSR PNVRW		;VIEW RIGHT BOTTOM PANELS
	RTS
				;===

PNVLW:				;VIEW THE LEFT PANELS
	LDB M$TX+M.U1		;SETUP POINTER TO PANEL FLAGS
	SUBB #10		;POINT TO PREVIOUS PANEL(-1)
	LSRB
	LSRB
	LSRB
	LSRB
	ANDB #7
	LDX #PNLW		;FLAG ARRAY
	ABX
	LDB P.RND1		;TURN PANELS RANDOMLY ON
	SEX
	ANDA P.RND1
	ANDA P.RND1
	STA (X)+		;AND ADVANCE TO PANEL 0 (RELATIVE)
				;---
	LDD #0FFF
	SUBD M$TX+M.U1		;GET RELATIVE DISP WITHIN PANEL
	ANDA #0F
	ADDD #0F800			;OFFSET TO FIRST VIEWABLE PANEL
	STD M.XT
	LDD #-400
	SUBD M$TY+M.U1
	STD M.YT
30$:				;---LOOP EACH SEGMENT
	LDD #-0E00		;BASE START(MID OF LOWEST SEGMENT)
	SUBD M$TZ+M.U1
	STD M.ZT
	LDD #-0AA
	STD BJ.CX		;SCREEN INIT
	LDD #0
	STD BJ.CY
	CMPX #PNLWZ
	BLO 34$			;HANDLE WRAPAROUND
	LEAX PNLW-PNLWZ(X)	;MOVE BACK MOD(WHOLE TABLE)
34$:				;---
	LDA (X)+		;GET FLAGS
	LBEQ 75$			;B END OF SEG IF PANELS DEAD
40$:				;---LOOP EACH PANEL
	STA PN.FLG		;WORKING FLAG BITS
	ANDA #3
	LBEQ 68$		;B END OF CURRENT SEGMENT
	CMPA #2
	BLO 44$			;B IS 1
	BEQ 42$			;B IS 2
	LDD #6480+VGCGRN	;3 IS FULL ALIVE
	BRA 48$
42$:				;---
	LDD #6480+VGCYLW	;2 IS TWO HITS LEFT
	BRA 48$
44$:				;---
	LDD #6480+VGCRED	;1 IS ONE HIT LEFT
48$:				;---
	STD (Y)++		;COLOR OF THIS PANEL

	LDU #TPNS4		;DRAW SHAPE FAR AWAY
	LDD M.XT
	SUBD #3000		;?CLOSE BY?
	BGE 50$
	LDU #TPNS3		;BEGIN OF DRAW DETAILED SHAPE
50$:				;---FLIP TOP OF SHAPE TO RIGHT
	LDD #0			;FACE SHAPE TO INSIDE OF TRENCH
	SUBD 2(U)		;+Y(RIGHT) USED AS -Z(DOWN)
	ADDD M.ZT
	STD M.ZP		;ZP
	LDD M.YT
	ADDD 4(U)		;+Z(UP) USED AS +Y(RIGHT)
	STD M.YP		;YP
	LDD 0(U)		;X
	ADDD M.XT
	STD M.DVD		;1/XP
	STD M.XP
	ADDD M.YP
	BGE 51$			;?X<=(NEG Y)?
	LDD #0
	SUBD M.YP
	STD M.DVD		;THEN FORCE POINT BACK ONTO SCREEN
	STD M.XP
	CLR PN.CLP		;CLIPPED THIS LINE
51$:				;---
	LDD M.ZP
	BPL 52$
	NEGD
52$:				;---
	CMPD M.XP
	BLE 53$
	STD M.DVD		;CLIPPING X
	CLR PN.CLP		;CLIPPED THIS LINE
53$:				;---
	LEAU 7(U)		;ADVANCE PAST THE RECORD
	LDA 6-7(U)		;BLANK OR BRITE
	BEQ 54$
	LDA PN.CLP		;IF CURRENT LINE CLIPPED
	ORA PN.OCL		;AND PREVIOUS ENDPOINT CLIPPED (OR NOT VIS)
	BEQ 54$			;B THEN LEAVE THIS LINE BLANK
	JSR BJLINV		;VISIBLE LINE
	LDA PN.CLP
	STA PN.OCL		;RECORD CLIP STATE OF THIS LINE
	BRA 56$
54$:				;---
	JSR BJLINB		;BLANK LINE
	CLR PN.OCL		;REMEMBER PREVIOUS LINE WAS CLIPPED OR NOT VIS
56$:				;---
	LDA #1
	STA PN.CLP		;PREPARE FOR NEW UNCLIPPED LINE
	CMPU #TPNS3Z		;?MORE PANEL TO DRAW?
	BLO 50$			;THEN LOOP
68$:				;---
	LDD M.ZT
	ADDD #400		;MOVE UP TO NEXT PANEL
	STD M.ZT
	LDA PN.FLG
	LSRA
	LSRA
	LBNE 40$			;LOOP TO NEXT PANEL
	LDD #8040
	STD (Y)++		;CENTER AFTER EACH SEGMENT
75$:				;---
	LDD M.XT
	ADDD #1000		;GET NEXT SEGMENT
	STD M.XT
	SUBD #6000		;?WITHIN VIEW?
	LBLO 30$		;THEN LOOP NEXT SEGMENT

	RTS
				;===

PNVLB:				;VIEW THE LEFT BOTTOM PANELS
	LDB M$TX+M.U1		;SETUP POINTER TO PANEL FLAGS
	SUBB #10		;POINT TO PREVIOUS PANEL(-1)
	LSRB
	LSRB
	LSRB
	LSRB
	ANDB #7
	LDX #PNLB		;FLAG ARRAY
	ABX
	LDB P.RND1		;TURN PANELS RANDOMLY ON
	SEX
	ANDA P.RND1
	ANDA P.RND1
	STA (X)+		;AND ADVANCE TO PANEL 0 (RELATIVE)
				;---
	LDD #0FFF
	SUBD M$TX+M.U1		;GET RELATIVE DISP WITHIN PANEL
	ANDA #0F
	ADDD #0F800			;OFFSET TO FIRST VIEWABLE PANEL
	STD M.XT
	LDD #-1000		;DISTANCE TO BOTTOM OF TRENCH
	SUBD M$TZ+M.U1
	STD M.ZT
30$:				;---LOOP EACH SEGMENT
	LDD #-380		;BASE START
	SUBD M$TY+M.U1
	STD M.YT
	LDD #-0AA
	STD BJ.CX		;SCREEN INIT
	LDD #0
	STD BJ.CY
	CMPX #PNLBZ
	BLO 34$			;HANDLE WRAPAROUND
	LEAX PNLB-PNLBZ(X)	;MOVE BACK MOD(WHOLE TABLE)
34$:				;---
	LDA (X)+		;GET FLAGS
	LBEQ 75$			;B END OF SEG IF PANELS DEAD
40$:				;---LOOP EACH PANEL
	STA PN.FLG		;WORKING FLAG BITS
	ANDA #3
	LBEQ 68$		;B END OF CURRENT SEGMENT
	CMPA #2
	BLO 44$			;B IS 1
	BEQ 42$			;B IS 2
	LDD #6480+VGCGRN	;3 IS FULL ALIVE
	BRA 48$
42$:				;---
	LDD #6480+VGCYLW	;2 IS TWO HITS LEFT
	BRA 48$
44$:				;---
	LDD #6480+VGCRED	;1 IS ONE HIT LEFT
48$:				;---
	STD (Y)++		;COLOR OF THIS PANEL

	LDU #TPNS2		;DRAW SHAPE FAR AWAY
	LDD M.XT
	SUBD #3000		;?CLOSE BY?
	BGE 50$
	LDU #TPNS1		;BEGIN OF DRAW DETAILED SHAPE
50$:				;---FLIP TOP OF SHAPE TO RIGHT
	LDD 4(U)		;POSITIVE Z UP
	ADDD M.ZT
	STD M.ZP		;ZP
	LDD M.YT
	ADDD 2(U)		;+Y RIGHT USED AS +Y(RIGHT)
	STD M.YP		;YP
	LDD 0(U)		;X
	ADDD M.XT
	STD M.DVD		;1/XP
	STD M.XP		;FOR CLIPPING
	LDD M.YP
	BPL 151$
	NEGD
151$:				;---
	CMPD M.XP
	BLE 51$
	STD M.DVD		;X<ABS(Y), THEN REPLACE
	STD M.XP		;SAVE CLIPPED X
	CLR PN.CLP		;THIS LINE CLIPPED
51$:				;---
	LDD #0
	SUBD M.ZP
	CMPD M.XP
	BLE 52$
	STD M.DVD		;X<NEG(-Z) THEN REPLACE
	CLR PN.CLP		;THIS LINE CLIPPED
52$:				;---
	LEAU 7(U)		;ADVANCE PAST THE RECORD
	LDA 6-7(U)		;BLANK OR BRITE
	BEQ 54$
	LDA PN.CLP		;IF CURRENT LINE CLIPPED
	ORA PN.OCL		;AND PREVIOUS ENDPOINT CLIPPED (OR NOT VIS)
	BEQ 54$			;B THEN LEAVE THIS LINE BLANK
	JSR BJLINV		;VISIBLE LINE
	LDA PN.CLP
	STA PN.OCL		;RECORD CLIP STATE OF THIS LINE
	BRA 56$
54$:				;---
	JSR BJLINB		;BLANK LINE
	CLR PN.OCL		;REMEMBER PREVIOUS LINE WAS CLIPPED OR NOT VIS
56$:				;---
	LDA #1
	STA PN.CLP		;PREPARE FOR NEW UNCLIPPED LINE
	CMPU #TPNS1Z		;?MORE PANEL TO DRAW?
	BLO 50$			;THEN LOOP
68$:				;---
	LDD M.YT
	ADDD #100		;MOVE UP TO NEXT PANEL
	STD M.YT
	LDA PN.FLG
	LSRA
	LSRA
	LBNE 40$			;LOOP TO NEXT PANEL
	LDD #8040
	STD (Y)++		;CENTER AFTER EACH SEGMENT
75$:				;---
	LDD M.XT
	ADDD #1000		;GET NEXT SEGMENT
	STD M.XT
	SUBD #6000		;?WITHIN VIEW?
	LBLO 30$		;THEN LOOP NEXT SEGMENT

	RTS
				;===

PNVRB:				;VIEW THE RIGHT BOTTOM PANELS
	LDB M$TX+M.U1		;SETUP POINTER TO PANEL FLAGS
	SUBB #10		;POINT TO PREVIOUS PANEL(-1)
	LSRB
	LSRB
	LSRB
	LSRB
	ANDB #7
	LDX #PNRB		;FLAG ARRAY
	ABX
	LDB P.RND1		;TURN PANELS RANDOMLY ON
	SEX
	ANDA P.RND1
	ANDA P.RND1
	STA (X)+		;AND ADVANCE TO PANEL 0 (RELATIVE)
				;---
	LDD #0FFF
	SUBD M$TX+M.U1		;GET RELATIVE DISP WITHIN PANEL
	ANDA #0F
	ADDD #0F800			;OFFSET TO FIRST VIEWABLE PANEL
	STD M.XT
	LDD #-1000
	SUBD M$TZ+M.U1
	STD M.ZT
30$:				;---LOOP EACH SEGMENT
	LDD #80			;BASE START
	SUBD M$TY+M.U1
	STD M.YT
	LDD #-0AA
	STD BJ.CX		;SCREEN INIT
	LDD #0
	STD BJ.CY
	CMPX #PNRBZ
	BLO 34$			;HANDLE WRAPAROUND
	LEAX PNRB-PNRBZ(X)	;MOVE BACK MOD(WHOLE TABLE)
34$:				;---
	LDA (X)+		;GET FLAGS
	LBEQ 75$			;B END OF SEG IF PANELS DEAD
40$:				;---LOOP EACH PANEL
	STA PN.FLG		;WORKING FLAG BITS
	ANDA #3
	LBEQ 68$		;B END OF CURRENT SEGMENT
	CMPA #2
	BLO 44$			;B IS 1
	BEQ 42$			;B IS 2
	LDD #6480+VGCGRN	;3 IS FULL ALIVE
	BRA 48$
42$:				;---
	LDD #6480+VGCYLW	;2 IS TWO HITS LEFT
	BRA 48$
44$:				;---
	LDD #6480+VGCRED	;1 IS ONE HIT LEFT
48$:				;---
	STD (Y)++		;COLOR OF THIS PANEL

	LDU #TPNS2		;DRAW SHAPE FAR AWAY
	LDD M.XT
	SUBD #3000		;?CLOSE BY?
	BGE 50$
	LDU #TPNS1		;BEGIN OF DRAW DETAILED SHAPE
50$:				;---
	LDD 4(U)		;+Z(UP)
	ADDD M.ZT
	STD M.ZP		;ZP
	LDD M.YT
	ADDD 2(U)		;+Y(RIGHT) USED AS +Y(RIGHT)
	STD M.YP		;YP
	LDD 0(U)		;X
	ADDD M.XT
	STD M.DVD		;1/XP
	STD M.XP		;TEMP FOR CLIPPING
	LDD M.YP
	BPL 151$
	NEGD
151$:				;---
	CMPD M.XP
	BLE 51$
	STD M.DVD
	STD M.XP		;SAVE CLIPPED X
	CLR PN.CLP		;THIS LINE CLIPPED
51$:				;---
	LDD M.XP
	ADDD M.ZP
	BGE 52$			;?X<=(NEG Z)?
	LDD #0
	SUBD M.ZP
	STD M.DVD		;THEN FORCE POINT BACK ONTO SCREEN
	CLR PN.CLP		;THIS LINE CLIPPED
52$:				;---
	LEAU 7(U)		;ADVANCE PAST THE RECORD
	LDA 6-7(U)		;BLANK OR BRITE
	BEQ 54$
	LDA PN.CLP		;IF CURRENT LINE CLIPPED
	ORA PN.OCL		;AND PREVIOUS ENDPOINT CLIPPED (OR NOT VIS)
	BEQ 54$			;B THEN LEAVE THIS LINE BLANK
	JSR BJLINV		;VISIBLE LINE
	LDA PN.CLP
	STA PN.OCL		;RECORD CLIP STATE OF THIS LINE
	BRA 56$
54$:				;---
	JSR BJLINB		;BLANK LINE
	CLR PN.OCL		;REMEMBER PREVIOUS LINE WAS CLIPPED OR NOT VIS
56$:				;---
	LDA #1
	STA PN.CLP		;PREPARE FOR NEW UNCLIPPED LINE
	CMPU #TPNS1Z		;?MORE PANEL TO DRAW?
	BLO 50$			;THEN LOOP
68$:				;---
	LDD M.YT
	ADDD #100		;MOVE UP TO NEXT PANEL
	STD M.YT
	LDA PN.FLG
	LSRA
	LSRA
	LBNE 40$			;LOOP TO NEXT PANEL
	LDD #8040
	STD (Y)++		;CENTER AFTER EACH SEGMENT
75$:				;---
	LDD M.XT
	ADDD #1000		;GET NEXT SEGMENT
	STD M.XT
	SUBD #6000		;?WITHIN VIEW?
	LBLO 30$		;THEN LOOP NEXT SEGMENT

	RTS
				;===

PNVRW:				;VIEW THE RIGHT SIDE PANELS
	LDB M$TX+M.U1		;SETUP POINTER TO PANEL FLAGS
	SUBB #10		;POINT TO PREVIOUS PANEL(-1)
	LSRB
	LSRB
	LSRB
	LSRB
	ANDB #7
	LDX #PNRW		;FLAG ARRAY
	ABX
	LDB P.RND1		;TURN PANELS RANDOMLY ON
	SEX
	ANDA P.RND1
	ANDA P.RND1
	STA (X)+		;AND ADVANCE TO PANEL 0 (RELATIVE)
				;---
	LDD #0FFF
	SUBD M$TX+M.U1		;GET RELATIVE DISP WITHIN PANEL
	ANDA #0F
	ADDD #0F800			;OFFSET TO FIRST VIEWABLE PANEL
	STD M.XT
	LDD #400
	SUBD M$TY+M.U1
	STD M.YT
30$:				;---LOOP EACH SEGMENT
	LDD #-0E00		;BASE START
	SUBD M$TZ+M.U1
	STD M.ZT
	LDD #-0AA
	STD BJ.CX		;SCREEN INIT
	LDD #0
	STD BJ.CY
	CMPX #PNRWZ
	BLO 34$			;HANDLE WRAPAROUND
	LEAX PNRW-PNRWZ(X)	;MOVE BACK MOD(WHOLE TABLE)
34$:				;---
	LDA (X)+		;GET FLAGS
	LBEQ 75$		;B END OF SEG IF PANELS DEAD
40$:				;---LOOP EACH PANEL
	STA PN.FLG		;WORKING FLAG BITS
	ANDA #3
	LBEQ 68$		;B END OF CURRENT SEGMENT
	CMPA #2
	BLO 44$			;B IS 1
	BEQ 42$			;B IS 2
	LDD #6480+VGCGRN	;3 IS FULL ALIVE
	BRA 48$
42$:				;---
	LDD #6480+VGCYLW	;2 IS TWO HITS LEFT
	BRA 48$
44$:				;---
	LDD #6480+VGCRED	;1 IS ONE HIT LEFT
48$:				;---
	STD (Y)++		;COLOR OF THIS PANEL

	LDU #TPNS4		;DRAW SHAPE FAR AWAY
	LDD M.XT
	SUBD #3000		;?CLOSE BY?
	BGE 50$
	LDU #TPNS3		;BEGIN OF DRAW DETAILED SHAPE
50$:				;---FLIP TOP OF SHAPE TO LEFT
	LDD 2(U)		;+Y RIGHT USED AS +Z UP
	ADDD M.ZT
	STD M.ZP		;ZP
	LDD #0
	SUBD 4(U)		;+Z(UP) USED AS -Y(LEFT)
	ADDD M.YT
	STD M.YP		;YP
	LDD 0(U)		;X
	ADDD M.XT
	STD M.DVD		;1/XP
	STD M.XP
	SUBD M.YP
	BGE 51$			;?X<=( Y)?
	LDD M.YP
	STD M.DVD		;THEN FORCE POINT BACK ONTO SCREEN
	STD M.XP
	CLR PN.CLP		;THIS LINE CLIPPED
51$:				;---
	LDD M.ZP
	BPL 52$
	NEGD
52$:				;---
	CMPD M.XP
	BLE 53$
	STD M.DVD		;FINAL CLIP
	CLR PN.CLP		;THIS LINE CLIPPED
53$:				;---
	LEAU 7(U)		;ADVANCE PAST THE RECORD
	LDA 6-7(U)		;BLANK OR BRITE
	BEQ 54$
	LDA PN.CLP		;IF CURRENT LINE CLIPPED
	ORA PN.OCL		;AND PREVIOUS ENDPOINT CLIPPED (OR NOT VIS)
	BEQ 54$			;B THEN LEAVE THIS LINE BLANK
	JSR BJLINV		;VISIBLE LINE
	LDA PN.CLP
	STA PN.OCL		;RECORD CLIP STATE OF THIS LINE
	BRA 56$
54$:				;---
	JSR BJLINB		;BLANK LINE
	CLR PN.OCL		;REMEMBER PREVIOUS LINE WAS CLIPPED OR NOT VIS
56$:				;---
	LDA #1
	STA PN.CLP		;PREPARE FOR NEW UNCLIPPED LINE
	CMPU #TPNS3Z		;?MORE PANEL TO DRAW?
	BLO 50$			;THEN LOOP
68$:				;---
	LDD M.ZT
	ADDD #400		;MOVE UP TO NEXT PANEL
	STD M.ZT
	LDA PN.FLG
	LSRA
	LSRA
	LBNE 40$		;LOOP TO NEXT PANEL
	LDD #8040
	STD (Y)++		;CENTER AFTER EACH SEGMENT
75$:				;---
	LDD M.XT
	ADDD #1000		;GET NEXT SEGMENT
	STD M.XT
	SUBD #6000		;?WITHIN VIEW?
	LBLO 30$		;THEN LOOP NEXT SEGMENT

	RTS
				;===

	.MACRO .PN .A1,.A2,.A3,.A4
	.WORD .A1,.A2,.A3
	.BYTE .A4
	.ENDM

TPNS1:				; SHAPE #1,DETAILED
	.PN -200,-20,0,0
	.PN -200,20,0,1
	.PN 200,20,0,1
	.PN 200,-20,0,1
	.PN -200,-20,0,1
TPNS2:	.PN -400,-40,0,0	;SHAPE #2, VIEWED FAR AWAY
	.PN -400,40,0,1
	.PN 400,40,0,1
	.PN 400,-40,0,1
	.PN -400,-40,0,1
TPNS1Z:
TPNS3:				; SHAPE #1,DETAILED
	.PN -200,-80,0,0
	.PN -200,80,0,1
	.PN 200,80,0,1
	.PN 200,-80,0,1
	.PN -200,-80,0,1
TPNS4:	.PN -400,-180,0,0	;SHAPE #2, VIEWED FAR AWAY
	.PN -400,180,0,1
	.PN 400,180,0,1
	.PN 400,-180,0,1
	.PN -400,-180,0,1
TPNS3Z:

	.PAGG
	.SBTTL	HYPER INTO WORMHOLE
BGHYP:
	LDA #3
	STA HP.TIM
	JSR SPKC		;***SPEAK TRIAL C
	RTS
DOHYP:
	DEC HP.TIM
	RTS
VWHYP:
	LDB HP.TIM
	LDA #0FF
20$:				;---
	INCA
	CMPA #7
	BHS 28$			;MAX BIN SCALE OF 7
	LSLB
	BMI 20$
28$:				;---
	ORA #70
	STD ST.SCL
	LDD #6480+VGCWHT		;NORMAL STAR COLORS
	STD (Y)++
	JSR STGLIT
	RTS
	.PAGG
	.SBTTL	EXPLODE -- IVXPLD,DOXPLD,VWXPLD
BG1XPLD:
	LDA #PH$EGM
	STA PHASE
	LDA #70
	STA S.ROL
	JSR AUDXPS
	RTS
BGAXPLD:
	LDA #3			;
	STA A$TYP(X)
	LDA #1F
	STA A$DIE(X)
				;---
	JSR CPUGON
	JSR AUDXPS		;AUDIO-EXPLODE SHIP
	RTS
DONXPLD:
	LDX #ALIEN
10$:
	STX S1.PRM
	LDA A$TYP(X)
	CMPA #3
	BNE 90$
	LDA A$DIE(X)
	BLE 90$
	DEC A$DIE(X)
	BNE 30$
	LDA #0
	STA A$TYP(X)
30$:				;---
90$:
	LDX S1.PRM
	LEAX A$IZE(X)
	CMPX #ALIENZ
	BLO 10$
	RTS
VWXPLD:			;VIEW OURSELVES EXPLODING
	RTS
	.PAGG
	.SBTTL	GAS--DO1GAS,VWGAS,ADCGAS

ADCGAS:				;ADD CANNED GAS
	ADDA S.CAN
	CMPA #3F
	BLS 10$			;?TOP OFF GAS CAN?
	LDA #3F			;EPA#321543: NO GAS OVERFLOW
10$:				;---
	STA S.CAN
	RTS
				;---
DO1GAS:
	LDA S.CAN
	BLE 30$			;?NEW GAS AVAILABLE?
	LDA FRAME+1		;THEN REFUEL
	ANDA #1
	BNE 70$
	DEC S.CAN		;POUR FUEL FROM GAS CAN
	LDA S.GAS
	ADDA #1
	CMPA #64
	BLS 26$
	LDU #TSCGS5		;EXTRA POINTS FOR OVERFLOW
	JSR ADUSCR
	BRA 70$
26$:				;---
	STA S.GAS
	BRA 70$
30$:				;---NO MORE NEW GAS, SO WHAT CAN WE LOSE?
	LDA S.GLW		;?SHIELDS HIT?
	BEQ 40$
	LDA FRAME+1		;THEN LOSE FUEL
	ANDA #3
	BNE 40$
	LDA S.GAS
	SUBA #1
	BMI 40$
	STA S.GAS
	BRA 70$
40$:				;---
	LDA FRAME+1		;NORMAL USAGE
	ANDA #1F
	BNE 70$
	DEC S.GAS
	BGT 70$
	CLR S.GAS		;FORCE OFF
	JSR BG1XPLD		;PLAYER DIES WHEN NO GAS
70$:				;---
	LDU #TSCGS1		;LO ON FUEL
	LDA S.GAS
	CMPA #40.
	BLO 78$			;B IF BARELY GOING
	LDU #TSCGS2		;MIDRANGE
	CMPA #60.
	BLO 78$			;B IF MEDIOCRE
	LDU #TSCGS3		;HI RANGE GOOD PLAYER
78$:				;---
	JSR ADUSCR
90$:				;---
	RTS
VWGAS:				;---
	LDD #7100		;SCALE
	STD (Y)++
	LDA S.GAS
	CMPA #40.
	BGE 22$			;?LO GAS?
	CMPA #20.
	BGE 20$
	LDA FRAME+1		;FLICKER - VERY LOW
	ANDA #06
	BEQ 28$			;B BLINK OFF
20$:				;---
	LDB #0F4		;BRITE RED
	BRA 28$
22$:				;---
	CMPA #60.		;?MID GAS?
	BGE 24$
	LDB #0C6		;MID YELLOW
	BRA 28$
24$:				;---ELSE FULL TANK
	LDB #0C2		;MID GREEN
28$:				;---
	LDA #64
	STD (Y)++		;COLOR
	LDD VGFUEL		;TITLE
	STD (Y)++
	LDD #4026		;+12.X
	STD 0(Y)
	LDD #403A		;-12.X
	STD 6(Y)
	LDD #2000
	STD 4(Y)		;TOPLINE 0.X
	STD 10.(Y)		;BOTTOM LINE 0.X
	LDB S.GAS
	LDA #8
	MUL
	STD 2(Y)
	NEGD
	ANDA #1F		;AVOID OPCODE
	STD 8(Y)		;BOTTOM Y
	LEAY 12.(Y)
	LDD #8040		;CENTER
	STD (Y)++
	RTS
				;===
ADUSCR:				;ADD FROM U PTR TO SCORE
	LDA S.SC21
	ADDA 2(U)
	DAA
	STA S.SC21
	LDA S.SC43
	ADCA 1(U)
	DAA
	STA S.SC43
	LDA S.SC65
	ADCA 0(U)
	DAA
	STA S.SC65
	LDA S.SC87
	ADCA #0
	DAA
	STA S.SC87
	RTS
				;===
TSCA1B:	.BYTE 00,00,00		;BUMPED LIVE ALIEN
TSCA1D:	.BYTE 01,22,22		;KILLED (ALIEN DIED)
TSCA1H:	.BYTE 00,01,11		;ALIEN HIT BY SHOT
TSCGSB:	.BYTE 00,03,33		;BUMPED GAS TANK
TSCGS1:	.BYTE 00,00,01
TSCGS2:	.BYTE 00,00,02
TSCGS3:	.BYTE 00,00,03
TSCGS5:	.BYTE 00,00,02		;GAS TANK OVERFLOW--EXTRA REWARD
TSCPNH:	.BYTE 00,01,11		;PANEL HIT
TSCPND:	.BYTE 00,03,21		;PANEL DIED
	.PAGG
	.SBTTL	GLOW--DO1GLW,VWGLW

BG1GLW:				;BEGIN GLOWING
	LDA #1
	STA S.GLW
	RTS
				;===

DO1GLW:
	LDB S.GLW
	BEQ 90$
	CMPB #TGLMZ-TGLM
	BLO 20$
	LDB #0FF		;TURN OFF WHEN DONE WITH TABLE
20$:				;---
	INCB
	STB S.GLW
	CMPB #TGLMZ-TGLM-1
	BNE 90$			;?TIME TO DESTROY ALL SHOTS?
	LDU #GUNA
30$:				;---
	LDA G$TYP(U)
	BITA #BT3		;?COLLISION ALLOWED?
	BEQ 40$
	JSR GL1HTG		;FORCE A HIT
40$:				;---
	LEAU G$IZE(U)
	CMPU #GUNAZ
	BLO 30$
90$:				;---
	RTS
				;===
DONGLW:				;GLOW THE ALIENS
	LDA FRAME+1
	ANDA #3
	BNE 90$
	LDX #ALIEN
10$:				;---
	DEC A$GLW(X)
	BPL 30$
	CLR A$GLW(X)		;FORCE TO ZERO
30$:				;---
	LEAX A$IZE(X)
	CMPX #ALIENZ
	BLO 10$
90$:				;---
	RTS
				;===
VWGLW:				;VIEW GLOW IF WE ARE HIT
	LDB S.GLW
	BNE 5$
	RTS
5$:				;---
	LDB S.GLW
	LDX #TGLM-1
	LDA B(X)		;MULTIPLIER FROM TABLE
	CLRB
	STD M.XP		;PREPARE MULTIPLIER
	LDD #400.
	STD M.YP
	LDD #283.		;45 DEGREE LENGTH
	STD M.ZP
	LDA #M$PERS
	JSR MGOWT
	LDD M.YP		;SCALED UNIT LENGTH
	STD GL.P
	NEGD
	STD GL.M		;MINUS SCALED LENGTH
	LDD M.ZP		;
	STD GL.P4		;45 DEGREE LENGTH
	NEGD
	STD GL.M4
				;---
	LDD #110.
	STD GL.PF		;FINGER LENGTH
	LDD #-110.
	STD GL.MF		;MINUS FINGER
	LDD #78.		;
	STD GL.P4F		;POSITIVE 45 DEGREE FINGER
	LDD #-78.
	STD GL.M4F
	LDD #0
	STD GL.Z		;ZERO VALUE
				;---
	JSR GLVWCN		;VIEW CENTER
	JSR GLVWFG		;VIEW FINGERS
				;---
	RTS
				;===

TGLM:				;GLOW MULTIPLIERS
	.BYTE 40,38,30,28,20,18,10,8,0
	.BYTE 0,8,10,18,20,28,30,38,40
TGLMZ:
				;===

GLVWCN:				;GLOW, VIEW CENTER
	LDD #64F0+VGCRED
	STD (Y)++		;SELECT COLOR
				;---
	LDD #0
	STD BJ.CY
	LDD #-0AA
	STD BJ.CX		;BE HONEST WHERE CENTER IS
				;---
	LDX #TGLCN		;CENTER COORDS
	JSR GLDRW		;DRAW A BLANK LINE
	STD (Y)++
20$:				;---
	JSR GLDRW		;ALL OTHERS ARE VISIBLE
	ORA #20
	STD (Y)++
	CMPX #TGLCNZ
	BLO 20$
				;---
	LDD #8040
	STD (Y)++		;CENTER
				;---
	RTS
				;===
GLDRW:				;PREPARE A DRAW LINE
	LDD @2(X)		;Y
	TFR D,U
	SUBD BJ.CY
	STU BJ.CY
	ANDA #01F
	STD (Y)++
	LDD @0(X)		;X
	TFR D,U
	SUBD BJ.CX
	STU BJ.CX
	ANDA #01F		;LET CALLER SET BRITE,STD
	LEAX 4(X)
	RTS
				;===

	.MACRO .GLC .A1,.B2
	.WORD GL.'.A1,GL.'.B2
	.ENDM

TGLCN:				;TABLE OF CENTER VALUES
				;X VALUE, Y VALUE
	.GLC M,Z		;1:LEFT
	.GLC M4,P4
	.GLC Z,P		;3:UP
	.GLC P4,P4
	.GLC P,Z		;5:RIGHT
	.GLC P4,M4
	.GLC Z,M		;7:DOWN
	.GLC M4,M4
	.GLC M,Z		;1:LEFT
TGLCNZ:
				;===

GLVWFG:				;DRAW THE FINGERS
	LDD #64F0+VGCBLU
	STD (Y)++		;SET THE COLOR
				;---
	LDX #TGLFG		;FINGER TABLE OF COORDS
10$:				;---
	LDD @2(X)		;Y ABSOLUTE VECTOR TO CIRCLE
	ANDA #01F
	STD (Y)++
	LDD @0(X)		;X PORTION
	ADDD #0AA		;CENTER OFFSET
	ANDA #01F		;BLANK
	STD (Y)++
				;TIP OF FINGER ON CIRCLE
	LDD @6(X)		;Y
	ANDA #01F
	STD (Y)++
	LDD @4(X)		;X
	ANDA #01F
	ORA #20			;SET BRITE
	STD (Y)++
				;---CALC REST OF FINGER TO EDGE
	LDD @4(X)		;X KNUCKLE OF FINGER
	ADDD @0(X)		;X PLUS TIP OF FINGER
	BMI 32$
	NEGD
32$:				;---
	ADDD #512.		;CALC DELTA TO EDGE
	STD GL.PDX		;POSITIVE DELTA IN X
	NEGD
	STD GL.MDX		;MINUS DELTA IN X
				;---Y PORTION
	LDD @2(X)		;Y TIP OF FINGER
	ADDD @6(X)		;Y KNUCKLE	
	BMI 36$
	NEGD
36$:				;---
	ADDD #512.		;DELTA TO Y EDGE
	STD GL.PDY		;POSITIVE
	NEGD
	STD GL.MDY		;MINUS DELTA FROM Y TO EDGE
				;---NOW SELECT WHAT KIND
	LDD @10.(X)		;Y
	ANDA #01F
	STD (Y)++
	LDD @8(X)		;X
	ANDA #01F
	ORA #20
	STD (Y)++

	LDD #8040
	STD (Y)++		;CENTER
				;---
	LEAX 12.(X)		;NEXT LINE
	CMPX #TGLFGZ
	BLO 10$
				;---
	RTS
				;===

	.MACRO .GLF .A1,.A2,.A3,.A4,.A5,.A6
	.WORD GL.'.A1,GL.'.A2,GL.'.A3,GL.'.A4,GL.'.A5,GL.'.A6
	.ENDM

TGLFG:				;FINGER POINTS
	.GLF	M,Z	MF,Z	MDX,PDX
	.GLF	M4,P4	MF,Z	MDX,PDX
	.GLF	M4,P4	M4F,P4F	Z,PDY
	.GLF	Z,P	M4F,P4F	Z,PDY
	.GLF	Z,P	Z,PF	PDY,PDY
	.GLF	P4,P4	Z,PF	PDY,PDY
	.GLF	P4,P4	P4F,P4F	PDX,Z
	.GLF	P,Z	P4F,P4F	PDX,Z
	.GLF	P,Z	PF,Z	PDX,MDX
	.GLF	P4,M4	PF,Z	PDX,MDX
	.GLF	P4,M4	P4F,M4F	Z,MDY
	.GLF	Z,M	P4F,M4F	Z,MDY
	.GLF	Z,M	Z,MF	MDY,MDY
	.GLF	M4,M4	Z,MF	MDY,MDY
	.GLF	M4,M4	M4F,M4F	MDX,Z
	.GLF	M,Z	M4F,M4F	MDX,Z
TGLFGZ:
				;===


	.PAGG
	.SBTTL	RADAR -- INRDR,ADRDR,DORDR,VWRDR
INRDR:				;---
	LDD #RDRBLK		;INIT RADAR PARMS
	STD RD.PTR
	RTS
				;===
ADRDR:				;ADD ITEM TO RADAR LIST
	LDU RD.PTR
	STA RD$TYP(U)		;SAVE OBJECT TYPE
	LDD M.XPS
	ADDD M.YPS		;FITS ON RADAR - DO HITE
	SUBD M.ZPS		;Z**2 VERSUS X**2+Y**2
	BLS 20$
	CLRA			;0==>WITHIN LATERAL VIEW
	BRA 30$
20$:				;---
	LDB M.ZP		;EITHER ABOVE OR BELOW
	SEX			;1==> BENEATH VIEW
	ADDA #2			;2==>ABOVE VIEW
30$:				;---
	ADDA RD$TYP(U)
	LSLA
	STA RD$TYP(U)		;TYPE PLUS ORIENTATION
	LDD M.YPS		;CHECK WIDTH
	CMPD #4000
	BLO 46$			;?TOO FAR FOR NORMAL RADAR?
	LDB M.YP
	SEX
	EORA #07F		;SHOVE TO EDGE(MAINTAIN CORRECT SIGN)
	BRA 48$
46$:				;---ELSE PLACE NORMALLY
	LDD M.YP		;CONVERT WIDTH
	JSR LSLD1		; TO RADAR LEFT.RIGHT
	BVC 48$
	RORB			;GET SIGN INTO B
	SEX			;PREPARE AREG FOR POSSIBLE NEGATE
	EORA #07F
48$:				;---
	STA RD$XPS(U)
	LDD M.XPS		;CHECK DEPTH
	CMPD #4000
	BLO 56$			;?TOO FAR AWAY?
	LDB M.XP		;THEN SQUASH ON EDGE OF RADAR
	SEX
	EORA #07F
	BRA 58$
56$:				;---ELSE PLACE NORMALLY
	LDD M.XP		;CONVERT DEPTH
	JSR LSLD1		; TO RADAR FOR.UP..BACK.DOWN
	BVC 58$			;?TOO LARGE FOR RADAR?
	RORB			;THEN SQUASH IT
	SEX			;PREPARE CORRECT SIDE
	EORA #7F		;PLACE ON EDGE
58$:				;---
	STA RD$YPS(U)
	LEAU RD$IZE(U)
	STU RD.PTR
90$:
	RTS
				;===
DORDR:
	RTS
				;===
VWRDR:				;VIEW THE RADAR LIST
	RTS			;ENABLE FOR LATER WAVES?
				;***********************
	LDD #7100		;SCALE
	STD (Y)++
	LDD #0			;Y
	STD (Y)++
	LDD #1E01		;X,OFF
	STD (Y)++
	LDD #6480+VGCWHT	;BLUE PLAYER
	STD (Y)++
	LDD VGRDPL
	STD (Y)++
	LDU #TRDRGR		;RADAR GRAPHICS
	LDX RD.PTR
	BRA 80$			;TEST LOOP FIRST
10$:				;---
	LDB RD$YPS(X)		;Y VECTOR
	SEX
	ANDA #1F
	STD 2(Y)
	NEGB
	BEQ 30$
	EORA #01F
30$:				;---
	STD 8(Y)
	LDB RD$XPS(X)		;X VECTOR
	SEX
	ANDA #1F
	STD 4(Y)
	NEGB
	BEQ 40$
	EORA #01F
40$:				;---
	STD 0A(Y)
	LDB RD$TYP(X)		;JSRL
	LDD @B(U)
	STD 6(Y)
	LDB RD$TYP(X)		;COLOR
	ORB #6
	LDD B(U)
	STD 0(Y)
	LEAY 0C(Y)
80$:				;---
	.A=-RD$IZE
	LEAX .A(X)
	CMPX #RDRBLK
	BHS 10$
				;---
	LDD #8040
	STD (Y)++
	RTS
				;===
RD$GS	=0			;GAS STATION
RD$PG	=4			;PLAYER GUN
RD$AG	=8			;ALIEN GUN
RD$AS	=0C			;ALIEN SHIP
RD$AE	=10			;ALIEN EXPLODE
RD$HM	=14			;HOME BASE
RD$AB	=18			;ALIEN BASE
				;---
TRDRGR:				;MIDSHAPE,LOSHAPE,HISHAPE,COLOR
	.WORD VGRDGN,VGRDGN,VGRDGN,VGCWHT+6480	;GAS STATION
	.WORD VGRDGN,VGRDGN,VGRDGN,VGCBLU+6480	;PLAYER GUN
	.WORD VGRDGN,VGRDGN,VGRDGN,VGCRED+6480	;ALIEN GUN
	.WORD VGRDMD,VGRDDN,VGRDUP,VGCGRN+6480	;ALIEN SHIP
	.WORD VGRDMD,VGRDDN,VGRDUP,VGCWHT+6480	;ALIEN EXPLODE
	.WORD VGRDHM,VGRDHD,VGRDHU,VGCBLU+6480	;HOME BASE
	.WORD VGRDMD,VGRDDN,VGRDUP,VGCGRN+6480	;ALIEN SHIP
				;===
	.PAGG
	.SBTTL	ZOOM--DOZOOM,VWZOOM
				;===
DO1ZOOM:
	RTS
			;*************
	LDA R.CTRL
	BITA #BT5		;RIGHT PALM/LOW RIGHT SWITCH
	BNE DN1ZOOM		;B DEZOOM IF ZOOM SWITCHED OFF
				;---
	LDA ZM.CLS		;CHECK FOR HYSTERISIS
	CMPA #100.
	BLS UP1ZOOM		;B ZOOM IF ROOM ON SCREEN
	CMPA #200.
	BHS DN1ZOOM		;B DNZOOM IF TOO FAR AWAY
	RTS
DN1ZOOM:			;---DEZOOM
	RTS
			;***********
	LDA #-1
	STA ZM.DIR
	LDA ZM.SCL
	ADDA #4
	CMPA #40		;MAX LIMIT--NO ZOOM
	BLS 44$
	LDA #40
44$:				;---
	STA ZM.SCL
	RTS
UP1ZOOM:			;---ZOOM IN
	RTS
				;*************
	LDA #1			;ZOOM ON
	STA ZM.DIR
	LDA ZM.SCL
	SUBA #4
	CMPA #10
	BGE 54$
	JSR SPKB		;***SPEAK TRIAL B
	LDA #10
54$:				;---
	STA ZM.SCL
				;---
	RTS
				;===
VWZOOM:				;VIEW ZOOM
	RTS
				;*********************
	JMP 20$			;*** RADAR FOR LATER WAVES
				;*************************
	LDD #7100		;SCALE
	STD (Y)++
	LDD #0			;Y
	STD (Y)++
	LDD #1E01		;X OFF
	STD (Y)++
	LDD #6480+VGCBLU	;WHITE LINES
	STD (Y)++
	LDD #7F
	STD (Y)
	LDB ZM.SCL
	LDA #020
	LSLB			;40, MAX TO 128., X
	DECB
	STD 2(Y)		;X UPPER RIGHT EDGE
	STD 10.(Y)		;X BACK TO CENTER
	NEGB
	LSLB			;TWICE: BACK THRU CENTER TO OTHER SIDE
	LDA #03F
	STD 6(Y)		;X BLANK ACROSS TOP
	LDD #0
	STD 4(Y)		;Y ACROSS TOP
	LDD #1F81		;-127.
	STD 8(Y)		;Y
	LEAY 12.(Y)
	LDD #8040		;CENTER
	STD (Y)++
20$:				;****
				;---
	LDD #0			;ZOOM GRATICULE IN VIEW WINDOW
	STD (Y)++
	LDD #0AA		;AAX,0Y
	STD (Y)++
	LDA #74			;INITIAL BINARY SCALE
	LDB ZM.SCL		;CALCULATE LIN AND BIN VG SCALE
40$:				;---
	DECA 			;ADJUST BINARY SCALE
	LSLB
	BPL 40$			;LOOP
	ANDB #7F		;FINISH LINEAR SCALE SETUP
	STD (Y)++		;SAVE LIN, BIN ALREADY SAVED
	LDD #6480+VGCWHT
	STD (Y)++
	LDD VGZOOM
	STD (Y)++
	LDD #7100		;RESTORE SCALE
	STD (Y)++
				;---
	RTS
	.PAGG
	.SBTTL	LASAR -- S1LAZ,MVLAZ,VWLAZ,CL1LAZ
				;===
S1LAZ:				;PLAYER FIRES LASER
	CLR LZ.ON		;ASSUME OFF
	LDA GN.SWN		;SEE IF NEW SWITCH VALUE PRESSED
	BITA #BT7
	BNE 48$			;?SWITCH PRESSED(=0)?
	INC LZ.ON		;THEN TURN ON LAZARS
48$:				;---
	RTS
				;===
MVLAZ:				;MOVE THE LASAR
	RTS
				;===
VWLAZ:				;VIEW ANY LASARS
	LDA LZ.ON
	BNE 5$			;?LAZARS OFF?
	NOP			;ROOM FOR EXIT
5$:				;---ELSE DO THEM
				;LEFT SIDE FIRST
	LDX #LZPNT+6		;POINT TO SECOND ENTRY
	LDD #100+80		;INITIAL POSITION=100, START LENGTH=80
	ADDD M$TX+M.U1
	STD 0-6(X)		;IN FIRST ENTRY
	LDB SI.RSX		;LEFT/RIGHT START LENGTH
	COMB
	SEX
	NOP			;ASRB FOR SHORTER START
	ADDD #-40		;LEFT 1/4 START POSITION
	ADDD M$TY+M.U1
	STD 2-6(X)
	LDB SI.RSY		;SCREEN UP/DOWN
	SEX
	NOP			;START LENGTH MAX 80
	ADDD #-100		;BOTTOM OF SCREEN
	ADDD M$TZ+M.U1
	STD 4-6(X)
	JSR LAZGN		;GEN THE LAZARS
	LDD #-510.&01FFF	;LOW LEFT LAZAR START
	STD LZ.CY		;VIDEO Y LOC
	STD (Y)++
	LDD #-128.&01FFF	;LEFT LAZAR START
	STD LZ.CX		;VIDEO X LOC
	ADDD #0AA		;CENTER IN VIEW
	ANDA #01F
	STD (Y)++		; X
	LDB #0			;LAZAR COLOR OFFSET
	JSR LAZVW		;VIEW THE LAZARS
				;---
				;RIGHT SIDE NEXT
	LDX #LZPNT+6		;POINT TO SECOND ENTRY
	LDD #100+80		;INITIAL POSITION=100,START LENGTH=80
	ADDD M$TX+M.U1
	STD 0-6(X)		;IN FIRST ENTRY
	LDB SI.RSX		;LEFT/RIGHT LENGTH MAX=80
	COMB
	SEX
	NOP
	ADDD #40		;RIGHT START POSITION=1/4 SCREEN
	ADDD M$TY+M.U1
	STD 2-6(X)
	LDB SI.RSY		;SCREEN UP/DOWN
	SEX
	NOP			;UP/DOWN LENGTH MAX=80
	ADDD #-100		;START POSITION:BOTTOM OF SCREEN
	ADDD M$TZ+M.U1
	STD 4-6(X)
	JSR LAZGN		;GEN THE LAZARS
	LDD #-510.&01FFF	;LOW LEFT LAZAR START
	STD LZ.CY		;VIDEO Y LOC
	STD (Y)++
	LDD #128.&01FFF		;RIGHT LAZAR START
	STD LZ.CX		;VIDEO X LOC
	ADDD #0AA		;CENTER IN VIEW
	ANDA #01F
	STD (Y)++		; X
	LDB #16.		;OFFSET INTO COLORS(POM-POM GUN)
	JSR LAZVW		;VIEW THE LAZARS
				;---
	RTS
				;===

LAZGN:				;---GEN THE LAZAR POINTS
	LDD #20			;VELOCITY IN STEPS OF 0020.00
	STD LZ.VX
	STA LZ.VX+2		;LO BYTE
	LDB SI.RSX		;LEFT/RIGHT
	COMB
	SEX
	STA LZ.VY		;SS00.00
	LDD #0FFFF		;FORCE 8000 TO POSITIVE
	SUBD SI.RSX
	JSR ASRD2
	STD LZ.VY+1		;SSVV.VV
	LDB SI.RSY		;UP/DOWN SCREEN
	SEX
	STA LZ.VZ		;SET UP SIGN: SS00.00
	LDD SI.RSY
	JSR ASRD2
	STD LZ.VZ+1		;REST OF VALUE: SSVV.VV
				;---
	LDA #0FF
	STA LZ.NSD		;START OFF INSIDE
	CLR LZ.HIT		;NO HITS YET
	LDX #LZPNT+6		;START OF RAM TABLE
20$:				;---LOOP THRU LENGTH OF LASARS
	STX LZ.LST		;LAST ENTRY POINTER
	LDD LZ.VX
	ADDD 0-6(X)
	STD 0(X)		;NEW X POSITION
	LDD LZ.VY
	ADDD 2-6(X)
	STD 2(X)		;NEW Y POSITION
	LDD LZ.VZ
	ADDD 4-6(X)
	STD 4(X)		;NEW Z POSITION
				;---NEXT NEW VELOCITY
	LDA LZ.VX
	ASRA			;*.5
	RORB			;SAVE LO BIT
	ADDA LZ.VX		;HI BYTE FIRST
	STA LZ.VX
	LSLB			;GET LO BIT BACK
	LDD LZ.VX+1		;LO TWO BYTES
	RORA
	RORB
	ADDD LZ.VX+1
	STD LZ.VX+1
	BCC 32$
	INC LZ.VX		;CARRY INTO HI BYTE
32$:				;---
	LDA LZ.VY
	ASRA
	RORB			;SAVE LO BIT
	ADDA LZ.VY
	STA LZ.VY
	LSLB			;GET LO BIT BACK
	LDD LZ.VY+1		;LO TWO BYTES Y VELOCITY
	RORA
	RORB
	ADDD LZ.VY+1
	STD LZ.VY+1
	BCC 34$
	INC LZ.VY		;CARRY INTO HI BYTE
34$:				;---
	LDA LZ.VZ
	ASRA			;*.5
	RORB			;SAVE LO BIT
	ADDA LZ.VZ
	STA LZ.VZ
	LSLB			;GET LO BIT BACK
	LDD LZ.VZ+1		;LO TWO BYTES Z VELOCITY
	RORA
	RORB
	ADDD LZ.VZ+1
	STD LZ.VZ+1
	BCC 36$
	INC LZ.VZ		;CARRY INTO HI BYTE
36$:				;---
40$:				;---
	LDA LZ.NSD		;?STILL INSIDE TRENCH?
	LBEQ 90$		;B ELSE SKIP COLLISION
	LDD #-1000		;?PASSED BOTTOM OF TRENCH?
	SUBD 4(X)		;KEEP RESULT POSITIVE
	BLT 50$			;
	STD M.DVN		;% OF LINE BENEATH BOTTOM
	LDD 4-6(X)		;OLD TZ
	SUBD 4(X)		;LENGTH OF LINE
	STD M.DVD		;UNSIGNED DIVIDE ONLY
	LDD 2(X)
	SUBD 2-6(X)		;POTENTIAL Y VALUES
	STD M.YP
	LDD 0(X)		;NEW-OLD:MAX RANGE
	SUBD 0-6(X)		;POTENTIAL X VALUES
	STD M.ZP		;MISNAMED--DELTA X
	LDD M.QUO		;GET THE FRACTION OF LINE
	STD M.XP		;GEN %*DY,%*DX
	LDA #M$PERS
	JSR MGOWT
	LDD 2(X)		;FARTHEST POSSIBLE NEW Y
	SUBD M.YP		;INTERSECTED NOT QUITE THAT FAR
	BMI 44$
	CMPD #400		;?WITHIN RIGHT SIDE?
	BGT 50$			;B IF OUTSIDE THEN TRY SIDES
	BRA 46$			;THEN GOT A COLLISION
44$:				;---
	CMPD #-400		;?WITHIN LEFT SIDE?
	BLT 50$			;B IF OUTSIDE THEN TRY SIDES
46$:				;---
	STD 2(X)		;Y: ACTUAL END OF LAZAR ON BOTTOM
	LDD 0(X)		;NEW-%(NEW-OLD)
	SUBD M.ZP		;MISNAMED: X OFFSET
	STD 0(X)		;COLLIDED X POSITION
	STD LZ.PNX		;X DEPTH
	LDD #-1000		;BOTTOM OF TRENCH
	STD 4(X)
	INC LZ.HIT		;HIT THE BOTTOM
	LDD 2(X)
	BPL 48$			;?LEFT SIDE?
	ADDD #400		;BASE AT ZERO
	STD LZ.PNW		;WIDTH
	LDX #PNLB		;LEFT BOTTOM
	JMP LZCPN		;EXIT: CHECK PANEL COLLISION
48$:				;---
	STD LZ.PNW		;WIDTH
	LDX #PNRB		;RIGHT BOTTOM
	JMP LZCPN		;EXIT: CHECK PANEL COLLISION
50$:				;---SIDE CHECK
	LDD 2(X)
	BPL 70$			;B RIGHT SIDE
60$:				;---CHECK LEFT SIDE COLLISION
	LDD #-400		;?PASSED LEFT SIDE OF TRENCH?
	SUBD 2(X)		;KEEP RESULT POSITIVE
	LBLT 90$		;B NOT YET PASSED SIDE
	STD M.DVN		;% OF LINE BENEATH SIDE
	LDD 2-6(X)		;ABS(NEW-OLD:TOTAL RANGE)
	SUBD 2(X)		;LENGTH OF LINE
	STD M.DVD		;UNSIGNED DIVIDE ONLY
	LDD 4(X)
	SUBD 4-6(X)		;POTENTIAL Z VALUES
	STD M.ZP
	LDD 0(X)		;NEW-OLD:TOTAL RANGE
	SUBD 0-6(X)		;POTENTIAL X VALUES
	STD M.YP		;MISNAMED--DELTA X
	LDD M.QUO		;GET THE FRACTION OF LINE
	STD M.XP		;GEN %*DZ,%*DX
	LDA #M$PERS
	JSR MGOWT
	LDD 4(X)		;FARTHEST POSSIBLE Z
	SUBD M.ZP		;INTERSECTED NOT QUITE THAT FAR
	BMI 66$
	CMPD #0			;?BENEATH TOP?
	LBGT 80$			;B IF OUTSIDE THEN STOP TRYING
	BRA 68$			;THEN GOT A COLLISION
66$:				;---
	CMPD #-1000		;?ABOVE BOTTOM?
	LBLT 80$			;B IF OUTSIDE THEN STOP TRYING
68$:				;---
	STD 4(X)		;Z: ACTUAL END OF LAZAR ON SIDE
	ADDD #1000		;BASE IT AT ZERO
	STD LZ.PNW		;WIDTH
	LDD 0(X)
	SUBD M.YP		;MISNAMED: X OFFSET
	STD 0(X)		;COLLIDED X POSITION
	STD LZ.PNX
	LDD #-400		;LEFT SIDE OF TRENCH
	STD 2(X)		;Y POSITION
	INC LZ.HIT		;HIT THE LEFT SIDE
	LDX #PNLW		;LEFT WALL PANELS
	JSR LZCPNW		;?COLLIDE WITH PANELS?
	RTS			;EXIT: DISPLAY LAZAR UP TO COLLISION
70$:				;---CHECK RIGHT SIDE COLLISION
	SUBD #400		;?PASSED RIGHT SIDE OF TRENCH?
	BLT 90$			;B NOT YET PASSED SIDE
	STD M.DVN		;% OF LINE BENEATH SIDE
	LDD 2(X)		;LENGTH OF LINE
	SUBD 2-6(X)		;OLD TY
	STD M.DVD		;UNSIGNED DIVIDE ONLY
	LDD 4(X)
	SUBD 4-6(X)		;POTENTIAL Z VALUES
	STD M.ZP
	LDD 0(X)		;NEW-OLD:TOTAL RANGE
	SUBD 0-6(X)		;POTENTIAL X VALUES
	STD M.YP		;MISNAMED--DELTA X
	LDD M.QUO		;GET THE FRACTION OF LINE
	STD M.XP		;GEN %*DZ,%*DX
	LDA #M$PERS
	JSR MGOWT
	LDD 4(X)		;FARTHEST POSSIBLE Z
	SUBD M.ZP		;INTERSECTED NOT QUITE THAT FAR
	BMI 76$
	CMPD #0			;?BENEATH TOP?
	BGT 80$			;B IF OUTSIDE THEN STOP TRYING
	BRA 78$			;THEN GOT A COLLISION
76$:				;---
	CMPD #-1000		;?ABOVE BOTTOM?
	BLT 80$			;B IF OUTSIDE THEN STOP TRYING
78$:				;---
	STD 4(X)		;Z: ACTUAL END OF LAZAR ON SIDE
	ADDD #1000		;BASE IT AT ZERO
	STD LZ.PNW		;WIDTH
	LDD 0(X)
	SUBD M.YP		;MISNAMED: X OFFSET
	STD 0(X)		;COLLIDED X POSITION
	STD LZ.PNX		;X DEPTH
	LDD #400		;RIGHT SIDE OF TRENCH
	STD 2(X)
	INC LZ.HIT		;HIT THE RIGHT SIDE
	LDX #PNRW		;RIGHT WALL
	JMP LZCPNW		;EXIT: CHECK PANEL COLLISION
80$:				;---POTENTIAL WALL COLLISION FAILED
	CLR LZ.NSD		;NO LONGER INSIDE TRENCH
90$:				;---
	LDX LZ.LST
	LEAX 6(X)		;
	CMPX #LZPNTZ
	LBLO 20$
				;---
	RTS
				;===

LAZVW:				;---UNLOAD LIST, AND DISPLAY
	LDA LZ.ON
	BNE 3$			;?LAZAR OFF?
	LDU #TLZAM		;THEN DO SITE
	LDX LZ.LST		;AND LAST ENTRY ONLY(BLANK)
	BRA 10$			;B DO ONE ENTRY ONLY
3$:				;---ELSE DO LAZARS
	LDU #TLZTR		;SETUP FOR TRACER COLORS
	LDA LZ.HIT
	BEQ 5$			;?LAZAR HITTING?
	LSRB			;REDUCED OFFSET INTO COLORS
	LDU #TLZFR		;THEN FULL FIRE COLORS
5$:				;---
	LEAU B(U)		;ADD OFFSET TO COLORS
	LDX #LZPNT		;FIRST ENTRY
10$:				;---
	LDD #200
	STD M.DVN		;RESTORE DIVIDER
20$:				;---
	LDD 0(U)++		;PULL THE APPROPRIATE COLOR
	STD (Y)++
				;---
	LDD 0(X)		;PULL X COORD
	SUBD M$TX+M.U1
	STD M.DVD		;START RECIPROCAL
	LDD 2(X)
	SUBD M$TY+M.U1
	STD M.YP
	LDD 4(X)
	SUBD M$TZ+M.U1
	STD M.ZP
	LDD M.QUO		;GET RECIPROCAL
	STD M.XP
	LDA #M$PERS
	JSR MGOWT
	LDD M.ZP
	SUBD LZ.CY
	ANDA #01F
	STD (Y)++
	LDD M.YP
	SUBD LZ.CX
	ANDA #01F
	ORA #20
	STD (Y)++		;X VECTOR
	LDD M.YP
	STD LZ.CX
	LDD M.ZP
	STD LZ.CY
	LEAX 6(X)		;NEXT SECTION OF LAZAR
	CMPX LZ.LST
	BLS 20$
	LDA LZ.ON
	BEQ 38$			;?LAZAR ON?
	LDA LZ.HIT
	BEQ 35$			;?HIT SOMETHING?
	LDA #6			;SMALLEST SIZE
	LDB 0-6(X)		;DISTANCE TO OBJECT
	SUBB M$TX+M.U1
	ORB #4			;SCREEN DISTANCE
33$:				;---
	DECA			;LARGER BINARY SIZE
	LSLB			;FOR CLOSER OBJECTS
	BCC 33$			;GO TILL BIT REACHED
	LSRB			;CLEAR TOP BIT (IN BINARY SCALE)
	ORA #70			;SCALE OP
	STD (Y)++
	LDD #VJLZS		;SHOW LAZAR SPLASH
	STD (Y)++
	LDD #7100		;RESTORE SCALE
	STD (Y)++
	BRA 40$
35$:				;---
	LDD #VJLZD		;ON BUT NO HIT IS TRACER
	STD (Y)++
	BRA 40$
38$:				;---
	LDA #5			;SMALLEST SIZE
	LDB 0-6(X)		;DISTANCE TO OBJECT
	SUBB M$TX+M.U1
	ORB #10			;SCREEN DISTANCE
39$:				;---
	DECA			;LARGER BINARY SIZE
	LSLB			;FOR CLOSER OBJECTS
	BCC 39$			;GO TILL BIT REACHED
	LSRB			;CLEAR TOP BIT (IN BINARY SCALE)
	ORA #70			;SCALE OP
	STD (Y)++
	LDD #VJLZA		;AIMER
	STD (Y)++
	LDD #7100		;RESET SCALE
	STD (Y)++
40$:				;---
	LDD #8040
	STD (Y)++
				;---
	RTS
				;===

TLZTR:				;COLORS FOR LAZAR TRACE
	.IRP .A,<0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F>
	.WORD VJLZT'.A
	.ENDR
	.IRP .A,<0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F>
	.WORD VJLZT'.A
	.ENDR

TLZFR:				;COLORS FOR LAZAR FIRE
	.IRP .A,<0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F>
	.WORD VJLZF'.A
	.ENDR
	.IRP .A,<0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F>
	.WORD VJLZF'.A
	.ENDR

TLZAM:				;COLOR FOR AIMING SITE
	.WORD 6400		;VECTOR TO AIM IS BLANK
				;===

CL1LAZ:				;PLAYER LASAR COLLIDE WITH ANYTHING?
	RTS
				;===
				;SET LAZAR RADIUS AND DIAMETER
LZD=	80			;80 MAX DIAMETER
LZR=	LZD/2			;RADIUS IS HALF DIAMETER
LZCPN:				;CHECK COLLIDE WITH PANELS
	LDA LZ.ON
	BNE 10$			;
	RTS			;EXIT IF LAZARS NOT ON
10$:				;---
	LDB LZ.PNX
	LSRB
	LSRB
	LSRB
	LSRB
	ANDB #7			;PANEL EVERY 1000
	ABX			;POINT INTO PANEL FLAG RAM
	LDD LZ.PNX
	ANDA #0F
	SUBD #400-LZR
	BLT 70$			;B TOO SHORT ON X
	SUBD #800+LZD
	BGT 70$			;B TOO LONG ON X
	LDA #3			;SET UP MASK
	STA LZ.MSK
	LDD LZ.PNW		;CHECK FOR PROPER WIDTH
	SUBD #40-LZR		;LEAST EDGE OF FIRST PANEL
20$:				;---
	SUBD #080+LZD		;GREATER EDGE OF PANEL
	BGT 60$			;
	SUBD #0-<80+LZD>
	BLT 70$			;B MISSED
	JSR LZHPN		;HIT A PANEL
	BRA 70$
60$:				;---
	SUBD #80-LZD		;ADVANCE TO NEXT PANEL
	LSL LZ.MSK
	LSL LZ.MSK		;SLIDE MASK FOR NEXT PANEL
	BNE 20$			;LOOP TILL NO LIVE PANELS
70$:				;---
	RTS
				;===
LZCPNW:				;CHECK COLLIDE WITH WIDE WALL PANELS
	LDA LZ.ON
	BNE 10$			;
	RTS			;EXIT IF LAZARS NOT ON
10$:				;---
	LDB LZ.PNX
	LSRB
	LSRB
	LSRB
	LSRB
	ANDB #7			;PANEL EVERY 1000
	ABX			;POINT INTO PANEL FLAG RAM
	LDD LZ.PNX
	ANDA #0F
	SUBD #400-LZR
	BLT 70$			;B TOO SHORT ON X
	SUBD #800+LZD
	BGT 70$			;B TOO LONG ON X
	LDA #3			;SET UP MASK
	STA LZ.MSK
	LDD LZ.PNW		;CHECK FOR PROPER WIDTH
	SUBD #80-LZR		;LEAST EDGE OF FIRST PANEL
20$:				;---
	SUBD #300+LZD		;GREATER EDGE OF PANEL
	BGT 60$			;
	SUBD #0-<300+LZD>	;SIZE OF PANEL
	BLT 70$			;B MISSED
	JSR LZHPN		;HIT A PANEL
	BRA 70$
60$:				;---
	SUBD #100-LZD		;ADVANCE TO NEXT PANEL
	LSL LZ.MSK
	LSL LZ.MSK		;SLIDE MASK FOR NEXT PANEL
	BNE 20$			;LOOP TILL NO LIVE PANELS
70$:				;---
	RTS
				;===

LZHPN:				;HIT A PANEL
	LDA LZ.MSK
	ANDA 0(X)		;CHECK FOR LIVES LEFT
	BEQ 70$			;B DEAD
	ADDA LZ.MSK		;DEC LIVES BY ONE
	ANDA LZ.MSK
	STA LZ.FLG		;SAVEIT
	LDA LZ.MSK
	COMA			;REVERSE THE MASK
	ANDA 0(X)		;PREPARE FOR PANEL SLOT
	ORA LZ.FLG
	STA 0(X)		;STORED BACK
	LDA LZ.FLG
	BNE 40$
	LDU #TSCPND		;KILLED A PANEL
	BRA 50$
40$:				;---
	LDU #TSCPNH		;INJURED A PANEL
50$:				;---
	JSR ADUSCR
70$:				;---
	RTS
				;===


	.PAGG
	.SBTTL	BOMB --	FR1BMB

FR1BMB:				;PLAYER 1 FIRES A BOMB
				;X==>ALIEN
	JSR RND8
	LDU #ALIEN		;SEND ALIEN DISTRESS SIGNAL
20$:				;---
	LDA A$TYP(U)
	CMPA #1
	BNE 30$			;?A LIVE ALIEN?
	LDA #0FF
	STA A$TRGT(U)		;THEN AIM AT PLAYER
	LDD A$CHST(U)
	CHSET C$AH		;STATUS: SOME ALIEN DAMAGED
	STD A$CHST(U)
30$:				;---
	LEAU A$IZE(U)
	CMPU #ALIENZ
	BLO 20$
				;---
	LDA #40			;FORCE ROL OF SHIP
	STA A$ROL(X)
	INC A$DMC(X)		;RECORD SOME MORE DAMAGE
	DEC A$HTA(X)		;DECREASE HITS LEFT
	LBLE BMXPL		;NO HITS LEFT - EXPLODE BOMB
				;INDICATE DAMAGE
				;FORCE GLOW
	LDA #0F
	STA A$GLW(X)
	LDU #TSCA1H
	JSR ADUSCR
				;---
	JSR AUDHTS
				;---
	RTS
				;===

BMXPL:				;BOMB EXPLODES ALIEN
				;X-->HIT SHIP
				;---
	LDU #ALIEN		;LOOP THRU ALIENS
20$:				;---
	LDA A$TYP(U)
	CMPA #1
	BNE 30$			;?ALIEN SHIP ALIVE?
	LDD A$CHST(U)
	CHSET C$AD		;STATUS: AN ALIEN DIED
	STD A$CHST(U)
30$:				;---
	LEAU A$IZE(U)
	CMPU #ALIENZ
	BLO 20$
				;---
	LDU A$UVP(U)		;ALIEN UVP
	LSL M$BY(U)		;VIOLATE ITS UNIT VECTORS(EXPLODE)
	LSL M$BZ(U)
	LSL M$CY(U)
	LSL M$CZ(U)
				;---
	LDU #TSCA1D
	JSR ADUSCR
				;---
	JSR BGAXPL
				;---
	RTS
				;===
	.PAGG
	.SBTTL	GUNS -- GUNFIR,GUNVEL,GUNMOV
	.SBTTL		GUNVW,GN*DRW,GUNCOL
				;---
FR1GUN:				;FIRE PLAYERS GUN
	STU GN.PTR
	LDB #30			;
	STB G$TMR(U)		;TRAVEL DISTANCE, RANGE OF SHOT
	LDA #TD$DSM		;PLANES OF DISS
	STA G$PIC(U)
				;---
	LDA G$BIC(U)		;AIM THRU MOVING SITE, NOT CENTER
	STA M.BIC		;USE FIRST GUN UVP ROW AS SCRATCH
	LDX G$UVP(U)		;X-->UVP OF GUN
	LDD #4000
	STD 0(X)
	LDD #0
	SUBD SI.RSX		;REAL SCREEN X SCREEN POSITION
	JSR ASRD1
	STD 2(X)
	LDD SI.RSY		;REAL SCREEN Y SCREEN POSITION
	JSR ASRD1
	STD 4(X)
	LDA #M$S1UN		;CONVERT FROM PLAYERS SCREEN VIEW TO UNIVERSE COORDS
	JSR MGOWT		;AIMING DIRECTION PUT IN XP...
				;vvvvv
	LDD M.XP
	SUBD M$TX+M.U1		;CONVERT BACK TO VECTOR
	STD M.XP		;(NEED A SEPARATE MATH ROUTINE)
	LDD M.YP
	SUBD M$TY+M.U1
	STD M.YP
	LDD M.ZP
	SUBD M$TZ+M.U1
	STD M.ZP
				;^^^^^
	LDX #M.U1		;PLAYERS UNIT VECTOR
	BRA GNFRUV
				;---
FRAGUN:				;FIRE ALIENS GUN
	STU GN.PTR
	LDB #7F
	LDA #TD$FRK		;FROG FORK
	STA G$PIC(U)
	STB G$TMR(U)
	LDX A$UVP(X)
	LDD M$AX(X)		;DESIRED AIMING DIRECTION
	STD M.XP
	LDD M$BX(X)
	STD M.YP
	LDD M$CX(X)
	STD M.ZP
GNFRUV:				;FIRE GUN UNIT VECTORS
				;X-->UVP OF SHIP
				;U-->GUN RECORD
	LDA #0F
	STA G$TYP(U)		;TURN ON GUN
	LDU G$UVP(U)
				;---
	LDD M$AX(X)		;COPY UNIT VECTOR ROW 1
	STD M$AX(U)
	LDD M$AY(X)
	STD M$AY(U)
	LDD M$AZ(X)
	STD M$AZ(U)		;
	LDD M$BX(X)		;COPY UNIT VECTOR ROW 2
	STD M$BX(U)
	LDD M$BY(X)
	STD M$BY(U)
	LDD M$BZ(X)
	STD M$BZ(U)		;
	LDD M$CX(X)		;COPY UNIT VECTOR ROW 3
	STD M$CX(U)
	LDD M$CY(X)
	STD M$CY(U)
	LDD M$CZ(X)
	STD M$CZ(U)		;
	LDD M$TX(X)		;COPY UNIT VECTOR START POSITION
	STD M$TX(U)
	LDD M$TY(X)
	STD M$TY(U)
	LDD M$TZ(X)
	STD M$TZ(U)		;
				;---
				;BASE ALL SHOTS ON PLAYERS VELOCITY
				;A) PLAYER'S SHOTS MOVE STRAIGHT
	LDD M$SNVX+M.S1		;B) ENEMY SHOTS LEAD PLAYER
	STD M$SNVX(U)
	LDD M$SNVY+M.S1
	STD M$SNVY(U)
	LDD M$SNVZ+M.S1
	STD M$SNVZ(U)
				;---
	LDX #M.XP		;AIMING DIRECTION VECTOR
	LEAU M$GNVX(U)
	JSR GUNVEL
	JSR GUNVEL
	JSR GUNVEL
	RTS
GUNVEL:				;X-->AIMING DIRECTION VECTOR (M.XP,M.YP,M.ZP)
				;U-->VELOCITY BLOCK
	LDB 0(X)		;HI UNIT VECTOR
	SEX
	STA GN.SHF		;PREPARE HI BYTE OF 3 BYTE SHIFTER
	LDD 0(X)++
	CMPU #M.GA		;DRONES SHOTS ARE SLOWER
	BHS 10$
	.REPT 4
	ASLB			;GUN 2*SHIP MAX
	ROLA
	ROL GN.SHF
	.ENDR
10$:
	.REPT 0
	ASLB
	ROLA
	ROL GN.SHF
	.ENDR
	.REPT 5*4
	NOP
	.ENDR

	TST 0(U)		;SIGN EXTEND
	BPL 18$
	DEC GN.SHF		;---
18$:
	ADDD 0(U)		;ADD I SHIPS VELOCITY
	BCC 20$
	INC GN.SHF
20$:				;---
	.REPT 2
	ASLB			;MATCH VELOCITY IN MOVE ROUTINE
	ROLA
	ROL GN.SHF
	.ENDR
	.REPT 4*6
	NOP
	.ENDR
	.REPT 1
	ASR GN.SHF
	RORA		;SCALE DOWN BY 2
	.ENDR
	STA 1(U)		;NEW GUN VELOCITY
	LDA GN.SHF
	STA 0(U)		;---
	LEAU 8(U)		;POINT TO NEXT VELOCITY
				;---
	RTS
MVGUN:				;MOVE THE GUNS, SHELLS, ETC.
	LDA S.GLW
	BEQ 5$
	RTS
5$:				;---
	LDA #G$EQ-1
	STA GN.LP1
	LDX #GUN		;X--> GUN PACKETS
10$:	STX GN.PTR		;---LOOP FOR EACH GUN
				;X--> GUN PACKET
	LDA G$TYP(X)
	BEQ 90$			;B IGNORE DEAD GUN
	BITA #BT4
	BNE 90$			;B TEMPORARILY IGNORE DIEING GUN
	LDB FRAME+1
	ANDB #0
	BNE 20$
	LDB G$TMR(X)
	DECB			;?TIMER NEGATIVE?
	BPL 15$
	CLR G$TYP(X)		;THEN THE SHELL TIMED OUT
	BRA 90$
15$:				;---
	STB G$TMR(X)
	LDA G$TYP(X)
	BITA #BT1		;?AVAILABLE FOR MOVING?
	BEQ 90$
	CMPB #10		;RECHARGE TIME
	BHI 20$
	ANDA #-1-BT1-BT2-BT3
				;TURN OFF MOV,VW,COL
	STA G$TYP(X)
	BRA 90$
20$:
	LDX G$UVP(X)
	LEAU M$GNTX(X)
	LDD M$VX(X)		;X COORD
	ADDD 0(U)		;M$TX
	STD (U)			;M$TX
	SUBA M$TX+M.S1
	SUBA #78		;KICK OUT IF EITHER GE 78 OR LE -78 AWAY
	CMPA #10
	BLS 85$			;B STOP SHOT IF TOO FAR AWAY
	LDD M$VY(X)		;Y COORD
	ADDD 2(U)		;M$TZ
	STD 2(U)		;NEW Y LOCATION
	SUBA M$TY+M.S1
	SUBA #78		;KEEP IN BOUNDS, -78<Y<78 AWAY
	CMPA #10
	BLS 85$
	LDD M$VZ(X)		;FINALLY, Z COORD
	ADDD 4(U)
	STD 4(U)		;M$TZ
	SUBA M$TZ+M.S1		;KEEP Z WITHIN LOCAL RANGE OF PLAYER
	SUBA #78
	CMPA #10
	BHI 90$			;MOVED ALL COORDS, RANGE OK
85$:				;---OOPS, OUTA SIGHT
	LDX GN.PTR
	LDA G$TYP(X)
	ANDA #-1-BT1-BT2-BT3	;TURN OFF MOV, VW, COL
	STA G$TYP(X)
90$:				;---
	LDX GN.PTR
	LEAX G$IZE(X)
	DEC GN.LP1
	BPL 10$
	RTS
VWGUN:				;
	LDA S.GLW
	BEQ 5$
	RTS
5$:				;---
	LDA #G$EQ-1		;COUNT OF GUNS
	STA GN.LP1
	LDX #GUN		;X--> GUN PACKETS
10$:
	STX GN.PTR
	LDA G$TYP(X)
	BITA #BT2		;?VIEW?
	BEQ 90$
15$:
	LDB G$BIC(X)
	ADDB #3
	STB M.BIC
	LDA #M$PSB2
	JSR MGOWT
				;---
				;RADAR
	LDA #RD$PG		;PLAYER GUN
	CMPX #GUNA
	BLO 18$
	LDA #RD$AG		;ALIEN GUN
18$:				;---
	JSR ADRDR		;ADD TO RADAR
				;---
	LDD M.XCL		;X SCALED--FOR ZOOM
	CMPD #01
	BLE 90$
	CMPD #7F00
	BHI 90$
	STD M.DVD
	LDD M.XP
	STD M.XT
	LDD M.YP
	STD M.YT
	LDD M.YPS
	SUBD M.XCS
	BHS 90$
	LDD M.ZP
	STD M.ZT
	LDD M.ZPS
	SUBD M.XCS
	BHS 90$
				;GUN SHOT IS VISIBLE
	JSR OBJCENT		;PROCESS CENTER OF GUNSHOT
	LDX GN.PTR
	CMPX #GUNA
	BHS 45$
	JSR GN3DRW		;?PLAYER MISSLE?
	BRA 90$
45$:				;---ELSE DRONE
	JSR GN1DRW		;DRAW GUN TYPE 2
90$:				;NEXT GUN SHOT
	LDX GN.PTR
	LEAX G$IZE(X)
	DEC GN.LP1
	BPL 10$
	RTS
GN1DRW:
	LDA G$TYP(X)
	BITA #BT4		;?DISSOLVING?
	BEQ 6$			;B IF REGULAR
	LDA G$DIE(X)
	DECA
	BGT 4$
	LDA G$TYP(X)
	ANDA #-1-BT4-BT2	;END OF DISSOLVE,VIEW
	STA G$TYP(X)
	CLRA
4$:				;---
	STA G$DIE(X)
	LDU #TGN1DI		;DISSOLVE COLORS
	LDB A(U)
	LDA #64			;VG SET COLOR
	STD (Y)++
	BRA 8$
6$:				;---
	LDD #6480+VGCRED	;MIDBRITE RED SHELL
	STD (Y)++
8$:				;---DETERMINE SCALE
	LDA #6			;MAX FOR BINARY SCALE
	STA GN.LP2
	LDD M.XCL
10$:				;---LOOP FOR BINARY SCALE
	DEC GN.LP2
	BEQ 20$
	LSLB
	ROLA
	BPL 10$
	ANDA #7F		;MAX FOR LINEAR SCALE
20$:				;---
	LDB GN.LP2
	ORB #70			;SCALE INSTRUCTION
	STB (Y)+
	STA (Y)+
				;---
				;DO THE FIREBALL
	LDA #8.
	STA GN.LP2
30$:				;---
				;OBTAIN X Y COORDS
	JSR RND8
	LDA RND.S1
	LDB RND.S1
	MUL
	LDB RND.S1
	MUL
	STA GN.XD
	LDA RND.S2
	LDB RND.S2
	MUL
	LDB RND.S2
	MUL
	STA GN.YD
	STA 1(Y)		;Y LSB
	LDB GN.YD
	SEX
	ANDA #1F
	STA (Y)++		;OPERAND, Y MSB
	LDB GN.XD
	SEX
	ANDA #1F
	ORA #20			;BRITENESS
	STD (Y)++		;X MSB, Z
	LDD #0			;PLACE A DOT
	STD (Y)++
	ORA #0E0			;BRITE
	STD (Y)++
				;GET BACK TO CENTER OF FIREBALL
	LDB GN.YD
	NEGB
	SEX
	ANDA #1F
	STD (Y)++		;Y 
	LDB GN.XD
	NEGB
	SEX
	ANDA #1F
	STD (Y)++		;X
	DEC GN.LP2
	BPL 30$
	LDD #7100
	STD (Y)++		;RESTORE SCALE
	LDD #8040		;CENTER
	STD (Y)++
	RTS
TGN1DI:				;DIE COLORS
	.BYTE 03,03,083,03
	.BYTE 03,083,083,03
	.BYTE 083,081,085,081
	.BYTE 081,085,085,085
				;---
GN3DRW:
	LDD #6480+VGCTRQ	;BRITE BLUE
	STD (Y)++
	BRA GNNDRW		;J
GN2DRW:			;DRAW GUN TYPE 2
				;OBJCENT DONE
	LDD #6480+VGCRED	;BRITE RED
	STD (Y)++
GNNDRW:
	CLR BJ.DMC		;NO DAMAGE-DRAW ALL
	LDX GN.PTR
	STX S2.PRM
	LDA G$BIC(X)
	JSR IS2UV		;DOWN LOAD UNIT VECTORS
				;OBJCEN ALREADY PROCESSED
	LDA #M$CNCT
	JSR MGOWT		;CONCATENATE
	LDB G$PIC(X)
	JSR OBJPNT
	LDD #7100
	STD (Y)++
	JSR OBJDRW
	LDD #8040		;CENTER
	STD (Y)++
	RTS
CL1GUN:
	LDX #GUNS
10$:
	STX S1.PRM
	LDA G$TYP(X)
	BITA #BT3
	LBEQ 90$
				;---
	LDA G$BIC(X)
	JSR IS1UV
				;---
	LDU #GUNA		;TEST ALIEN GUNS
40$:				;---
	STU S2.PRM		;U-->ALIEN GUN
	LDX S1.PRM		;X-->PLAYER GUN
	LDA G$TYP(U)
	BITA #BT3
	BEQ 50$			;?COLLISION ALLOWED?
	LDA A$BIC(U)
	ADDA #3			;POINT TO LOCATION
	STA M.BIC
	LDA #M$PSB2
	JSR MGOWT
	LDD M.XP
	CMPD #1000		;ALIEN GUNS TRAVEL FAST TOO
	BHI 50$			;B IF NO COLLIDE
	LDD M.YPS
	CMPD #4
	BHI 50$			;B IF NO COLLIDE
	LDD M.ZPS
	CMPD #4
	BHI 50$			;B IF NO COLLIDE
	JSR GN1HTG		;HIT AN ALIEN GUN
50$:				;---
	LDU S2.PRM
	LEAU G$IZE(U)
	CMPU #GUNAZ
	BLO 40$
				;---
	LDU #ALIEN
60$:
	STU S2.PRM		;U--> SHIP PARM
	LDX S1.PRM		;X--> GUN PARM
	LDA A$TYP(U)
	CMPA #1			;?LIVE SHIP?
	BNE 80$
	LDA A$BIC(U)
	ADDA #3
	STA M.BIC
	LDA #M$PSB2
	JSR MGOWT
	LDD M.YPS
	CMPD #4
	BHI 80$
	LDD M.ZPS
	CMPD #4
	BHI 80$
	LDD A$CHST(U)
	CHSET C$GN		;STATUS: GUN NEAR
	STD A$CHST(U)
	LDD M.XP
	CMPD #800		;PLAYER
	BHI 80$
;---
;COLLIDED WITH SHIP
	JSR GUNHIT
	BRA 90$			;ONLY ONE HIT SHIP PER SHOT
80$:
	LDU S2.PRM
	LEAU A$IZE(U)
	CMPU #ALIENZ
	BLO 60$
90$:
	LDX S1.PRM
	LEAX G$IZE(X)
	CMPX #GUNSZ
	LBLO 10$
	RTS
				;===
GL1HTG:				;PLAYERS GLOW HIT ALIEN GUN
GN1HTG:				;PLAYERS GUN HIT ALIEN GUN
	LDA G$TYP(U)		;U-->ALIEN GUN
	ANDA #-1-BT3-BT1	;X-->PLAYER GUN
	ORA #BT4		;ON WITH DISSOLVE
	STA G$TYP(U)		;TURN OFF ALIEN GUN MOVE,COLLISION
	LDA #10
	STA G$DIE(U)		;SHOW SHELL DISSOLVING
	RTS
				;===
CLAGUN:				;COLLISION WITH ALIEN GUN
	LDA S.GLW
	BNE 90$			;B NO MULTIPLE HITS ON PLAYER
	LDX #GUNA
10$:				;---
	STX S1.PRM
	LDA G$TYP(X)
	BITA #BT3		;?COLLISIONS ALLOWED?
	BEQ 80$
	LDA G$BIC(X)
	JSR IS1UV
	LDA #M$S1BC+3
	STA M.BIC		;BIC OF PLAYER LOCATION
	LDA #M$PSB2
	JSR MGOWT
	LDD M.XP
	CMPD #400
	BHI 80$			;?CLOSE IN FRONT OF GUN?
	LDD M.YPS
	CMPD #4
	BHI 80$			;?AND CLOSE TO SIDE?
	LDD M.ZPS
	CMPD #4			;?AND CLOSE IN UP.DOWN?
	BHI 80$
	JSR GNAHIT		;THEN ALIEN GUN HIT PLAYER
	BRA 90$			;ONLY ONE HIT AT A TIME
80$:				;---
	LDX S1.PRM
	LEAX G$IZE(X)
	CMPX #GUNAZ
	BLO 10$
90$:				;---
	RTS
				;===
GNAHIT:				;ALIEN GUN HIT PLAYER
	LDA G$TYP(X)		;X-->ALIEN GUN
	ANDA #-1-BT3-BT2	;TURN OFF FURTHER COLLISIONS
	STA G$TYP(X)
	JSR BG1GLW
	LDA #20
	STA S.ROL		;ROLL US IN RESPONSE
	LDA S.GAS
	BGT 80$			;?OUT OF SHIELD ENERGY?
	JSR BG1XPL		;THEN EXPLODE THE PLAYER
80$:				;---
	LDX S1.PRM
	LDX G$UVP(X)		;X-->GUN UVP
	LDU #M.S1		;U-->SHIP UVP
	JSR GUNBMP		;THROW SHIP FOR A LOOP
	RTS
				;===
GUNHIT:				;GUN HAS HIT SOMETHING
	LDX S1.PRM		;S1.PRM,X,-->GUN PARM
	JSR RND8
				;---
	LDA G$TYP(X)
	ANDA #-1-BT3		;NO MORE COLLISIONS
	STA G$TYP(X)
				;---
				;FIND GUN SHIP GUARMS
				;POINT TO SCORE
	LDX #ALIEN		;SEND ALIEN DISTRESS SIGNAL
20$:				;---
	LDA A$TYP(X)
	CMPA #1
	BNE 30$			;?A LIVE ALIEN?
	LDA #0FF
	STA A$TRGT(X)		;THEN AIM AT PLAYER
	LDD A$CHST(X)
	CHSET C$AH		;STATUS: SOME ALIEN DAMAGED
	STD A$CHST(X)
30$:				;---
	LEAX A$IZE(X)
	CMPX #ALIENZ
	BLO 20$
				;---
	LDX S2.PRM		;X--> HIT SHIP PARM
	LDA #40			;FORCE ROL OF SHIP
	STA A$ROL(X)
	INC A$DMC(X)		;RECORD SOME MORE DAMAGE
	DEC A$HTA(X)		;DECREASE HITS LEFT
	LBLE GN1XPL		;NO HITS LEFT - EXPLODE GUN
				;INDICATE DAMAGE
				;IMPART GUN VELOCITY TO SHIP
	LDU #TSCA1H
	JSR ADUSCR
				;FORCE GLOW
	LDA #0F
	STA A$GLW(X)
	LDX S1.PRM
	LDX G$UVP(X)		;X--> GUN UNIT VECTOR
	LDU S2.PRM
	LDU A$UVP(U)		;U-->HIT SHIP UNIT VECTOR
GUNBNC:				;===BOUNCE GUN OFF ALIEN
	LDA #2
	STA GN.LP1
40$:				;---
	LDD M$GNV(X)
	JSR ASRD4
	STD M$GNV(X)
	JSR ASRD1
	STD M$SNV(U)		;STUN ALIEN
	LDA RND.S1
	ORA #80
	LDB M$AY(X)
	MUL
	BCS 43$			;RANDOM BIT
	NEGA
43$:				;---
	JSR ASRD8
	STB GN.LP2		;TEMP
	ADDD M$GNV(X)
	STD M$GNV(X)
	LDB GN.LP2
	NEGB
	ASRB
	NOP
	SEX
	ADDD M$SNV(U)
	STD M$SNV(U)
	LDA RND.S2
	ORA #80
	LDB M$AZ(X)
	MUL
	BCS 53$			;RANDOM BIT
	NEGA
53$:				;---
	JSR ASRD8
	STB GN.LP2		;TEMP
	ADDD M$GNV(X)
	STD M$GNV(X)
	LDB GN.LP2
	NEGB			;BOUNCE OPPOSITE DIRECTION
	ASRB			;STUN -- HALF SPEED
	NOP
	SEX			;FULL WORD
	ADDD M$SNV(U)
	STD M$SNV(U)
				;---
	LEAX 8(X)
	LEAU 8(U)
	DEC GN.LP1
	BPL 40$
	JSR AUDHTS
	RTS			;---

GUNBMP:				;=== THROW SHIP FOR A LOOP
	LDA #2
	PSHS A
40$:				;---
	LDD M$GNV(X)
	JSR ASRD3
	STD M$SNV(U)		;THROW BACK ALONG GUN'S X AXIS
	LDA RND.S1
	ORA #80			;ADJUST Y,Z FOR A CONE SPREAD
	LDB M$AY(X)
	MUL
	TST RND.S1
	BMI 43$
	NEGA
43$:				;---
	JSR ASRD7
	ADDD M$SNV(U)
	STD M$SNV(U)
	LDA RND.S2
	ORA #80			;BETWEEN 50% AND 100% Z COMPONENT
	LDB M$AZ(X)
	MUL
	TST RND.S2		;RANDOM POS OR NEG Z COMPONENT
	BMI 47$
	NEGA
47$:				;---
	JSR ASRD7
	ADDD M$SNV(U)
	STD M$SNV(U)
	STD M$GNV(X)		;GUN STAYS WITH SHIP
	LEAX 8(X)
	LEAU 8(U)
	DEC 0(S)
	BPL 40$
	LEAS 1(S)
	JSR AUDHTS		;AUDIO-HIT SHIP
	RTS
				;===
GN1XPL:				;PLAYERS GUN EXPLODED
				;X-->HIT SHIP
	JSR BGAXPL
				;---
	LDU #TSCA1D
	JSR ADUSCR
				;---
	LDX #ALIEN		;LOOP THRU ALIENS
20$:				;---
	LDA A$TYP(X)
	CMPA #1
	BNE 30$			;?ALIEN SHIP ALIVE?
	LDD A$CHST(X)
	CHSET C$AD		;STATUS: AN ALIEN DIED
	STD A$CHST(X)
30$:				;---
	LEAX A$IZE(X)
	CMPX #ALIENZ
	BLO 20$
				;---
	LDX S1.PRM
	LDA G$TYP(X)
	ORA #BT2+BT1		;ALLOW MOTION AND VIEW
	STA G$TYP(X)
	LDX G$UVP(X)		;GUN UVP
	LDU S2.PRM
	LDU A$UVP(U)		;ALIEN UVP
	JSR GUNBMP		;THROW 'EM FOR A LOOP
	RTS
NW1SHP:
	LDA #0
	STA S.GLW
	STA S.ROL
	STA S.HYPR
	LDU #M.S1
	JSR UNITV
	LDD #0
	STD M$TX+M.S1
	STD M$TY+M.S1
	STD M$TZ+M.S1
	STA RH$RSD+RHEOP	;CLEAR OUT MAGIC RESIDUE
	STA RH$RSD+RHEOY
	STD RH$POS+RHEOY
	STD RH$POS+RHEOP
	STD SI.OSX
	STD SI.OSY
	STD SI.UY
	STD SI.UZ
	LDD #4000
	STD SI.UX
	RTS
				;---
NWNSHP:
	JSR INOBJ		;INITIALIZE OBJECTS
	LDB WV.LVL
	LDX #TWBASE
	CMPB -1(X)		;# OF ENTRIES
	BLS 15$
	LDB -1(X)		;LIMIT AT MAX
15$:				;---
	LSLB			;#2;WORD POINTERS
	LDD B(X)
	STD WV.LP		;LOOP TABLE POINTER
	CLR WV.LIV		;NO ALIENS CURRENTLY ALIVE
	LDX #ALIEN
20$:
	STX S1.PRM
	CLR A$TYP(X)		;KILL ALL ALIENS FIRST
	LDU WV.LP
	LDA 0(U)
	BEQ 90$			;?CONSTRUCT THIS SHIP?
	INC WV.LIV		;ONE MORE LIFE IN THIS WAVE
	LDD 0(U)
	STD WV.SHP		;SHIP SHAPE AND PARMS
	LDD 2(U)
	STD WV.CHP		;CHOREOGRAPHY
	LDD 4(U)
	STD WV.BGP		;BEGIN LOCATION
	LEAU 6(U)
	STU WV.LP
	JSR NWASHP
90$:				;---NEXT ALIEN
	LDX S1.PRM
	LEAX A$IZE(X)
	CMPX #ALIENZ
	BLO 20$
				;---
	RTS
NWASHP:
	LDA #1
	STA A$TYP(X)		;LIVE ALIEN
	LDU A$UVP(X)
	JSR UNITV
	CLRA
	STA A$ROL(X)
	STA A$DMC(X)
	STA A$GLW(X)
	STA A$DIE(X)
	STA A$TRGT(X)
	LDU WV.SHP
	LDA 1(U)		;DRONES DIE ON N HITS
	STA A$HTA(X)
	LDU A$UVP(X)
	LDX WV.BGP		;BEGINNING LOCATION
	LDD 0(X)
	STD M$TX(U)
	LDD 2(X)
	STD M$TY(U)
	LDD 4(X)
	STD M$TZ(U)
	LDX S1.PRM
	LDD WV.CHP
	STD A$CHPC(X)
	JSR NWCHOR
	LDX S1.PRM
	LDB @WV.SHP
	STB A$PIC(X)		;CURRENT SHIP PICTURE
	JSR ADOBJ
	RTS
INOBJ:				;INIT MBOX FOR NEW OBJECT SHAPES
	LDX #BJBIC
	LDA #0
10$:				;---
	STA 0(X)+		;CLEAR OUT BIC LIST
	CMPX #BJBICZ
	BLO 10$
				;---
	LDA #M$BJBC
	STA BJ.BIC		;STARTING BIC VALUE
	LDD #M.OBJ
	STD BJ.RAM		;STARTING RAM ADDRESS
	RTS			;---
ADOBJ:				;ADD OBJECT POINTS TO MBOX
				;B:=OBJECT #
	LDX #BJBIC
	LDA B(X)		;?MISSING FROM MBOX?
	BNE 90$			;B IF ALREADY PRESENT IN MBOX
	LDA BJ.BIC		;THEN START THE TRANSFER
	STA B(X)		;SAVE BIC ADDRESS
	LDX #TDRWNM
	LDA B(X)		;# OF POINTS TO XFER
	STA BJ.CNT
	ADDA BJ.BIC		;UPDATE BIC
	BCC 25$			;?TOO MANY POINTS?
	SWI			;***TEST***
				;FOR PROD, REPOINT FOR PSUEDO-GOOD POINTS BJBIC TO M$BJBC
25$:				;---
	STA BJ.BIC		;
	LDX #TDRWPC		;POINTER TO 6 BYTE ROM POINTS
	LSLB			;ACCESSED BY WORDS
	LDX B(X)		;X-->6 BYTE ROM
	LDU BJ.RAM		;U-->8 BYTE MRAM
30$:				;---
	LDD 0(X)		;X
	STD 0(U)
	LDD 2(X)		;Y
	STD 2(U)
	LDD 4(X)		;Z
	STD 4(U)
	LEAX 6(X)		;6 BYTE ROM
	LEAU 8(U)		;8 BYTE MRAM
	DEC BJ.CNT		;ONE LESS POINT
	BGT 30$			;LOOP THRU THEM ALL
				;---
	STU BJ.RAM		;RECORD LATEST MRAM USAGE
90$:				;---
	RTS
	.BYTE 19		;WAVE LIMIT
TWBASE:
	.WORD TWV24,TWV23,TWV25		;DEMO (AGAIN)
	.WORD TWV21,TWV0,TWV22,TWV0
	.WORD TWV23,TWV0
	.WORD TWV11,TWV0,TWV12,TWV0
	.WORD TWV13,TWV0,TWV14,TWV0
	.WORD TWV15,TWV0,TWV16,TWV0
	.WORD TWV0,TWV1,TWV2,TWV3
	.WORD TWV4,TWV5,TWV6,TWV7
				;WAVE DEFN POINTERS. DESCRIBE ALIENS
				;SHAPE, CHOREGRAPHY, BEGIN LOC
	.MACRO .WV A1,A2,A3
	.WORD TS.'A1'		;SHAPE
	.WORD TCH'A2'		;CHOREOGRAPHY
	.WORD TBG'A3'		;BEGIN LOCATION
	.ENDM			;---

	.MACRO .WVZ		;END
	.BYTE 0
	.ENDM			;---

TWV0:				;---
	.WV TIE,1,SQ1
	.WVZ
TWV1:				;---
	.WV CUB,1,HX1
	.WV FLM,1,HX2
	.WV CUB,2,HX3
	.WV FLM,2,HX4
	.WV FLM,2,HX5
	.WV FLM,2,HX6
	.WVZ
TWV2:				;---
	.WV TNK,2,WD1
	.WV SAU,2,WD2
	.WV BZZ,2,WD3
	.WV BZZ,2,WD4
	.WV SAU,2,WD5
	.WV TNK,2,WD6
	.WVZ
TWV3:				;---
	.WV RCK,3,WD1
	.WV RCK,3,WD6
	.WV STB,3,SQ1
	.WV STB,3,SQ2
	.WV BZZ,3,SQ3
	.WV BZZ,3,SQ4
	.WVZ
TWV4:				;---
TWV5:
	.WV SAU,4,UT1
	.WV SAU,4,UT2
	.WV SAU,4,UT3
	.WV FLM,4,DT1
	.WV FLM,4,DT2
	.WV FLM,4,DT3
	.WVZ
TWV6:
TWV7:
	.WV SAU,5,UT1
	.WV SAU,5,UT2
	.WV SAU,5,UT3
	.WV FLM,5,DT1
	.WV FLM,5,DT2
	.WV FLM,5,DT3
	.WVZ

TWV11:
	.WV TIE,6,TI1
	.WVZ
TWV12:
	.WV RCK,6,RK1
	.WVZ
TWV13:
	.WV TIE,7,TI2
	.WV TIE,8,TI3
	.WVZ
TWV14:
	.WV RCK,6,RK1
	.WV RCK,6,RK2
	.WVZ
TWV15:
	.WV TIE,6,TI1
	.WV TIE,7,TI4
	.WV TIE,8,TI5
	.WVZ
TWV16:
	.WV RCK,6,RK1
	.WV RCK,6,RK2
	.WV RCK,6,RK3
	.WVZ
TWV21:
	.WV TIE,10,TI1
	.WVZ
TWV22:
;THREE TIE FIGHTERS IN FLAT TRIANGLE, POSING FOR PLAYER.
;THEN PEEL SLOWLY OFF AND ATTACK PLAYER
	.WV TIE,11,TI1
	.WV TIE,12,TI4
	.WV TIE,13,TI5
	.WVZ
TWV23:
;9 FLYING M'S IN A FLAT HAT FORMATION. DANCE FOR THE PLAYER, THEN
;SLOWLY SPLIT OFF IN PAIRS TO ATTACK PLAYER
	.WV FLM,14,HT1
	.WV FLM,15,HT2
	.WV FLM,15,HT3
	.WV FLM,16,HT4
	.WV FLM,16,HT5
	.WV FLM,17,HT6
	.WV FLM,17,HT7
	.WV FLM,18,HT8
	.WV FLM,18,HT9
	.WVZ
				;===
TWV24:				;FASTER DEMO OF THREE TIES
	.WV TIE,21,TI1
	.WV TIE,22,TI4
	.WV TIE,23,TI5
	.WVZ
				;===
TWV25:				;3 TIES WAY OUT, DANCING
	.WV TIE,24,TS1
	.WV TIE,25,TS2
	.WV TIE,26,TS3
	.WVZ
				;===
				;TBG***
				;BEGINNING LOCATIONS FOR ALIENS
				;X FORWARD, Y?, ZUP
				;ON SHIP SIZE CENTERS
				;0,0,0 IS PLAYER MOVING FORWARD
	.MACRO .WB .1,.2,.3,.4
TBG'.1':
	.WORD '.2'*100
	.WORD '.3'*100
	.WORD '.4'*100
	.ENDM
				;FRONT TO BACK, LEFT TO RIGHT, TOP TO BOTTOM
	.WB HX1,0,1,2		;HEXAGON
	.WB HX2,0,-1,2
	.WB HX3,0,2,0
	.WB HX4,0,-2,0
	.WB HX5,0,1,-2
	.WB HX6,0,-1,-2
	.WB SQ1,0,2,2		;SQUARE
	.WB SQ2,0,-2,2
	.WB SQ3,0,2,-2
	.WB SQ4,0,-2,-2
	.WB UT1,0,0,2		;UP TRIANGLE
	.WB UT2,0,2,-2
	.WB UT3,0,-2,-2
	.WB DT1,0,+2,1		;DOWN TRIANGLE
	.WB DT2,0,2,1
	.WB DT3,0,0,-2
	.WB WD1,0,6,0		;WIDE LINE
	.WB WD2,0,4,0
	.WB WD3,0,2,0
	.WB WD4,0,-2,0
	.WB WD5,0,-4,0
	.WB WD6,0,-6,0
	.WB DM1,0,0,2		;DIAMOND
	.WB DM2,0,2,0
	.WB DM3,0,-2,0
	.WB DM4,0,0,-2
				;---
	.WB SW1 0,0,1		;STAR WARS 'JEDI' TEASER DEMO
	.WB SW2 -4,2,1
	.WB SW3 -4,-2,1
	.WB SW4 -6,0,1
				;---
	.WB TI1 0,0,3		;TIE DEMO, 1A,3A,ONE OR THREE HEADMAN
	.WB TI2 0,-5,2		;2A
	.WB TI3 0,5,2		;2B,TWO FIGHTER FORMATION
	.WB TI4 -10.,-5,2	;	      3B
	.WB TI5 -10.,5,2	;	      3C,THREE FIGHTER FORMATION
				;---
	.WB RK1 0,0,3		;'JEDI' TEASER, X-WING ROCKETS
	.WB RK2 -10.,15.,10.
	.WB RK3 -20.,-15.,15.
				;---
				;FLAT HAT SHAPE, WITH BRIM
	.WB HT1 0+30,0,3
	.WB HT2 -3+30,-3,2
	.WB HT3 -3+30,3,2
	.WB HT4 -6+30,-6,1
	.WB HT5 -6+30,6,1
	.WB HT6 -10+30,-9,0
	.WB HT7 -10+30,9,0
	.WB HT8 -10+30,-12,-4
	.WB HT9 -10+30,12,-4
				;---
				;SPREAD TIES,WAY OUT THERE
	.WB TS1 1000,-400,0
	.WB TS2 1000,0,0
	.WB TS3 1000,400,0
				;---
	.PAGG
	.SBTTL OBJECT DRAW -- BJCNTR,OBJCEN,OBJPNT,OBJDRW,BJLINV/B

BJCNTR:				;EXPECTS VG AT CENTER, INFO AT QUO, YP, XP
OBJCEN:
	LDD #7100		;RESET SCALE
	STD (Y)++
	LDD M.QUO		;AT LEAST 7.5 CYCLES AFTER M.DVD
	STD M.XP
	LDA #M$PERS
	JSR MGOWT
	LDD M.ZP
	STD BJ.CY		;NEW CUNENT Y
	ANDA #1F
	STD (Y)++		;Y LONG VECTOR
	LDD M.YP
	STD BJ.CX
	ADDD #0AA		;VIDEO CENTER OFFSET
	ANDA #1F
	ORA #00			;BRIGHTNESS
	STD (Y)++		;X LONG VECTOR
	RTS
				;===

BJLINV:				;DRAW VISIBLE OBJECT LINE
	LDD M.QUO		;AT LEAST 7.5 CYCLES AFTER M.DVD
	STD M.XP
	LDA #M$PERS
	JSR MGOWT
	LDD M.ZP
	SUBD BJ.CY		;CURRENT UP/DOWN POSITION
	ANDA #01F
	STD (Y)++
	LDD M.ZP
	STD BJ.CY
				;---
	LDD M.YP		;LEFT/RIGHT
	SUBD BJ.CX
	ANDA #01F
	ORA #20
	STD (Y)++
	LDD M.YP
	STD BJ.CX
				;---
	RTS
				;===

BJLINB:				;DRAW BLANK OBJECT LINE
	LDD M.QUO		;AT LEAST 7.5 CYCLES AFTER M.DVD
	STD M.XP
	LDA #M$PERS
	JSR MGOWT
	LDD M.ZP
	SUBD BJ.CY		;CURRENT UP/DOWN POSITION
	ANDA #01F
	STD (Y)++
	LDD M.ZP
	STD BJ.CY
				;---
	LDD M.YP		;LEFT/RIGHT
	SUBD BJ.CX
	ANDA #01F		;BLANK
	STD (Y)++
	LDD M.YP
	STD BJ.CX
				;---
	RTS
				;===

OBJPNT:
	LDX #TDRWNM
	LDA B(X)		;# OF POINTS
	STA BJ.CNT
	LDX #BJBIC
	LDA B(X)
	BNE 5$
	SWI			;***TEST***
				;SET TO M$BJBC IF FAIL
5$:				;---
	STA M.BIC
	LDX #TDRWLN
	LSLB
	LDD B(X)
	STD BJ.LNP		;LINE POINTER FOR OBJDRW
	LDX #BJ.PNT
10$:
	LDA #M$PAD
	JSR MGOWT
	LDD M.XCL		;X SCALED--FOR ZOOM
	STD M.DVD
	ORCC #0			;TOTAL OF 7.5 CYCLE DELAY BEFORE READ
	LDD M.QUO		;GET 1/X, RECIPROCAL
	STD M.XP
	LDA #M$PERS		;1/X (*Y,*Z)
	JSR MGOWT
	LDD M.YP
	CMPA #2			;KEEP WITHIN WINDOW
	BLT 33$
	LDD #01FF
33$:				;---
	CMPA #0FD		;NEG WINDOW
	BGT 36$
	LDD #0FE00
36$:				;---
	STD 0(X)
	LDD M.ZP
	CMPA #2			;KEEP WITHIN WINDOW
	BLT 43$
	LDD #01FF
43$:				;---
	CMPA #0FD		;NEG WINDOW
	BGT 46$
	LDD #0FE00
46$:				;---
	STD 2(X)
	LEAX 4(X)
	DEC BJ.CNT
	BGT 10$
	RTS
OBJDRW:
	LDU BJ.LNP
10$:
	LDB 0(U)+
	BITB #2
	BEQ 18$
	CMPB #0FF
	BEQ 90$
	LSRB
	LSRB
	CMPB BJ.DMC
	BHI 10$			;CONTINUE IF BACK DAMAGE
	BRA 90$
18$:				;---
	CLRA
	BITB #3
	BNE 20$
	LDA #20			;0 CODE HAS BRITNESS
20$:				;---
	STA BJ.BRT		;PRE FORMATTED BRITNESS
	ANDB #0FC		;PREPARE OFFSET
	LDX #BJ.PNT		;AND BASE POINT TABLE
	ABX			;ADD OFFSET TO POINT TABLE
	LDD 2(X)		;Y
	SUBD BJ.CY
	ANDA #1F
	STD (Y)++
	LDD 0(X)		;X
	SUBD BJ.CX
	ANDA #1F
	ORA BJ.BRT
	STD (Y)++
	LDD 0(X)
	STD BJ.CX
	LDD 2(X)
	STD BJ.CY
	BRA 10$
90$:
	RTS
				;===
	.MACRO .WL A1
	.W$ LN,\TD$'A1',.	;TD**LN:
	.ENDM			;---

	.MACRO .L .1,.2,.3,.4,.5,.6,.7,.8,.9
	.IRP .A,<.1 .2 .3 .4 .5 .6 .7 .8 .9>
	.BYTE 0'.A*4
	.ENDR
	.ENDM			;---

	.MACRO .B .1,.2,.3,.4,.5,.6,.7,.8,.9,.10
	.BYTE 0'.1*4+1
	.L .2 .3 .4 .5 .6 .7 .8 .9 .10
	.ENDM
				;---
	.MACRO .LD .1,.2,.3,.4,.5,.6,.7,.8,.9
	.IRP .A,<.1 .2 .3 .4 .5 .6 .7 .8 .9>
	.BYTE .A'.*4
	.ENDR
	.ENDM
				;---
				;BLANK , DECIMAL
	.MACRO .BD .1,.2,.3,.4,.5,.6,.7,.8,.9,.10
	.BYTE .1'.*4+1
	.LD .2 .3 .4 .5 .6 .7 .8 .9 .10
	.ENDM
				;---
				;DAMAGE ALLOWED
	.MACRO .D .1
	.BYTE 0'.1*4+2
	.ENDM			;---

	.MACRO .LEND
	.BYTE 0FF
	.ENDM			;---

	.WL TNK			;TANK
	.B 17,16
	.B 0C,0D
	.B 0E,14,12,0F,0E,11,10,13,15,11
	.B 0F,10
	.B 13,12
	.B 14,15
	.D 4
	.B 3,0,4,7,6,2,3,7,
	.D 3
	.L 0B,0A,6,5,9,0A,0D
	.D 2
	.L 9,8,0B,0C,8,4,5,1,2
	.D 1
	.B 1,0
	.LEND
				;---
	.WL CUB			;CUBE
	.B 0,1,2,3,0,4
	.L 5,1,5,6,2,6
	.L 7,3,7,4
	.LEND
				;---
	.WL RCK			;ROCKET SHIP
	.B 5,0,6,7,0,8,A,0,9,5
	.B 1,2,3,4
	.B 8,7,17,14,8
	.L C,12,14,18,12
	.B C,A
	.B 5,6,15,13,5
	.D 4
	.L B,11,13,16,11
	.D 3
	.B B,9,16,15,10,D,E,F
	.D 2
	.L 10,17,18,16
	.D 1
	.B 18,A,9
	.LEND
				;---
	.WL STB			;STUBBY
	.B 5,1,0,4,8
	.L 0,2,3,1,6,5
	.B D,C,B,A
	.B 4,15,16,17,4,9,2
	.B 3,7,5,10,F,E,5
	.B 13,6,8,11,13,E,17,11
	.D 4
	.B 17,12,16
	.D 3
	.B 15,9,12,14,F
	.D 2
	.B 10,7,9
	.D 1
	.B 7,14,E
	.LEND
				;---
	.WL SAU			;SAUCER
	.B 10,8,9,10,A,B,10,C,D
	.L 10,E,F,10
	.B 0,7,F,8,0,1,9,A,2,3
	.D 4
	.L B,C,4,5,D,E,6,7
	.D 3
	.B 6,5
	.D 2
	.B 4,3
	.D 1
	.B 2,1
	.LEND
				;---
	.WL BZZ			;BUZZ BOMB
	.B D,C,6,0,1,7,8,9
	.L A,B,6,7,C,8,2,3
	.L 9,C,A,4,5,B,C
	.B 18,17,16,18,19,17
	.B 19,16
	.B 1,2
	.B 3,4
	.B 5,0
	.D 4
	.B 12,13,14,15,12,E,F,10,11,E
	.D 3
	.B F,13
	.D 2
	.B 14,10
	.D 1
	.B 11,15
	.LEND
				;---
	.WL FRK			;CUBIC GUN SHT
	.B 3,0,5,6
	.B 2,1,4,7
	.B 8
	.LEND
				;---
				;---
	.WL ZIG			;PLAYER'S ZIGZAG GUN
	.B 0,1,2,3,4
	.B 5,6,7,8,9
	.LEND
				;---
	.WL FLM			;FLYING M
	.B 0,0,0,1,9		;UNDERLINE NOT DRAWN - PATCHABLE
	.B 1,2,A
	.B 2,3,B
	.B 3,4,C
	.B 4,5,D
	.B 5,6,E
	.B 6,7			;PATCH - UNDERLINE NOT DRAWN
	.B F,8,9,A,B,C,D,E,F
	.B 7,0
	.LEND
	.WL DSM			;PLANES OF DISSIMILATION
	.B 0,1,2,3,0
	.B 4,5,6,7,4
	.LEND

				;---
	.WL TIE			;TIE FIGHTER
	.BD 1,2,3,4,5,6,1
	.LD 7,8,9,10,11,12,7
	.LD 25,26,27,28,29,25
	.LD 37,38,39,47
	.BD 39,40,41,49
	.BD 41,42,43,44,37
	.LD 45,46,47,48,49,50,51,52,45
	.LD 31,32,33,34,35,36,31
	.LD 19,20,21,22,23,24,19
	.LD 13,14,15,16,17,18,13
	.BD 14,20,32,46,38,26,8,2
	.BD 3,9,27,40
	.BD 48,33,21,15
	.BD 16,22,34,50,42,28,10,4
	.BD 5,11,29,43,51,35,23,17
	.BD 18,24,36,52,44,30,12,6
	.LEND
	
TDRWLN:				;LINE POINTERS, PER OBJECT
	...1=-1
	.REPT TD$EQ+1
	...1=...1+1
	.W$ LN,\...1		;GET TD**LN
	.WORD .W0
	.ENDR
TDRWNM:				;# OF POINTS PER OBJECT
	...1=-1
	.REPT TD$EQ+1
	...1=...1+1
	.W$ NM,\...1		;GET TD**NM
	.BYTE .W0
	.ENDR
TDRWPC:				;ROM POINTS TABLES, PER OBJECT
	...1=-1
	.REPT TD$EQ+1
	...1=...1+1
	.W$ PC,\...1		;GET TD**PC
	.WORD .W0
	.ENDR
	.PAGG
	.SBTTL	CHOREOGRAPHY TABLES
TCH1:
	.CGOSUB TCH0I		;INIT
	.CUNTIL C$AH!C$AT
5$:				;---
	.CT 40,C$RL,0
	.CT 40,C$RR,0
	.CT 40,C$PD,0
	.CT 40,C$PU,0
	.CT 40,C$YL,0
	.CT 40,C$YR,0
	.CT 40,C$RL,0
	.CT 40,C$RR,0
	.CGOTO 5$
	.CUNTIL 0
10$:
	.CT 80,C$T0,0
	.CT 10,0,C$MB+C$MF
	.CGOTO 10$

TCH2:				;---
	.CGOSUB TCH0I		;INIT
	.CUNTIL C$AD!C$AT
10$:				;---
	.CT 40,C$RL,0
	.CT 40,C$RR,0
	.CT 40,0,C$ML
	.CT 40,0,C$MR
	.CT 40,0,C$MD
	.CT 40,0,C$MU
	.CT 40,0,C$MF
	.CT 40,0,C$MB
	.CT 40,0,C$MF+C$MB
	.CGOTO 10$
	.CUNTIL 0
	.CGOTO TCH4

TCH3:
	.CGOSUB TCH0I		;INIT
	.CUNTIL C$AH!C$AT
10$:				;---
	.CT 10,C$RL,C$MB
	.CT 20,C$RR,C$MF
	.CT 40,C$RL,C$MB
	.CT 80,C$RR,C$MF+C$MB
	.CT 50,C$RL,C$MB
	.CT 40,C$RL,C$MU
	.CT 40,C$RR,C$MD
	.CT 40,C$RL,C$ML
	.CT 40,C$RR,C$MR
	.CGOTO 10$
	.CUNTIL 0
	.CGOTO TCH4

TCH4:
	.CGOSUB TCH0I			;INIT
	.CGOSUB 20$
	.CGOSUB 20$
	.CGOSUB 20$
	.CGOSUB 20$
10$:					;---
	.CT 80,C$RL+C$T0,C$MF
	.CGOTO 10$
20$:					;---
	.CT 40,C$RL+C$T0,C$ML+C$MF
	.CT 40,C$RR+C$T0,C$ML+C$MF
	.CT 40,C$RL+C$T0,C$ML+C$MF
	.CT 40,C$RR+C$T0,C$ML+C$MF
	.CT 40,C$RL+C$T0,C$ML+C$MF
	.CT 80,C$PU+C$YR,C$MU+C$MR+C$MF
	.CT 80,C$PD,C$MB
	.CRETURN
TCH5:
	.CUNTIL C$AH!C$AT
5$:	.CT 40,C$RL,C$MF+C$MB
	.CT 40,C$RR,C$MF+C$MB
	.CGOTO 5$
	.CUNTIL 0
10$:
	.CUNTIL C$PS
	.CIF C$AS
	.CT 20,C$T0,C$MF
	.CIF C$PN
	.CT 20,C$T9,C$MB
	.CT 80,C$RL,C$MF
	.CIF 0
	.CT 40,C$PU,C$MF+C$MB
	.CGOTO 10$
	.CUNTIL 0
	.CT 80,C$T0,C$MU
	.CGOTO 10$

TCH0I:				;INIT
	.CT 20,0,C$MF
	.CT 20,0,C$MF+C$MB
	.CRETURN
				;---
TCH6:				;SW DEMO
	.CUNTIL C$AD
	.CT 10,0,C$MF
10$:				;---
	.CT 11,C$RR,C$MF
	.CT 11,C$RL,C$MF
	.CT 80,0,C$MF
	.CGOTO 10$
	.CUNTIL 0
	.CT 40,C$PU,C$MF
20$:				;---
	.CT 80,C$T0,0
	.CGOTO 20$
TCH7:				;SW DEMO
	.CUNTIL C$AD
	.CT 10,0,C$MF
10$:				;---
	.CT 23,C$RL,C$MF
	.CT 20,C$RL,C$MF
	.CT 40,0,C$MF
	.CGOTO 10$
	.CUNTIL 0
	.CT 40,C$PU,C$MF
20$:				;---
	.CT 80,C$T0,0
	.CGOTO 20$

TCH8:				;SW DEMO
	.CUNTIL C$AD
	.CT 10,0,C$MF
10$:				;---
	.CT 23,C$RR,C$MF
	.CT 20,C$RR,C$MF
	.CT 60,0,C$MF
	.CGOTO 10$
	.CUNTIL 0
	.CT 40,C$PU,C$MF
20$:				;---
	.CT 80,C$T0,0
	.CGOTO 20$
				;===
TCH10:				;SINGLE LEADER,NOVICE
	.CT 10,0,C$MF
	.CT 43,C$RR,C$MF+C$MB
	.CT 20,0,C$MF+C$MB
	.CT 43,C$RL,C$MF+C$MB
	.CT 20,0,C$MF+C$MB
	.CT 43,C$RR,C$MF+C$MB
	.CT 20,0,C$MF+C$MB
	.CT 43,C$RL,C$MF+C$MB
	.CT 20,0,C$MF+C$MB
	.CT 20,C$PU,C$MF+C$MB
70$:				;---
	.CT 40,C$T0+C$RL,C$MF+C$MB
	.CGOTO 70$
				;===
TCH11:
	.CT 10,0,C$MF
	.CT 11,C$RR,C$MF
	.CT 11,C$RL,C$MF
	.CT 20,0,C$MF
	.CT 11,C$RL,C$MF
	.CT 11,C$RR,C$MF
	.CT 20,0,C$MF
	.CT 11,C$RR,C$MF
	.CT 11,C$RL,C$MF
	.CT 20,0,C$MF+C$MB
	.CT 40,C$PU,C$MF+C$MB
70$:				;---
	.CT 40,C$T0+C$RR,C$MF
	.CGOTO 70$
				;===
TCH12:				;LEFT OF THREE TIE FIGHTERS
	.CT 10,0,C$MF
	.CT 11,C$RR,C$MF
	.CT 11,C$RL,C$MF
	.CT 20,0,C$MF
	.CT 11,C$RL,C$MF
	.CT 11,C$RR,C$MF
	.CT 20,0,C$MF
	.CT 43,C$YL,C$MF
70$:				;---
	.CT 40,C$T0+C$RR,C$MF
	.CGOTO 70$
				;===
TCH13:				;RIGHT OF THREE TIE FIGHTERS
	.CT 10,0,C$MF
	.CT 11,C$RR,C$MF
	.CT 11,C$RL,C$MF
	.CT 20,0,C$MF
	.CT 11,C$RL,C$MF
	.CT 11,C$RR,C$MF
	.CT 20,0,C$MF
	.CT 43,C$YR,C$MF
70$:				;---
	.CT 40,C$T0+C$RR,C$MF
	.CGOTO 70$
				;===
TCH14:				;HEAD OF FLYING M, PORPOISING
TCH15:
	.CT 30,0,C$MF
TCH16:				;NEXT SET
	.CT 02,C$PD,C$MF
	.CT 02,C$PU,C$MF
	.CT 02,C$PU,C$MF
	.CT 02,C$PD,C$MF
	.CT 10,0,C$MF
TCH17:				;NEXT SET
	.CT 02,C$PD,C$MF
	.CT 02,C$PU,C$MF
	.CT 02,C$PU,C$MF
	.CT 02,C$PD,C$MF
	.CT 10,0,C$MF
TCH18:				;NEXT SET
	.CT 02,C$PD,C$MF
	.CT 02,C$PU,C$MF
	.CT 02,C$PU,C$MF
	.CT 02,C$PD,C$MF
	.CT 20,C$PU,C$MF
70$:				;---
	.CT 40,C$T0+C$RL,C$MF
	.CT 40,C$T0+C$RR,C$MF
	.CGOTO 70$
				;===
TCH21:
	.CT 11,C$RR,C$MF
	.CT 11,C$RL,C$MF
	.CT 11,C$RL,C$MF
	.CT 11,C$RR,C$MF
	.CT 11,C$RR,C$MF
	.CT 11,C$RL,C$MF
	.CT 20,0,C$MF+C$MB
	.CT 40,C$PU,C$MF+C$MB
70$:				;---
	.CT 40,C$T0+C$RR,C$MF+C$MB
	.CGOTO 70$
				;===
TCH22:				;LEFT OF THREE TIE FIGHTERS
	.CT 11,C$RR,C$MF
	.CT 11,C$RL,C$MF
	.CT 11,C$RL,C$MF
	.CT 11,C$RR,C$MF
	.CT 43,C$YL,C$MF
70$:				;---
	.CT 40,C$T0+C$RR,C$MF+C$MB
	.CGOTO 70$
				;===
TCH23:				;RIGHT OF THREE TIE FIGHTERS
	.CT 11,C$RR,C$MF
	.CT 11,C$RL,C$MF
	.CT 11,C$RL,C$MF
	.CT 11,C$RR,C$MF
	.CT 43,C$YR,C$MF
70$:				;---
	.CT 40,C$T0+C$RR,C$MF+C$MB
	.CGOTO 70$
				;===
TCH24:				;LEFT OF 3 SPREAD TIES
	.CT 70,C$RR+C$T0,C$MU
	.CT 70,C$RR+C$T0,C$MU
	.CT 40,C$RR+C$T0,C$MU+C$MF+C$MB
70$:				;---
	.CT 40,C$RL+C$T0,C$MF+C$MB
	.CGOTO 70$
				;===
TCH26:				;RIGHT OF 3 SPREAD TIES
	.CT 70,C$RL+C$T0,C$MU
	.CT 70,C$RL+C$T0,C$MU
	.CT 40,C$RL+C$T0,C$MU+C$MF+C$MB
70$:				;---
	.CT 40,C$RR+C$T0,C$MF+C$MB
	.CGOTO 70$
				;===
TCH25:				;MID OF 3 SPREAD TIES
	.CT 40,C$RR+C$RL+C$PU+C$PD,C$MU
	.CT 20,C$RR+C$RL,C$MD
	.CT 20,C$RR+C$RL,C$MU
	.CUNTIL C$AD
20$:				;---
	.CT 20,C$T0,C$MD
	.CT 20,C$T0,C$MU
	.CGOTO 20$
	.CUNTIL 0
70$:				;---
	.CT 10,C$RR+C$T0,C$MF+C$MB+C$MD
	.CT 10,C$RR+C$T0,C$MF+C$MB+C$MU
	.CGOTO 70$
				;===
	.PAGG

RND8:	
	LDD RND.S2
	STD RND.S3
	LDA P.RND1		;GET NEW RANDOM BYTE
	LDB RND.S1		;SHIFT OTHERS DOWN
	STD RND.S1
	RTS
RND1:
	CLRB
RNDB:
	LDA RND.S1
	EORA RND.S4
	ASLA
	ASLA
	ROL RND.S1
	ROL RND.S2
	ROL RND.S3
	ROL RND.S4
	SUBB #1
	BPL RNDB
	RTS
	.GLOBL PATCH
PATCH:
	.BLKB 40		;PATCH ROOM
	.END
                                                                                                                                                                                                                                                                        