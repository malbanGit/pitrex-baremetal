	.TITLE	TCMES	MESSAGE GENERATOR
	.INCLUDE WSCOMN.MAC  ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
;INTERNAL ROUTINES
	.GLOBL	MESSON,MESSOF,VWMESS,VWMES2,MESOUT,ALLOFF,DOMESS,DOMES2
	.GLOBL	SPMON,SPMOFF,VWSPMS,SPMESS
	.GLOBL	TSPMAL,BGBNNR,VWBNNR
;EXTERNAL 
	;ROUTINES
	;LOCATIONS
	.GLOBL	MESBLK,SPMBLK
	.GLOBL	TESTSW
	.GLOBL	VGMSGA
	.GLOBL	VGCOLR,VGCNTR,VGSCAL
	.GLOBL	VGCGRN,VGCRED,VGCBLU,VGCTRQ,VGCPRP,VGCYLW,VGCWHT
	.GLOBL	VJNUMS
	.GLOBL	VJMFL,VGLIMT
	.GLOBL	VJSWST,VJSWSA,VJSWSR,VJSWWW,VJSWWA,VJSWRS
	.GLOBL	VGRW7,VGRW9

	.GLOBL	MESLST,SPMLST,SPMNXT,SPMALM,MESPNT,MESNUM,MSYOFF
	.GLOBL	BN.CNT,BN.COL,BN.SCL
	.GLOBL	SPMS1,SPMSZ
	.GLOBL	PHASE,PH$INS

	.GLOBB	BT.SUP
	.GLOBB	TESTBT

VGCOLR	=6080
VGCBLU	=1
VGCGRN	=2
VGCTRQ	=3
VGCRED	=4
VGCPRP	=5
VGCYLW	=6
VGCWHT	=7

	.CSECT	MESS
	.PAGE
	.SBTTL	MESSON,MESSOFF
	.REPT 0
**********************************
*
*	MESSON,MESSOFF,ALLOFF
*
**********************************

DESCRIPTION:	MESSON--ADDS MESSAGE NUMBER IN MESSAGE DISPLAY LIST IF NOT ALREADY THERE
		MESSOFF--DELETES MESSAGE NUMBER FROM MESSAGE LIST
		ALLOFF--SETS POINTER TO START OF LIST
	MESLST POINTS TO THE NEXT AVAILABLE UNUSED SLOT!!

REGISTERS:	
	IN:	A=MESSAGE NUMBER
	OUT:	A,X,U  ALTERED

STACK USE:	2 BYTES FOR RETURN

RAM USE:	MESLST,MESBLK(MESLST)

	.ENDR

MESSON:	LDX #MESBLK
	CMPX MESLST
	IFLO			;LIST NOT EMPTY, SEARCH IT
	BEGIN			;TRY TO FIND IT
	CMPA (X)+
	IFEQ			;ALREADY HERE
	RTS			;LEAVE
	ENDIF
	CMPX MESLST		;END OF LIST?
	HSEND
	ENDIF
				;X POINTS TO NEXT AVAILABLE SLOT IN MESSAGE LIST
	STA (X)+		;STORE MESSAGE NUMBER
	STX MESLST		;UPDATE POINTER
	RTS

MESSOFF:LDX #MESBLK		;SEARCH MESSAGE LIST FOR MESSAGE NUMBER
	BEGIN
	CMPA (X)
	IFEQ			;FOUND IT, DELETE IT
	LDU MESLST		;AVAILABLE POINTER
	CMPU #MESBLK		;COMPARE WITH FIRST ENTRY SLOT
	IFHI			;LIST WASN'T EMPTY, OK TO DELETE IT
	DECU			;POINTS TO LAST ENTRY NOW
	LDA (U)			;WAS LAST ENTRY
	STA (X)			;INSERT AT ENTRY TO BE DELETED
	STU MESLST		;SAVE UPDATE POINTER
	TUX			;TRANSFER U->X, LEAVE LOOP
	ENDIF
	ENDIF
	LEAX 1(X)		;NEXT ENTRY
	CMPX MESLST
	HSEND
	RTS

ALLOFF:
	LDX #MESBLK		;SET POINTER TO START OF LIST
	CLR (X)
	STX MESLST
	RTS 
	.PAGE
	.SBTTL	VWMESS
	.REPT 0
**********************************
*
*	VWMESS
*
**********************************

DESCRIPTION:	OUTPUT ALL MESSAGES IN THE MESSAGE DISPLAY LIST

REGISTERS:	
	IN:	Y POINTS TO NEXT AVAILABLE RAM IN VG
	OUT:	A,B,X,U, ALTERED
		Y UPDATED

STACK USE:	2 BYTES FOR SUBROUTINE CALL
		2 BYTES FOR RETURN

RAM USE:	VGRAM(Y),MESNUM

	.ENDR

VWMESS:
	LDU #MESBLK		;START AT THE BEGINNING
	CMPU MESLST		;ARE WE DONE BEFORE WE START?
	IFLO			;NO, GO ON
	BEGIN			;PROCESS LIST
	LDB (U)+
	CMPB #MESSZ		;IS IT A VALID MESSAGE NUMBER?
	IFLO			;YES, DO IT
	STB MESNUM		;SAVE IT FOR LATER--->MESOUT
	JSR MCOLR		;COLOR
	JSR MOUT2		;OUTPUT CHARACTERS
	ENDIF
	CMPU MESLST		;DONE? (U UPDATED AT BEGINNING OF LOOP)
	HSEND
	ENDIF
	RTS
			;VWMES2 NEVER DOES A COLOR COMMAND
VWMES2:
	LDU #MESBLK		;START AT THE BEGINNING
	CMPU MESLST		;ARE WE DONE BEFORE WE START?
	IFLO			;NO, GO ON
	BEGIN			;PROCESS LIST
	LDB (U)+
	CMPB #MESSZ		;IS IT A VALID MESSAGE NUMBER?
	IFLO			;YES, DO IT
	STB MESNUM		;SAVE IT FOR LATER--->MESOUT
	JSR MOUT2		;OUTPUT CHARACTERS
	ENDIF
	CMPU MESLST		;DONE? (U UPDATED AT BEGINNING OF LOOP)
	HSEND
	ENDIF
	RTS
	.PAGE
	.SBTTL	SPMON,SPMOFF --SPECIAL MESSAGE ON,OFF
	.REPT 0
**********************************
*
*	SPMON,SPMOFF
*
**********************************

DESCRIPTION:	INSERT/DELETE MESSAGE NUMBER FROM SPECIAL MESSAGE LIST.
		SPECIAL MESSAGE LIST IS FOR MESSAGES THAT RECEDE INTO THE DISTANCE.
LIST CONSISTS OF MESSAGE #,SIZE INDICATOR, SCALE INC   (1 ENTRY=5 BYTES)
SPMLST POINTS TO THE NEXT AVAILABLE UNUSED SLOT!!

REGISTERS:	
	IN:	A=MESSAGE NUMBER
	OUT:	A,B,U ATLERED

STACK USE:	2 BYTES FOR RETURN

RAM USE:	SPMLST,SPMBLK(SPMLST)

	.ENDR

SPMON:	LDU SPMLST		;POINTS TO NEXT AVAILABLE SLOT IN SPECIAL MESSAGE LIST
	STA (U)+		;PUT IT IN LIST
	LDD #0000		;SIZE ALWAYS STARTS AT LINEAR SCALE OF 0
	STD (U)++
	LDD #0100		;START MOVING SLOW
	STD (U)++
	STU SPMLST		;SAVE UPDATED POINTER
	RTS

SPMOFF:	LDU #SPMBLK		;START AT THE BEGINNING
	BEGIN			;PROCESS LIDT
	CMPA (U)		;IS THIS IT
	IFEQ			;YES, FOUND IT
	LDA #0
	STD (U)
;	LDD SPMLST
;	CMPD #SPMBLK
;	IFHI			;LIST WASN'T EMPTY ALREADY
;	SUBD #2			;POINT TO LAST ENTRY'S INCREMENT
;	STD SPMLST
;	LDD @SPMLST
;	STD 3(U)		;MOVE TO DELETED ENTRY
;	LDD SPMLST
;	SUBD #2
;	STD SPMLST		;POINTS TO LAST ENTRY'S SIZE
;	LDD @SPMLST
;	STD 1(U)
;	LDD SPMLST
;	SUBD #1			;POINTS TO LAST ENTRY'S MESSAGE NUMBER
;	STD SPMLST		;ALSO NOW POINTS TO NEXT AVAILABLE ENTRY
;	LDA @SPMLST
;	STA 0(U)		;MOVE TO DELETED ENTRY
;	LDU SPMLST		;LEAVE LOOP
;	ENDIF
	ENDIF
	LEAU 5(U)		;NEXT ENTRY
	CMPU SPMLST		;DONE?
	HSEND
	RTS
	.PAGE
	.SBTTL	VWSPMS --- VIEW SPECIAL MESSAGES
	.REPT 0
**********************************
*
*	VWSPMS
*
**********************************

DESCRIPTION:	OUTPUT MESSAGES IN SPECIAL MESSAGE LIST.
		MESSAGES ARE OUTPUT ACCORDING TO THEIR SIZE INFORMATION.
		THIS GIVES THE "STAR WARS" EFFECT.

REGISTERS:	
	IN:	Y POINTS TO AVAILABLE VG RAM
	OUT:	A,B,X,U ALTERED
		Y UPDATED

STACK USE:	2 BYTES FOR SUBROUTINE CALL
		2 BYTES FOR RETURN

RAM USE:	VGRAM(Y),MESNUM

	.ENDR

VWSPMS:
	LDU #SPMBLK		;SPECIAL MESSAGE RAM BLOCK
	CMPU SPMLST		;DONE BEFORE WE START?
	IFLO			;LIST NOT EMPTY, GO ON
	LDD #VGSCAL		;SET UP SCALE
	STD (Y)++
	BEGIN			;PROCESS LIST
	LDA (U)+		;GET MESSAGE #
	IFNE			;VALID MESSAGE
	STA MESNUM		;SAVE IT FOR LATER
	LDD #VGLIMT&1FFF	;VECTOR FROM CENTER TO VANISHING POINT
	STD (Y)++
	LDD #0
	STD (Y)++
	LDB (U)			;SIZE FROM LIST
	LDA #<VGSCAL/100>&0F0+1	;MAKES THIS A SCAL INSTRUCTION
	STD (Y)++
	COMB			;BRIGHTNESS RELATIVE TO INVERSE OF SCALE
	ADDB #10		;PLUS AN OFFSET
	LDA #<VGCOLR/100>+VGCGRN	;COLOR
	STD(Y)++
	LDX #TSPMX-<SPMS1*2>	;TABLE OF SPECIAL MESS. X POSITIONS
	LDB MESNUM
	ABX			;
	ABX
	LDD #1DD0		;DELTA Y (FROM VANISHING POINT)
	STD (Y)++
	LDD 0(X)		;DELTA X FOR MESSAGE
	ANDA #1F
	ORA #00
	STD (Y)++
	JSR MESOUT		;OUTPUT REST OF MESSAGE
	LDD #VGSCAL		;RESET THE SCALE TO NORMAL
	STD (Y)++
	LDD #VGCNTR		;CENTER AFTER MESSAGE
	STD (Y)++
	ENDIF
	LEAU 4(U)
	CMPU SPMLST		;DONE?
	HSEND
	ENDIF
	RTS

BGBNNR:				;BEGIN BANNER
	LDD #00
	STD BN.CNT
	LDD #VGCOLR&0F000+18	;START WITH DIM Z
	STD BN.COL
	LDD #SPMBLK		;SETUP POINTER
	STD SPMLST
	LDD TSPMAL		;SETUP ALARM FOR 1ST MESSAGE
	STD SPMALM
	LDA #SPMS1
	STA SPMNXT
	RTS
				;---

VWBNNR:				;VIEW BANNER, STAR WARS TITLE
	LDD BN.CNT
	ADDD #1
	STD BN.CNT
	CMPD #0F8		;MAX OF LINEAR SCALE
	LBHS 80$		;TOO SMALL, GOTO END
				;ELSE
				;PUT OUT "STAR WARS"
	CMPD #40
	IFLO			;BRIGHTENING, NOT MOVING
	LDD BN.COL
	ADDB #3
	STD BN.COL
	LDD #40			;ASSUME A SIZE
	ELSE			;NOW MOVE AND DIM BRIGHTNESS RELATIVE TO SCALE
	LDD BN.CNT
	COMB
	ADDB #18		;ADD AN OFFSET SO BRIGHT LONGER
	STD BN.COL
	LDD BN.CNT
	ENDIF
	ORA #<VGSCAL/100>+1
	STD BN.SCL
				;---
	LDD BN.COL		;SETUP COLOR JUST ONCE
	ORA #<<VGCOLR&0F000>/100>+VGCBLU
	STD (Y)++
				;---
	LDD #VGLIMT&01FFF	;HORIZON POINT FOR BANNERS
	STD 0*8+0(Y)
	STD 1*8+0(Y)
	STD 2*8+0(Y)
	STD 3*8+0(Y)
	STD 4*8+0(Y)
	STD 5*8+0(Y)
	LDD #00
	STD 0*8+2(Y)
	STD 1*8+2(Y)
	STD 2*8+2(Y)
	STD 3*8+2(Y)
	STD 4*8+2(Y)
	STD 5*8+2(Y)
				;---
	LDD BN.SCL
	STD 0*8+4(Y)
	STD 1*8+4(Y)
	STD 2*8+4(Y)
	STD 3*8+4(Y)
	STD 4*8+4(Y)
	STD 5*8+4(Y)
				;---
	LDD #VJSWST		;'ST'
	STD 0*8+6(Y)
	LDD #VJSWSA		;'A'
	STD 1*8+6(Y)
	LDD #VJSWSR		;'R'
	STD 2*8+6(Y)
	LDD #VJSWWW		;'W'
	STD 3*8+6(Y)
	LDD #VJSWWA		;'A'
	STD 4*8+6(Y)
	LDD #VJSWRS		;'RS'
	STD 5*8+6(Y)
				;---
	LEAY 6*8(Y)

80$:
; ***********   FALL THRU TO DO SPECIAL MESSAGES *****************

	.PAGE
	.SBTTL	SPMESS
	.REPT 0
**********************************
*
*	SPMESS
*
**********************************

DESCRIPTION:	SPECIAL MESSAGE UPDATE SIZES

REGISTERS:	
	IN:	SPMLST POINTS TO NEXT AVAILABLE ENTRY IN LIST.
	OUT:	A,B,X,U ALTERED

STACK USE:	2 BYTES FOR RETURN

RAM USE:	SPMLST,SPMBLK

	.ENDR

SPMESS:
	LDX #SPMBLK		;UPDATE MOVING MESSAGE SIZES
	CMPX SPMLST
	IFLO			;THERE IS A MESSAGE TO PROCESS
	BEGIN			;PROCESS LIST
	LDD BN.CNT
	CMPD #00E0
	IFLO
	CMPD #40
	IFHS
	LDD 1(X)
	ADDD 3(X)
	STD 1(X)
	ENDIF
	ELSE
	CMPD #160
	IFLO
	LDD #400		;SPEED IT UP
	STD SPMBLK+3
	ELSE
	LDD 1(X)		;UPDATE SCALE
	ADDD 3(X)
	STD 1(X)
	CMPD #0F000		;MAKE NEXT ONE FAST
	IFHS
	LDA 0(X)		;MESSAGE #
	INCA			;NEXT MESSAGE
	LDU #SPMBLK
	BEGIN
	CMPA 0(U)
	IFEQ			;FOUND NEXT HIGHER MESSAGE
	LDD #400		;SPEED IT UP
	STD 3(U)
	LDU SPMLST		;LEAVE LOOP
	ENDIF
	LEAU 5(U)		;NEXT IN LIST
	CMPU SPMLST		;DONE?
	HSEND
	LDA 0(X)
	JSR SPMOFF		;GET RID OF IT
	LEAX -5(X)		;MAKE SURE WE DO THE ONE THAT REPLACED IT
	ENDIF
	ENDIF
	ENDIF
	LEAX 5(X)
	CMPX SPMLST		;DONE?
	HSEND
	ENDIF
	LDD BN.CNT		;INC TIMER
	CMPD #200
	IFHS			;DONE, GO BACK TO INSTRUCTION PHASE
	LDA #PH$INS
	STA PHASE
	ENDIF			;ELSE CONTINUE
	CMPD SPMALM		;ALARM? ( NEXT LINE ?)
	IFHS			;YES, START IT AND RESET FOR NEXT LINE
	LDA SPMNXT
	JSR SPMON
	LDA SPMNXT
	INCA
	CMPA #SPMSZ
	IFHS			;NO MORE MESSAGES
	LDD #0FFFF		;DISABLE ALARM
	STD SPMALM		;TIMER WILL NEVER GET THIS FAR
	ELSE
	STA SPMNXT		;NEXT MESSAGE TO GO OUT
	LDX #TSPMAL-<SPMS1*2>	;GET ALARM TIME
	TFR A,B
	ABX			;WORD TABLE
	ABX
	LDD (X)
	STD SPMALM		;NEW ALARM
	ENDIF
	ENDIF
	RTS

TSPMAL:				;ALARM TIMES FOR SPECIAL MESSAGES
	.WORD	0041
	.WORD	0050
	.WORD	0060
	.WORD	0070
	.WORD	0080
	.WORD	0090
	.WORD	00A0
	.WORD	00B8

	.PAGE
	.SBTTL	MESSAGES

.MACRO	.MESSNAME ...1
MES'...1':
	.PRINT ...A(40'MES',43,3,10,1)
	.ENDM

.MACRO	.MESS	...X,...Y,...C,...1,...2
	.MESSNAME \...A
	HERE=.
	.=TMESXY+<4*...A>
	.WORD	...X&^H1FFF,...Y&^H1FFF
	.=TMESCL+<2*...A>
	.WORD 	...C
	.=HERE
	.IF	NB,...2
	MS.'...2'==...A
	.ENDC
	.ASCIN	/...1/
	...A=...A+1
	.IIF	GE,...A-255.,.ERROR	...A;TOO MANY MESSAGES
	.ENDM

.MACRO	.SPMESS	...1,...2
	.MESSNAME \...A
	.IF	NB,...2
	MS.'...2'==...A
	.ENDC
	.ASCIN	/...1/
	...A=...A+1
	.IIF	GE,...A-255.,.ERROR	...A;TOO MANY MESSAGES
	.ENDM

.MACRO	.NEXTMESS	...X,...Y,...C,...1
	.MESSNAME \...A
	HERE=.
	.=TMESXY+<4*...A>
	.WORD	...X&^H1FFF,...Y&^H1FFF
	.=TMESCL+<2*...A>
	.WORD	...C
	.=HERE
	.IF	NB,...1
	MS.'...1'==...A
	.ENDC
	...A=...A+1
	.IIF	GE,...A-255.,.ERROR	...A;TOO MANY MESSAGES
	.ENDM
				;COLORS WITH STANDARD INTENSITY (80)
BLU	=VGCOLR+<VGCBLU*100>	;BLUE
GRN	=VGCOLR+<VGCGRN*100>	;GREEN
TRQ	=VGCOLR+<VGCTRQ*100>	;TURQOISE
RED	=VGCOLR+<VGCRED*100>	;RED
PRP	=VGCOLR+<VGCPRP*100>	;PURPLE
YLW	=VGCOLR+<VGCYLW*100>	;YELLOW
WHT	=VGCOLR+<VGCWHT*100>	;WHITE

	...A=0

	.MESS	-104.,-420.,GRN,<STAR WARS>,CPY
	.MESS	-404.,-456.,GRN,<@ 1983 LUCASFILM LTD. AND ATARI,INC.>
	.MESS	-224.,-492.,GRN,<ALL RIGHTS RESERVED.>
	.MESS	-464.,-528.,GRN,<LUCASFILM TRADEMARKS USED UNDER LICENSE.>,CPZ
	.NEXTMESS	-104.,000.,RED!0FF,GO1
	.MESS	-104.,0480.,TRQ,<GAME OVER>,GVR
	.MESS	-140.,0480.,BLU,<INSERT COINS>,INS
	.MESS	-104.,0432.,YLW,<FREE PLAY>,FRE
	.MESS	-164.,0432.,YLW,<2 PLAYS 1 COIN>,2PC
	.MESS	-152.,0432.,YLW,<1 COIN 1 PLAY>,1CP
	.MESS	-164.,0432.,YLW,<2 COINS 1 PLAY>,2CP
;	.MESS	-164.,0400.,YLW,<2 COIN MINIMUM>,2CM
	.MESS	-248.,0480.,VJMFL,<PULL TRIGGER TO START>,STR
	.MESS	-060.,0432.,WHT,<CREDITS>,CRD
	.MESS	-060.,0432.,WHT,<CREDIT>
	.MESS	-116.,460./2,VJMFL,<SHIELD GONE>,SHG
	.MESS	-396.,0288.,RED,<FLIGHT INSTRUCTIONS TO RED FIVE>,FLI
	.MESS	-444.,0216.,RED,<1.  YOUR X-WING IS EQUIPPED WITH AN>
	.MESS	-420.,0180.,RED,<INVISIBLE DEFLECTOR SHIELD THAT>
	.MESS	-420.,0144.,RED,<WILL PROTECT YOU FOR   COLLISIONS.>
	.MESS	-444.,0072.,RED,<2.  DEFLECTOR STRENGTH IS LOST WHEN>
	.MESS	-420.,0036.,RED,<A FIREBALL IMPACTS YOUR SHIELD OR>
	.MESS	-420.,0000.,RED,<WHEN YOU STRIKE A LASER TOWER OR>
	.MESS	-420.,-036.,RED,<TRENCH CATWALK.>
	.MESS	-444.,-108.,RED,<3.  AIM YOUR LASERS WITH CURSOR TO>
	.MESS	-420.,-144.,RED,<EXPLODE EMPIRE TIE FIGHTERS, LASER>
	.MESS	-420.,-180.,RED,<TOWER TOPS AND TRENCH TURRETS.>
	.MESS	-444.,-252.,RED,<4.  SHOOT FIREBALLS BEFORE THEY>
	.MESS	-420.,-288.,RED,<IMPACT YOUR SHIELD.>
	.MESS	-444.,-360.,RED,<5.  THE REBEL FORCE IS DEPENDING ON>
	.MESS	-420.,-396.,RED,<YOU TO STOP THE EMPIRE BY BLOWING>
	.MESS	-420.,-432.,RED,<UP THE DEATH STAR.>,FLZ
	.MESS	0084.,0144.,RED,<6>
	.MESS	0084.,0144.,RED,<7>
	.MESS	0084.,0144.,RED,<8>
	.MESS	0084.,0144.,RED,<9>
	.MESS	-060.,0280.,PRP,<SCORING>,SCR
	.MESS	-372.,0180.,PRP,<TIE FIGHTERS                 1,000>,SC1
	.MESS	-372.,0120.,PRP,<DARTH VADER'S SHIP           2,000>
	.MESS	-372.,0060.,PRP,<LASER BUNKERS                  200>
	.MESS	-372.,0000.,PRP,<LASER TOWERS                   200>
	.MESS	-372.,-060.,PRP,<TRENCH TURRETS                 100>
	.MESS	-372.,-120.,PRP,<FIREBALLS                       33>
	.MESS	-372.,-280.,PRP,<EXHAUST PORT                25,000>
	.MESS	-372.,-350.,PRP,<DESTROYING ALL TOWER TOPS   50,000>,SCZ
	.MESS	-224.,0340.,PRP,<SELECT A DEATH STAR>,DS1
	.MESS	-380.,0300.,PRP,<FIRE LASER AT DESIRED DEATH STAR>
	.MESS	-104.,0260.,VJMFL,<COUNTDOWN>
	.MESS	-300.,0032.,GRN,<EASY>
	.MESS	-068.,-200.,GRN,<MEDIUM>
	.MESS	0224.,0032.,GRN,<HARD>
	.MESS	-468.,0200.,RED,<WAVE 1>
	.MESS	-068.,-160.,RED,<WAVE 3>
	.MESS	0332.,0200.,RED,<WAVE 5>
;	.NEXTMESS	-256.,-200.,BLU
	.NEXTMESS	-056.,-400.,BLU
;	.NEXTMESS	0144.,-200.,BLU
	.MESS	0344.,0000.,BLU,<BONUS>
	.MESS	-492.,0000.,BLU,<NO BONUS>
;	.MESS	-280.,-240.,RED,<200,000>
	.MESS	-080.,-440.,RED,<400,000>
;	.MESS	0120.,-240.,RED,<600,000>
	.MESS	0320.,-040.,RED,<800,000>,DSZ
	.MESS	-368.,0340.,YLW,<MESSAGE FROM REBEL COMMAND POST>,HS1
	.MESS	-308.,0280.,PRP,<YOU ARE A TRUE REBEL PILOT>
	.MESS	-248.,0220.,VJMFL,<THE FORCE IS WITH YOU>
	.MESS	-224.,0120.,BLU,<SHOOT YOUR INITIALS>,HSZ
	.NEXTMESS -320.,000.,VJMFL,RF1
	.MESS	-320.,0316.,RED,<PRINCESS LEIA'S REBEL FORCE>,RF2
	.MESS	-128.,VGRW7,RED,<POINTS NEXT TOWER>,NXT
	.MESS	0314.,0444.,RED,<TOWERS>,TWR
	.MESS	-284.,VGRW7,VJMFL,<CLEARED ALL LASER TOWERS>,ATP
	.MESS	-356.,VGRW7,RED,<50,000 FOR SHOOTING ALL TOWERS>,RWD
	.MESS	-212.,VGRW9/2-12.,VJMFL,<EXHAUST PORT AHEAD>,EXH
	.MESS	-236.,0312.,VJMFL,<DEATH STAR DESTROYED>,DSD
	.MESS	-224.,VGRW9/2-12.,VJMFL,<EXHAUST PORT MISSED>,MSD
	.MESS	-308.,0192.,VJMFL,<BONUS FOR REMAINING ENERGY>,BRE
	.MESS	-128.,0144.,VJMFL,<5,000  X>
	.MESS	-272.,0072.,VJMFL,<ADDED TO DEFLECTOR SHIELD>,BSE
	.MESS	-272.,0072.,VJMFL,<SHIELD AT FULL STRENGTH>
	.MESS	-224.,-048.,VJMFL,<STARTING WAVE BONUS>,BON
	.MESS	-176.,VGRW7,WHT,<SHOOT FIREBALLS>,SFB
	.MESS	-212.,VGRW7,RED,<SHOOT TIE FIGHTERS>,STF
	.MESS	-164.,VGRW7,RED,<AVOID CATWALKS>,ACW
	.MESS	-152.,VGRW9,VJMFL,<USE THE FORCE>,USE
	.MESS	0000.,0000.,VJMFL,< FOR USING THE FORCE>

	SPMS1=	...A
	.SPMESS	<OBI-WAN KENOBI IS GONE BUT HIS>
	.SPMESS	<PRESENCE IS FELT WITHIN THE FORCE.>
	.SPMESS	<THE EMPIRE'S DEATH STAR, UNDER THE>
	.SPMESS	<COMMAND OF DARTH VADER, NEARS THE>
	.SPMESS	<REBEL PLANET.  YOU MUST JOIN THE>
	.SPMESS	<REBELLION TO STOP THE EMPIRE.>
	.SPMESS	<THE FORCE WILL BE WITH YOU.>
	.SPMESS	<ALWAYS>
	.MESSNAME \...A
	SPMSZ=	...A

	.MESS	-260.,480.,WHT,<ACCOUNTING INFORMATION>,ACC
	.MESS	-216.,440.,GRN,<AUX COINS>
	.MESS	-360.,400.,GRN,<LEFT MECH COINS>
	.MESS	-384.,360.,GRN,<RIGHT MECH COINS>
	.MESS	-384.,320.,GRN,<TOTAL COINS PAID>
	.MESS	-288.,280.,GRN,<GAMES PLAYED>
	.MESS	0250.,320.,GRN,<HIGH WAVE>
	.MESS	-360.,220.,GRN,<TOTAL GAME TIME           SECONDS>
	.MESS	-408.,180.,GRN,<AVERAGE GAME TIME>
	.MESS	-312.,120.,GRN,<TOTAL TIME ON           SECONDS>
	.MESS	-432.,080.,GRN,<PERCENTAGE OF PLAY     PERCENT>
	.MESS	-248.,000.,WHT,<HISTORY OF GAME TIMES>
	.MESS	-140.,500.,WHT,<GAME OPTIONS>,OPT
	.MESS	-360.,450.,GRN,<VALUE OF A COIN>
	.MESS	-360.,400.,GRN,<LEFT MECH VALUE>
	.MESS	-384.,350.,GRN,<RIGHT MECH VALUE>
	.MESS	-264.,300.,GRN,<BONUS ADDER>
	.MESS	-360.,250.,GRN,<STARTING SHIELD>
	.MESS	-360.,200.,GRN,<PLAY DIFFICULTY>
	.MESS	-288.,150.,GRN,<BONUS SHIELD>
	.MESS	-384.,100.,GRN,<MUSIC IN ATTRACT>
	.MESS	-408.,000.,GRN,<RESET HIGH SCORES>
	.MESS	-408.,-050.,GRN,<RESET TIMING INFO>
	.MESS	-312.,-100.,GRN,<RESET OPTIONS>
	.MESS	-264.,-150.,GRN,<TEST NOVRAM>
	.MESS	-260.,-300.,GRN,<UP,DOWN TO SELECT ITEM>
	.MESS	-368.,-350.,GRN,<PULL LEFT FIRE TO CHANGE SETTING>
	.MESS	072.,450.,GRN,<FREE PLAY>,VLC
	.MESS	072.,450.,GRN,<2 CREDITS>
	.MESS	072.,450.,GRN,<1 CREDIT>
	.MESS	072.,450.,GRN,<% CREDIT>
	.MESS	072.,400.,GRN,<1>,LMV
	.MESS	072.,400.,GRN,<2>
	.MESS	072.,350.,GRN,<1>,RMV
	.MESS	072.,350.,GRN,<4>
	.MESS	072.,350.,GRN,<5>
	.MESS	072.,350.,GRN,<6>
	.MESS	072.,300.,GRN,<NONE>,BAV
	.MESS	072.,300.,GRN,<2 GIVES 1>
	.MESS	072.,300.,GRN,<4 GIVES 1>
	.MESS	072.,300.,GRN,<4 GIVES 2>
	.MESS	072.,300.,GRN,<5 GIVES 1>
	.MESS	072.,300.,GRN,<3 GIVES 1>
	.NEXTMES 072.,300.,GRN
	.MESS	072.,300.,GRN,<NONE>
	.MESS	072.,250.,GRN,<6>,SLV
	.MESS	072.,250.,GRN,<7>
	.MESS	072.,250.,GRN,<8>
	.MESS	072.,250.,GRN,<9>
	.MESS	072.,200.,GRN,<EASY>,DIF
	.MESS	072.,200.,GRN,<MODERATE>
	.MESS	072.,200.,GRN,<HARD>
	.MESS	072.,200.,GRN,<HARDEST>
	.MESS	072.,150.,GRN,<0>,BSV
	.MESS	072.,150.,GRN,<1>
	.MESS	072.,150.,GRN,<2>
	.MESS	072.,150.,GRN,<3>
	.MESS	072.,100.,GRN,<YES>,MUV
	.MESS	072.,100.,GRN,<NO>
	.MESS	072.,000.,GRN,<NO>,RHS
	.MESS	072.,000.,GRN,<YES>
	.MESS	072.,-050.,GRN,<NO>,RAC
	.MESS	072.,-050.,GRN,<YES>
	.MESS	072.,-100.,GRN,<NO>,ROP
	.MESS	072.,-100.,GRN,<YES>
	.MESS	072.,-150.,GRN,<NO>,TER
	.MESS	072.,-150.,GRN,<YES>
	.MESS	178.,-150.,RED,<NO ERRORS>,GNV
	.MESS	178.,-150.,RED,<ERROR AT>,BNV
	.MESS	-128.,400.,WHT,<SWITCH TEST>,SWT
	.MESS	-300.,300.,GRN,<LEFT FIRE>
	.MESS	100.,300.,GRN,<RIGHT FIRE>
	.MESS	-080.,-150.,GRN,<SPARE 1>
	.MESS	-104.,200.,GRN,<SELF TEST>
	.MESS	-044.,150.,GRN,<SLAM>
	.MESS	-092.,100.,GRN,<AUX COIN>
	.MESS	-104.,050.,GRN,<LEFT COIN>
	.MESS	-116.,-000.,GRN,<RIGHT COIN>
	.NEXTMESS	-152.,-050.,GRN
	.MESS	-104.,-100.,GRN,< >
	.MESS	-324.,250.,GRN,<LEFT THUMB>
	.MESS	100.,250.,GRN,<RIGHT THUMB>
	.MESS	-080.,-200.,GRN,<SPARE 2>
	.NEXTMESS	-116.,-250.,GRN
	.NEXTMESS	-080.,-300.,GRN
	.MESS	-068.,-300.,GRN,< >
	.MESS	228.,210.,WHT,<POT TEST>,POT
	.MESS	-176.,450.,WHT,<HARDWARE ERRORS>,RAM
	.MESS	-212.,000.,WHT,<NO ERRORS DETECTED>
	.MESS	-200.,400.,GRN,<PROGRAM RAM AT 2FH>
	.MESS	-164.,350.,GRN,<MATH RAM AT 5F>
	.MESS	-164.,300.,GRN,<MATH RAM AT 5H>
	.MESS	-140.,250.,GRN,<VG RAM0 AT 3L>
	.MESS	-140.,200.,GRN,<VG RAM1 AT 3M>
	.MESS	-140.,150.,GRN,<VG RAM2 AT 3P>
	.MESS	-140.,100.,GRN,<VG RAM3 AT 4L>
	.MESS	-140.,050.,GRN,<VG RAM4 AT 4M>
	.MESS	-140.,000.,GRN,<VG RAM5 AT 4P>
	.MESS	-260.,-050.,GRN,<NON VOLATILE RAM AT 1E>
	.MESS	-200.,-200.,GRN,<PROGRAM ROM0 AT 1F>
	.MESS	-200.,-250.,GRN,<PROGRAM ROM1 AT 1HJ>
	.MESS	-200.,-300.,GRN,<PROGRAM ROM2 AT 1JK>
	.MESS	-200.,-350.,GRN,<PROGRAM ROM3 AT 1KL>
	.MESS	-200.,-400.,GRN,<PROGRAM ROM4 AT 1M>
	.MESS	-140.,-150.,GRN,<VG ROM AT 1L>
	.MESS	-152.,400.,WHT,<MATHBOX TESTS>,MBT
	.MESS	-260.,200.,WHT,<BAD MATHBOX READY LINE>,MBN
	.MESS	-164.,350.,WHT,<DIVIDER ERRORS>,DIV
	.MESS	-200.,200.,WHT,<NO DIVIDER ERRORS>
	.MESS	-360.,275.,WHT,<OPT SW    NUM DIV DEN IS ERROR>
	.MESS	-152.,-100.,WHT,<MATRIX ERRORS>,MTX
	.MESS	-188.,-300.,WHT,<NO MATRIX ERRORS>
	.MESS	-092.,100.,WHT,<BIP TEST>,BIP
	.MESS	-176.,-100.,WHT,<ALIGN THE BOXES>
	.MESS	-116.,250.,WHT,<SCALE TEST>,SCL
	.MESS	-068.,190.,WHT,<LINEAR>
	.MESS	-200.,190.,WHT,<LINEAR AND BINARY>
	.MESS	-100.,-200.,<WHT&0FF00!00>,<0. OFF>,INT
	.MESS	-100.,-250.,<WHT&0FF00!10>,<1. DIM>
	.MESS	-100.,-300.,<WHT&0FF00!20>,<2. LOW>
	.MESS	-100.,-350.,<WHT&0FF00!80>,<3. HIGH>
	.MESS	-164.,300.,WHT,<INTENSITY TEST>
	.MESS	-308.,-450.,WHT,<PRESS AUX COIN TO CONTINUE>,XIT
	.MESS	-332.,-450.,WHT,<PRESS AUX COIN FOR SELF TEST>,TST
	.MESS	-392.,-250.,VJMFL,<PULL RIGHT FIRE TO PERFORM RESETS>,RES
	.MESSNAME \...A
	MESSZ=	...A
				;===

	.PAGE
	.SBTTL	VW8DIG,VW6DIG,VWBYTE,VWNIBL
	.REPT 0
**********************************
*
*	VW8DIG,VW6DIG
*	VWBYTE,VWNIBL
*
**********************************

DESCRIPTION:	OUTPUT THE HEX NUMBER IN A TO THE SCREEN.

REGISTERS:	
	IN:	A=NUMBER
		FOR *DIG, X-->START OF 8 BCD VALUES (6DIG NEEDS WEIRD X)
	OUT:	A,B,U   ALTERED

RAM USE:	NONE

	.ENDR

VW8DIG::			;VIEW 87,654,321
	LDA 0(X)		;GET 8 AND 7
	JSR VWBYTE
	LDA BT.SUP
	IFLE			;?ENCOUNTERED A DIGIT?
	LDD #VJNUMS		;THEN SEPARATE NUMERALS WITH COMMAS
	STD (Y)++
	ENDIF
				;FALL THRU TO DO OTHER 6 DIGITS
				;---
VW6DIG::			;VIEW 654,321
	LDA 1(X)		;SHOW 65
	JSR VWBYTE
				;
	LDA 2(X)		;SHOW 4,
	LSRA
	LSRA
	LSRA
	LSRA
	JSR VWNIBL
	LDA BT.SUP
	IFLE			;?HAVE SOME DIGITS TO SEPARATE?	
	LDD #VJNUMS
	STD (Y)++
	ENDIF
				;
	LDA 2(X)		;VIEW 3
	JSR VWNIBL
	LDA 3(X)		;VIEW 21
				;FALL THRU TO VWBYTE
				;---
VWBYTE::			;VIEW BOTH NUMERALS IN BYTE
	TFR A,B
	LSRB			;DO HI BYTE
	LSRB
	LSRB
	ANDB #1E
	IFEQ			;?IS IT A ZERO?
	TST BT.SUP		;
	IFGT			;?AND SUPPRESSION STILL ON?
	LDU VGMSGA		;THEN GET A BLANK
	BRA 20$
	ENDIF
	ENDIF
	CLR BT.SUP		;ELSE IS SIGNIFICANT DIGIT--STOP ZERO SUPPRESSION
	LDU #VGMSGA+2
	LDU B(U)
20$:				;---OUTPUT SELECTED NUMERAL
	DEC BT.SUP		;DECREASE NUMBER OF SUPPRESSED DIGITS
	STU (Y)++
				;---
VWNIBL::			;TOMCAT NAME
VWBYT1::			;VIEW ONLY LO NUMERAL
	LSLA
	ANDA #1E
	IFEQ			;?IS IT A ZERO?
	TST BT.SUP		;
	IFGT			;?AND SUPPRESSION STILL ON?
	LDU VGMSGA		;THEN GET A BLANK
	BRA 40$
	ENDIF
	ENDIF
	CLR BT.SUP		;ELSE IS SIGNIFICANT DIGIT--STOP ZERO SUPPRESSION
	LDU #VGMSGA+2
	LDU A(U)
40$:				;---DISPLAY OUR NUMBER
	DEC BT.SUP		;DECREASE NUMBER OF SIGNIFICANT DIGITS
	STU (Y)++
	RTS
				;===

	.PAGE
	.SBTTL	DOMESS
	.REPT 0
**********************************
*
*	DOMESS
*
**********************************

DESCRIPTION:	PUT THE MESSAGE ON THE SCREEN.
		THIS ROUTINE MUST BE CALLED EVERY FRAME FOR EVERY MESSAGE
		OUTPUT IN THIS WAY.

REGISTERS:	
	IN:	B=MESSAGE #
	OUT:	
 
RAM USE:	

	.ENDR

DOMESS:
	CMPB #MESSZ		;LEGAL MESSAGE NUMBER?
	IFLO			;YES, THEN SHOW IT
	STB MESNUM		;PUT IT HERE FOR THE OTHER ROUTINES
	BSR MCOLR		;LOOKUP AND OUTPUT COLOR INSTRUCTION TO VG
	BSR MOUT		;POSITION AND OUTPUT CHARACTERS
	ENDIF
	RTS

DOMES2:
	CMPB #MESSZ		;LEGAL MESSAGE NUMBER?
	IFLO			;YES, THEN SHOW IT
	STB MESNUM		;PUT IT HERE FOR THE OTHER ROUTINES
	BSR MOUT		;POSITION AND OUTPUT CHARACTERS
	ENDIF
	RTS

	.PAGE
	.SBTTL	MESS PARTS

MCOLR:
	LDB MESNUM
	LDX #TMESCL		;TABLE OF MESSAGE COLORS
	ABX			;INDEX INTO WORD TABLE
	ABX
	LDD (X)			;GET THE COLOR COMMAND
	STD (Y)++		;PUT IT IN VG RAM
	RTS

MOUT:
	LDB MESNUM
	LDX #TMESXY		;MESSAGE POSITION TABLE
	ABX			;*4 FOR 2-WORD ENTRIES
	ABX
	ABX
	ABX
	LDD 2(X)		;DELTA Y FROM CENTER
	STD (Y)++
	LDD 0(X)		;DELTA X FROM CENTER
	BRA MOUTXT		;GO TO MOUT EXIT
				;---


MOUT2:				;USES Y OFFSET FOR SCROLLING
	LDB MESNUM
	LDX #TMESXY		;MESSAGE POSITION TABLE
	ABX			;*4 FOR 2-WORD ENTRIES
	ABX
	ABX
	ABX
	LDD 2(X)		;DELTA Y FROM CENTER
	SUBD MSYOFF		;SUBTRACT OFFSET FOR SCROLLING
	ANDA #1F
	STD (Y)++
	LDD 0(X)		;DELTA X FROM CENTER
MOUTXT:	STD (Y)++
	JSR MESOUT		;NOW PUT OUT THE CHARACTERS
	LDD #VGSCAL		;SET TO NORMAL SCALE
	STD (Y)++
	LDD #VGCNTR		;CENTER AFTER MESSAGE
	STD (Y)++
	RTS


	.PAGE
	.SBTTL	MESOUT
	.REPT 0
**********************************
*
*	MESOUT
*
**********************************

DESCRIPTION:	OUTPUT MESSAGE TO VGRAM (VIA Y).
		CONVERT FROM ASCIN FORMAT (EASY).

REGISTERS:	
	IN:	Y POINTS TO NEXT VG RAM LOCATION.
		U MUST BE RETAINED.
	OUT:	A,B,X ALTERED
		Y UPDATED

RAM USE:	MESTBL,MESPNT,VGRAM(Y)

	.ENDR

MESOUT:	LDX #TMESS		;MESSAGE ADDRESS TABLE
	LDB MESNUM		;MESSAGE NUMBER
	ABX			;INDEX INTO WORD TABLE
	ABX			;UNSIGNED ADD
	LDX 0(X)		;X NOW POINTS TO FIRST CHARACTER IN MESSAGE
	BEGIN			;PROCESS MESSAGE
	LDB (X)+		;GET CHARACTER
	STX MESPNT		;SAVE UPDATED POINTER
	ASLB			;*2 BECAUSE VGMSGA IS WORD TABLE
	CMPB #82		;ASCII 'A' *2
	IFHS			;ALPHA
	LDX #VGMSGA+16-2
	ANDB #7F
	ELSE			;NOT ALPHA
				;CHECK FOR THOSE CHARACTERS BELOW ALPHA AND ABOVE NUMERIC
	CMPB #74
	IFEQ			;":"
	LDX #VGMSGA+50-74
	ELSE
	CMPB #80
	IFEQ			;"@" FOR CIRCLE C
	LDX #VGMSGA+56
	CLRB
	ELSE
	CMPB #60		;ASCII '0' *2
	IFHS			;MUST BE NUMERIC
	LDX #VGMSGA+2-60
	ELSE			;CHECK FOR CHARACTERS BELOW NUMERIC
	CMPB #40
	IFEQ			;SPACE
	LDX #VGMSGA-40
	ELSE
	CMPB #4E
	IFEQ			;APOSTROPHE
	LDX #VGMSGA+4A-4E
	ELSE
;	CMPB #50
;	IFEQ			;LEFT PAREN
;	LDX #VGMSGA+58-50
;	ELSE
;	CMPB #52
;	IFEQ			;RIGHT PAREN
;	LDX #VGMSGA+5A-52
;	ELSE
	CMPB #58
	IFEQ			;COMMA
	LDX #VGMSGA+4C-58
	ELSE
	CMPB #5A
	IFEQ			;HYPHEN
	LDX #VGMSGA+58-5A
	ELSE
	CMPB #4A		;"%" FOR 1/2
	IFEQ
	LDX #VGMSGA+54-4A
	ELSE			;MUST BE PERIOD
	LDX #VGMSGA+4E-5C
	ENDIF
	ENDIF
	ENDIF
;	ENDIF
;	ENDIF
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	LDD B(X)		;SHOULD BE JSRL TO APROPRIATE LETTER ROUTINE
	STD (Y)++
	LDX MESPNT		;RESTORE X
	TST -1(X)		;DONE
	MIEND
	RTS


	.PAGE
.MACRO	.MTAB ...1
	.WORD	MES'...1'
 	.ENDM
TMESS:			;REGULAR GAME PLAY MESSAGES POINTERS
	...N=0
	.REPT MESSZ
	.MTAB \...N
	...N=...N+1
	.ENDR
				;===

.MACRO	.MVEC	...1,...2
	.WORD -<MES'...2'-MES'...1'>*12.+4
	.ENDM
TSPMX:			;SPECIAL MESSAGE POINTERS
	...N=SPMS1
	.REPT SPMSZ-SPMS1
	.MVEC	\...N,\...N+1
	...N=...N+1
	.ENDR
				;===

TMESXY:				;X,Y POSITIONS FOR MESSAGES
	.BLKB 4*MESSZ
TZ:
				;===

TMESCL:				;COLOR COMMANDS FOR MESSAGES
	.BLKB 2*MESSZ
TMESCZ:
				;===

	HLL69F

	.END
                                                                                                                                                                                                                                                                              